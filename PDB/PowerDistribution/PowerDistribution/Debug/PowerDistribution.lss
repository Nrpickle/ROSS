
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fe0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00802000  00000fe0  00001074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  008020fa  008020fa  0000116e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000116e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044fd  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000923  00000000  00000000  00005861  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d3  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  00006958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002374  00000000  00000000  00006df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb2  00000000  00000000  00009168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00009e1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_7>
  20:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_8>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_12>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_18>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_30>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_35>
  90:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_36>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_38>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e0 ee       	ldi	r30, 0xE0	; 224
  c0:	ff e0       	ldi	r31, 0x0F	; 15
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 3f       	cpi	r26, 0xFA	; 250
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e2       	ldi	r18, 0x21	; 33
  d0:	aa ef       	ldi	r26, 0xFA	; 250
  d2:	b0 e2       	ldi	r27, 0x20	; 32
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	aa 32       	cpi	r26, 0x2A	; 42
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 83 03 	call	0x706	; 0x706 <main>
  e2:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
  ea:	e0 e5       	ldi	r30, 0x50	; 80
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	8b e4       	ldi	r24, 0x4B	; 75
  f0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
  f2:	80 81       	ld	r24, Z
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
  f8:	81 81       	ldd	r24, Z+1	; 0x01
  fa:	83 fd       	sbrc	r24, 3
  fc:	09 c0       	rjmp	.+18     	; 0x110 <_Z27configureExternalOscillatorv+0x26>
  fe:	a0 e4       	ldi	r26, 0x40	; 64
 100:	b6 e0       	ldi	r27, 0x06	; 6
 102:	92 e0       	ldi	r25, 0x02	; 2
 104:	15 96       	adiw	r26, 0x05	; 5
 106:	9c 93       	st	X, r25
 108:	15 97       	sbiw	r26, 0x05	; 5
 10a:	81 81       	ldd	r24, Z+1	; 0x01
 10c:	83 ff       	sbrs	r24, 3
 10e:	fa cf       	rjmp	.-12     	; 0x104 <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
 116:	88 ed       	ldi	r24, 0xD8	; 216
 118:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
 11a:	e0 e5       	ldi	r30, 0x50	; 80
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	88 ec       	ldi	r24, 0xC8	; 200
 120:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
 122:	80 81       	ld	r24, Z
 124:	80 61       	ori	r24, 0x10	; 16
 126:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
 128:	81 81       	ldd	r24, Z+1	; 0x01
 12a:	84 fd       	sbrc	r24, 4
 12c:	09 c0       	rjmp	.+18     	; 0x140 <_Z27configureExternalOscillatorv+0x56>
 12e:	a0 e4       	ldi	r26, 0x40	; 64
 130:	b6 e0       	ldi	r27, 0x06	; 6
 132:	92 e0       	ldi	r25, 0x02	; 2
 134:	15 96       	adiw	r26, 0x05	; 5
 136:	9c 93       	st	X, r25
 138:	15 97       	sbiw	r26, 0x05	; 5
 13a:	81 81       	ldd	r24, Z+1	; 0x01
 13c:	84 ff       	sbrs	r24, 4
 13e:	fa cf       	rjmp	.-12     	; 0x134 <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
 146:	88 ed       	ldi	r24, 0xD8	; 216
 148:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
 14a:	e0 e4       	ldi	r30, 0x40	; 64
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
 150:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	80 83       	st	Z, r24
 156:	08 95       	ret

00000158 <_Z11configureIOv>:
	
	
}

void configureIO(void){
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
 15c:	e0 e4       	ldi	r30, 0x40	; 64
 15e:	f6 e0       	ldi	r31, 0x06	; 6
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = PIN0_bm;
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	91 83       	std	Z+1, r25	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
 168:	20 e2       	ldi	r18, 0x20	; 32
 16a:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
 16c:	44 e0       	ldi	r20, 0x04	; 4
 16e:	42 83       	std	Z+2, r20	; 0x02
	PORTC.DIRCLR = PIN3_bm;
 170:	38 e0       	ldi	r19, 0x08	; 8
 172:	32 83       	std	Z+2, r19	; 0x02
	
	//Set pullups on the setting switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
 174:	38 e1       	ldi	r19, 0x18	; 24
 176:	32 8b       	std	Z+18, r19	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
 178:	33 8b       	std	Z+19, r19	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d6 e0       	ldi	r29, 0x06	; 6
 17e:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
 180:	8a 83       	std	Y+2, r24	; 0x02
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b6 e0       	ldi	r27, 0x06	; 6
 186:	12 96       	adiw	r26, 0x02	; 2
 188:	9c 93       	st	X, r25
 18a:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN1_bm;  //Voltage Sense - Electronics Battery
 18c:	12 96       	adiw	r26, 0x02	; 2
 18e:	8c 93       	st	X, r24
 190:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN2_bm;  //Voltage Sense - Rear Battery
 192:	12 96       	adiw	r26, 0x02	; 2
 194:	4c 93       	st	X, r20
 196:	12 97       	sbiw	r26, 0x02	; 2

	//Set the Current Sense Fault detect pin to be an input
	PORTC.DIRCLR = PIN4_bm;
 198:	30 e1       	ldi	r19, 0x10	; 16
 19a:	32 83       	std	Z+2, r19	; 0x02
	
	//Setup the RSSI input
	PORTA.DIRCLR = PIN2_bm;				//Set the RSSI pin to be an input
 19c:	4a 83       	std	Y+2, r20	; 0x02
	
	//Setup the steering signal I/O
	PORTD.DIRCLR = PIN4_bm;  //Set the STEER_SIG_3v3 pin as an input
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	3c 93       	st	X, r19
 1a2:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRSET = PIN5_bm;	 //Set the STEER_SIG_3v3_PROCESSED pin to be an output
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	2c 93       	st	X, r18
 1a8:	11 97       	sbiw	r26, 0x01	; 1

	//Setup steering control PWM interrupts
	PORTD.INTCTRL  = PMIC_MEDLVLEN_bm;	//Set PORTC's interrupt to be medium level
 1aa:	19 96       	adiw	r26, 0x09	; 9
 1ac:	8c 93       	st	X, r24
 1ae:	19 97       	sbiw	r26, 0x09	; 9
	PORTD.INTMASK  = PIN4_bm;			//Configure the PWM input pin as an interrupt
 1b0:	1a 96       	adiw	r26, 0x0a	; 10
 1b2:	3c 93       	st	X, r19
 1b4:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;  //Init the pin as a rising edge interrupt only
 1b6:	54 96       	adiw	r26, 0x14	; 20
 1b8:	9c 93       	st	X, r25
 1ba:	54 97       	sbiw	r26, 0x14	; 20
	
	//Initialize output values
	STATUS_CLR();
 1bc:	96 83       	std	Z+6, r25	; 0x06
	ERROR_CLR();
 1be:	86 83       	std	Z+6, r24	; 0x06
	
	REAR_RELAY_CLR();
 1c0:	26 83       	std	Z+6, r18	; 0x06
	
	STEER_SIG_CLR();	
 1c2:	16 96       	adiw	r26, 0x06	; 6
 1c4:	2c 93       	st	X, r18
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <__vector_35>:
if timer has overflown, then we missed the appropriate edge, throw out our data
If timer is good, calculate PWM high time
Store in global variable

*/
ISR(PORTD_INT_vect){
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
	PORTD.INTFLAGS = PIN4_bm;
 1da:	80 e1       	ldi	r24, 0x10	; 16
 1dc:	80 93 6c 06 	sts	0x066C, r24

	
	if(PWMMeasuringStatus == NOT_MEASURING){  //We encountered the first part of the wave
 1e0:	80 91 00 20 	lds	r24, 0x2000
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	81 f4       	brne	.+32     	; 0x208 <__vector_35+0x3c>
		TCC5.CNT = 0;	//Start counting
 1e8:	10 92 60 08 	sts	0x0860, r1
 1ec:	10 92 61 08 	sts	0x0861, r1
		PWMMeasuringStatus = MEASURING;
 1f0:	10 92 00 20 	sts	0x2000, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	87 ec       	ldi	r24, 0xC7	; 199
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <__vector_35+0x2c>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <__vector_35+0x32>
 1fe:	00 00       	nop
		
		_delay_us(25);  //Delay ~6-7 clock cycles
		
		PORTD.PIN4CTRL = PORT_ISC_FALLING_gc; //Set the interrupt to wait for a falling wave (end of signal)
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	80 93 74 06 	sts	0x0674, r24
 206:	0f c0       	rjmp	.+30     	; 0x226 <__vector_35+0x5a>
	}
	else { //We finished encountering the wave (process the data)
		steeringPWMPeriod = TCC5.CNT * 2;
 208:	80 91 60 08 	lds	r24, 0x0860
 20c:	90 91 61 08 	lds	r25, 0x0861
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	80 93 15 21 	sts	0x2115, r24
 218:	90 93 16 21 	sts	0x2116, r25
		PWMMeasuringStatus = NOT_MEASURING;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 00 20 	sts	0x2000, r24
		
		PORTD.PIN4CTRL = PORT_ISC_RISING_gc; 
 222:	80 93 74 06 	sts	0x0674, r24
	}
	
}
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_30>:

//This function will be called on the edges of the RSSI signal 
//*CURRENTLY DISABLED*
ISR(PORTA_INT_vect){
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
	cli();
 246:	f8 94       	cli
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	80 93 0c 06 	sts	0x060C, r24
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
 24e:	80 91 21 21 	lds	r24, 0x2121
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	61 f4       	brne	.+24     	; 0x26e <__vector_30+0x3a>
 256:	80 91 08 06 	lds	r24, 0x0608
 25a:	82 fd       	sbrc	r24, 2
 25c:	0b c0       	rjmp	.+22     	; 0x274 <__vector_30+0x40>
 25e:	1f c0       	rjmp	.+62     	; 0x29e <__vector_30+0x6a>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
 260:	80 91 08 06 	lds	r24, 0x0608
 264:	82 ff       	sbrs	r24, 2
 266:	0d c0       	rjmp	.+26     	; 0x282 <__vector_30+0x4e>
 268:	1a c0       	rjmp	.+52     	; 0x29e <__vector_30+0x6a>
		ERROR_SET();
	}
	
	
	//_delay_us(200);
	sei();
 26a:	78 94       	sei
 26c:	1c c0       	rjmp	.+56     	; 0x2a6 <__vector_30+0x72>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
 26e:	88 23       	and	r24, r24
 270:	b9 f3       	breq	.-18     	; 0x260 <__vector_30+0x2c>
 272:	15 c0       	rjmp	.+42     	; 0x29e <__vector_30+0x6a>
	cli();
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
		RTC.CNT = 0;		//We want to start counting the counter now
 274:	10 92 08 04 	sts	0x0408, r1
 278:	10 92 09 04 	sts	0x0409, r1
		RSSI.measuring = MEASURING;
 27c:	10 92 21 21 	sts	0x2121, r1
 280:	f4 cf       	rjmp	.-24     	; 0x26a <__vector_30+0x36>
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
		RSSI.countDifference = RTC.CNT;
 282:	80 91 08 04 	lds	r24, 0x0408
 286:	90 91 09 04 	lds	r25, 0x0409
 28a:	e0 e2       	ldi	r30, 0x20	; 32
 28c:	f1 e2       	ldi	r31, 0x21	; 33
 28e:	84 83       	std	Z+4, r24	; 0x04
 290:	95 83       	std	Z+5, r25	; 0x05
		
		RSSI.sampleCount++;
 292:	86 81       	ldd	r24, Z+6	; 0x06
 294:	97 81       	ldd	r25, Z+7	; 0x07
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	86 83       	std	Z+6, r24	; 0x06
 29a:	97 83       	std	Z+7, r25	; 0x07
 29c:	e6 cf       	rjmp	.-52     	; 0x26a <__vector_30+0x36>
	}
	else {
		ERROR_SET();
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	80 93 45 06 	sts	0x0645, r24
 2a4:	e2 cf       	rjmp	.-60     	; 0x26a <__vector_30+0x36>
	}
	
	
	//_delay_us(200);
	sei();
}
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <_Z21configureTimerCounterv>:
1S    = 0x7A12

*/
void configureTimerCounter(){
	//Configure the accurate reporting timer
	TCC4.CTRLA = TC45_CLKSEL_DIV1024_gc;	//Configure a 1024 prescaler (we want very broad timing here, exact precision isn't required)
 2b8:	e0 e0       	ldi	r30, 0x00	; 0
 2ba:	f8 e0       	ldi	r31, 0x08	; 8
 2bc:	87 e0       	ldi	r24, 0x07	; 7
 2be:	80 83       	st	Z, r24
	TCC4.PER = TC_1024_500MS;               //500mS delay
 2c0:	89 e0       	ldi	r24, 0x09	; 9
 2c2:	9d e3       	ldi	r25, 0x3D	; 61
 2c4:	86 a3       	std	Z+38, r24	; 0x26
 2c6:	97 a3       	std	Z+39, r25	; 0x27
											//Default delay value. Reference pre-calculated table up above for more information
	TCC4.CTRLB = TC45_WGMODE_NORMAL_gc;		//Configure the timer for Normal mode operation
 2c8:	11 82       	std	Z+1, r1	; 0x01
	TCC4.INTCTRLA = TC45_OVFINTLVL_LO_gc;	//Set a low priority overflow interrupt
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	86 83       	std	Z+6, r24	; 0x06

	//Configure the PWM sense module
	//Input capture described on (168)
	TCC5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
 2ce:	e0 e4       	ldi	r30, 0x40	; 64
 2d0:	f8 e0       	ldi	r31, 0x08	; 8
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	80 83       	st	Z, r24
	TCC5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
 2d6:	11 82       	std	Z+1, r1	; 0x01
	TCC5.PER   = 12000;						//This is set to be 20% longer than the 20mS cycle should be
 2d8:	20 ee       	ldi	r18, 0xE0	; 224
 2da:	3e e2       	ldi	r19, 0x2E	; 46
 2dc:	26 a3       	std	Z+38, r18	; 0x26
 2de:	37 a3       	std	Z+39, r19	; 0x27
	
	//Is the following necessary?
	TCC5.INTCTRLA = TC45_OVFINTLVL_MED_gc;	//Set a medium priority overflow interrupt (we want the PWM generation to remain stable)
 2e0:	92 e0       	ldi	r25, 0x02	; 2
 2e2:	96 83       	std	Z+6, r25	; 0x06
											//as it will only take a few clock cycles compared to this interrupt
	
	//Configure the PWM generation module
	TCD5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
 2e4:	e0 e4       	ldi	r30, 0x40	; 64
 2e6:	f9 e0       	ldi	r31, 0x09	; 9
 2e8:	80 83       	st	Z, r24
	TCD5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
 2ea:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PER   = 10000;						//We want to establish a 50Hz control loop here (20ms period)
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	97 e2       	ldi	r25, 0x27	; 39
 2f0:	86 a3       	std	Z+38, r24	; 0x26
 2f2:	97 a3       	std	Z+39, r25	; 0x27
	TCD5.INTCTRLA = TC45_OVFINTLVL_HI_gc;	//Set a high priority overflow interrupt
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	86 83       	std	Z+6, r24	; 0x06
	TCD5.INTCTRLB = TC45_CCAINTLVL_HI_gc;   
 2f8:	87 83       	std	Z+7, r24	; 0x07
	
	TCD5.CCA = 950;		//Initial value for compare
 2fa:	86 eb       	ldi	r24, 0xB6	; 182
 2fc:	93 e0       	ldi	r25, 0x03	; 3
 2fe:	80 a7       	std	Z+40, r24	; 0x28
 300:	91 a7       	std	Z+41, r25	; 0x29
 302:	08 95       	ret

00000304 <__vector_18>:
}

//This triggers when a PWM signal hasn't been detected for the past ~24mS
ISR (TCC5_OVF_vect){
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	TCC5.INTFLAGS |= 0b1;  //Reset interrupt flag
 316:	e0 e4       	ldi	r30, 0x40	; 64
 318:	f8 e0       	ldi	r31, 0x08	; 8
 31a:	84 85       	ldd	r24, Z+12	; 0x0c
 31c:	81 60       	ori	r24, 0x01	; 1
 31e:	84 87       	std	Z+12, r24	; 0x0c
	
	PWMMeasuringStatus = NOT_MEASURING;		//Reset the "NOT MEASURING" flag
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 00 20 	sts	0x2000, r24
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;	//Reconfigure the port to wait for a high pulse
 326:	80 93 74 06 	sts	0x0674, r24
	
	steeringPWMPeriod = 1500;				//Set the steering PWM period to a stable "standby position"
 32a:	8c ed       	ldi	r24, 0xDC	; 220
 32c:	95 e0       	ldi	r25, 0x05	; 5
 32e:	80 93 15 21 	sts	0x2115, r24
 332:	90 93 16 21 	sts	0x2116, r25
}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__vector_38>:
/*
Compare vector A for the PWM generation module
This situation ------\______

*/
ISR (TCD5_CCA_vect){
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	8f 93       	push	r24
	STEER_SIG_CLR();
 354:	80 e2       	ldi	r24, 0x20	; 32
 356:	80 93 66 06 	sts	0x0666, r24
	//STATUS_SET();
}
 35a:	8f 91       	pop	r24
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <__vector_36>:
This situation: _____/-----

*/


ISR (TCD5_OVF_vect){
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	8f 93       	push	r24
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
	STEER_SIG_SET();
 376:	80 e2       	ldi	r24, 0x20	; 32
 378:	80 93 65 06 	sts	0x0665, r24
	
	TCD5.INTFLAGS |= 0b1;
 37c:	e0 e4       	ldi	r30, 0x40	; 64
 37e:	f9 e0       	ldi	r31, 0x09	; 9
 380:	84 85       	ldd	r24, Z+12	; 0x0c
 382:	81 60       	ori	r24, 0x01	; 1
 384:	84 87       	std	Z+12, r24	; 0x0c
	
	TCD5.CNT = 0;
 386:	10 a2       	std	Z+32, r1	; 0x20
 388:	11 a2       	std	Z+33, r1	; 0x21
}
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	8f 91       	pop	r24
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__vector_12>:

//Handles compare vector for T/C 4
ISR (TCC4_OVF_vect){
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	2f 93       	push	r18
 3a6:	3f 93       	push	r19
 3a8:	4f 93       	push	r20
 3aa:	5f 93       	push	r21
 3ac:	6f 93       	push	r22
 3ae:	7f 93       	push	r23
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
	++longCounter;
 3ba:	20 91 17 21 	lds	r18, 0x2117
 3be:	30 91 18 21 	lds	r19, 0x2118
 3c2:	40 91 19 21 	lds	r20, 0x2119
 3c6:	50 91 1a 21 	lds	r21, 0x211A
 3ca:	60 91 1b 21 	lds	r22, 0x211B
 3ce:	70 91 1c 21 	lds	r23, 0x211C
 3d2:	80 91 1d 21 	lds	r24, 0x211D
 3d6:	90 91 1e 21 	lds	r25, 0x211E
 3da:	a1 e0       	ldi	r26, 0x01	; 1
 3dc:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__adddi3_s8>
 3e0:	20 93 17 21 	sts	0x2117, r18
 3e4:	30 93 18 21 	sts	0x2118, r19
 3e8:	40 93 19 21 	sts	0x2119, r20
 3ec:	50 93 1a 21 	sts	0x211A, r21
 3f0:	60 93 1b 21 	sts	0x211B, r22
 3f4:	70 93 1c 21 	sts	0x211C, r23
 3f8:	80 93 1d 21 	sts	0x211D, r24
 3fc:	90 93 1e 21 	sts	0x211E, r25
	
	TCC4.INTFLAGS |= 0b1;  //Reset overflow interrupt
 400:	e0 e0       	ldi	r30, 0x00	; 0
 402:	f8 e0       	ldi	r31, 0x08	; 8
 404:	84 85       	ldd	r24, Z+12	; 0x0c
 406:	81 60       	ori	r24, 0x01	; 1
 408:	84 87       	std	Z+12, r24	; 0x0c
	
	broadcastStatus = 1;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 1f 21 	sts	0x211F, r24
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <_Z12configureRTCv>:

/*
The real time clock is configured to handle XTend RSSI Interpret
*/
void configureRTC(){
	RTC.CTRL = RTC_CORREN_bm | RTC_PRESCALER_DIV1_gc;		//Enable the RTC correction process, and the RTC itself with no prescaler
 430:	e0 e0       	ldi	r30, 0x00	; 0
 432:	f4 e0       	ldi	r31, 0x04	; 4
 434:	89 e0       	ldi	r24, 0x09	; 9
 436:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_COMPINTLVL_LO_gc | RTC_OVFINTLVL_LO_gc; //Enable the overflow and 
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	82 83       	std	Z+2, r24	; 0x02
	
    OSC.CTRL |= OSC_RC32KEN_bm;								//Enable the 32.768kHz internal oscillator
 43c:	a0 e5       	ldi	r26, 0x50	; 80
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	8c 91       	ld	r24, X
 442:	84 60       	ori	r24, 0x04	; 4
 444:	8c 93       	st	X, r24
 446:	8f e7       	ldi	r24, 0x7F	; 127
 448:	9c e0       	ldi	r25, 0x0C	; 12
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <_Z12configureRTCv+0x1a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <_Z12configureRTCv+0x20>
 450:	00 00       	nop
	
	_delay_us(400);											//Wait for the oscillator to stabalize.
	
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC32_gc;					//Set the RTC input as the 32.768kHz internal oscillator
 452:	a0 e4       	ldi	r26, 0x40	; 64
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	8c e0       	ldi	r24, 0x0C	; 12
 458:	13 96       	adiw	r26, 0x03	; 3
 45a:	8c 93       	st	X, r24
 45c:	13 97       	sbiw	r26, 0x03	; 3
	CLK.RTCCTRL |= CLK_RTCEN_bm;							//Enable the clock input
 45e:	13 96       	adiw	r26, 0x03	; 3
 460:	8c 91       	ld	r24, X
 462:	13 97       	sbiw	r26, 0x03	; 3
 464:	81 60       	ori	r24, 0x01	; 1
 466:	13 96       	adiw	r26, 0x03	; 3
 468:	8c 93       	st	X, r24
	
	//Testing setup code
	RTC.COMP = 16384; //~1 second? Assuming 32.768 KHz
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e4       	ldi	r25, 0x40	; 64
 46e:	84 87       	std	Z+12, r24	; 0x0c
 470:	95 87       	std	Z+13, r25	; 0x0d
	RTC.PER = 0xFF00;  //No tengo nuguien idea
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	9f ef       	ldi	r25, 0xFF	; 255
 476:	82 87       	std	Z+10, r24	; 0x0a
 478:	93 87       	std	Z+11, r25	; 0x0b
 47a:	08 95       	ret

0000047c <__vector_7>:

}

ISR(RTC_OVF_vect){
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
	
}
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <__vector_8>:

ISR(RTC_COMP_vect){
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	8f 93       	push	r24
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
	
	RTC.CNT = 0;
 4a0:	e0 e0       	ldi	r30, 0x00	; 0
 4a2:	f4 e0       	ldi	r31, 0x04	; 4
 4a4:	10 86       	std	Z+8, r1	; 0x08
 4a6:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTFLAGS = 0x02;
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	83 83       	std	Z+3, r24	; 0x03
	
	RSSI.countDifference = 0;
 4ac:	10 92 24 21 	sts	0x2124, r1
 4b0:	10 92 25 21 	sts	0x2125, r1
}
 4b4:	ff 91       	pop	r31
 4b6:	ef 91       	pop	r30
 4b8:	8f 91       	pop	r24
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <_Z12configureXCLv>:

void configureXCL(){
 4c4:	08 95       	ret

000004c6 <_Z19ReadCalibrationByteh>:
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 4c6:	aa ec       	ldi	r26, 0xCA	; 202
 4c8:	b1 e0       	ldi	r27, 0x01	; 1
 4ca:	92 e0       	ldi	r25, 0x02	; 2
 4cc:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
 4ce:	e8 2f       	mov	r30, r24
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 4d4:	1c 92       	st	X, r1

	return( result );
}
 4d6:	08 95       	ret

000004d8 <_Z13configureADCsv>:

#include "config.h"

extern RSSI_type RSSI;

void configureADCs(){
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
	// Batt Input Voltage
	// Halve Input
	//Set to single ended input
	//Set to 12-bit mode
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
 4dc:	c0 e0       	ldi	r28, 0x00	; 0
 4de:	d2 e0       	ldi	r29, 0x02	; 2
 4e0:	82 e1       	ldi	r24, 0x12	; 18
 4e2:	89 83       	std	Y+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
 4e4:	80 e2       	ldi	r24, 0x20	; 32
 4e6:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; //Disable events
 4e8:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 4ea:	87 e0       	ldi	r24, 0x07	; 7
 4ec:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
 4ee:	80 e2       	ldi	r24, 0x20	; 32
 4f0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z19ReadCalibrationByteh>
 4f4:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
 4f6:	81 e2       	ldi	r24, 0x21	; 33
 4f8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z19ReadCalibrationByteh>
 4fc:	8d 87       	std	Y+13, r24	; 0x0d
 4fe:	8f e7       	ldi	r24, 0x7F	; 127
 500:	9c e0       	ldi	r25, 0x0C	; 12
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <_Z13configureADCsv+0x2a>
 506:	00 c0       	rjmp	.+0      	; 0x508 <_Z13configureADCsv+0x30>
 508:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	88 a3       	std	Y+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
 50e:	81 e4       	ldi	r24, 0x41	; 65
 510:	89 a3       	std	Y+33, r24	; 0x21
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
 512:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	88 83       	st	Y, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
	//ADCA.CTRLA |= ADC_CH8START_bm;
	*/	
}	
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <_Z17ReadSignatureBytej>:
	return( result );
}

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 51e:	aa ec       	ldi	r26, 0xCA	; 202
 520:	b1 e0       	ldi	r27, 0x01	; 1
 522:	22 e0       	ldi	r18, 0x02	; 2
 524:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
 526:	fc 01       	movw	r30, r24
 528:	84 91       	lpm	r24, Z
	//  __asm__ ("lpm \n  mov %0, r0 \n" : "=r" (Result) : "z" (Address) : "r0");
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 52a:	1c 92       	st	X, r1
	return Result;
}
 52c:	08 95       	ret

0000052e <_Z21configureSerialNumberv>:

void configureSerialNumber(){
 52e:	8f 92       	push	r8
 530:	9f 92       	push	r9
 532:	af 92       	push	r10
 534:	bf 92       	push	r11
 536:	cf 92       	push	r12
 538:	df 92       	push	r13
 53a:	ef 92       	push	r14
 53c:	ff 92       	push	r15
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
	DeviceSignature[ 0] = ReadSignatureByte(LOTNUM0);
 546:	88 e0       	ldi	r24, 0x08	; 8
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 54e:	ca e0       	ldi	r28, 0x0A	; 10
 550:	d1 e2       	ldi	r29, 0x21	; 33
 552:	88 83       	st	Y, r24
	DeviceSignature[ 1] = ReadSignatureByte(LOTNUM1);
 554:	89 e0       	ldi	r24, 0x09	; 9
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 55c:	89 83       	std	Y+1, r24	; 0x01
	DeviceSignature[ 2] = ReadSignatureByte(LOTNUM2);
 55e:	8a e0       	ldi	r24, 0x0A	; 10
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 566:	8a 83       	std	Y+2, r24	; 0x02
	DeviceSignature[ 3] = ReadSignatureByte(LOTNUM3);
 568:	8b e0       	ldi	r24, 0x0B	; 11
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 570:	8b 83       	std	Y+3, r24	; 0x03
	DeviceSignature[ 4] = ReadSignatureByte(LOTNUM4);
 572:	8c e0       	ldi	r24, 0x0C	; 12
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 57a:	8c 83       	std	Y+4, r24	; 0x04
	DeviceSignature[ 5] = ReadSignatureByte(LOTNUM5);
 57c:	8d e0       	ldi	r24, 0x0D	; 13
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 584:	8d 83       	std	Y+5, r24	; 0x05
	DeviceSignature[ 6] = ReadSignatureByte(WAFNUM );
 586:	80 e1       	ldi	r24, 0x10	; 16
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 58e:	8e 83       	std	Y+6, r24	; 0x06
	DeviceSignature[ 7] = ReadSignatureByte(COORDX0);
 590:	82 e1       	ldi	r24, 0x12	; 18
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 598:	8f 83       	std	Y+7, r24	; 0x07
	DeviceSignature[ 8] = ReadSignatureByte(COORDX1);
 59a:	83 e1       	ldi	r24, 0x13	; 19
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 5a2:	88 87       	std	Y+8, r24	; 0x08
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
 5a4:	84 e1       	ldi	r24, 0x14	; 20
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 5ac:	89 87       	std	Y+9, r24	; 0x09
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
 5ae:	85 e1       	ldi	r24, 0x15	; 21
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
 5b6:	8a 87       	std	Y+10, r24	; 0x0a
	
	UC_LOT_NUMBER = DeviceSignature[0];
 5b8:	88 80       	ld	r8, Y
 5ba:	91 2c       	mov	r9, r1
 5bc:	a1 2c       	mov	r10, r1
 5be:	b1 2c       	mov	r11, r1
 5c0:	c1 2c       	mov	r12, r1
 5c2:	d1 2c       	mov	r13, r1
 5c4:	76 01       	movw	r14, r12
 5c6:	cb e0       	ldi	r28, 0x0B	; 11
 5c8:	d1 e2       	ldi	r29, 0x21	; 33
 5ca:	e4 e6       	ldi	r30, 0x64	; 100
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(int i = 1; i < 6; ++i){
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
 5ce:	89 91       	ld	r24, Y+
 5d0:	8e 9f       	mul	r24, r30
 5d2:	d0 01       	movw	r26, r0
 5d4:	8f 9f       	mul	r24, r31
 5d6:	b0 0d       	add	r27, r0
 5d8:	11 24       	eor	r1, r1
 5da:	1b 2f       	mov	r17, r27
 5dc:	11 0f       	add	r17, r17
 5de:	11 0b       	sbc	r17, r17
 5e0:	28 2d       	mov	r18, r8
 5e2:	39 2d       	mov	r19, r9
 5e4:	4a 2d       	mov	r20, r10
 5e6:	5b 2d       	mov	r21, r11
 5e8:	6c 2d       	mov	r22, r12
 5ea:	7d 2d       	mov	r23, r13
 5ec:	8e 2d       	mov	r24, r14
 5ee:	9f 2d       	mov	r25, r15
 5f0:	aa 2e       	mov	r10, r26
 5f2:	bb 2e       	mov	r11, r27
 5f4:	c1 2e       	mov	r12, r17
 5f6:	d1 2e       	mov	r13, r17
 5f8:	e1 2e       	mov	r14, r17
 5fa:	f1 2e       	mov	r15, r17
 5fc:	01 2f       	mov	r16, r17
 5fe:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__adddi3>
 602:	82 2e       	mov	r8, r18
 604:	93 2e       	mov	r9, r19
 606:	a4 2e       	mov	r10, r20
 608:	b5 2e       	mov	r11, r21
 60a:	c6 2e       	mov	r12, r22
 60c:	d7 2e       	mov	r13, r23
 60e:	e8 2e       	mov	r14, r24
 610:	f9 2e       	mov	r15, r25
 612:	ec 59       	subi	r30, 0x9C	; 156
 614:	ff 4f       	sbci	r31, 0xFF	; 255
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
	
	UC_LOT_NUMBER = DeviceSignature[0];
	
	for(int i = 1; i < 6; ++i){
 616:	e8 35       	cpi	r30, 0x58	; 88
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	f8 07       	cpc	r31, r24
 61c:	c1 f6       	brne	.-80     	; 0x5ce <_Z21configureSerialNumberv+0xa0>
 61e:	80 92 02 21 	sts	0x2102, r8
 622:	90 92 03 21 	sts	0x2103, r9
 626:	a0 92 04 21 	sts	0x2104, r10
 62a:	b0 92 05 21 	sts	0x2105, r11
 62e:	c0 92 06 21 	sts	0x2106, r12
 632:	d0 92 07 21 	sts	0x2107, r13
 636:	e0 92 08 21 	sts	0x2108, r14
 63a:	f0 92 09 21 	sts	0x2109, r15
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
	}
	
	UC_WAFER_ID = DeviceSignature[6];
 63e:	aa e0       	ldi	r26, 0x0A	; 10
 640:	b1 e2       	ldi	r27, 0x21	; 33
 642:	16 96       	adiw	r26, 0x06	; 6
 644:	2c 91       	ld	r18, X
 646:	16 97       	sbiw	r26, 0x06	; 6
	
	for(int i = 1; i < 4; ++i){  //Original stops at 5
		UC_WAFER_ID += DeviceSignature[i+6] * (100*i);
 648:	17 96       	adiw	r26, 0x07	; 7
 64a:	ec 91       	ld	r30, X
 64c:	17 97       	sbiw	r26, 0x07	; 7
 64e:	c4 e6       	ldi	r28, 0x64	; 100
 650:	ec 9f       	mul	r30, r28
 652:	f0 01       	movw	r30, r0
 654:	11 24       	eor	r1, r1
 656:	1f 2f       	mov	r17, r31
 658:	11 0f       	add	r17, r17
 65a:	11 0b       	sbc	r17, r17
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	ae 2e       	mov	r10, r30
 66c:	bf 2e       	mov	r11, r31
 66e:	c1 2e       	mov	r12, r17
 670:	d1 2e       	mov	r13, r17
 672:	e1 2e       	mov	r14, r17
 674:	f1 2e       	mov	r15, r17
 676:	01 2f       	mov	r16, r17
 678:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__adddi3>
 67c:	18 96       	adiw	r26, 0x08	; 8
 67e:	ec 91       	ld	r30, X
 680:	18 97       	sbiw	r26, 0x08	; 8
 682:	c8 ec       	ldi	r28, 0xC8	; 200
 684:	ec 9f       	mul	r30, r28
 686:	f0 01       	movw	r30, r0
 688:	11 24       	eor	r1, r1
 68a:	1f 2f       	mov	r17, r31
 68c:	11 0f       	add	r17, r17
 68e:	11 0b       	sbc	r17, r17
 690:	ae 2e       	mov	r10, r30
 692:	bf 2e       	mov	r11, r31
 694:	c1 2e       	mov	r12, r17
 696:	d1 2e       	mov	r13, r17
 698:	e1 2e       	mov	r14, r17
 69a:	f1 2e       	mov	r15, r17
 69c:	01 2f       	mov	r16, r17
 69e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__adddi3>
 6a2:	19 96       	adiw	r26, 0x09	; 9
 6a4:	cc 91       	ld	r28, X
 6a6:	ac e2       	ldi	r26, 0x2C	; 44
 6a8:	b1 e0       	ldi	r27, 0x01	; 1
 6aa:	ca 9f       	mul	r28, r26
 6ac:	f0 01       	movw	r30, r0
 6ae:	cb 9f       	mul	r28, r27
 6b0:	f0 0d       	add	r31, r0
 6b2:	11 24       	eor	r1, r1
 6b4:	1f 2f       	mov	r17, r31
 6b6:	11 0f       	add	r17, r17
 6b8:	11 0b       	sbc	r17, r17
 6ba:	ae 2e       	mov	r10, r30
 6bc:	bf 2e       	mov	r11, r31
 6be:	c1 2e       	mov	r12, r17
 6c0:	d1 2e       	mov	r13, r17
 6c2:	e1 2e       	mov	r14, r17
 6c4:	f1 2e       	mov	r15, r17
 6c6:	01 2f       	mov	r16, r17
 6c8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__adddi3>
 6cc:	20 93 fa 20 	sts	0x20FA, r18
 6d0:	30 93 fb 20 	sts	0x20FB, r19
 6d4:	40 93 fc 20 	sts	0x20FC, r20
 6d8:	50 93 fd 20 	sts	0x20FD, r21
 6dc:	60 93 fe 20 	sts	0x20FE, r22
 6e0:	70 93 ff 20 	sts	0x20FF, r23
 6e4:	80 93 00 21 	sts	0x2100, r24
 6e8:	90 93 01 21 	sts	0x2101, r25
	}
}
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	ff 90       	pop	r15
 6f6:	ef 90       	pop	r14
 6f8:	df 90       	pop	r13
 6fa:	cf 90       	pop	r12
 6fc:	bf 90       	pop	r11
 6fe:	af 90       	pop	r10
 700:	9f 90       	pop	r9
 702:	8f 90       	pop	r8
 704:	08 95       	ret

00000706 <main>:
#define REMOTE_START_CHECK 0x1
#define REMOTE_STOP_CHECK  0x2

int main(void)
{
	configureIO();
 706:	0e 94 ac 00 	call	0x158	; 0x158 <_Z11configureIOv>
	configureExternalOscillator();
 70a:	0e 94 75 00 	call	0xea	; 0xea <_Z27configureExternalOscillatorv>
	configureUSART();					//Set up for 57600 Baud
 70e:	0e 94 8b 04 	call	0x916	; 0x916 <_Z14configureUSARTv>
	configureTimerCounter();
 712:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z21configureTimerCounterv>
	configureADCs();
 716:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z13configureADCsv>
	configureRTC();
 71a:	0e 94 18 02 	call	0x430	; 0x430 <_Z12configureRTCv>
	configureXCL();
 71e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z12configureXCLv>
	configureSerialNumber();
 722:	0e 94 97 02 	call	0x52e	; 0x52e <_Z21configureSerialNumberv>
	SendStringPC((char *)"\n\r");
	SendNumPC(DeviceSignature[5]);
	SendStringPC((char *)"\n\r");
	*/
	
	LOW_LEVEL_INTERRUPTS_ENABLE();
 726:	e0 ea       	ldi	r30, 0xA0	; 160
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	82 81       	ldd	r24, Z+2	; 0x02
 72c:	81 60       	ori	r24, 0x01	; 1
 72e:	82 83       	std	Z+2, r24	; 0x02
	MED_LEVEL_INTERRUPTS_ENABLE();
 730:	82 81       	ldd	r24, Z+2	; 0x02
 732:	82 60       	ori	r24, 0x02	; 2
 734:	82 83       	std	Z+2, r24	; 0x02
	HIGH_LEVEL_INTERRUPTS_ENABLE();
 736:	82 81       	ldd	r24, Z+2	; 0x02
 738:	84 60       	ori	r24, 0x04	; 4
 73a:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable global interrupts
 73c:	78 94       	sei
	
	uint8_t receivedUSARTData;
	
	RSSI.measuring = NOT_MEASURING;
 73e:	e0 e2       	ldi	r30, 0x20	; 32
 740:	f1 e2       	ldi	r31, 0x21	; 33
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	81 83       	std	Z+1, r24	; 0x01
	RSSI.timeDifference = 0;
 746:	12 82       	std	Z+2, r1	; 0x02
 748:	13 82       	std	Z+3, r1	; 0x03
	RSSI.sampleCount = 0;
 74a:	16 82       	std	Z+6, r1	; 0x06
 74c:	17 82       	std	Z+7, r1	; 0x07

	//Init string with basic documentation
	SendStringPC("\n\r#[INIT ROSS PDB]\n\r");
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e2       	ldi	r25, 0x20	; 32
 752:	0e 94 14 04 	call	0x828	; 0x828 <_Z12SendStringPCPKc>
	SendStringPC("#Firmware version ");
 756:	86 e1       	ldi	r24, 0x16	; 22
 758:	90 e2       	ldi	r25, 0x20	; 32
 75a:	0e 94 14 04 	call	0x828	; 0x828 <_Z12SendStringPCPKc>
	SendStringPC(FIRMWARE_VERSION_STR);
 75e:	89 e2       	ldi	r24, 0x29	; 41
 760:	90 e2       	ldi	r25, 0x20	; 32
 762:	0e 94 14 04 	call	0x828	; 0x828 <_Z12SendStringPCPKc>
	SendStringPC((char *)"\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr | XTend RSSI | \"Remote Input\" \n\r");
 766:	8c e2       	ldi	r24, 0x2C	; 44
 768:	90 e2       	ldi	r25, 0x20	; 32
 76a:	0e 94 04 04 	call	0x808	; 0x808 <_Z12SendStringPCPc>
 76e:	ca e0       	ldi	r28, 0x0A	; 10
 770:	d1 e2       	ldi	r29, 0x21	; 33
 772:	05 e1       	ldi	r16, 0x15	; 21
 774:	11 e2       	ldi	r17, 0x21	; 33
	
	
	for(int i = 0; i < 11; ++i){
		SendNumPC(DeviceSignature[i]);
 776:	89 91       	ld	r24, Y+
 778:	0e 94 24 04 	call	0x848	; 0x848 <_Z9SendNumPCh>
		SendStringPC((char *)"\n\r");
 77c:	80 eb       	ldi	r24, 0xB0	; 176
 77e:	90 e2       	ldi	r25, 0x20	; 32
 780:	0e 94 04 04 	call	0x808	; 0x808 <_Z12SendStringPCPc>
	SendStringPC("#Firmware version ");
	SendStringPC(FIRMWARE_VERSION_STR);
	SendStringPC((char *)"\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr | XTend RSSI | \"Remote Input\" \n\r");
	
	
	for(int i = 0; i < 11; ++i){
 784:	c0 17       	cp	r28, r16
 786:	d1 07       	cpc	r29, r17
 788:	b1 f7       	brne	.-20     	; 0x776 <main+0x70>
		SendStringPC((char *)"\n\r");
	}
	
	/* NEED TO WRITE 64 bit SendNumPC */
	
	SendStringPC((char *)"[Lot ID Number: ");
 78a:	83 eb       	ldi	r24, 0xB3	; 179
 78c:	90 e2       	ldi	r25, 0x20	; 32
 78e:	0e 94 04 04 	call	0x808	; 0x808 <_Z12SendStringPCPc>
	SendNumPC(UC_LOT_NUMBER);
 792:	20 91 02 21 	lds	r18, 0x2102
 796:	30 91 03 21 	lds	r19, 0x2103
 79a:	40 91 04 21 	lds	r20, 0x2104
 79e:	50 91 05 21 	lds	r21, 0x2105
 7a2:	60 91 06 21 	lds	r22, 0x2106
 7a6:	70 91 07 21 	lds	r23, 0x2107
 7aa:	80 91 08 21 	lds	r24, 0x2108
 7ae:	90 91 09 21 	lds	r25, 0x2109
 7b2:	0e 94 3c 04 	call	0x878	; 0x878 <_Z9SendNumPCy>
	SendStringPC((char *)"]");
 7b6:	84 ec       	ldi	r24, 0xC4	; 196
 7b8:	90 e2       	ldi	r25, 0x20	; 32
 7ba:	0e 94 04 04 	call	0x808	; 0x808 <_Z12SendStringPCPc>
	
	SendStringPC((char *)"[Wafer ID Number: ");
 7be:	86 ec       	ldi	r24, 0xC6	; 198
 7c0:	90 e2       	ldi	r25, 0x20	; 32
 7c2:	0e 94 04 04 	call	0x808	; 0x808 <_Z12SendStringPCPc>
	SendNumPC(UC_WAFER_ID);
 7c6:	20 91 fa 20 	lds	r18, 0x20FA
 7ca:	30 91 fb 20 	lds	r19, 0x20FB
 7ce:	40 91 fc 20 	lds	r20, 0x20FC
 7d2:	50 91 fd 20 	lds	r21, 0x20FD
 7d6:	60 91 fe 20 	lds	r22, 0x20FE
 7da:	70 91 ff 20 	lds	r23, 0x20FF
 7de:	80 91 00 21 	lds	r24, 0x2100
 7e2:	90 91 01 21 	lds	r25, 0x2101
 7e6:	0e 94 3c 04 	call	0x878	; 0x878 <_Z9SendNumPCy>
	SendStringPC((char *)"]");
 7ea:	84 ec       	ldi	r24, 0xC4	; 196
 7ec:	90 e2       	ldi	r25, 0x20	; 32
 7ee:	0e 94 04 04 	call	0x808	; 0x808 <_Z12SendStringPCPc>
	
	SendNumPC((uint64_t) 0x1234567891AAAFC);
 7f2:	2c ef       	ldi	r18, 0xFC	; 252
 7f4:	3a ea       	ldi	r19, 0xAA	; 170
 7f6:	4a e1       	ldi	r20, 0x1A	; 26
 7f8:	59 e8       	ldi	r21, 0x89	; 137
 7fa:	67 e6       	ldi	r22, 0x67	; 103
 7fc:	75 e4       	ldi	r23, 0x45	; 69
 7fe:	83 e2       	ldi	r24, 0x23	; 35
 800:	91 e0       	ldi	r25, 0x01	; 1
 802:	0e 94 3c 04 	call	0x878	; 0x878 <_Z9SendNumPCy>
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
			}
		}
    }
 806:	ff cf       	rjmp	.-2      	; 0x806 <main+0x100>

00000808 <_Z12SendStringPCPc>:
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 808:	fc 01       	movw	r30, r24
 80a:	20 81       	ld	r18, Z
 80c:	22 23       	and	r18, r18
 80e:	59 f0       	breq	.+22     	; 0x826 <_Z12SendStringPCPc+0x1e>
 810:	dc 01       	movw	r26, r24
 812:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
 814:	e0 ec       	ldi	r30, 0xC0	; 192
 816:	f8 e0       	ldi	r31, 0x08	; 8
 818:	91 81       	ldd	r25, Z+1	; 0x01
 81a:	95 ff       	sbrs	r25, 5
 81c:	fd cf       	rjmp	.-6      	; 0x818 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
 81e:	20 83       	st	Z, r18
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 820:	2d 91       	ld	r18, X+
 822:	21 11       	cpse	r18, r1
 824:	f9 cf       	rjmp	.-14     	; 0x818 <_Z12SendStringPCPc+0x10>
 826:	08 95       	ret

00000828 <_Z12SendStringPCPKc>:
	}
}

//Sends a string to the computer
void SendStringPC(const char stufftosend[]){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 828:	fc 01       	movw	r30, r24
 82a:	20 81       	ld	r18, Z
 82c:	22 23       	and	r18, r18
 82e:	59 f0       	breq	.+22     	; 0x846 <_Z12SendStringPCPKc+0x1e>
 830:	dc 01       	movw	r26, r24
 832:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
 834:	e0 ec       	ldi	r30, 0xC0	; 192
 836:	f8 e0       	ldi	r31, 0x08	; 8
 838:	91 81       	ldd	r25, Z+1	; 0x01
 83a:	95 ff       	sbrs	r25, 5
 83c:	fd cf       	rjmp	.-6      	; 0x838 <_Z12SendStringPCPKc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
 83e:	20 83       	st	Z, r18
	}
}

//Sends a string to the computer
void SendStringPC(const char stufftosend[]){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 840:	2d 91       	ld	r18, X+
 842:	21 11       	cpse	r18, r1
 844:	f9 cf       	rjmp	.-14     	; 0x838 <_Z12SendStringPCPKc+0x10>
 846:	08 95       	ret

00000848 <_Z9SendNumPCh>:

void SendCharONOFF(char charToSend){
	USART_PutChar(&ONOFF_USART, charToSend);	
}

void SendNumPC(uint8_t numToSend){
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
 850:	2a 97       	sbiw	r28, 0x0a	; 10
 852:	cd bf       	out	0x3d, r28	; 61
 854:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 856:	4a e0       	ldi	r20, 0x0A	; 10
 858:	be 01       	movw	r22, r28
 85a:	6f 5f       	subi	r22, 0xFF	; 255
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__itoa_ncheck>
	char buffer[10];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
 864:	ce 01       	movw	r24, r28
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	0e 94 04 04 	call	0x808	; 0x808 <_Z12SendStringPCPc>
}
 86c:	2a 96       	adiw	r28, 0x0a	; 10
 86e:	cd bf       	out	0x3d, r28	; 61
 870:	de bf       	out	0x3e, r29	; 62
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	08 95       	ret

00000878 <_Z9SendNumPCy>:
/*
For this function, we need to split the 64 bit integer into two separate
32 bit integers because %llx and %lld are not implemented in this version
of sprintf/
*/
void SendNumPC(uint64_t numToSend){
 878:	ff 92       	push	r15
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	cd b7       	in	r28, 0x3d	; 61
 884:	de b7       	in	r29, 0x3e	; 62
 886:	e2 97       	sbiw	r28, 0x32	; 50
 888:	cd bf       	out	0x3d, r28	; 61
 88a:	de bf       	out	0x3e, r29	; 62
 88c:	f5 2e       	mov	r15, r21
	char buffer[50];
	uint32_t tempLSB;
	uint32_t tempMSB;
	
	tempLSB = numToSend & 0xFFFFFFFF;	//Least significant four bytes
 88e:	e2 2f       	mov	r30, r18
 890:	f3 2f       	mov	r31, r19
 892:	14 2f       	mov	r17, r20
	tempMSB = (uint32_t) ((numToSend & 0xFFFFFFFF00000000) >> 32);		//Most significant four bytes
 894:	20 e0       	ldi	r18, 0x00	; 0
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	40 e0       	ldi	r20, 0x00	; 0
 89a:	50 e0       	ldi	r21, 0x00	; 0
 89c:	00 e2       	ldi	r16, 0x20	; 32
 89e:	0e 94 b6 04 	call	0x96c	; 0x96c <__lshrdi3>
 8a2:	82 2f       	mov	r24, r18
 8a4:	93 2f       	mov	r25, r19
 8a6:	a4 2f       	mov	r26, r20
 8a8:	b5 2f       	mov	r27, r21
		
	if(tempMSB)
 8aa:	89 2b       	or	r24, r25
 8ac:	8a 2b       	or	r24, r26
 8ae:	8b 2b       	or	r24, r27
 8b0:	a9 f0       	breq	.+42     	; 0x8dc <_Z9SendNumPCy+0x64>
		sprintf(buffer,"%lx%lx", tempMSB, tempLSB);		
 8b2:	ff 92       	push	r15
 8b4:	1f 93       	push	r17
 8b6:	ff 93       	push	r31
 8b8:	ef 93       	push	r30
 8ba:	5f 93       	push	r21
 8bc:	4f 93       	push	r20
 8be:	3f 93       	push	r19
 8c0:	2f 93       	push	r18
 8c2:	8b ee       	ldi	r24, 0xEB	; 235
 8c4:	90 e2       	ldi	r25, 0x20	; 32
 8c6:	9f 93       	push	r25
 8c8:	8f 93       	push	r24
 8ca:	ce 01       	movw	r24, r28
 8cc:	01 96       	adiw	r24, 0x01	; 1
 8ce:	9f 93       	push	r25
 8d0:	8f 93       	push	r24
 8d2:	0e 94 0c 05 	call	0xa18	; 0xa18 <sprintf>
 8d6:	cd bf       	out	0x3d, r28	; 61
 8d8:	de bf       	out	0x3e, r29	; 62
 8da:	10 c0       	rjmp	.+32     	; 0x8fc <_Z9SendNumPCy+0x84>
	else
		sprintf(buffer,"%lx", tempLSB);		
 8dc:	ff 92       	push	r15
 8de:	1f 93       	push	r17
 8e0:	ff 93       	push	r31
 8e2:	ef 93       	push	r30
 8e4:	8e ee       	ldi	r24, 0xEE	; 238
 8e6:	90 e2       	ldi	r25, 0x20	; 32
 8e8:	9f 93       	push	r25
 8ea:	8f 93       	push	r24
 8ec:	ce 01       	movw	r24, r28
 8ee:	01 96       	adiw	r24, 0x01	; 1
 8f0:	9f 93       	push	r25
 8f2:	8f 93       	push	r24
 8f4:	0e 94 0c 05 	call	0xa18	; 0xa18 <sprintf>
 8f8:	cd bf       	out	0x3d, r28	; 61
 8fa:	de bf       	out	0x3e, r29	; 62
	
	SendStringPC(buffer);
 8fc:	ce 01       	movw	r24, r28
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	0e 94 04 04 	call	0x808	; 0x808 <_Z12SendStringPCPc>
}
 904:	e2 96       	adiw	r28, 0x32	; 50
 906:	cd bf       	out	0x3d, r28	; 61
 908:	de bf       	out	0x3e, r29	; 62
 90a:	df 91       	pop	r29
 90c:	cf 91       	pop	r28
 90e:	1f 91       	pop	r17
 910:	0f 91       	pop	r16
 912:	ff 90       	pop	r15
 914:	08 95       	ret

00000916 <_Z14configureUSARTv>:

void configureUSART(void){
	/**** ENABLE COMUPTER USART ****/
	
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
 916:	e0 e4       	ldi	r30, 0x40	; 64
 918:	f6 e0       	ldi	r31, 0x06	; 6
 91a:	40 e8       	ldi	r20, 0x80	; 128
 91c:	41 83       	std	Z+1, r20	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
 91e:	30 e4       	ldi	r19, 0x40	; 64
 920:	32 83       	std	Z+2, r19	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
 922:	86 85       	ldd	r24, Z+14	; 0x0e
 924:	80 61       	ori	r24, 0x10	; 16
 926:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 928:	e0 ec       	ldi	r30, 0xC0	; 192
 92a:	f8 e0       	ldi	r31, 0x08	; 8
 92c:	23 e0       	ldi	r18, 0x03	; 3
 92e:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
 930:	92 e2       	ldi	r25, 0x22	; 34
 932:	96 83       	std	Z+6, r25	; 0x06
 934:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
 936:	83 81       	ldd	r24, Z+3	; 0x03
 938:	80 61       	ori	r24, 0x10	; 16
 93a:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
 93c:	83 81       	ldd	r24, Z+3	; 0x03
 93e:	88 60       	ori	r24, 0x08	; 8
 940:	83 83       	std	Z+3, r24	; 0x03
	
	/**** ENABLE ON/OFF SWITCH USART ****/
	
	//Set TX (pin7) to be output
	PORTD.DIRSET = PIN7_bm;
 942:	e0 e6       	ldi	r30, 0x60	; 96
 944:	f6 e0       	ldi	r31, 0x06	; 6
 946:	41 83       	std	Z+1, r20	; 0x01
	//Set RX (pin6) to be input
	PORTD.DIRCLR = PIN6_bm;
 948:	32 83       	std	Z+2, r19	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTD.REMAP |= (1 << 4);
 94a:	86 85       	ldd	r24, Z+14	; 0x0e
 94c:	80 61       	ori	r24, 0x10	; 16
 94e:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&ONOFF_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 950:	e0 ec       	ldi	r30, 0xC0	; 192
 952:	f9 e0       	ldi	r31, 0x09	; 9
 954:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&ONOFF_USART, 34, 0);
 956:	96 83       	std	Z+6, r25	; 0x06
 958:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&ONOFF_USART);
 95a:	83 81       	ldd	r24, Z+3	; 0x03
 95c:	80 61       	ori	r24, 0x10	; 16
 95e:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&ONOFF_USART);
 960:	83 81       	ldd	r24, Z+3	; 0x03
 962:	88 60       	ori	r24, 0x08	; 8
 964:	83 83       	std	Z+3, r24	; 0x03
 966:	08 95       	ret

00000968 <__ashrdi3>:
 968:	97 fb       	bst	r25, 7
 96a:	10 f8       	bld	r1, 0

0000096c <__lshrdi3>:
 96c:	16 94       	lsr	r1
 96e:	00 08       	sbc	r0, r0
 970:	0f 93       	push	r16
 972:	08 30       	cpi	r16, 0x08	; 8
 974:	98 f0       	brcs	.+38     	; 0x99c <__lshrdi3+0x30>
 976:	08 50       	subi	r16, 0x08	; 8
 978:	23 2f       	mov	r18, r19
 97a:	34 2f       	mov	r19, r20
 97c:	45 2f       	mov	r20, r21
 97e:	56 2f       	mov	r21, r22
 980:	67 2f       	mov	r22, r23
 982:	78 2f       	mov	r23, r24
 984:	89 2f       	mov	r24, r25
 986:	90 2d       	mov	r25, r0
 988:	f4 cf       	rjmp	.-24     	; 0x972 <__lshrdi3+0x6>
 98a:	05 94       	asr	r0
 98c:	97 95       	ror	r25
 98e:	87 95       	ror	r24
 990:	77 95       	ror	r23
 992:	67 95       	ror	r22
 994:	57 95       	ror	r21
 996:	47 95       	ror	r20
 998:	37 95       	ror	r19
 99a:	27 95       	ror	r18
 99c:	0a 95       	dec	r16
 99e:	aa f7       	brpl	.-22     	; 0x98a <__lshrdi3+0x1e>
 9a0:	0f 91       	pop	r16
 9a2:	08 95       	ret

000009a4 <__adddi3>:
 9a4:	2a 0d       	add	r18, r10
 9a6:	3b 1d       	adc	r19, r11
 9a8:	4c 1d       	adc	r20, r12
 9aa:	5d 1d       	adc	r21, r13
 9ac:	6e 1d       	adc	r22, r14
 9ae:	7f 1d       	adc	r23, r15
 9b0:	80 1f       	adc	r24, r16
 9b2:	91 1f       	adc	r25, r17
 9b4:	08 95       	ret

000009b6 <__adddi3_s8>:
 9b6:	00 24       	eor	r0, r0
 9b8:	a7 fd       	sbrc	r26, 7
 9ba:	00 94       	com	r0
 9bc:	2a 0f       	add	r18, r26
 9be:	30 1d       	adc	r19, r0
 9c0:	40 1d       	adc	r20, r0
 9c2:	50 1d       	adc	r21, r0
 9c4:	60 1d       	adc	r22, r0
 9c6:	70 1d       	adc	r23, r0
 9c8:	80 1d       	adc	r24, r0
 9ca:	90 1d       	adc	r25, r0
 9cc:	08 95       	ret

000009ce <__itoa_ncheck>:
 9ce:	bb 27       	eor	r27, r27
 9d0:	4a 30       	cpi	r20, 0x0A	; 10
 9d2:	31 f4       	brne	.+12     	; 0x9e0 <__itoa_ncheck+0x12>
 9d4:	99 23       	and	r25, r25
 9d6:	22 f4       	brpl	.+8      	; 0x9e0 <__itoa_ncheck+0x12>
 9d8:	bd e2       	ldi	r27, 0x2D	; 45
 9da:	90 95       	com	r25
 9dc:	81 95       	neg	r24
 9de:	9f 4f       	sbci	r25, 0xFF	; 255
 9e0:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__utoa_common>

000009e4 <__utoa_ncheck>:
 9e4:	bb 27       	eor	r27, r27

000009e6 <__utoa_common>:
 9e6:	fb 01       	movw	r30, r22
 9e8:	55 27       	eor	r21, r21
 9ea:	aa 27       	eor	r26, r26
 9ec:	88 0f       	add	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	aa 1f       	adc	r26, r26
 9f2:	a4 17       	cp	r26, r20
 9f4:	10 f0       	brcs	.+4      	; 0x9fa <__utoa_common+0x14>
 9f6:	a4 1b       	sub	r26, r20
 9f8:	83 95       	inc	r24
 9fa:	50 51       	subi	r21, 0x10	; 16
 9fc:	b9 f7       	brne	.-18     	; 0x9ec <__utoa_common+0x6>
 9fe:	a0 5d       	subi	r26, 0xD0	; 208
 a00:	aa 33       	cpi	r26, 0x3A	; 58
 a02:	08 f0       	brcs	.+2      	; 0xa06 <__utoa_common+0x20>
 a04:	a9 5d       	subi	r26, 0xD9	; 217
 a06:	a1 93       	st	Z+, r26
 a08:	00 97       	sbiw	r24, 0x00	; 0
 a0a:	79 f7       	brne	.-34     	; 0x9ea <__utoa_common+0x4>
 a0c:	b1 11       	cpse	r27, r1
 a0e:	b1 93       	st	Z+, r27
 a10:	11 92       	st	Z+, r1
 a12:	cb 01       	movw	r24, r22
 a14:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <strrev>

00000a18 <sprintf>:
 a18:	ae e0       	ldi	r26, 0x0E	; 14
 a1a:	b0 e0       	ldi	r27, 0x00	; 0
 a1c:	e2 e1       	ldi	r30, 0x12	; 18
 a1e:	f5 e0       	ldi	r31, 0x05	; 5
 a20:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__prologue_saves__+0x1c>
 a24:	0d 89       	ldd	r16, Y+21	; 0x15
 a26:	1e 89       	ldd	r17, Y+22	; 0x16
 a28:	86 e0       	ldi	r24, 0x06	; 6
 a2a:	8c 83       	std	Y+4, r24	; 0x04
 a2c:	09 83       	std	Y+1, r16	; 0x01
 a2e:	1a 83       	std	Y+2, r17	; 0x02
 a30:	8f ef       	ldi	r24, 0xFF	; 255
 a32:	9f e7       	ldi	r25, 0x7F	; 127
 a34:	8d 83       	std	Y+5, r24	; 0x05
 a36:	9e 83       	std	Y+6, r25	; 0x06
 a38:	ae 01       	movw	r20, r28
 a3a:	47 5e       	subi	r20, 0xE7	; 231
 a3c:	5f 4f       	sbci	r21, 0xFF	; 255
 a3e:	6f 89       	ldd	r22, Y+23	; 0x17
 a40:	78 8d       	ldd	r23, Y+24	; 0x18
 a42:	ce 01       	movw	r24, r28
 a44:	01 96       	adiw	r24, 0x01	; 1
 a46:	0e 94 2f 05 	call	0xa5e	; 0xa5e <vfprintf>
 a4a:	2f 81       	ldd	r18, Y+7	; 0x07
 a4c:	38 85       	ldd	r19, Y+8	; 0x08
 a4e:	f8 01       	movw	r30, r16
 a50:	e2 0f       	add	r30, r18
 a52:	f3 1f       	adc	r31, r19
 a54:	10 82       	st	Z, r1
 a56:	2e 96       	adiw	r28, 0x0e	; 14
 a58:	e4 e0       	ldi	r30, 0x04	; 4
 a5a:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__epilogue_restores__+0x1c>

00000a5e <vfprintf>:
 a5e:	ac e0       	ldi	r26, 0x0C	; 12
 a60:	b0 e0       	ldi	r27, 0x00	; 0
 a62:	e5 e3       	ldi	r30, 0x35	; 53
 a64:	f5 e0       	ldi	r31, 0x05	; 5
 a66:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__prologue_saves__>
 a6a:	7c 01       	movw	r14, r24
 a6c:	6b 01       	movw	r12, r22
 a6e:	8a 01       	movw	r16, r20
 a70:	fc 01       	movw	r30, r24
 a72:	16 82       	std	Z+6, r1	; 0x06
 a74:	17 82       	std	Z+7, r1	; 0x07
 a76:	83 81       	ldd	r24, Z+3	; 0x03
 a78:	81 ff       	sbrs	r24, 1
 a7a:	bd c1       	rjmp	.+890    	; 0xdf6 <vfprintf+0x398>
 a7c:	ce 01       	movw	r24, r28
 a7e:	01 96       	adiw	r24, 0x01	; 1
 a80:	4c 01       	movw	r8, r24
 a82:	f7 01       	movw	r30, r14
 a84:	93 81       	ldd	r25, Z+3	; 0x03
 a86:	f6 01       	movw	r30, r12
 a88:	93 fd       	sbrc	r25, 3
 a8a:	85 91       	lpm	r24, Z+
 a8c:	93 ff       	sbrs	r25, 3
 a8e:	81 91       	ld	r24, Z+
 a90:	6f 01       	movw	r12, r30
 a92:	88 23       	and	r24, r24
 a94:	09 f4       	brne	.+2      	; 0xa98 <vfprintf+0x3a>
 a96:	ab c1       	rjmp	.+854    	; 0xdee <vfprintf+0x390>
 a98:	85 32       	cpi	r24, 0x25	; 37
 a9a:	39 f4       	brne	.+14     	; 0xaaa <vfprintf+0x4c>
 a9c:	93 fd       	sbrc	r25, 3
 a9e:	85 91       	lpm	r24, Z+
 aa0:	93 ff       	sbrs	r25, 3
 aa2:	81 91       	ld	r24, Z+
 aa4:	6f 01       	movw	r12, r30
 aa6:	85 32       	cpi	r24, 0x25	; 37
 aa8:	29 f4       	brne	.+10     	; 0xab4 <vfprintf+0x56>
 aaa:	b7 01       	movw	r22, r14
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	0e 94 27 07 	call	0xe4e	; 0xe4e <fputc>
 ab2:	e7 cf       	rjmp	.-50     	; 0xa82 <vfprintf+0x24>
 ab4:	51 2c       	mov	r5, r1
 ab6:	31 2c       	mov	r3, r1
 ab8:	20 e0       	ldi	r18, 0x00	; 0
 aba:	20 32       	cpi	r18, 0x20	; 32
 abc:	a0 f4       	brcc	.+40     	; 0xae6 <vfprintf+0x88>
 abe:	8b 32       	cpi	r24, 0x2B	; 43
 ac0:	69 f0       	breq	.+26     	; 0xadc <vfprintf+0x7e>
 ac2:	30 f4       	brcc	.+12     	; 0xad0 <vfprintf+0x72>
 ac4:	80 32       	cpi	r24, 0x20	; 32
 ac6:	59 f0       	breq	.+22     	; 0xade <vfprintf+0x80>
 ac8:	83 32       	cpi	r24, 0x23	; 35
 aca:	69 f4       	brne	.+26     	; 0xae6 <vfprintf+0x88>
 acc:	20 61       	ori	r18, 0x10	; 16
 ace:	2c c0       	rjmp	.+88     	; 0xb28 <vfprintf+0xca>
 ad0:	8d 32       	cpi	r24, 0x2D	; 45
 ad2:	39 f0       	breq	.+14     	; 0xae2 <vfprintf+0x84>
 ad4:	80 33       	cpi	r24, 0x30	; 48
 ad6:	39 f4       	brne	.+14     	; 0xae6 <vfprintf+0x88>
 ad8:	21 60       	ori	r18, 0x01	; 1
 ada:	26 c0       	rjmp	.+76     	; 0xb28 <vfprintf+0xca>
 adc:	22 60       	ori	r18, 0x02	; 2
 ade:	24 60       	ori	r18, 0x04	; 4
 ae0:	23 c0       	rjmp	.+70     	; 0xb28 <vfprintf+0xca>
 ae2:	28 60       	ori	r18, 0x08	; 8
 ae4:	21 c0       	rjmp	.+66     	; 0xb28 <vfprintf+0xca>
 ae6:	27 fd       	sbrc	r18, 7
 ae8:	27 c0       	rjmp	.+78     	; 0xb38 <vfprintf+0xda>
 aea:	30 ed       	ldi	r19, 0xD0	; 208
 aec:	38 0f       	add	r19, r24
 aee:	3a 30       	cpi	r19, 0x0A	; 10
 af0:	78 f4       	brcc	.+30     	; 0xb10 <vfprintf+0xb2>
 af2:	26 ff       	sbrs	r18, 6
 af4:	06 c0       	rjmp	.+12     	; 0xb02 <vfprintf+0xa4>
 af6:	fa e0       	ldi	r31, 0x0A	; 10
 af8:	5f 9e       	mul	r5, r31
 afa:	30 0d       	add	r19, r0
 afc:	11 24       	eor	r1, r1
 afe:	53 2e       	mov	r5, r19
 b00:	13 c0       	rjmp	.+38     	; 0xb28 <vfprintf+0xca>
 b02:	8a e0       	ldi	r24, 0x0A	; 10
 b04:	38 9e       	mul	r3, r24
 b06:	30 0d       	add	r19, r0
 b08:	11 24       	eor	r1, r1
 b0a:	33 2e       	mov	r3, r19
 b0c:	20 62       	ori	r18, 0x20	; 32
 b0e:	0c c0       	rjmp	.+24     	; 0xb28 <vfprintf+0xca>
 b10:	8e 32       	cpi	r24, 0x2E	; 46
 b12:	21 f4       	brne	.+8      	; 0xb1c <vfprintf+0xbe>
 b14:	26 fd       	sbrc	r18, 6
 b16:	6b c1       	rjmp	.+726    	; 0xdee <vfprintf+0x390>
 b18:	20 64       	ori	r18, 0x40	; 64
 b1a:	06 c0       	rjmp	.+12     	; 0xb28 <vfprintf+0xca>
 b1c:	8c 36       	cpi	r24, 0x6C	; 108
 b1e:	11 f4       	brne	.+4      	; 0xb24 <vfprintf+0xc6>
 b20:	20 68       	ori	r18, 0x80	; 128
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <vfprintf+0xca>
 b24:	88 36       	cpi	r24, 0x68	; 104
 b26:	41 f4       	brne	.+16     	; 0xb38 <vfprintf+0xda>
 b28:	f6 01       	movw	r30, r12
 b2a:	93 fd       	sbrc	r25, 3
 b2c:	85 91       	lpm	r24, Z+
 b2e:	93 ff       	sbrs	r25, 3
 b30:	81 91       	ld	r24, Z+
 b32:	6f 01       	movw	r12, r30
 b34:	81 11       	cpse	r24, r1
 b36:	c1 cf       	rjmp	.-126    	; 0xaba <vfprintf+0x5c>
 b38:	98 2f       	mov	r25, r24
 b3a:	9f 7d       	andi	r25, 0xDF	; 223
 b3c:	95 54       	subi	r25, 0x45	; 69
 b3e:	93 30       	cpi	r25, 0x03	; 3
 b40:	28 f4       	brcc	.+10     	; 0xb4c <vfprintf+0xee>
 b42:	0c 5f       	subi	r16, 0xFC	; 252
 b44:	1f 4f       	sbci	r17, 0xFF	; 255
 b46:	ff e3       	ldi	r31, 0x3F	; 63
 b48:	f9 83       	std	Y+1, r31	; 0x01
 b4a:	0d c0       	rjmp	.+26     	; 0xb66 <vfprintf+0x108>
 b4c:	83 36       	cpi	r24, 0x63	; 99
 b4e:	31 f0       	breq	.+12     	; 0xb5c <vfprintf+0xfe>
 b50:	83 37       	cpi	r24, 0x73	; 115
 b52:	71 f0       	breq	.+28     	; 0xb70 <vfprintf+0x112>
 b54:	83 35       	cpi	r24, 0x53	; 83
 b56:	09 f0       	breq	.+2      	; 0xb5a <vfprintf+0xfc>
 b58:	5b c0       	rjmp	.+182    	; 0xc10 <vfprintf+0x1b2>
 b5a:	22 c0       	rjmp	.+68     	; 0xba0 <vfprintf+0x142>
 b5c:	f8 01       	movw	r30, r16
 b5e:	80 81       	ld	r24, Z
 b60:	89 83       	std	Y+1, r24	; 0x01
 b62:	0e 5f       	subi	r16, 0xFE	; 254
 b64:	1f 4f       	sbci	r17, 0xFF	; 255
 b66:	44 24       	eor	r4, r4
 b68:	43 94       	inc	r4
 b6a:	51 2c       	mov	r5, r1
 b6c:	54 01       	movw	r10, r8
 b6e:	15 c0       	rjmp	.+42     	; 0xb9a <vfprintf+0x13c>
 b70:	38 01       	movw	r6, r16
 b72:	f2 e0       	ldi	r31, 0x02	; 2
 b74:	6f 0e       	add	r6, r31
 b76:	71 1c       	adc	r7, r1
 b78:	f8 01       	movw	r30, r16
 b7a:	a0 80       	ld	r10, Z
 b7c:	b1 80       	ldd	r11, Z+1	; 0x01
 b7e:	26 ff       	sbrs	r18, 6
 b80:	03 c0       	rjmp	.+6      	; 0xb88 <vfprintf+0x12a>
 b82:	65 2d       	mov	r22, r5
 b84:	70 e0       	ldi	r23, 0x00	; 0
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <vfprintf+0x12e>
 b88:	6f ef       	ldi	r22, 0xFF	; 255
 b8a:	7f ef       	ldi	r23, 0xFF	; 255
 b8c:	c5 01       	movw	r24, r10
 b8e:	2c 87       	std	Y+12, r18	; 0x0c
 b90:	0e 94 0c 07 	call	0xe18	; 0xe18 <strnlen>
 b94:	2c 01       	movw	r4, r24
 b96:	83 01       	movw	r16, r6
 b98:	2c 85       	ldd	r18, Y+12	; 0x0c
 b9a:	2f 77       	andi	r18, 0x7F	; 127
 b9c:	22 2e       	mov	r2, r18
 b9e:	17 c0       	rjmp	.+46     	; 0xbce <vfprintf+0x170>
 ba0:	38 01       	movw	r6, r16
 ba2:	f2 e0       	ldi	r31, 0x02	; 2
 ba4:	6f 0e       	add	r6, r31
 ba6:	71 1c       	adc	r7, r1
 ba8:	f8 01       	movw	r30, r16
 baa:	a0 80       	ld	r10, Z
 bac:	b1 80       	ldd	r11, Z+1	; 0x01
 bae:	26 ff       	sbrs	r18, 6
 bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <vfprintf+0x15a>
 bb2:	65 2d       	mov	r22, r5
 bb4:	70 e0       	ldi	r23, 0x00	; 0
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <vfprintf+0x15e>
 bb8:	6f ef       	ldi	r22, 0xFF	; 255
 bba:	7f ef       	ldi	r23, 0xFF	; 255
 bbc:	c5 01       	movw	r24, r10
 bbe:	2c 87       	std	Y+12, r18	; 0x0c
 bc0:	0e 94 01 07 	call	0xe02	; 0xe02 <strnlen_P>
 bc4:	2c 01       	movw	r4, r24
 bc6:	2c 85       	ldd	r18, Y+12	; 0x0c
 bc8:	20 68       	ori	r18, 0x80	; 128
 bca:	22 2e       	mov	r2, r18
 bcc:	83 01       	movw	r16, r6
 bce:	23 fc       	sbrc	r2, 3
 bd0:	1b c0       	rjmp	.+54     	; 0xc08 <vfprintf+0x1aa>
 bd2:	83 2d       	mov	r24, r3
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	48 16       	cp	r4, r24
 bd8:	59 06       	cpc	r5, r25
 bda:	b0 f4       	brcc	.+44     	; 0xc08 <vfprintf+0x1aa>
 bdc:	b7 01       	movw	r22, r14
 bde:	80 e2       	ldi	r24, 0x20	; 32
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	0e 94 27 07 	call	0xe4e	; 0xe4e <fputc>
 be6:	3a 94       	dec	r3
 be8:	f4 cf       	rjmp	.-24     	; 0xbd2 <vfprintf+0x174>
 bea:	f5 01       	movw	r30, r10
 bec:	27 fc       	sbrc	r2, 7
 bee:	85 91       	lpm	r24, Z+
 bf0:	27 fe       	sbrs	r2, 7
 bf2:	81 91       	ld	r24, Z+
 bf4:	5f 01       	movw	r10, r30
 bf6:	b7 01       	movw	r22, r14
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0e 94 27 07 	call	0xe4e	; 0xe4e <fputc>
 bfe:	31 10       	cpse	r3, r1
 c00:	3a 94       	dec	r3
 c02:	f1 e0       	ldi	r31, 0x01	; 1
 c04:	4f 1a       	sub	r4, r31
 c06:	51 08       	sbc	r5, r1
 c08:	41 14       	cp	r4, r1
 c0a:	51 04       	cpc	r5, r1
 c0c:	71 f7       	brne	.-36     	; 0xbea <vfprintf+0x18c>
 c0e:	e5 c0       	rjmp	.+458    	; 0xdda <vfprintf+0x37c>
 c10:	84 36       	cpi	r24, 0x64	; 100
 c12:	11 f0       	breq	.+4      	; 0xc18 <vfprintf+0x1ba>
 c14:	89 36       	cpi	r24, 0x69	; 105
 c16:	39 f5       	brne	.+78     	; 0xc66 <vfprintf+0x208>
 c18:	f8 01       	movw	r30, r16
 c1a:	27 ff       	sbrs	r18, 7
 c1c:	07 c0       	rjmp	.+14     	; 0xc2c <vfprintf+0x1ce>
 c1e:	60 81       	ld	r22, Z
 c20:	71 81       	ldd	r23, Z+1	; 0x01
 c22:	82 81       	ldd	r24, Z+2	; 0x02
 c24:	93 81       	ldd	r25, Z+3	; 0x03
 c26:	0c 5f       	subi	r16, 0xFC	; 252
 c28:	1f 4f       	sbci	r17, 0xFF	; 255
 c2a:	08 c0       	rjmp	.+16     	; 0xc3c <vfprintf+0x1de>
 c2c:	60 81       	ld	r22, Z
 c2e:	71 81       	ldd	r23, Z+1	; 0x01
 c30:	07 2e       	mov	r0, r23
 c32:	00 0c       	add	r0, r0
 c34:	88 0b       	sbc	r24, r24
 c36:	99 0b       	sbc	r25, r25
 c38:	0e 5f       	subi	r16, 0xFE	; 254
 c3a:	1f 4f       	sbci	r17, 0xFF	; 255
 c3c:	2f 76       	andi	r18, 0x6F	; 111
 c3e:	72 2e       	mov	r7, r18
 c40:	97 ff       	sbrs	r25, 7
 c42:	09 c0       	rjmp	.+18     	; 0xc56 <vfprintf+0x1f8>
 c44:	90 95       	com	r25
 c46:	80 95       	com	r24
 c48:	70 95       	com	r23
 c4a:	61 95       	neg	r22
 c4c:	7f 4f       	sbci	r23, 0xFF	; 255
 c4e:	8f 4f       	sbci	r24, 0xFF	; 255
 c50:	9f 4f       	sbci	r25, 0xFF	; 255
 c52:	20 68       	ori	r18, 0x80	; 128
 c54:	72 2e       	mov	r7, r18
 c56:	2a e0       	ldi	r18, 0x0A	; 10
 c58:	30 e0       	ldi	r19, 0x00	; 0
 c5a:	a4 01       	movw	r20, r8
 c5c:	0e 94 5f 07 	call	0xebe	; 0xebe <__ultoa_invert>
 c60:	a8 2e       	mov	r10, r24
 c62:	a8 18       	sub	r10, r8
 c64:	44 c0       	rjmp	.+136    	; 0xcee <vfprintf+0x290>
 c66:	85 37       	cpi	r24, 0x75	; 117
 c68:	29 f4       	brne	.+10     	; 0xc74 <vfprintf+0x216>
 c6a:	2f 7e       	andi	r18, 0xEF	; 239
 c6c:	b2 2e       	mov	r11, r18
 c6e:	2a e0       	ldi	r18, 0x0A	; 10
 c70:	30 e0       	ldi	r19, 0x00	; 0
 c72:	25 c0       	rjmp	.+74     	; 0xcbe <vfprintf+0x260>
 c74:	f2 2f       	mov	r31, r18
 c76:	f9 7f       	andi	r31, 0xF9	; 249
 c78:	bf 2e       	mov	r11, r31
 c7a:	8f 36       	cpi	r24, 0x6F	; 111
 c7c:	c1 f0       	breq	.+48     	; 0xcae <vfprintf+0x250>
 c7e:	18 f4       	brcc	.+6      	; 0xc86 <vfprintf+0x228>
 c80:	88 35       	cpi	r24, 0x58	; 88
 c82:	79 f0       	breq	.+30     	; 0xca2 <vfprintf+0x244>
 c84:	b4 c0       	rjmp	.+360    	; 0xdee <vfprintf+0x390>
 c86:	80 37       	cpi	r24, 0x70	; 112
 c88:	19 f0       	breq	.+6      	; 0xc90 <vfprintf+0x232>
 c8a:	88 37       	cpi	r24, 0x78	; 120
 c8c:	21 f0       	breq	.+8      	; 0xc96 <vfprintf+0x238>
 c8e:	af c0       	rjmp	.+350    	; 0xdee <vfprintf+0x390>
 c90:	2f 2f       	mov	r18, r31
 c92:	20 61       	ori	r18, 0x10	; 16
 c94:	b2 2e       	mov	r11, r18
 c96:	b4 fe       	sbrs	r11, 4
 c98:	0d c0       	rjmp	.+26     	; 0xcb4 <vfprintf+0x256>
 c9a:	8b 2d       	mov	r24, r11
 c9c:	84 60       	ori	r24, 0x04	; 4
 c9e:	b8 2e       	mov	r11, r24
 ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <vfprintf+0x256>
 ca2:	24 ff       	sbrs	r18, 4
 ca4:	0a c0       	rjmp	.+20     	; 0xcba <vfprintf+0x25c>
 ca6:	9f 2f       	mov	r25, r31
 ca8:	96 60       	ori	r25, 0x06	; 6
 caa:	b9 2e       	mov	r11, r25
 cac:	06 c0       	rjmp	.+12     	; 0xcba <vfprintf+0x25c>
 cae:	28 e0       	ldi	r18, 0x08	; 8
 cb0:	30 e0       	ldi	r19, 0x00	; 0
 cb2:	05 c0       	rjmp	.+10     	; 0xcbe <vfprintf+0x260>
 cb4:	20 e1       	ldi	r18, 0x10	; 16
 cb6:	30 e0       	ldi	r19, 0x00	; 0
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <vfprintf+0x260>
 cba:	20 e1       	ldi	r18, 0x10	; 16
 cbc:	32 e0       	ldi	r19, 0x02	; 2
 cbe:	f8 01       	movw	r30, r16
 cc0:	b7 fe       	sbrs	r11, 7
 cc2:	07 c0       	rjmp	.+14     	; 0xcd2 <vfprintf+0x274>
 cc4:	60 81       	ld	r22, Z
 cc6:	71 81       	ldd	r23, Z+1	; 0x01
 cc8:	82 81       	ldd	r24, Z+2	; 0x02
 cca:	93 81       	ldd	r25, Z+3	; 0x03
 ccc:	0c 5f       	subi	r16, 0xFC	; 252
 cce:	1f 4f       	sbci	r17, 0xFF	; 255
 cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0x280>
 cd2:	60 81       	ld	r22, Z
 cd4:	71 81       	ldd	r23, Z+1	; 0x01
 cd6:	80 e0       	ldi	r24, 0x00	; 0
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	0e 5f       	subi	r16, 0xFE	; 254
 cdc:	1f 4f       	sbci	r17, 0xFF	; 255
 cde:	a4 01       	movw	r20, r8
 ce0:	0e 94 5f 07 	call	0xebe	; 0xebe <__ultoa_invert>
 ce4:	a8 2e       	mov	r10, r24
 ce6:	a8 18       	sub	r10, r8
 ce8:	fb 2d       	mov	r31, r11
 cea:	ff 77       	andi	r31, 0x7F	; 127
 cec:	7f 2e       	mov	r7, r31
 cee:	76 fe       	sbrs	r7, 6
 cf0:	0b c0       	rjmp	.+22     	; 0xd08 <vfprintf+0x2aa>
 cf2:	37 2d       	mov	r19, r7
 cf4:	3e 7f       	andi	r19, 0xFE	; 254
 cf6:	a5 14       	cp	r10, r5
 cf8:	50 f4       	brcc	.+20     	; 0xd0e <vfprintf+0x2b0>
 cfa:	74 fe       	sbrs	r7, 4
 cfc:	0a c0       	rjmp	.+20     	; 0xd12 <vfprintf+0x2b4>
 cfe:	72 fc       	sbrc	r7, 2
 d00:	08 c0       	rjmp	.+16     	; 0xd12 <vfprintf+0x2b4>
 d02:	37 2d       	mov	r19, r7
 d04:	3e 7e       	andi	r19, 0xEE	; 238
 d06:	05 c0       	rjmp	.+10     	; 0xd12 <vfprintf+0x2b4>
 d08:	ba 2c       	mov	r11, r10
 d0a:	37 2d       	mov	r19, r7
 d0c:	03 c0       	rjmp	.+6      	; 0xd14 <vfprintf+0x2b6>
 d0e:	ba 2c       	mov	r11, r10
 d10:	01 c0       	rjmp	.+2      	; 0xd14 <vfprintf+0x2b6>
 d12:	b5 2c       	mov	r11, r5
 d14:	34 ff       	sbrs	r19, 4
 d16:	0d c0       	rjmp	.+26     	; 0xd32 <vfprintf+0x2d4>
 d18:	fe 01       	movw	r30, r28
 d1a:	ea 0d       	add	r30, r10
 d1c:	f1 1d       	adc	r31, r1
 d1e:	80 81       	ld	r24, Z
 d20:	80 33       	cpi	r24, 0x30	; 48
 d22:	11 f4       	brne	.+4      	; 0xd28 <vfprintf+0x2ca>
 d24:	39 7e       	andi	r19, 0xE9	; 233
 d26:	09 c0       	rjmp	.+18     	; 0xd3a <vfprintf+0x2dc>
 d28:	32 ff       	sbrs	r19, 2
 d2a:	06 c0       	rjmp	.+12     	; 0xd38 <vfprintf+0x2da>
 d2c:	b3 94       	inc	r11
 d2e:	b3 94       	inc	r11
 d30:	04 c0       	rjmp	.+8      	; 0xd3a <vfprintf+0x2dc>
 d32:	83 2f       	mov	r24, r19
 d34:	86 78       	andi	r24, 0x86	; 134
 d36:	09 f0       	breq	.+2      	; 0xd3a <vfprintf+0x2dc>
 d38:	b3 94       	inc	r11
 d3a:	33 fd       	sbrc	r19, 3
 d3c:	13 c0       	rjmp	.+38     	; 0xd64 <vfprintf+0x306>
 d3e:	30 ff       	sbrs	r19, 0
 d40:	06 c0       	rjmp	.+12     	; 0xd4e <vfprintf+0x2f0>
 d42:	5a 2c       	mov	r5, r10
 d44:	b3 14       	cp	r11, r3
 d46:	18 f4       	brcc	.+6      	; 0xd4e <vfprintf+0x2f0>
 d48:	53 0c       	add	r5, r3
 d4a:	5b 18       	sub	r5, r11
 d4c:	b3 2c       	mov	r11, r3
 d4e:	b3 14       	cp	r11, r3
 d50:	68 f4       	brcc	.+26     	; 0xd6c <vfprintf+0x30e>
 d52:	b7 01       	movw	r22, r14
 d54:	80 e2       	ldi	r24, 0x20	; 32
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	3c 87       	std	Y+12, r19	; 0x0c
 d5a:	0e 94 27 07 	call	0xe4e	; 0xe4e <fputc>
 d5e:	b3 94       	inc	r11
 d60:	3c 85       	ldd	r19, Y+12	; 0x0c
 d62:	f5 cf       	rjmp	.-22     	; 0xd4e <vfprintf+0x2f0>
 d64:	b3 14       	cp	r11, r3
 d66:	10 f4       	brcc	.+4      	; 0xd6c <vfprintf+0x30e>
 d68:	3b 18       	sub	r3, r11
 d6a:	01 c0       	rjmp	.+2      	; 0xd6e <vfprintf+0x310>
 d6c:	31 2c       	mov	r3, r1
 d6e:	34 ff       	sbrs	r19, 4
 d70:	12 c0       	rjmp	.+36     	; 0xd96 <vfprintf+0x338>
 d72:	b7 01       	movw	r22, r14
 d74:	80 e3       	ldi	r24, 0x30	; 48
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	3c 87       	std	Y+12, r19	; 0x0c
 d7a:	0e 94 27 07 	call	0xe4e	; 0xe4e <fputc>
 d7e:	3c 85       	ldd	r19, Y+12	; 0x0c
 d80:	32 ff       	sbrs	r19, 2
 d82:	17 c0       	rjmp	.+46     	; 0xdb2 <vfprintf+0x354>
 d84:	31 fd       	sbrc	r19, 1
 d86:	03 c0       	rjmp	.+6      	; 0xd8e <vfprintf+0x330>
 d88:	88 e7       	ldi	r24, 0x78	; 120
 d8a:	90 e0       	ldi	r25, 0x00	; 0
 d8c:	02 c0       	rjmp	.+4      	; 0xd92 <vfprintf+0x334>
 d8e:	88 e5       	ldi	r24, 0x58	; 88
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	b7 01       	movw	r22, r14
 d94:	0c c0       	rjmp	.+24     	; 0xdae <vfprintf+0x350>
 d96:	83 2f       	mov	r24, r19
 d98:	86 78       	andi	r24, 0x86	; 134
 d9a:	59 f0       	breq	.+22     	; 0xdb2 <vfprintf+0x354>
 d9c:	31 ff       	sbrs	r19, 1
 d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0x346>
 da0:	8b e2       	ldi	r24, 0x2B	; 43
 da2:	01 c0       	rjmp	.+2      	; 0xda6 <vfprintf+0x348>
 da4:	80 e2       	ldi	r24, 0x20	; 32
 da6:	37 fd       	sbrc	r19, 7
 da8:	8d e2       	ldi	r24, 0x2D	; 45
 daa:	b7 01       	movw	r22, r14
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	0e 94 27 07 	call	0xe4e	; 0xe4e <fputc>
 db2:	a5 14       	cp	r10, r5
 db4:	38 f4       	brcc	.+14     	; 0xdc4 <vfprintf+0x366>
 db6:	b7 01       	movw	r22, r14
 db8:	80 e3       	ldi	r24, 0x30	; 48
 dba:	90 e0       	ldi	r25, 0x00	; 0
 dbc:	0e 94 27 07 	call	0xe4e	; 0xe4e <fputc>
 dc0:	5a 94       	dec	r5
 dc2:	f7 cf       	rjmp	.-18     	; 0xdb2 <vfprintf+0x354>
 dc4:	aa 94       	dec	r10
 dc6:	f4 01       	movw	r30, r8
 dc8:	ea 0d       	add	r30, r10
 dca:	f1 1d       	adc	r31, r1
 dcc:	80 81       	ld	r24, Z
 dce:	b7 01       	movw	r22, r14
 dd0:	90 e0       	ldi	r25, 0x00	; 0
 dd2:	0e 94 27 07 	call	0xe4e	; 0xe4e <fputc>
 dd6:	a1 10       	cpse	r10, r1
 dd8:	f5 cf       	rjmp	.-22     	; 0xdc4 <vfprintf+0x366>
 dda:	33 20       	and	r3, r3
 ddc:	09 f4       	brne	.+2      	; 0xde0 <vfprintf+0x382>
 dde:	51 ce       	rjmp	.-862    	; 0xa82 <vfprintf+0x24>
 de0:	b7 01       	movw	r22, r14
 de2:	80 e2       	ldi	r24, 0x20	; 32
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	0e 94 27 07 	call	0xe4e	; 0xe4e <fputc>
 dea:	3a 94       	dec	r3
 dec:	f6 cf       	rjmp	.-20     	; 0xdda <vfprintf+0x37c>
 dee:	f7 01       	movw	r30, r14
 df0:	86 81       	ldd	r24, Z+6	; 0x06
 df2:	97 81       	ldd	r25, Z+7	; 0x07
 df4:	02 c0       	rjmp	.+4      	; 0xdfa <vfprintf+0x39c>
 df6:	8f ef       	ldi	r24, 0xFF	; 255
 df8:	9f ef       	ldi	r25, 0xFF	; 255
 dfa:	2c 96       	adiw	r28, 0x0c	; 12
 dfc:	e2 e1       	ldi	r30, 0x12	; 18
 dfe:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__epilogue_restores__>

00000e02 <strnlen_P>:
 e02:	fc 01       	movw	r30, r24
 e04:	05 90       	lpm	r0, Z+
 e06:	61 50       	subi	r22, 0x01	; 1
 e08:	70 40       	sbci	r23, 0x00	; 0
 e0a:	01 10       	cpse	r0, r1
 e0c:	d8 f7       	brcc	.-10     	; 0xe04 <strnlen_P+0x2>
 e0e:	80 95       	com	r24
 e10:	90 95       	com	r25
 e12:	8e 0f       	add	r24, r30
 e14:	9f 1f       	adc	r25, r31
 e16:	08 95       	ret

00000e18 <strnlen>:
 e18:	fc 01       	movw	r30, r24
 e1a:	61 50       	subi	r22, 0x01	; 1
 e1c:	70 40       	sbci	r23, 0x00	; 0
 e1e:	01 90       	ld	r0, Z+
 e20:	01 10       	cpse	r0, r1
 e22:	d8 f7       	brcc	.-10     	; 0xe1a <strnlen+0x2>
 e24:	80 95       	com	r24
 e26:	90 95       	com	r25
 e28:	8e 0f       	add	r24, r30
 e2a:	9f 1f       	adc	r25, r31
 e2c:	08 95       	ret

00000e2e <strrev>:
 e2e:	dc 01       	movw	r26, r24
 e30:	fc 01       	movw	r30, r24
 e32:	67 2f       	mov	r22, r23
 e34:	71 91       	ld	r23, Z+
 e36:	77 23       	and	r23, r23
 e38:	e1 f7       	brne	.-8      	; 0xe32 <strrev+0x4>
 e3a:	32 97       	sbiw	r30, 0x02	; 2
 e3c:	04 c0       	rjmp	.+8      	; 0xe46 <strrev+0x18>
 e3e:	7c 91       	ld	r23, X
 e40:	6d 93       	st	X+, r22
 e42:	70 83       	st	Z, r23
 e44:	62 91       	ld	r22, -Z
 e46:	ae 17       	cp	r26, r30
 e48:	bf 07       	cpc	r27, r31
 e4a:	c8 f3       	brcs	.-14     	; 0xe3e <strrev+0x10>
 e4c:	08 95       	ret

00000e4e <fputc>:
 e4e:	0f 93       	push	r16
 e50:	1f 93       	push	r17
 e52:	cf 93       	push	r28
 e54:	df 93       	push	r29
 e56:	fb 01       	movw	r30, r22
 e58:	23 81       	ldd	r18, Z+3	; 0x03
 e5a:	21 fd       	sbrc	r18, 1
 e5c:	03 c0       	rjmp	.+6      	; 0xe64 <fputc+0x16>
 e5e:	8f ef       	ldi	r24, 0xFF	; 255
 e60:	9f ef       	ldi	r25, 0xFF	; 255
 e62:	28 c0       	rjmp	.+80     	; 0xeb4 <fputc+0x66>
 e64:	22 ff       	sbrs	r18, 2
 e66:	16 c0       	rjmp	.+44     	; 0xe94 <fputc+0x46>
 e68:	46 81       	ldd	r20, Z+6	; 0x06
 e6a:	57 81       	ldd	r21, Z+7	; 0x07
 e6c:	24 81       	ldd	r18, Z+4	; 0x04
 e6e:	35 81       	ldd	r19, Z+5	; 0x05
 e70:	42 17       	cp	r20, r18
 e72:	53 07       	cpc	r21, r19
 e74:	44 f4       	brge	.+16     	; 0xe86 <fputc+0x38>
 e76:	a0 81       	ld	r26, Z
 e78:	b1 81       	ldd	r27, Z+1	; 0x01
 e7a:	9d 01       	movw	r18, r26
 e7c:	2f 5f       	subi	r18, 0xFF	; 255
 e7e:	3f 4f       	sbci	r19, 0xFF	; 255
 e80:	20 83       	st	Z, r18
 e82:	31 83       	std	Z+1, r19	; 0x01
 e84:	8c 93       	st	X, r24
 e86:	26 81       	ldd	r18, Z+6	; 0x06
 e88:	37 81       	ldd	r19, Z+7	; 0x07
 e8a:	2f 5f       	subi	r18, 0xFF	; 255
 e8c:	3f 4f       	sbci	r19, 0xFF	; 255
 e8e:	26 83       	std	Z+6, r18	; 0x06
 e90:	37 83       	std	Z+7, r19	; 0x07
 e92:	10 c0       	rjmp	.+32     	; 0xeb4 <fputc+0x66>
 e94:	eb 01       	movw	r28, r22
 e96:	09 2f       	mov	r16, r25
 e98:	18 2f       	mov	r17, r24
 e9a:	00 84       	ldd	r0, Z+8	; 0x08
 e9c:	f1 85       	ldd	r31, Z+9	; 0x09
 e9e:	e0 2d       	mov	r30, r0
 ea0:	09 95       	icall
 ea2:	89 2b       	or	r24, r25
 ea4:	e1 f6       	brne	.-72     	; 0xe5e <fputc+0x10>
 ea6:	8e 81       	ldd	r24, Y+6	; 0x06
 ea8:	9f 81       	ldd	r25, Y+7	; 0x07
 eaa:	01 96       	adiw	r24, 0x01	; 1
 eac:	8e 83       	std	Y+6, r24	; 0x06
 eae:	9f 83       	std	Y+7, r25	; 0x07
 eb0:	81 2f       	mov	r24, r17
 eb2:	90 2f       	mov	r25, r16
 eb4:	df 91       	pop	r29
 eb6:	cf 91       	pop	r28
 eb8:	1f 91       	pop	r17
 eba:	0f 91       	pop	r16
 ebc:	08 95       	ret

00000ebe <__ultoa_invert>:
 ebe:	fa 01       	movw	r30, r20
 ec0:	aa 27       	eor	r26, r26
 ec2:	28 30       	cpi	r18, 0x08	; 8
 ec4:	51 f1       	breq	.+84     	; 0xf1a <__ultoa_invert+0x5c>
 ec6:	20 31       	cpi	r18, 0x10	; 16
 ec8:	81 f1       	breq	.+96     	; 0xf2a <__ultoa_invert+0x6c>
 eca:	e8 94       	clt
 ecc:	6f 93       	push	r22
 ece:	6e 7f       	andi	r22, 0xFE	; 254
 ed0:	6e 5f       	subi	r22, 0xFE	; 254
 ed2:	7f 4f       	sbci	r23, 0xFF	; 255
 ed4:	8f 4f       	sbci	r24, 0xFF	; 255
 ed6:	9f 4f       	sbci	r25, 0xFF	; 255
 ed8:	af 4f       	sbci	r26, 0xFF	; 255
 eda:	b1 e0       	ldi	r27, 0x01	; 1
 edc:	3e d0       	rcall	.+124    	; 0xf5a <__ultoa_invert+0x9c>
 ede:	b4 e0       	ldi	r27, 0x04	; 4
 ee0:	3c d0       	rcall	.+120    	; 0xf5a <__ultoa_invert+0x9c>
 ee2:	67 0f       	add	r22, r23
 ee4:	78 1f       	adc	r23, r24
 ee6:	89 1f       	adc	r24, r25
 ee8:	9a 1f       	adc	r25, r26
 eea:	a1 1d       	adc	r26, r1
 eec:	68 0f       	add	r22, r24
 eee:	79 1f       	adc	r23, r25
 ef0:	8a 1f       	adc	r24, r26
 ef2:	91 1d       	adc	r25, r1
 ef4:	a1 1d       	adc	r26, r1
 ef6:	6a 0f       	add	r22, r26
 ef8:	71 1d       	adc	r23, r1
 efa:	81 1d       	adc	r24, r1
 efc:	91 1d       	adc	r25, r1
 efe:	a1 1d       	adc	r26, r1
 f00:	20 d0       	rcall	.+64     	; 0xf42 <__ultoa_invert+0x84>
 f02:	09 f4       	brne	.+2      	; 0xf06 <__ultoa_invert+0x48>
 f04:	68 94       	set
 f06:	3f 91       	pop	r19
 f08:	2a e0       	ldi	r18, 0x0A	; 10
 f0a:	26 9f       	mul	r18, r22
 f0c:	11 24       	eor	r1, r1
 f0e:	30 19       	sub	r19, r0
 f10:	30 5d       	subi	r19, 0xD0	; 208
 f12:	31 93       	st	Z+, r19
 f14:	de f6       	brtc	.-74     	; 0xecc <__ultoa_invert+0xe>
 f16:	cf 01       	movw	r24, r30
 f18:	08 95       	ret
 f1a:	46 2f       	mov	r20, r22
 f1c:	47 70       	andi	r20, 0x07	; 7
 f1e:	40 5d       	subi	r20, 0xD0	; 208
 f20:	41 93       	st	Z+, r20
 f22:	b3 e0       	ldi	r27, 0x03	; 3
 f24:	0f d0       	rcall	.+30     	; 0xf44 <__ultoa_invert+0x86>
 f26:	c9 f7       	brne	.-14     	; 0xf1a <__ultoa_invert+0x5c>
 f28:	f6 cf       	rjmp	.-20     	; 0xf16 <__ultoa_invert+0x58>
 f2a:	46 2f       	mov	r20, r22
 f2c:	4f 70       	andi	r20, 0x0F	; 15
 f2e:	40 5d       	subi	r20, 0xD0	; 208
 f30:	4a 33       	cpi	r20, 0x3A	; 58
 f32:	18 f0       	brcs	.+6      	; 0xf3a <__ultoa_invert+0x7c>
 f34:	49 5d       	subi	r20, 0xD9	; 217
 f36:	31 fd       	sbrc	r19, 1
 f38:	40 52       	subi	r20, 0x20	; 32
 f3a:	41 93       	st	Z+, r20
 f3c:	02 d0       	rcall	.+4      	; 0xf42 <__ultoa_invert+0x84>
 f3e:	a9 f7       	brne	.-22     	; 0xf2a <__ultoa_invert+0x6c>
 f40:	ea cf       	rjmp	.-44     	; 0xf16 <__ultoa_invert+0x58>
 f42:	b4 e0       	ldi	r27, 0x04	; 4
 f44:	a6 95       	lsr	r26
 f46:	97 95       	ror	r25
 f48:	87 95       	ror	r24
 f4a:	77 95       	ror	r23
 f4c:	67 95       	ror	r22
 f4e:	ba 95       	dec	r27
 f50:	c9 f7       	brne	.-14     	; 0xf44 <__ultoa_invert+0x86>
 f52:	00 97       	sbiw	r24, 0x00	; 0
 f54:	61 05       	cpc	r22, r1
 f56:	71 05       	cpc	r23, r1
 f58:	08 95       	ret
 f5a:	9b 01       	movw	r18, r22
 f5c:	ac 01       	movw	r20, r24
 f5e:	0a 2e       	mov	r0, r26
 f60:	06 94       	lsr	r0
 f62:	57 95       	ror	r21
 f64:	47 95       	ror	r20
 f66:	37 95       	ror	r19
 f68:	27 95       	ror	r18
 f6a:	ba 95       	dec	r27
 f6c:	c9 f7       	brne	.-14     	; 0xf60 <__ultoa_invert+0xa2>
 f6e:	62 0f       	add	r22, r18
 f70:	73 1f       	adc	r23, r19
 f72:	84 1f       	adc	r24, r20
 f74:	95 1f       	adc	r25, r21
 f76:	a0 1d       	adc	r26, r0
 f78:	08 95       	ret

00000f7a <__prologue_saves__>:
 f7a:	2f 92       	push	r2
 f7c:	3f 92       	push	r3
 f7e:	4f 92       	push	r4
 f80:	5f 92       	push	r5
 f82:	6f 92       	push	r6
 f84:	7f 92       	push	r7
 f86:	8f 92       	push	r8
 f88:	9f 92       	push	r9
 f8a:	af 92       	push	r10
 f8c:	bf 92       	push	r11
 f8e:	cf 92       	push	r12
 f90:	df 92       	push	r13
 f92:	ef 92       	push	r14
 f94:	ff 92       	push	r15
 f96:	0f 93       	push	r16
 f98:	1f 93       	push	r17
 f9a:	cf 93       	push	r28
 f9c:	df 93       	push	r29
 f9e:	cd b7       	in	r28, 0x3d	; 61
 fa0:	de b7       	in	r29, 0x3e	; 62
 fa2:	ca 1b       	sub	r28, r26
 fa4:	db 0b       	sbc	r29, r27
 fa6:	cd bf       	out	0x3d, r28	; 61
 fa8:	de bf       	out	0x3e, r29	; 62
 faa:	09 94       	ijmp

00000fac <__epilogue_restores__>:
 fac:	2a 88       	ldd	r2, Y+18	; 0x12
 fae:	39 88       	ldd	r3, Y+17	; 0x11
 fb0:	48 88       	ldd	r4, Y+16	; 0x10
 fb2:	5f 84       	ldd	r5, Y+15	; 0x0f
 fb4:	6e 84       	ldd	r6, Y+14	; 0x0e
 fb6:	7d 84       	ldd	r7, Y+13	; 0x0d
 fb8:	8c 84       	ldd	r8, Y+12	; 0x0c
 fba:	9b 84       	ldd	r9, Y+11	; 0x0b
 fbc:	aa 84       	ldd	r10, Y+10	; 0x0a
 fbe:	b9 84       	ldd	r11, Y+9	; 0x09
 fc0:	c8 84       	ldd	r12, Y+8	; 0x08
 fc2:	df 80       	ldd	r13, Y+7	; 0x07
 fc4:	ee 80       	ldd	r14, Y+6	; 0x06
 fc6:	fd 80       	ldd	r15, Y+5	; 0x05
 fc8:	0c 81       	ldd	r16, Y+4	; 0x04
 fca:	1b 81       	ldd	r17, Y+3	; 0x03
 fcc:	aa 81       	ldd	r26, Y+2	; 0x02
 fce:	b9 81       	ldd	r27, Y+1	; 0x01
 fd0:	ce 0f       	add	r28, r30
 fd2:	d1 1d       	adc	r29, r1
 fd4:	cd bf       	out	0x3d, r28	; 61
 fd6:	de bf       	out	0x3e, r29	; 62
 fd8:	ed 01       	movw	r28, r26
 fda:	08 95       	ret

00000fdc <_exit>:
 fdc:	f8 94       	cli

00000fde <__stop_program>:
 fde:	ff cf       	rjmp	.-2      	; 0xfde <__stop_program>
