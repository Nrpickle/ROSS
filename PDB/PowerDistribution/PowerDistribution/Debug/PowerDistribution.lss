
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00802000  00001b64  00001bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  008020f6  008020f6  00001cee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049f5  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000938  00000000  00000000  000068e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000872  00000000  00000000  00007219  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ec  00000000  00000000  00007a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023de  00000000  00000000  00007f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e54  00000000  00000000  0000a356  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000b1aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_7>
      20:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_8>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_12>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_18>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_30>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_35>
      90:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_36>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_38>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	cd bf       	out	0x3d, r28	; 61
      b4:	df e2       	ldi	r29, 0x2F	; 47
      b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
      b8:	10 e2       	ldi	r17, 0x20	; 32
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b0 e2       	ldi	r27, 0x20	; 32
      be:	e4 e6       	ldi	r30, 0x64	; 100
      c0:	fb e1       	ldi	r31, 0x1B	; 27
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a6 3f       	cpi	r26, 0xF6	; 246
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	21 e2       	ldi	r18, 0x21	; 33
      d0:	a6 ef       	ldi	r26, 0xF6	; 246
      d2:	b0 e2       	ldi	r27, 0x20	; 32
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	ad 32       	cpi	r26, 0x2D	; 45
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 bc 04 	call	0x978	; 0x978 <main>
      e2:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
      ea:	e0 e5       	ldi	r30, 0x50	; 80
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	8b e4       	ldi	r24, 0x4B	; 75
      f0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
      f2:	80 81       	ld	r24, Z
      f4:	88 60       	ori	r24, 0x08	; 8
      f6:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
      f8:	81 81       	ldd	r24, Z+1	; 0x01
      fa:	83 fd       	sbrc	r24, 3
      fc:	09 c0       	rjmp	.+18     	; 0x110 <_Z27configureExternalOscillatorv+0x26>
      fe:	a0 e4       	ldi	r26, 0x40	; 64
     100:	b6 e0       	ldi	r27, 0x06	; 6
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	15 96       	adiw	r26, 0x05	; 5
     106:	9c 93       	st	X, r25
     108:	15 97       	sbiw	r26, 0x05	; 5
     10a:	81 81       	ldd	r24, Z+1	; 0x01
     10c:	83 ff       	sbrs	r24, 3
     10e:	fa cf       	rjmp	.-12     	; 0x104 <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
     116:	88 ed       	ldi	r24, 0xD8	; 216
     118:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
     11a:	e0 e5       	ldi	r30, 0x50	; 80
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	88 ec       	ldi	r24, 0xC8	; 200
     120:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
     122:	80 81       	ld	r24, Z
     124:	80 61       	ori	r24, 0x10	; 16
     126:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	84 fd       	sbrc	r24, 4
     12c:	09 c0       	rjmp	.+18     	; 0x140 <_Z27configureExternalOscillatorv+0x56>
     12e:	a0 e4       	ldi	r26, 0x40	; 64
     130:	b6 e0       	ldi	r27, 0x06	; 6
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	15 96       	adiw	r26, 0x05	; 5
     136:	9c 93       	st	X, r25
     138:	15 97       	sbiw	r26, 0x05	; 5
     13a:	81 81       	ldd	r24, Z+1	; 0x01
     13c:	84 ff       	sbrs	r24, 4
     13e:	fa cf       	rjmp	.-12     	; 0x134 <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
     146:	88 ed       	ldi	r24, 0xD8	; 216
     148:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
     14a:	e0 e4       	ldi	r30, 0x40	; 64
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
     150:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	80 83       	st	Z, r24
     156:	08 95       	ret

00000158 <_Z11configureIOv>:
	
	
}

void configureIO(void){
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
     15c:	e0 e4       	ldi	r30, 0x40	; 64
     15e:	f6 e0       	ldi	r31, 0x06	; 6
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = PIN0_bm;
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	91 83       	std	Z+1, r25	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
     168:	20 e2       	ldi	r18, 0x20	; 32
     16a:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
     16c:	44 e0       	ldi	r20, 0x04	; 4
     16e:	42 83       	std	Z+2, r20	; 0x02
	PORTC.DIRCLR = PIN3_bm;
     170:	38 e0       	ldi	r19, 0x08	; 8
     172:	32 83       	std	Z+2, r19	; 0x02
	
	//Set pullups on the setting switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
     174:	38 e1       	ldi	r19, 0x18	; 24
     176:	32 8b       	std	Z+18, r19	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
     178:	33 8b       	std	Z+19, r19	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
     17a:	c0 e0       	ldi	r28, 0x00	; 0
     17c:	d6 e0       	ldi	r29, 0x06	; 6
     17e:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
     180:	8a 83       	std	Y+2, r24	; 0x02
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
     182:	a0 e6       	ldi	r26, 0x60	; 96
     184:	b6 e0       	ldi	r27, 0x06	; 6
     186:	12 96       	adiw	r26, 0x02	; 2
     188:	9c 93       	st	X, r25
     18a:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN1_bm;  //Voltage Sense - Electronics Battery
     18c:	12 96       	adiw	r26, 0x02	; 2
     18e:	8c 93       	st	X, r24
     190:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN2_bm;  //Voltage Sense - Rear Battery
     192:	12 96       	adiw	r26, 0x02	; 2
     194:	4c 93       	st	X, r20
     196:	12 97       	sbiw	r26, 0x02	; 2

	//Set the Current Sense Fault detect pin to be an input
	PORTC.DIRCLR = PIN4_bm;
     198:	30 e1       	ldi	r19, 0x10	; 16
     19a:	32 83       	std	Z+2, r19	; 0x02
	
	//Setup the RSSI input
	PORTA.DIRCLR = PIN2_bm;				//Set the RSSI pin to be an input
     19c:	4a 83       	std	Y+2, r20	; 0x02
	
	//Setup the steering signal I/O
	PORTD.DIRCLR = PIN4_bm;  //Set the STEER_SIG_3v3 pin as an input
     19e:	12 96       	adiw	r26, 0x02	; 2
     1a0:	3c 93       	st	X, r19
     1a2:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRSET = PIN5_bm;	 //Set the STEER_SIG_3v3_PROCESSED pin to be an output
     1a4:	11 96       	adiw	r26, 0x01	; 1
     1a6:	2c 93       	st	X, r18
     1a8:	11 97       	sbiw	r26, 0x01	; 1

	//Setup steering control PWM interrupts
	PORTD.INTCTRL  = PMIC_MEDLVLEN_bm;	//Set PORTC's interrupt to be medium level
     1aa:	19 96       	adiw	r26, 0x09	; 9
     1ac:	8c 93       	st	X, r24
     1ae:	19 97       	sbiw	r26, 0x09	; 9
	PORTD.INTMASK  = PIN4_bm;			//Configure the PWM input pin as an interrupt
     1b0:	1a 96       	adiw	r26, 0x0a	; 10
     1b2:	3c 93       	st	X, r19
     1b4:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;  //Init the pin as a rising edge interrupt only
     1b6:	54 96       	adiw	r26, 0x14	; 20
     1b8:	9c 93       	st	X, r25
     1ba:	54 97       	sbiw	r26, 0x14	; 20
	
	//Initialize output values
	STATUS_CLR();
     1bc:	96 83       	std	Z+6, r25	; 0x06
	ERROR_CLR();
     1be:	86 83       	std	Z+6, r24	; 0x06
	
	REAR_RELAY_CLR();
     1c0:	26 83       	std	Z+6, r18	; 0x06
	
	STEER_SIG_CLR();	
     1c2:	16 96       	adiw	r26, 0x06	; 6
     1c4:	2c 93       	st	X, r18
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <__vector_35>:
if timer has overflown, then we missed the appropriate edge, throw out our data
If timer is good, calculate PWM high time
Store in global variable

*/
ISR(PORTD_INT_vect){
     1cc:	1f 92       	push	r1
     1ce:	0f 92       	push	r0
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	0f 92       	push	r0
     1d4:	11 24       	eor	r1, r1
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
	PORTD.INTFLAGS = PIN4_bm;
     1da:	80 e1       	ldi	r24, 0x10	; 16
     1dc:	80 93 6c 06 	sts	0x066C, r24

	
	if(PWMMeasuringStatus == NOT_MEASURING){  //We encountered the first part of the wave
     1e0:	80 91 00 20 	lds	r24, 0x2000
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	81 f4       	brne	.+32     	; 0x208 <__vector_35+0x3c>
		TCC5.CNT = 0;	//Start counting
     1e8:	10 92 60 08 	sts	0x0860, r1
     1ec:	10 92 61 08 	sts	0x0861, r1
		PWMMeasuringStatus = MEASURING;
     1f0:	10 92 00 20 	sts	0x2000, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f4:	87 ec       	ldi	r24, 0xC7	; 199
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <__vector_35+0x2c>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <__vector_35+0x32>
     1fe:	00 00       	nop
		
		_delay_us(25);  //Delay ~6-7 clock cycles
		
		PORTD.PIN4CTRL = PORT_ISC_FALLING_gc; //Set the interrupt to wait for a falling wave (end of signal)
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 74 06 	sts	0x0674, r24
     206:	0f c0       	rjmp	.+30     	; 0x226 <__vector_35+0x5a>
	}
	else { //We finished encountering the wave (process the data)
		steeringPWMPeriod = TCC5.CNT * 2;
     208:	80 91 60 08 	lds	r24, 0x0860
     20c:	90 91 61 08 	lds	r25, 0x0861
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	80 93 13 21 	sts	0x2113, r24
     218:	90 93 14 21 	sts	0x2114, r25
		PWMMeasuringStatus = NOT_MEASURING;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 00 20 	sts	0x2000, r24
		
		PORTD.PIN4CTRL = PORT_ISC_RISING_gc; 
     222:	80 93 74 06 	sts	0x0674, r24
	}
	
}
     226:	9f 91       	pop	r25
     228:	8f 91       	pop	r24
     22a:	0f 90       	pop	r0
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	0f 90       	pop	r0
     230:	1f 90       	pop	r1
     232:	18 95       	reti

00000234 <__vector_30>:

//This function will be called on the edges of the RSSI signal 
//*CURRENTLY DISABLED*
ISR(PORTA_INT_vect){
     234:	1f 92       	push	r1
     236:	0f 92       	push	r0
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	0f 92       	push	r0
     23c:	11 24       	eor	r1, r1
     23e:	8f 93       	push	r24
     240:	9f 93       	push	r25
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
	cli();
     246:	f8 94       	cli
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
     248:	84 e0       	ldi	r24, 0x04	; 4
     24a:	80 93 0c 06 	sts	0x060C, r24
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
     24e:	80 91 24 21 	lds	r24, 0x2124
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	61 f4       	brne	.+24     	; 0x26e <__vector_30+0x3a>
     256:	80 91 08 06 	lds	r24, 0x0608
     25a:	82 fd       	sbrc	r24, 2
     25c:	0b c0       	rjmp	.+22     	; 0x274 <__vector_30+0x40>
     25e:	1f c0       	rjmp	.+62     	; 0x29e <__vector_30+0x6a>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     260:	80 91 08 06 	lds	r24, 0x0608
     264:	82 ff       	sbrs	r24, 2
     266:	0d c0       	rjmp	.+26     	; 0x282 <__vector_30+0x4e>
     268:	1a c0       	rjmp	.+52     	; 0x29e <__vector_30+0x6a>
		ERROR_SET();
	}
	
	
	//_delay_us(200);
	sei();
     26a:	78 94       	sei
     26c:	1c c0       	rjmp	.+56     	; 0x2a6 <__vector_30+0x72>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     26e:	88 23       	and	r24, r24
     270:	b9 f3       	breq	.-18     	; 0x260 <__vector_30+0x2c>
     272:	15 c0       	rjmp	.+42     	; 0x29e <__vector_30+0x6a>
	cli();
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
		RTC.CNT = 0;		//We want to start counting the counter now
     274:	10 92 08 04 	sts	0x0408, r1
     278:	10 92 09 04 	sts	0x0409, r1
		RSSI.measuring = MEASURING;
     27c:	10 92 24 21 	sts	0x2124, r1
     280:	f4 cf       	rjmp	.-24     	; 0x26a <__vector_30+0x36>
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
		RSSI.countDifference = RTC.CNT;
     282:	80 91 08 04 	lds	r24, 0x0408
     286:	90 91 09 04 	lds	r25, 0x0409
     28a:	e3 e2       	ldi	r30, 0x23	; 35
     28c:	f1 e2       	ldi	r31, 0x21	; 33
     28e:	84 83       	std	Z+4, r24	; 0x04
     290:	95 83       	std	Z+5, r25	; 0x05
		
		RSSI.sampleCount++;
     292:	86 81       	ldd	r24, Z+6	; 0x06
     294:	97 81       	ldd	r25, Z+7	; 0x07
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	86 83       	std	Z+6, r24	; 0x06
     29a:	97 83       	std	Z+7, r25	; 0x07
     29c:	e6 cf       	rjmp	.-52     	; 0x26a <__vector_30+0x36>
	}
	else {
		ERROR_SET();
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	80 93 45 06 	sts	0x0645, r24
     2a4:	e2 cf       	rjmp	.-60     	; 0x26a <__vector_30+0x36>
	}
	
	
	//_delay_us(200);
	sei();
}
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <_Z21configureTimerCounterv>:
1S    = 0x7A12

*/
void configureTimerCounter(){
	//Configure the accurate reporting timer
	TCC4.CTRLA = TC45_CLKSEL_DIV1024_gc;	//Configure a 1024 prescaler (we want very broad timing here, exact precision isn't required)
     2b8:	e0 e0       	ldi	r30, 0x00	; 0
     2ba:	f8 e0       	ldi	r31, 0x08	; 8
     2bc:	87 e0       	ldi	r24, 0x07	; 7
     2be:	80 83       	st	Z, r24
	TCC4.PER = TC_1024_500MS;               //500mS delay
     2c0:	89 e0       	ldi	r24, 0x09	; 9
     2c2:	9d e3       	ldi	r25, 0x3D	; 61
     2c4:	86 a3       	std	Z+38, r24	; 0x26
     2c6:	97 a3       	std	Z+39, r25	; 0x27
											//Default delay value. Reference pre-calculated table up above for more information
	TCC4.CTRLB = TC45_WGMODE_NORMAL_gc;		//Configure the timer for Normal mode operation
     2c8:	11 82       	std	Z+1, r1	; 0x01
	TCC4.INTCTRLA = TC45_OVFINTLVL_LO_gc;	//Set a low priority overflow interrupt
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	86 83       	std	Z+6, r24	; 0x06

	//Configure the PWM sense module
	//Input capture described on (168)
	TCC5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     2ce:	e0 e4       	ldi	r30, 0x40	; 64
     2d0:	f8 e0       	ldi	r31, 0x08	; 8
     2d2:	85 e0       	ldi	r24, 0x05	; 5
     2d4:	80 83       	st	Z, r24
	TCC5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     2d6:	11 82       	std	Z+1, r1	; 0x01
	TCC5.PER   = 12000;						//This is set to be 20% longer than the 20mS cycle should be
     2d8:	20 ee       	ldi	r18, 0xE0	; 224
     2da:	3e e2       	ldi	r19, 0x2E	; 46
     2dc:	26 a3       	std	Z+38, r18	; 0x26
     2de:	37 a3       	std	Z+39, r19	; 0x27
	
	//Is the following necessary?
	TCC5.INTCTRLA = TC45_OVFINTLVL_MED_gc;	//Set a medium priority overflow interrupt (we want the PWM generation to remain stable)
     2e0:	92 e0       	ldi	r25, 0x02	; 2
     2e2:	96 83       	std	Z+6, r25	; 0x06
											//as it will only take a few clock cycles compared to this interrupt
	
	//Configure the PWM generation module
	TCD5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     2e4:	e0 e4       	ldi	r30, 0x40	; 64
     2e6:	f9 e0       	ldi	r31, 0x09	; 9
     2e8:	80 83       	st	Z, r24
	TCD5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     2ea:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PER   = 10000;						//We want to establish a 50Hz control loop here (20ms period)
     2ec:	80 e1       	ldi	r24, 0x10	; 16
     2ee:	97 e2       	ldi	r25, 0x27	; 39
     2f0:	86 a3       	std	Z+38, r24	; 0x26
     2f2:	97 a3       	std	Z+39, r25	; 0x27
	TCD5.INTCTRLA = TC45_OVFINTLVL_HI_gc;	//Set a high priority overflow interrupt
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	86 83       	std	Z+6, r24	; 0x06
	TCD5.INTCTRLB = TC45_CCAINTLVL_HI_gc;   
     2f8:	87 83       	std	Z+7, r24	; 0x07
	
	TCD5.CCA = 950;		//Initial value for compare
     2fa:	86 eb       	ldi	r24, 0xB6	; 182
     2fc:	93 e0       	ldi	r25, 0x03	; 3
     2fe:	80 a7       	std	Z+40, r24	; 0x28
     300:	91 a7       	std	Z+41, r25	; 0x29
     302:	08 95       	ret

00000304 <__vector_18>:
}

//This triggers when a PWM signal hasn't been detected for the past ~24mS
ISR (TCC5_OVF_vect){
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
     312:	ef 93       	push	r30
     314:	ff 93       	push	r31
	TCC5.INTFLAGS |= 0b1;  //Reset interrupt flag
     316:	e0 e4       	ldi	r30, 0x40	; 64
     318:	f8 e0       	ldi	r31, 0x08	; 8
     31a:	84 85       	ldd	r24, Z+12	; 0x0c
     31c:	81 60       	ori	r24, 0x01	; 1
     31e:	84 87       	std	Z+12, r24	; 0x0c
	
	PWMMeasuringStatus = NOT_MEASURING;		//Reset the "NOT MEASURING" flag
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	80 93 00 20 	sts	0x2000, r24
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;	//Reconfigure the port to wait for a high pulse
     326:	80 93 74 06 	sts	0x0674, r24
	
	steeringPWMPeriod = 1500;				//Set the steering PWM period to a stable "standby position"
     32a:	8c ed       	ldi	r24, 0xDC	; 220
     32c:	95 e0       	ldi	r25, 0x05	; 5
     32e:	80 93 13 21 	sts	0x2113, r24
     332:	90 93 14 21 	sts	0x2114, r25
}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <__vector_38>:
/*
Compare vector A for the PWM generation module
This situation ------\______

*/
ISR (TCD5_CCA_vect){
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	8f 93       	push	r24
	STEER_SIG_CLR();
     354:	80 e2       	ldi	r24, 0x20	; 32
     356:	80 93 66 06 	sts	0x0666, r24
	//STATUS_SET();
}
     35a:	8f 91       	pop	r24
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <__vector_36>:
This situation: _____/-----

*/


ISR (TCD5_OVF_vect){
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	8f 93       	push	r24
     372:	ef 93       	push	r30
     374:	ff 93       	push	r31
	STEER_SIG_SET();
     376:	80 e2       	ldi	r24, 0x20	; 32
     378:	80 93 65 06 	sts	0x0665, r24
	
	TCD5.INTFLAGS |= 0b1;
     37c:	e0 e4       	ldi	r30, 0x40	; 64
     37e:	f9 e0       	ldi	r31, 0x09	; 9
     380:	84 85       	ldd	r24, Z+12	; 0x0c
     382:	81 60       	ori	r24, 0x01	; 1
     384:	84 87       	std	Z+12, r24	; 0x0c
	
	TCD5.CNT = 0;
     386:	10 a2       	std	Z+32, r1	; 0x20
     388:	11 a2       	std	Z+33, r1	; 0x21
}
     38a:	ff 91       	pop	r31
     38c:	ef 91       	pop	r30
     38e:	8f 91       	pop	r24
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <__vector_12>:

//Handles compare vector for T/C 4
ISR (TCC4_OVF_vect){
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	2f 93       	push	r18
     3a6:	3f 93       	push	r19
     3a8:	4f 93       	push	r20
     3aa:	5f 93       	push	r21
     3ac:	6f 93       	push	r22
     3ae:	7f 93       	push	r23
     3b0:	8f 93       	push	r24
     3b2:	9f 93       	push	r25
     3b4:	af 93       	push	r26
     3b6:	ef 93       	push	r30
     3b8:	ff 93       	push	r31
	++longCounter;
     3ba:	20 91 15 21 	lds	r18, 0x2115
     3be:	30 91 16 21 	lds	r19, 0x2116
     3c2:	40 91 17 21 	lds	r20, 0x2117
     3c6:	50 91 18 21 	lds	r21, 0x2118
     3ca:	60 91 19 21 	lds	r22, 0x2119
     3ce:	70 91 1a 21 	lds	r23, 0x211A
     3d2:	80 91 1b 21 	lds	r24, 0x211B
     3d6:	90 91 1c 21 	lds	r25, 0x211C
     3da:	a1 e0       	ldi	r26, 0x01	; 1
     3dc:	0e 94 9d 0a 	call	0x153a	; 0x153a <__adddi3_s8>
     3e0:	20 93 15 21 	sts	0x2115, r18
     3e4:	30 93 16 21 	sts	0x2116, r19
     3e8:	40 93 17 21 	sts	0x2117, r20
     3ec:	50 93 18 21 	sts	0x2118, r21
     3f0:	60 93 19 21 	sts	0x2119, r22
     3f4:	70 93 1a 21 	sts	0x211A, r23
     3f8:	80 93 1b 21 	sts	0x211B, r24
     3fc:	90 93 1c 21 	sts	0x211C, r25
	
	TCC4.INTFLAGS |= 0b1;  //Reset overflow interrupt
     400:	e0 e0       	ldi	r30, 0x00	; 0
     402:	f8 e0       	ldi	r31, 0x08	; 8
     404:	84 85       	ldd	r24, Z+12	; 0x0c
     406:	81 60       	ori	r24, 0x01	; 1
     408:	84 87       	std	Z+12, r24	; 0x0c
	
	broadcastStatus = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 1d 21 	sts	0x211D, r24
}
     410:	ff 91       	pop	r31
     412:	ef 91       	pop	r30
     414:	af 91       	pop	r26
     416:	9f 91       	pop	r25
     418:	8f 91       	pop	r24
     41a:	7f 91       	pop	r23
     41c:	6f 91       	pop	r22
     41e:	5f 91       	pop	r21
     420:	4f 91       	pop	r20
     422:	3f 91       	pop	r19
     424:	2f 91       	pop	r18
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <_Z12configureRTCv>:

/*
The real time clock is configured to handle XTend RSSI Interpret
*/
void configureRTC(){
	RTC.CTRL = RTC_CORREN_bm | RTC_PRESCALER_DIV1_gc;		//Enable the RTC correction process, and the RTC itself with no prescaler
     430:	e0 e0       	ldi	r30, 0x00	; 0
     432:	f4 e0       	ldi	r31, 0x04	; 4
     434:	89 e0       	ldi	r24, 0x09	; 9
     436:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_COMPINTLVL_LO_gc | RTC_OVFINTLVL_LO_gc; //Enable the overflow and 
     438:	85 e0       	ldi	r24, 0x05	; 5
     43a:	82 83       	std	Z+2, r24	; 0x02
	
    OSC.CTRL |= OSC_RC32KEN_bm;								//Enable the 32.768kHz internal oscillator
     43c:	a0 e5       	ldi	r26, 0x50	; 80
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	8c 91       	ld	r24, X
     442:	84 60       	ori	r24, 0x04	; 4
     444:	8c 93       	st	X, r24
     446:	8f e7       	ldi	r24, 0x7F	; 127
     448:	9c e0       	ldi	r25, 0x0C	; 12
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <_Z12configureRTCv+0x1a>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <_Z12configureRTCv+0x20>
     450:	00 00       	nop
	
	_delay_us(400);											//Wait for the oscillator to stabalize.
	
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC32_gc;					//Set the RTC input as the 32.768kHz internal oscillator
     452:	a0 e4       	ldi	r26, 0x40	; 64
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	8c e0       	ldi	r24, 0x0C	; 12
     458:	13 96       	adiw	r26, 0x03	; 3
     45a:	8c 93       	st	X, r24
     45c:	13 97       	sbiw	r26, 0x03	; 3
	CLK.RTCCTRL |= CLK_RTCEN_bm;							//Enable the clock input
     45e:	13 96       	adiw	r26, 0x03	; 3
     460:	8c 91       	ld	r24, X
     462:	13 97       	sbiw	r26, 0x03	; 3
     464:	81 60       	ori	r24, 0x01	; 1
     466:	13 96       	adiw	r26, 0x03	; 3
     468:	8c 93       	st	X, r24
	
	//Testing setup code
	RTC.COMP = 16384; //~1 second? Assuming 32.768 KHz
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e4       	ldi	r25, 0x40	; 64
     46e:	84 87       	std	Z+12, r24	; 0x0c
     470:	95 87       	std	Z+13, r25	; 0x0d
	RTC.PER = 0xFF00;  //No tengo nuguien idea
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	9f ef       	ldi	r25, 0xFF	; 255
     476:	82 87       	std	Z+10, r24	; 0x0a
     478:	93 87       	std	Z+11, r25	; 0x0b
     47a:	08 95       	ret

0000047c <__vector_7>:

}

ISR(RTC_OVF_vect){
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
	
}
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <__vector_8>:

ISR(RTC_COMP_vect){
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	8f 93       	push	r24
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
	
	RTC.CNT = 0;
     4a0:	e0 e0       	ldi	r30, 0x00	; 0
     4a2:	f4 e0       	ldi	r31, 0x04	; 4
     4a4:	10 86       	std	Z+8, r1	; 0x08
     4a6:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTFLAGS = 0x02;
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	83 83       	std	Z+3, r24	; 0x03
	
	RSSI.countDifference = 0;
     4ac:	10 92 27 21 	sts	0x2127, r1
     4b0:	10 92 28 21 	sts	0x2128, r1
}
     4b4:	ff 91       	pop	r31
     4b6:	ef 91       	pop	r30
     4b8:	8f 91       	pop	r24
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <_Z12configureXCLv>:

void configureXCL(){
     4c4:	08 95       	ret

000004c6 <_Z19ReadCalibrationByteh>:
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     4c6:	aa ec       	ldi	r26, 0xCA	; 202
     4c8:	b1 e0       	ldi	r27, 0x01	; 1
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     4ce:	e8 2f       	mov	r30, r24
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     4d4:	1c 92       	st	X, r1

	return( result );
}
     4d6:	08 95       	ret

000004d8 <_Z13configureADCsv>:

#include "config.h"

extern RSSI_type RSSI;

void configureADCs(){
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
	// Batt Input Voltage
	// Halve Input
	//Set to single ended input
	//Set to 12-bit mode
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
     4dc:	c0 e0       	ldi	r28, 0x00	; 0
     4de:	d2 e0       	ldi	r29, 0x02	; 2
     4e0:	82 e1       	ldi	r24, 0x12	; 18
     4e2:	89 83       	std	Y+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
     4e4:	80 e2       	ldi	r24, 0x20	; 32
     4e6:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; //Disable events
     4e8:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
     4ea:	87 e0       	ldi	r24, 0x07	; 7
     4ec:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
     4ee:	80 e2       	ldi	r24, 0x20	; 32
     4f0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z19ReadCalibrationByteh>
     4f4:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
     4f6:	81 e2       	ldi	r24, 0x21	; 33
     4f8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z19ReadCalibrationByteh>
     4fc:	8d 87       	std	Y+13, r24	; 0x0d
     4fe:	8f e7       	ldi	r24, 0x7F	; 127
     500:	9c e0       	ldi	r25, 0x0C	; 12
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <_Z13configureADCsv+0x2a>
     506:	00 c0       	rjmp	.+0      	; 0x508 <_Z13configureADCsv+0x30>
     508:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	88 a3       	std	Y+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
     50e:	81 e4       	ldi	r24, 0x41	; 65
     510:	89 a3       	std	Y+33, r24	; 0x21
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
     512:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	88 83       	st	Y, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
	//ADCA.CTRLA |= ADC_CH8START_bm;
	*/	
}	
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <_Z17ReadSignatureBytej>:
	return( result );
}

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     51e:	aa ec       	ldi	r26, 0xCA	; 202
     520:	b1 e0       	ldi	r27, 0x01	; 1
     522:	22 e0       	ldi	r18, 0x02	; 2
     524:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     526:	fc 01       	movw	r30, r24
     528:	84 91       	lpm	r24, Z
	//  __asm__ ("lpm \n  mov %0, r0 \n" : "=r" (Result) : "z" (Address) : "r0");
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     52a:	1c 92       	st	X, r1
	return Result;
}
     52c:	08 95       	ret

0000052e <_Z21configureSerialNumberv>:
/*

Note: This function requires serial and should be called after configureUSART()

*/
void configureSerialNumber(){
     52e:	2f 92       	push	r2
     530:	3f 92       	push	r3
     532:	4f 92       	push	r4
     534:	5f 92       	push	r5
     536:	6f 92       	push	r6
     538:	7f 92       	push	r7
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
	DeviceSignature[ 0] = ReadSignatureByte(LOTNUM0);
     552:	88 e0       	ldi	r24, 0x08	; 8
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     55a:	c8 e0       	ldi	r28, 0x08	; 8
     55c:	d1 e2       	ldi	r29, 0x21	; 33
     55e:	88 83       	st	Y, r24
	DeviceSignature[ 1] = ReadSignatureByte(LOTNUM1);
     560:	89 e0       	ldi	r24, 0x09	; 9
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     568:	89 83       	std	Y+1, r24	; 0x01
	DeviceSignature[ 2] = ReadSignatureByte(LOTNUM2);
     56a:	8a e0       	ldi	r24, 0x0A	; 10
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     572:	8a 83       	std	Y+2, r24	; 0x02
	DeviceSignature[ 3] = ReadSignatureByte(LOTNUM3);
     574:	8b e0       	ldi	r24, 0x0B	; 11
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     57c:	8b 83       	std	Y+3, r24	; 0x03
	DeviceSignature[ 4] = ReadSignatureByte(LOTNUM4);
     57e:	8c e0       	ldi	r24, 0x0C	; 12
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     586:	8c 83       	std	Y+4, r24	; 0x04
	DeviceSignature[ 5] = ReadSignatureByte(LOTNUM5);
     588:	8d e0       	ldi	r24, 0x0D	; 13
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     590:	8d 83       	std	Y+5, r24	; 0x05
	DeviceSignature[ 6] = ReadSignatureByte(WAFNUM );
     592:	80 e1       	ldi	r24, 0x10	; 16
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     59a:	8e 83       	std	Y+6, r24	; 0x06
	DeviceSignature[ 7] = ReadSignatureByte(COORDX0);
     59c:	82 e1       	ldi	r24, 0x12	; 18
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     5a4:	8f 83       	std	Y+7, r24	; 0x07
	DeviceSignature[ 8] = ReadSignatureByte(COORDX1);
     5a6:	83 e1       	ldi	r24, 0x13	; 19
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     5ae:	88 87       	std	Y+8, r24	; 0x08
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
     5b0:	84 e1       	ldi	r24, 0x14	; 20
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     5b8:	89 87       	std	Y+9, r24	; 0x09
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
     5ba:	85 e1       	ldi	r24, 0x15	; 21
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z17ReadSignatureBytej>
     5c2:	8a 87       	std	Y+10, r24	; 0x0a
	
	UC_LOT_NUMBER = DeviceSignature[0];
     5c4:	28 80       	ld	r2, Y
     5c6:	31 2c       	mov	r3, r1
     5c8:	41 2c       	mov	r4, r1
     5ca:	51 2c       	mov	r5, r1
     5cc:	61 2c       	mov	r6, r1
     5ce:	71 2c       	mov	r7, r1
     5d0:	43 01       	movw	r8, r6
     5d2:	a9 e0       	ldi	r26, 0x09	; 9
     5d4:	b1 e2       	ldi	r27, 0x21	; 33
     5d6:	e4 e6       	ldi	r30, 0x64	; 100
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(int i = 1; i < 6; ++i){
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
     5da:	8d 91       	ld	r24, X+
     5dc:	8e 9f       	mul	r24, r30
     5de:	e0 01       	movw	r28, r0
     5e0:	8f 9f       	mul	r24, r31
     5e2:	d0 0d       	add	r29, r0
     5e4:	11 24       	eor	r1, r1
     5e6:	1d 2f       	mov	r17, r29
     5e8:	11 0f       	add	r17, r17
     5ea:	11 0b       	sbc	r17, r17
     5ec:	22 2d       	mov	r18, r2
     5ee:	33 2d       	mov	r19, r3
     5f0:	44 2d       	mov	r20, r4
     5f2:	55 2d       	mov	r21, r5
     5f4:	66 2d       	mov	r22, r6
     5f6:	77 2d       	mov	r23, r7
     5f8:	88 2d       	mov	r24, r8
     5fa:	99 2d       	mov	r25, r9
     5fc:	ac 2e       	mov	r10, r28
     5fe:	bd 2e       	mov	r11, r29
     600:	c1 2e       	mov	r12, r17
     602:	d1 2e       	mov	r13, r17
     604:	e1 2e       	mov	r14, r17
     606:	f1 2e       	mov	r15, r17
     608:	01 2f       	mov	r16, r17
     60a:	0e 94 94 0a 	call	0x1528	; 0x1528 <__adddi3>
     60e:	22 2e       	mov	r2, r18
     610:	33 2e       	mov	r3, r19
     612:	44 2e       	mov	r4, r20
     614:	55 2e       	mov	r5, r21
     616:	66 2e       	mov	r6, r22
     618:	77 2e       	mov	r7, r23
     61a:	88 2e       	mov	r8, r24
     61c:	99 2e       	mov	r9, r25
     61e:	ec 59       	subi	r30, 0x9C	; 156
     620:	ff 4f       	sbci	r31, 0xFF	; 255
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
	
	UC_LOT_NUMBER = DeviceSignature[0];
	
	for(int i = 1; i < 6; ++i){
     622:	e8 35       	cpi	r30, 0x58	; 88
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	f8 07       	cpc	r31, r24
     628:	c1 f6       	brne	.-80     	; 0x5da <_Z21configureSerialNumberv+0xac>
     62a:	20 92 00 21 	sts	0x2100, r2
     62e:	30 92 01 21 	sts	0x2101, r3
     632:	40 92 02 21 	sts	0x2102, r4
     636:	50 92 03 21 	sts	0x2103, r5
     63a:	60 92 04 21 	sts	0x2104, r6
     63e:	70 92 05 21 	sts	0x2105, r7
     642:	80 92 06 21 	sts	0x2106, r8
     646:	90 92 07 21 	sts	0x2107, r9
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
	}
	
	UC_WAFER_ID = DeviceSignature[6];
     64a:	e8 e0       	ldi	r30, 0x08	; 8
     64c:	f1 e2       	ldi	r31, 0x21	; 33
     64e:	26 81       	ldd	r18, Z+6	; 0x06
	
	for(int i = 1; i < 4; ++i){  //Original stops at 5
		UC_WAFER_ID += DeviceSignature[i+6] * (100*i);
     650:	a7 81       	ldd	r26, Z+7	; 0x07
     652:	c4 e6       	ldi	r28, 0x64	; 100
     654:	ac 9f       	mul	r26, r28
     656:	d0 01       	movw	r26, r0
     658:	11 24       	eor	r1, r1
     65a:	1b 2f       	mov	r17, r27
     65c:	11 0f       	add	r17, r17
     65e:	11 0b       	sbc	r17, r17
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	aa 2e       	mov	r10, r26
     670:	bb 2e       	mov	r11, r27
     672:	c1 2e       	mov	r12, r17
     674:	d1 2e       	mov	r13, r17
     676:	e1 2e       	mov	r14, r17
     678:	f1 2e       	mov	r15, r17
     67a:	01 2f       	mov	r16, r17
     67c:	0e 94 94 0a 	call	0x1528	; 0x1528 <__adddi3>
     680:	a0 85       	ldd	r26, Z+8	; 0x08
     682:	c8 ec       	ldi	r28, 0xC8	; 200
     684:	ac 9f       	mul	r26, r28
     686:	d0 01       	movw	r26, r0
     688:	11 24       	eor	r1, r1
     68a:	1b 2f       	mov	r17, r27
     68c:	11 0f       	add	r17, r17
     68e:	11 0b       	sbc	r17, r17
     690:	aa 2e       	mov	r10, r26
     692:	bb 2e       	mov	r11, r27
     694:	c1 2e       	mov	r12, r17
     696:	d1 2e       	mov	r13, r17
     698:	e1 2e       	mov	r14, r17
     69a:	f1 2e       	mov	r15, r17
     69c:	01 2f       	mov	r16, r17
     69e:	0e 94 94 0a 	call	0x1528	; 0x1528 <__adddi3>
     6a2:	c1 85       	ldd	r28, Z+9	; 0x09
     6a4:	ac e2       	ldi	r26, 0x2C	; 44
     6a6:	b1 e0       	ldi	r27, 0x01	; 1
     6a8:	ca 9f       	mul	r28, r26
     6aa:	f0 01       	movw	r30, r0
     6ac:	cb 9f       	mul	r28, r27
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	1f 2f       	mov	r17, r31
     6b4:	11 0f       	add	r17, r17
     6b6:	11 0b       	sbc	r17, r17
     6b8:	ae 2e       	mov	r10, r30
     6ba:	bf 2e       	mov	r11, r31
     6bc:	c1 2e       	mov	r12, r17
     6be:	d1 2e       	mov	r13, r17
     6c0:	e1 2e       	mov	r14, r17
     6c2:	f1 2e       	mov	r15, r17
     6c4:	01 2f       	mov	r16, r17
     6c6:	0e 94 94 0a 	call	0x1528	; 0x1528 <__adddi3>
     6ca:	20 93 f8 20 	sts	0x20F8, r18
     6ce:	30 93 f9 20 	sts	0x20F9, r19
     6d2:	40 93 fa 20 	sts	0x20FA, r20
     6d6:	50 93 fb 20 	sts	0x20FB, r21
     6da:	60 93 fc 20 	sts	0x20FC, r22
     6de:	70 93 fd 20 	sts	0x20FD, r23
     6e2:	80 93 fe 20 	sts	0x20FE, r24
     6e6:	90 93 ff 20 	sts	0x20FF, r25
	}
	
	serialNumber = -1; //Set the default serial number to -1 ("Not assigned yet")
     6ea:	8f ef       	ldi	r24, 0xFF	; 255
     6ec:	9f ef       	ldi	r25, 0xFF	; 255
     6ee:	80 93 f6 20 	sts	0x20F6, r24
     6f2:	90 93 f7 20 	sts	0x20F7, r25
	
	//Hardcoded serial number lookups (don't judge)
	if(UC_LOT_NUMBER == 0x13E91 && UC_WAFER_ID == 0x3913)
     6f6:	22 2d       	mov	r18, r2
     6f8:	33 2d       	mov	r19, r3
     6fa:	44 2d       	mov	r20, r4
     6fc:	55 2d       	mov	r21, r5
     6fe:	66 2d       	mov	r22, r6
     700:	77 2d       	mov	r23, r7
     702:	88 2d       	mov	r24, r8
     704:	99 2d       	mov	r25, r9
     706:	21 39       	cpi	r18, 0x91	; 145
     708:	3e 43       	sbci	r19, 0x3E	; 62
     70a:	41 40       	sbci	r20, 0x01	; 1
     70c:	51 05       	cpc	r21, r1
     70e:	61 05       	cpc	r22, r1
     710:	71 05       	cpc	r23, r1
     712:	81 05       	cpc	r24, r1
     714:	91 05       	cpc	r25, r1
     716:	f9 f4       	brne	.+62     	; 0x756 <_Z21configureSerialNumberv+0x228>
     718:	20 91 f8 20 	lds	r18, 0x20F8
     71c:	30 91 f9 20 	lds	r19, 0x20F9
     720:	40 91 fa 20 	lds	r20, 0x20FA
     724:	50 91 fb 20 	lds	r21, 0x20FB
     728:	60 91 fc 20 	lds	r22, 0x20FC
     72c:	70 91 fd 20 	lds	r23, 0x20FD
     730:	80 91 fe 20 	lds	r24, 0x20FE
     734:	90 91 ff 20 	lds	r25, 0x20FF
     738:	23 31       	cpi	r18, 0x13	; 19
     73a:	39 43       	sbci	r19, 0x39	; 57
     73c:	41 05       	cpc	r20, r1
     73e:	51 05       	cpc	r21, r1
     740:	61 05       	cpc	r22, r1
     742:	71 05       	cpc	r23, r1
     744:	81 05       	cpc	r24, r1
     746:	91 05       	cpc	r25, r1
     748:	31 f4       	brne	.+12     	; 0x756 <_Z21configureSerialNumberv+0x228>
		serialNumber = 1;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	80 93 f6 20 	sts	0x20F6, r24
     752:	90 93 f7 20 	sts	0x20F7, r25
	
		SendStringPC((char *)"[Wafer ID Number: ");
		SendNumPC(UC_WAFER_ID);
		SendStringPC((char *)"]");
	#endif
}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	9f 90       	pop	r9
     76c:	8f 90       	pop	r8
     76e:	7f 90       	pop	r7
     770:	6f 90       	pop	r6
     772:	5f 90       	pop	r5
     774:	4f 90       	pop	r4
     776:	3f 90       	pop	r3
     778:	2f 90       	pop	r2
     77a:	08 95       	ret

0000077c <_Z17ADCCountToVoltagej>:

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  switch(serialNumber){
     77c:	20 91 f6 20 	lds	r18, 0x20F6
     780:	30 91 f7 20 	lds	r19, 0x20F7
     784:	21 30       	cpi	r18, 0x01	; 1
     786:	31 05       	cpc	r19, r1
     788:	91 f4       	brne	.+36     	; 0x7ae <_Z17ADCCountToVoltagej+0x32>
	  case 1:
		return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     78a:	bc 01       	movw	r22, r24
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 b8 08 	call	0x1170	; 0x1170 <__floatunsisf>
     794:	29 e8       	ldi	r18, 0x89	; 137
     796:	3d e0       	ldi	r19, 0x0D	; 13
     798:	4d e9       	ldi	r20, 0x9D	; 157
     79a:	5a e3       	ldi	r21, 0x3A	; 58
     79c:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
     7a0:	24 e6       	ldi	r18, 0x64	; 100
     7a2:	37 e6       	ldi	r19, 0x67	; 103
     7a4:	49 e1       	ldi	r20, 0x19	; 25
     7a6:	5b e3       	ldi	r21, 0x3B	; 59
     7a8:	0e 94 a4 07 	call	0xf48	; 0xf48 <__addsf3>
     7ac:	08 95       	ret
	  default:
		return 1;
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	80 e8       	ldi	r24, 0x80	; 128
     7b4:	9f e3       	ldi	r25, 0x3F	; 63
  }
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...

	
}
     7b6:	08 95       	ret

000007b8 <_Z23sampleTempSensorVoltagev>:

int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);//ADC_CH_MUXNEG0_bm);
     7b8:	e0 e0       	ldi	r30, 0x00	; 0
     7ba:	f2 e0       	ldi	r31, 0x02	; 2
     7bc:	81 e4       	ldi	r24, 0x41	; 65
     7be:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     7c0:	80 a1       	ldd	r24, Z+32	; 0x20
     7c2:	80 68       	ori	r24, 0x80	; 128
     7c4:	80 a3       	std	Z+32, r24	; 0x20
     7c6:	8f e7       	ldi	r24, 0x7F	; 127
     7c8:	9c e0       	ldi	r25, 0x0C	; 12
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <_Z23sampleTempSensorVoltagev+0x12>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <_Z23sampleTempSensorVoltagev+0x18>
     7d0:	00 00       	nop
	
	_delay_us(400);
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 8)) != (1U << 8)); // (1U << n) where n is the adc channel, so zero for this one
	
	while(!(ADCA.INTFLAGS & (1 << 0)));
     7d2:	86 81       	ldd	r24, Z+6	; 0x06
     7d4:	80 ff       	sbrs	r24, 0
     7d6:	fd cf       	rjmp	.-6      	; 0x7d2 <_Z23sampleTempSensorVoltagev+0x1a>
	ADCA.INTFLAGS = (1 << 0);
     7d8:	e0 e0       	ldi	r30, 0x00	; 0
     7da:	f2 e0       	ldi	r31, 0x02	; 2
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     7e0:	84 a1       	ldd	r24, Z+36	; 0x24
     7e2:	95 a1       	ldd	r25, Z+37	; 0x25
}
     7e4:	08 95       	ret

000007e6 <_Z20sampleBatteryVoltagev>:

int16_t sampleBatteryVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN9_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for batt voltage sense
     7e6:	e0 e0       	ldi	r30, 0x00	; 0
     7e8:	f2 e0       	ldi	r31, 0x02	; 2
     7ea:	89 e4       	ldi	r24, 0x49	; 73
     7ec:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     7ee:	80 a1       	ldd	r24, Z+32	; 0x20
     7f0:	80 68       	ori	r24, 0x80	; 128
     7f2:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
	//ADCA.INTFLAGS = ((1U << 0) << ADC_CH0IF_bp);
	while(!(ADCA.INTFLAGS & (1 << 0)));
     7f4:	86 81       	ldd	r24, Z+6	; 0x06
     7f6:	80 ff       	sbrs	r24, 0
     7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <_Z20sampleBatteryVoltagev+0xe>
	ADCA.INTFLAGS = (1 << 0);
     7fa:	e0 e0       	ldi	r30, 0x00	; 0
     7fc:	f2 e0       	ldi	r31, 0x02	; 2
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     802:	84 a1       	ldd	r24, Z+36	; 0x24
     804:	95 a1       	ldd	r25, Z+37	; 0x25
}
     806:	08 95       	ret

00000808 <_Z18getEBoxTemperaturev>:

double getEBoxTemperature(){
     808:	2f 92       	push	r2
     80a:	3f 92       	push	r3
     80c:	4f 92       	push	r4
     80e:	5f 92       	push	r5
     810:	6f 92       	push	r6
     812:	7f 92       	push	r7
     814:	8f 92       	push	r8
     816:	9f 92       	push	r9
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	0f 2e       	mov	r0, r31
     82e:	f4 e6       	ldi	r31, 0x64	; 100
     830:	6f 2e       	mov	r6, r31
     832:	71 2c       	mov	r7, r1
     834:	f0 2d       	mov	r31, r0
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
     836:	41 2c       	mov	r4, r1
     838:	51 2c       	mov	r5, r1
     83a:	81 2c       	mov	r8, r1
     83c:	91 2c       	mov	r9, r1
     83e:	d0 e0       	ldi	r29, 0x00	; 0
     840:	c0 e0       	ldi	r28, 0x00	; 0
     842:	21 2c       	mov	r2, r1
     844:	31 2c       	mov	r3, r1
	for(int i = 0; i < avgVal; ++i){
		sum += sampleTempSensorVoltage();
     846:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_Z23sampleTempSensorVoltagev>
     84a:	b9 2e       	mov	r11, r25
     84c:	a8 2e       	mov	r10, r24
     84e:	19 2f       	mov	r17, r25
     850:	11 0f       	add	r17, r17
     852:	11 0b       	sbc	r17, r17
     854:	24 2d       	mov	r18, r4
     856:	35 2d       	mov	r19, r5
     858:	48 2d       	mov	r20, r8
     85a:	59 2d       	mov	r21, r9
     85c:	6d 2f       	mov	r22, r29
     85e:	7c 2f       	mov	r23, r28
     860:	82 2d       	mov	r24, r2
     862:	93 2d       	mov	r25, r3
     864:	c1 2e       	mov	r12, r17
     866:	d1 2e       	mov	r13, r17
     868:	e1 2e       	mov	r14, r17
     86a:	f1 2e       	mov	r15, r17
     86c:	01 2f       	mov	r16, r17
     86e:	0e 94 94 0a 	call	0x1528	; 0x1528 <__adddi3>
     872:	42 2e       	mov	r4, r18
     874:	53 2e       	mov	r5, r19
     876:	84 2e       	mov	r8, r20
     878:	95 2e       	mov	r9, r21
     87a:	d6 2f       	mov	r29, r22
     87c:	c7 2f       	mov	r28, r23
     87e:	28 2e       	mov	r2, r24
     880:	39 2e       	mov	r3, r25
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	68 1a       	sub	r6, r24
     886:	71 08       	sbc	r7, r1
double getEBoxTemperature(){
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
	for(int i = 0; i < avgVal; ++i){
     888:	f1 f6       	brne	.-68     	; 0x846 <_Z18getEBoxTemperaturev+0x3e>
		sum += sampleTempSensorVoltage();
	}
	temperature = sum / avgVal;
     88a:	0f 2e       	mov	r0, r31
     88c:	f4 e6       	ldi	r31, 0x64	; 100
     88e:	af 2e       	mov	r10, r31
     890:	f0 2d       	mov	r31, r0
     892:	b1 2c       	mov	r11, r1
     894:	c1 2c       	mov	r12, r1
     896:	d1 2c       	mov	r13, r1
     898:	e1 2c       	mov	r14, r1
     89a:	f1 2c       	mov	r15, r1
     89c:	00 e0       	ldi	r16, 0x00	; 0
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	24 2d       	mov	r18, r4
     8a2:	35 2d       	mov	r19, r5
     8a4:	48 2d       	mov	r20, r8
     8a6:	59 2d       	mov	r21, r9
     8a8:	6d 2f       	mov	r22, r29
     8aa:	7c 2f       	mov	r23, r28
     8ac:	82 2d       	mov	r24, r2
     8ae:	93 2d       	mov	r25, r3
     8b0:	0e 94 37 0a 	call	0x146e	; 0x146e <__udivdi3>
	
	double temperatureVoltage = ADCCountToVoltage(temperature);  //((float) temperature/ 4096) * 2.5;
     8b4:	82 2f       	mov	r24, r18
     8b6:	93 2f       	mov	r25, r19
     8b8:	0e 94 be 03 	call	0x77c	; 0x77c <_Z17ADCCountToVoltagej>
	
	#ifdef TMP36
		temperatureFloat = 100.0 * temperatureVoltage - 50.0;
	#endif
	#ifdef TMP37
		temperatureFloat = 50.0 * temperatureVoltage;
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	48 e4       	ldi	r20, 0x48	; 72
     8c2:	52 e4       	ldi	r21, 0x42	; 66
     8c4:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
	#endif
	
	return temperatureFloat;
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	bf 90       	pop	r11
     8da:	af 90       	pop	r10
     8dc:	9f 90       	pop	r9
     8de:	8f 90       	pop	r8
     8e0:	7f 90       	pop	r7
     8e2:	6f 90       	pop	r6
     8e4:	5f 90       	pop	r5
     8e6:	4f 90       	pop	r4
     8e8:	3f 90       	pop	r3
     8ea:	2f 90       	pop	r2
     8ec:	08 95       	ret

000008ee <_Z28getElectronicsBatteryVoltagev>:

double getElectronicsBatteryVoltage(){
     8ee:	cf 92       	push	r12
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	c4 e6       	ldi	r28, 0x64	; 100
     8fc:	d0 e0       	ldi	r29, 0x00	; 0

	int avgVal = 100;
	uint32_t sum = 0;
     8fe:	c1 2c       	mov	r12, r1
     900:	d1 2c       	mov	r13, r1
     902:	76 01       	movw	r14, r12
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
     904:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_Z20sampleBatteryVoltagev>
     908:	09 2e       	mov	r0, r25
     90a:	00 0c       	add	r0, r0
     90c:	aa 0b       	sbc	r26, r26
     90e:	bb 0b       	sbc	r27, r27
     910:	c8 0e       	add	r12, r24
     912:	d9 1e       	adc	r13, r25
     914:	ea 1e       	adc	r14, r26
     916:	fb 1e       	adc	r15, r27
     918:	21 97       	sbiw	r28, 0x01	; 1
double getElectronicsBatteryVoltage(){

	int avgVal = 100;
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
     91a:	a1 f7       	brne	.-24     	; 0x904 <_Z28getElectronicsBatteryVoltagev+0x16>
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	24 e6       	ldi	r18, 0x64	; 100
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	0e 94 13 0a 	call	0x1426	; 0x1426 <__udivmodsi4>
		SendStringPC((char *)"[Raw Volt Count: ");
		SendNumPC(electronicsVoltageCount);
		SendStringPC((char *)"] ");
	#endif
	
	double electronicsVoltage = ADCCountToVoltage(electronicsVoltageCount);
     92c:	c9 01       	movw	r24, r18
     92e:	0e 94 be 03 	call	0x77c	; 0x77c <_Z17ADCCountToVoltagej>
     932:	6b 01       	movw	r12, r22
     934:	7c 01       	movw	r14, r24
	double calculatedElectronicsVoltage =  (electronicsVoltage / .56) + (10.0 - .05);

	#ifdef BATT_VOLTAGE_RAW_OUTPUT
	SendStringPC((char *)"[Raw Voltage: ");
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	90 e2       	ldi	r25, 0x20	; 32
     93a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
	SendFloatPC(electronicsVoltage);
     93e:	c7 01       	movw	r24, r14
     940:	b6 01       	movw	r22, r12
     942:	0e 94 20 07 	call	0xe40	; 0xe40 <_Z11SendFloatPCd>
	SendStringPC((char *)"] ");
     946:	82 e1       	ldi	r24, 0x12	; 18
     948:	90 e2       	ldi	r25, 0x20	; 32
     94a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
		SendNumPC(electronicsVoltageCount);
		SendStringPC((char *)"] ");
	#endif
	
	double electronicsVoltage = ADCCountToVoltage(electronicsVoltageCount);
	double calculatedElectronicsVoltage =  (electronicsVoltage / .56) + (10.0 - .05);
     94e:	29 e2       	ldi	r18, 0x29	; 41
     950:	3c e5       	ldi	r19, 0x5C	; 92
     952:	4f e0       	ldi	r20, 0x0F	; 15
     954:	5f e3       	ldi	r21, 0x3F	; 63
     956:	c7 01       	movw	r24, r14
     958:	b6 01       	movw	r22, r12
     95a:	0e 94 10 08 	call	0x1020	; 0x1020 <__divsf3>
     95e:	23 e3       	ldi	r18, 0x33	; 51
     960:	33 e3       	ldi	r19, 0x33	; 51
     962:	4f e1       	ldi	r20, 0x1F	; 31
     964:	51 e4       	ldi	r21, 0x41	; 65
     966:	0e 94 a4 07 	call	0xf48	; 0xf48 <__addsf3>
	SendFloatPC(electronicsVoltage);
	SendStringPC((char *)"] ");
	#endif

	return calculatedElectronicsVoltage;
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	08 95       	ret

00000978 <main>:

#define REMOTE_START_CHECK 0x1
#define REMOTE_STOP_CHECK  0x2

int main(void)
{
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	00 d0       	rcall	.+0      	; 0x97e <main+0x6>
     97e:	00 d0       	rcall	.+0      	; 0x980 <main+0x8>
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
	configureIO();
     984:	0e 94 ac 00 	call	0x158	; 0x158 <_Z11configureIOv>
	configureExternalOscillator();
     988:	0e 94 75 00 	call	0xea	; 0xea <_Z27configureExternalOscillatorv>
	configureUSART();					//Set up for 57600 Baud
     98c:	0e 94 7a 07 	call	0xef4	; 0xef4 <_Z14configureUSARTv>
	configureTimerCounter();
     990:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z21configureTimerCounterv>
	configureADCs();
     994:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z13configureADCsv>
	configureRTC();
     998:	0e 94 18 02 	call	0x430	; 0x430 <_Z12configureRTCv>
	configureXCL();
     99c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z12configureXCLv>
	configureSerialNumber();
     9a0:	0e 94 97 02 	call	0x52e	; 0x52e <_Z21configureSerialNumberv>
		
	LOW_LEVEL_INTERRUPTS_ENABLE();
     9a4:	e0 ea       	ldi	r30, 0xA0	; 160
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	82 81       	ldd	r24, Z+2	; 0x02
     9aa:	81 60       	ori	r24, 0x01	; 1
     9ac:	82 83       	std	Z+2, r24	; 0x02
	MED_LEVEL_INTERRUPTS_ENABLE();
     9ae:	82 81       	ldd	r24, Z+2	; 0x02
     9b0:	82 60       	ori	r24, 0x02	; 2
     9b2:	82 83       	std	Z+2, r24	; 0x02
	HIGH_LEVEL_INTERRUPTS_ENABLE();
     9b4:	82 81       	ldd	r24, Z+2	; 0x02
     9b6:	84 60       	ori	r24, 0x04	; 4
     9b8:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable global interrupts
     9ba:	78 94       	sei
	
	uint8_t receivedUSARTData;
	
	RSSI.measuring = NOT_MEASURING;
     9bc:	e3 e2       	ldi	r30, 0x23	; 35
     9be:	f1 e2       	ldi	r31, 0x21	; 33
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	81 83       	std	Z+1, r24	; 0x01
	RSSI.timeDifference = 0;
     9c4:	12 82       	std	Z+2, r1	; 0x02
     9c6:	13 82       	std	Z+3, r1	; 0x03
	RSSI.sampleCount = 0;
     9c8:	16 82       	std	Z+6, r1	; 0x06
     9ca:	17 82       	std	Z+7, r1	; 0x07

	//Init string with basic documentation
	SendStringPC("\n\r#[INIT ROSS PDB]\n\r");
     9cc:	85 e1       	ldi	r24, 0x15	; 21
     9ce:	90 e2       	ldi	r25, 0x20	; 32
     9d0:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z12SendStringPCPKc>
	SendStringPC("#Firmware version ");
     9d4:	8a e2       	ldi	r24, 0x2A	; 42
     9d6:	90 e2       	ldi	r25, 0x20	; 32
     9d8:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z12SendStringPCPKc>
	SendStringPC(FIRMWARE_VERSION_STR);
     9dc:	8d e3       	ldi	r24, 0x3D	; 61
     9de:	90 e2       	ldi	r25, 0x20	; 32
     9e0:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z12SendStringPCPKc>
	SendStringPC("\n\r#Serial Number: ");
     9e4:	80 e4       	ldi	r24, 0x40	; 64
     9e6:	90 e2       	ldi	r25, 0x20	; 32
     9e8:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z12SendStringPCPKc>
	if(serialNumber == -1)
     9ec:	80 91 f6 20 	lds	r24, 0x20F6
     9f0:	90 91 f7 20 	lds	r25, 0x20F7
     9f4:	8f 3f       	cpi	r24, 0xFF	; 255
     9f6:	2f ef       	ldi	r18, 0xFF	; 255
     9f8:	92 07       	cpc	r25, r18
     9fa:	29 f4       	brne	.+10     	; 0xa06 <main+0x8e>
		SendStringPC("NOT SET");
     9fc:	83 e5       	ldi	r24, 0x53	; 83
     9fe:	90 e2       	ldi	r25, 0x20	; 32
     a00:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z12SendStringPCPKc>
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <main+0x92>
	else
		SendNumPC(serialNumber);
     a06:	0e 94 09 07 	call	0xe12	; 0xe12 <_Z9SendNumPCi>
	SendStringPC((char *)"\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr | XTend RSSI | \"Remote Input\" \n\r");
     a0a:	8b e5       	ldi	r24, 0x5B	; 91
     a0c:	90 e2       	ldi	r25, 0x20	; 32
     a0e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     a12:	00 ec       	ldi	r16, 0xC0	; 192
     a14:	18 e0       	ldi	r17, 0x08	; 8
			}
			
			if(receivedUSARTData >= 71 && receivedUSARTData <= 87){		//Then we need to process a PWM override
				pixhawkOverride = 1;
				manualPWMOutput = receivedUSARTData * 50 - 2450;  //This will generate the correct output per https://goo.gl/7wYL6b
				if(CHECK_DIP_SW_2()){	//5 second update time
     a16:	0f 2e       	mov	r0, r31
     a18:	f0 e4       	ldi	r31, 0x40	; 64
     a1a:	2f 2e       	mov	r2, r31
     a1c:	f6 e0       	ldi	r31, 0x06	; 6
     a1e:	3f 2e       	mov	r3, r31
     a20:	f0 2d       	mov	r31, r0
						pixhawkOverrideCountdown = 10;
					else
						pixhawkOverrideCountdown = 50;
				}
				else {	//1 second update time
					if(TCC4.PER == TC_1024_100MS)
     a22:	81 2c       	mov	r8, r1
     a24:	68 94       	set
     a26:	99 24       	eor	r9, r9
     a28:	93 f8       	bld	r9, 3
						pixhawkOverrideCountdown = 10;
					else if(TCC4.PER == TC_1024_500MS)
						pixhawkOverrideCountdown = 2;
					else
						pixhawkOverrideCountdown = 10;
     a2a:	0f 2e       	mov	r0, r31
     a2c:	fa e0       	ldi	r31, 0x0A	; 10
     a2e:	4f 2e       	mov	r4, r31
     a30:	51 2c       	mov	r5, r1
     a32:	f0 2d       	mov	r31, r0
				pixhawkOverride = 0;
				pixhawkOverrideCountdown = 0;
			}
			
			if(receivedUSARTData >= 71 && receivedUSARTData <= 87){		//Then we need to process a PWM override
				pixhawkOverride = 1;
     a34:	cc 24       	eor	r12, r12
     a36:	c3 94       	inc	r12
				manualPWMOutput = receivedUSARTData * 50 - 2450;  //This will generate the correct output per https://goo.gl/7wYL6b
     a38:	0f 2e       	mov	r0, r31
     a3a:	f2 e3       	ldi	r31, 0x32	; 50
     a3c:	bf 2e       	mov	r11, r31
     a3e:	f0 2d       	mov	r31, r0
			}
			
			if(receivedUSARTData == 'y')
				REAR_RELAY_SET();
			else if(receivedUSARTData == 'n')
				REAR_RELAY_CLR();
     a40:	68 94       	set
     a42:	77 24       	eor	r7, r7
     a44:	75 f8       	bld	r7, 5
			if(receivedUSARTData == 10){	//Remote start requested
				remoteInput = REMOTE_START_CHECK;
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
			}	
			else if(receivedUSARTData == 20){	//Remote stop requested
				remoteInput = REMOTE_STOP_CHECK;
     a46:	68 94       	set
     a48:	66 24       	eor	r6, r6
     a4a:	61 f8       	bld	r6, 1
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
     a4c:	0f 2e       	mov	r0, r31
     a4e:	f5 e0       	ldi	r31, 0x05	; 5
     a50:	af 2e       	mov	r10, r31
     a52:	f0 2d       	mov	r31, r0
		
		if(pixhawkOverride){	//If we do want to override the signal
			TC_PWM_SET(manualPWMOutput);	//Output the desired override PWM output
		}
		else {  //We don't want to overrride the signal
			TC_PWM_SET(steeringPWMPeriod);	//Output the Pixhawk PWM signal
     a54:	0f 2e       	mov	r0, r31
     a56:	f0 e4       	ldi	r31, 0x40	; 64
     a58:	ef 2e       	mov	r14, r31
     a5a:	f9 e0       	ldi	r31, 0x09	; 9
     a5c:	ff 2e       	mov	r15, r31
     a5e:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a60:	8f e3       	ldi	r24, 0x3F	; 63
     a62:	9f e1       	ldi	r25, 0x1F	; 31
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <main+0xec>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <main+0xf2>
     a6a:	00 00       	nop
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     a6c:	f8 01       	movw	r30, r16
     a6e:	81 81       	ldd	r24, Z+1	; 0x01
     a70:	88 23       	and	r24, r24
     a72:	0c f0       	brlt	.+2      	; 0xa76 <main+0xfe>
     a74:	6d c0       	rjmp	.+218    	; 0xb50 <main+0x1d8>
			receivedUSARTData = USART_GetChar(&COMP_USART);
     a76:	d0 80       	ld	r13, Z
			
			//Check if the inputted command is within the range to be
			//forwarded to the ON/OFF switch
			if(receivedUSARTData >= 30 && receivedUSARTData <= 65){
     a78:	82 ee       	ldi	r24, 0xE2	; 226
     a7a:	8d 0d       	add	r24, r13
     a7c:	84 32       	cpi	r24, 0x24	; 36
     a7e:	18 f4       	brcc	.+6      	; 0xa86 <main+0x10e>
				SendCharONOFF(receivedUSARTData);
     a80:	8d 2d       	mov	r24, r13
     a82:	0e 94 ee 06 	call	0xddc	; 0xddc <_Z13SendCharONOFFc>
			}
			
			if(receivedUSARTData == 'y')
     a86:	f9 e7       	ldi	r31, 0x79	; 121
     a88:	df 12       	cpse	r13, r31
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <main+0x11a>
				REAR_RELAY_SET();
     a8c:	f1 01       	movw	r30, r2
     a8e:	75 82       	std	Z+5, r7	; 0x05
     a90:	10 c0       	rjmp	.+32     	; 0xab2 <main+0x13a>
			else if(receivedUSARTData == 'n')
     a92:	fe e6       	ldi	r31, 0x6E	; 110
     a94:	df 12       	cpse	r13, r31
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <main+0x126>
				REAR_RELAY_CLR();
     a98:	f1 01       	movw	r30, r2
     a9a:	76 82       	std	Z+6, r7	; 0x06
     a9c:	0a c0       	rjmp	.+20     	; 0xab2 <main+0x13a>
			
			if(receivedUSARTData == 70){  //Then we need to cancel our override (if it exists)
     a9e:	f6 e4       	ldi	r31, 0x46	; 70
     aa0:	df 12       	cpse	r13, r31
     aa2:	07 c0       	rjmp	.+14     	; 0xab2 <main+0x13a>
				pixhawkOverride = 0;
     aa4:	10 92 20 21 	sts	0x2120, r1
				pixhawkOverrideCountdown = 0;
     aa8:	10 92 1e 21 	sts	0x211E, r1
     aac:	10 92 1f 21 	sts	0x211F, r1
     ab0:	4f c0       	rjmp	.+158    	; 0xb50 <main+0x1d8>
			}
			
			if(receivedUSARTData >= 71 && receivedUSARTData <= 87){		//Then we need to process a PWM override
     ab2:	89 eb       	ldi	r24, 0xB9	; 185
     ab4:	8d 0d       	add	r24, r13
     ab6:	81 31       	cpi	r24, 0x11	; 17
     ab8:	08 f0       	brcs	.+2      	; 0xabc <main+0x144>
     aba:	4a c0       	rjmp	.+148    	; 0xb50 <main+0x1d8>
				pixhawkOverride = 1;
     abc:	c0 92 20 21 	sts	0x2120, r12
				manualPWMOutput = receivedUSARTData * 50 - 2450;  //This will generate the correct output per https://goo.gl/7wYL6b
     ac0:	bd 9c       	mul	r11, r13
     ac2:	c0 01       	movw	r24, r0
     ac4:	11 24       	eor	r1, r1
     ac6:	82 59       	subi	r24, 0x92	; 146
     ac8:	99 40       	sbci	r25, 0x09	; 9
     aca:	80 93 01 20 	sts	0x2001, r24
     ace:	90 93 02 20 	sts	0x2002, r25
				if(CHECK_DIP_SW_2()){	//5 second update time
     ad2:	f1 01       	movw	r30, r2
     ad4:	80 85       	ldd	r24, Z+8	; 0x08
     ad6:	82 fd       	sbrc	r24, 2
     ad8:	1f c0       	rjmp	.+62     	; 0xb18 <main+0x1a0>
					if(TCC4.PER == TC_1024_100MS)
     ada:	f4 01       	movw	r30, r8
     adc:	86 a1       	ldd	r24, Z+38	; 0x26
     ade:	97 a1       	ldd	r25, Z+39	; 0x27
     ae0:	85 33       	cpi	r24, 0x35	; 53
     ae2:	9c 40       	sbci	r25, 0x0C	; 12
     ae4:	39 f4       	brne	.+14     	; 0xaf4 <main+0x17c>
						pixhawkOverrideCountdown = 50;
     ae6:	82 e3       	ldi	r24, 0x32	; 50
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	80 93 1e 21 	sts	0x211E, r24
     aee:	90 93 1f 21 	sts	0x211F, r25
     af2:	2e c0       	rjmp	.+92     	; 0xb50 <main+0x1d8>
					else if(TCC4.PER == TC_1024_500MS)
     af4:	f4 01       	movw	r30, r8
     af6:	86 a1       	ldd	r24, Z+38	; 0x26
     af8:	97 a1       	ldd	r25, Z+39	; 0x27
     afa:	89 30       	cpi	r24, 0x09	; 9
     afc:	9d 43       	sbci	r25, 0x3D	; 61
     afe:	29 f4       	brne	.+10     	; 0xb0a <main+0x192>
						pixhawkOverrideCountdown = 10;
     b00:	40 92 1e 21 	sts	0x211E, r4
     b04:	50 92 1f 21 	sts	0x211F, r5
     b08:	23 c0       	rjmp	.+70     	; 0xb50 <main+0x1d8>
					else
						pixhawkOverrideCountdown = 50;
     b0a:	82 e3       	ldi	r24, 0x32	; 50
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	80 93 1e 21 	sts	0x211E, r24
     b12:	90 93 1f 21 	sts	0x211F, r25
     b16:	1c c0       	rjmp	.+56     	; 0xb50 <main+0x1d8>
				}
				else {	//1 second update time
					if(TCC4.PER == TC_1024_100MS)
     b18:	f4 01       	movw	r30, r8
     b1a:	86 a1       	ldd	r24, Z+38	; 0x26
     b1c:	97 a1       	ldd	r25, Z+39	; 0x27
     b1e:	85 33       	cpi	r24, 0x35	; 53
     b20:	9c 40       	sbci	r25, 0x0C	; 12
     b22:	29 f4       	brne	.+10     	; 0xb2e <main+0x1b6>
						pixhawkOverrideCountdown = 10;
     b24:	40 92 1e 21 	sts	0x211E, r4
     b28:	50 92 1f 21 	sts	0x211F, r5
     b2c:	11 c0       	rjmp	.+34     	; 0xb50 <main+0x1d8>
					else if(TCC4.PER == TC_1024_500MS)
     b2e:	f4 01       	movw	r30, r8
     b30:	86 a1       	ldd	r24, Z+38	; 0x26
     b32:	97 a1       	ldd	r25, Z+39	; 0x27
     b34:	89 30       	cpi	r24, 0x09	; 9
     b36:	9d 43       	sbci	r25, 0x3D	; 61
     b38:	39 f4       	brne	.+14     	; 0xb48 <main+0x1d0>
						pixhawkOverrideCountdown = 2;
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	80 93 1e 21 	sts	0x211E, r24
     b42:	90 93 1f 21 	sts	0x211F, r25
     b46:	04 c0       	rjmp	.+8      	; 0xb50 <main+0x1d8>
					else
						pixhawkOverrideCountdown = 10;
     b48:	40 92 1e 21 	sts	0x211E, r4
     b4c:	50 92 1f 21 	sts	0x211F, r5
				}
			}
		}		
		
		//Check for commands from the ON/OFF Switch
		if(USART_IsRXComplete(&ONOFF_USART)){
     b50:	80 91 c1 09 	lds	r24, 0x09C1
     b54:	88 23       	and	r24, r24
     b56:	84 f4       	brge	.+32     	; 0xb78 <main+0x200>
			receivedUSARTData = USART_GetChar(&ONOFF_USART);
     b58:	e0 ec       	ldi	r30, 0xC0	; 192
     b5a:	f9 e0       	ldi	r31, 0x09	; 9
     b5c:	80 81       	ld	r24, Z
			//CHECK FOR IF START OR STOP COMMAND
			if(receivedUSARTData == 10){	//Remote start requested
     b5e:	8a 30       	cpi	r24, 0x0A	; 10
     b60:	29 f4       	brne	.+10     	; 0xb6c <main+0x1f4>
				remoteInput = REMOTE_START_CHECK;
     b62:	c0 92 22 21 	sts	0x2122, r12
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
     b66:	a0 92 21 21 	sts	0x2121, r10
     b6a:	06 c0       	rjmp	.+12     	; 0xb78 <main+0x200>
			}	
			else if(receivedUSARTData == 20){	//Remote stop requested
     b6c:	84 31       	cpi	r24, 0x14	; 20
     b6e:	21 f4       	brne	.+8      	; 0xb78 <main+0x200>
				remoteInput = REMOTE_STOP_CHECK;
     b70:	60 92 22 21 	sts	0x2122, r6
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
     b74:	a0 92 21 21 	sts	0x2121, r10
			}
		}
		
		if(pixhawkOverride){	//If we do want to override the signal
     b78:	80 91 20 21 	lds	r24, 0x2120
     b7c:	88 23       	and	r24, r24
     b7e:	a1 f0       	breq	.+40     	; 0xba8 <main+0x230>
			TC_PWM_SET(manualPWMOutput);	//Output the desired override PWM output
     b80:	60 91 01 20 	lds	r22, 0x2001
     b84:	70 91 02 20 	lds	r23, 0x2002
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 b8 08 	call	0x1170	; 0x1170 <__floatunsisf>
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	5f e3       	ldi	r21, 0x3F	; 63
     b98:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
     b9c:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     ba0:	f7 01       	movw	r30, r14
     ba2:	60 a7       	std	Z+40, r22	; 0x28
     ba4:	71 a7       	std	Z+41, r23	; 0x29
     ba6:	13 c0       	rjmp	.+38     	; 0xbce <main+0x256>
		}
		else {  //We don't want to overrride the signal
			TC_PWM_SET(steeringPWMPeriod);	//Output the Pixhawk PWM signal
     ba8:	60 91 13 21 	lds	r22, 0x2113
     bac:	70 91 14 21 	lds	r23, 0x2114
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 b8 08 	call	0x1170	; 0x1170 <__floatunsisf>
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	5f e3       	ldi	r21, 0x3F	; 63
     bc0:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
     bc4:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
     bc8:	f7 01       	movw	r30, r14
     bca:	60 a7       	std	Z+40, r22	; 0x28
     bcc:	71 a7       	std	Z+41, r23	; 0x29
		}
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
     bce:	80 91 1d 21 	lds	r24, 0x211D
     bd2:	88 23       	and	r24, r24
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <main+0x260>
     bd6:	44 cf       	rjmp	.-376    	; 0xa60 <main+0xe8>
			broadcastStatus = 0;
     bd8:	10 92 1d 21 	sts	0x211D, r1
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     bdc:	f4 01       	movw	r30, r8
     bde:	10 a2       	std	Z+32, r1	; 0x20
     be0:	11 a2       	std	Z+33, r1	; 0x21
							//have a consistent report time. (We don't want to throw
							//out the accuracy of the TC)
			
			//Calculated desired output values
			double EBoxTemp = getEBoxTemperature();
     be2:	0e 94 04 04 	call	0x808	; 0x808 <_Z18getEBoxTemperaturev>
     be6:	69 83       	std	Y+1, r22	; 0x01
     be8:	7a 83       	std	Y+2, r23	; 0x02
     bea:	8b 83       	std	Y+3, r24	; 0x03
     bec:	9c 83       	std	Y+4, r25	; 0x04
			double electronicsBatteryVoltage = getElectronicsBatteryVoltage();
     bee:	0e 94 77 04 	call	0x8ee	; 0x8ee <_Z28getElectronicsBatteryVoltagev>
     bf2:	6b 01       	movw	r12, r22
     bf4:	7c 01       	movw	r14, r24
		}
    }
}

uint16_t inline getXTendRSSI(){
	RTC.CNT = 0;
     bf6:	10 92 08 04 	sts	0x0408, r1
     bfa:	10 92 09 04 	sts	0x0409, r1
				
	//Get RSSI from XTend
	RSSI.measuring = 0;
     bfe:	10 92 24 21 	sts	0x2124, r1
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f4 e0       	ldi	r31, 0x04	; 4
		break;
					
	}while(READ_RSSI_PIN());
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	b6 e0       	ldi	r27, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c0a:	8f e8       	ldi	r24, 0x8F	; 143
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <main+0x296>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <main+0x29c>
     c14:	00 00       	nop
	//Get RSSI from XTend
	RSSI.measuring = 0;
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     c16:	80 85       	ldd	r24, Z+8	; 0x08
     c18:	91 85       	ldd	r25, Z+9	; 0x09
     c1a:	82 31       	cpi	r24, 0x12	; 18
     c1c:	91 40       	sbci	r25, 0x01	; 1
     c1e:	28 f4       	brcc	.+10     	; 0xc2a <main+0x2b2>
		break;
					
	}while(READ_RSSI_PIN());
     c20:	18 96       	adiw	r26, 0x08	; 8
     c22:	8c 91       	ld	r24, X
     c24:	18 97       	sbiw	r26, 0x08	; 8
uint16_t inline getXTendRSSI(){
	RTC.CNT = 0;
				
	//Get RSSI from XTend
	RSSI.measuring = 0;
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
     c26:	82 fd       	sbrc	r24, 2
     c28:	f0 cf       	rjmp	.-32     	; 0xc0a <main+0x292>
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     c2a:	e0 e0       	ldi	r30, 0x00	; 0
     c2c:	f4 e0       	ldi	r31, 0x04	; 4
		break;
	}while(!READ_RSSI_PIN());
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b6 e0       	ldi	r27, 0x06	; 6
     c32:	8f e8       	ldi	r24, 0x8F	; 143
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <main+0x2be>
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <main+0x2c4>
     c3c:	00 00       	nop
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     c3e:	80 85       	ldd	r24, Z+8	; 0x08
     c40:	91 85       	ldd	r25, Z+9	; 0x09
     c42:	82 31       	cpi	r24, 0x12	; 18
     c44:	91 40       	sbci	r25, 0x01	; 1
     c46:	28 f4       	brcc	.+10     	; 0xc52 <main+0x2da>
		break;
	}while(!READ_RSSI_PIN());
     c48:	18 96       	adiw	r26, 0x08	; 8
     c4a:	8c 91       	ld	r24, X
     c4c:	18 97       	sbiw	r26, 0x08	; 8
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
					
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
     c4e:	82 ff       	sbrs	r24, 2
     c50:	f0 cf       	rjmp	.-32     	; 0xc32 <main+0x2ba>
					
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
	}while(!READ_RSSI_PIN());
				
	RTC.CNT = 0;  //Start counting
     c52:	10 92 08 04 	sts	0x0408, r1
     c56:	10 92 09 04 	sts	0x0409, r1
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     c5a:	e0 e0       	ldi	r30, 0x00	; 0
     c5c:	f4 e0       	ldi	r31, 0x04	; 4
		break;
	}while(READ_RSSI_PIN());
     c5e:	a0 e0       	ldi	r26, 0x00	; 0
     c60:	b6 e0       	ldi	r27, 0x06	; 6
     c62:	8f e8       	ldi	r24, 0x8F	; 143
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <main+0x2ee>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <main+0x2f4>
     c6c:	00 00       	nop
	RTC.CNT = 0;  //Start counting
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     c6e:	80 85       	ldd	r24, Z+8	; 0x08
     c70:	91 85       	ldd	r25, Z+9	; 0x09
     c72:	82 31       	cpi	r24, 0x12	; 18
     c74:	91 40       	sbci	r25, 0x01	; 1
     c76:	28 f4       	brcc	.+10     	; 0xc82 <main+0x30a>
		break;
	}while(READ_RSSI_PIN());
     c78:	18 96       	adiw	r26, 0x08	; 8
     c7a:	8c 91       	ld	r24, X
     c7c:	18 97       	sbiw	r26, 0x08	; 8
		break;
	}while(!READ_RSSI_PIN());
				
	RTC.CNT = 0;  //Start counting
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
     c7e:	82 fd       	sbrc	r24, 2
     c80:	f0 cf       	rjmp	.-32     	; 0xc62 <main+0x2ea>
					
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
	}while(READ_RSSI_PIN());
				
	RSSI.countDifference = RTC.CNT;
     c82:	80 91 08 04 	lds	r24, 0x0408
     c86:	90 91 09 04 	lds	r25, 0x0409
     c8a:	0f 2e       	mov	r0, r31
     c8c:	f3 e2       	ldi	r31, 0x23	; 35
     c8e:	af 2e       	mov	r10, r31
     c90:	f1 e2       	ldi	r31, 0x21	; 33
     c92:	bf 2e       	mov	r11, r31
     c94:	f0 2d       	mov	r31, r0
     c96:	f5 01       	movw	r30, r10
     c98:	84 83       	std	Z+4, r24	; 0x04
     c9a:	95 83       	std	Z+5, r25	; 0x05
	
	RSSI.value = (100 * RSSI.countDifference) / RSSI_MAX_COUNT;
     c9c:	24 81       	ldd	r18, Z+4	; 0x04
     c9e:	35 81       	ldd	r19, Z+5	; 0x05
     ca0:	44 e6       	ldi	r20, 0x64	; 100
     ca2:	42 9f       	mul	r20, r18
     ca4:	c0 01       	movw	r24, r0
     ca6:	43 9f       	mul	r20, r19
     ca8:	90 0d       	add	r25, r0
     caa:	11 24       	eor	r1, r1
     cac:	61 e1       	ldi	r22, 0x11	; 17
     cae:	71 e0       	ldi	r23, 0x01	; 1
     cb0:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__udivmodhi4>
     cb4:	60 83       	st	Z, r22
				
	RSSI.sampleCount++;
     cb6:	86 81       	ldd	r24, Z+6	; 0x06
     cb8:	97 81       	ldd	r25, Z+7	; 0x07
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	86 83       	std	Z+6, r24	; 0x06
     cbe:	97 83       	std	Z+7, r25	; 0x07
	
	return RSSI.countDifference;
     cc0:	84 81       	ldd	r24, Z+4	; 0x04
     cc2:	95 81       	ldd	r25, Z+5	; 0x05
			
			
			//Actually output the desired values
			//Not the most elegant code in the world, but it works...
			
			SendFloatPC(electronicsBatteryVoltage);	//Send the battery voltage
     cc4:	c7 01       	movw	r24, r14
     cc6:	b6 01       	movw	r22, r12
     cc8:	0e 94 20 07 	call	0xe40	; 0xe40 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     ccc:	82 ee       	ldi	r24, 0xE2	; 226
     cce:	90 e2       	ldi	r25, 0x20	; 32
     cd0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
			SendFloatPC(zero);		//Send the rear battery voltage
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	cb 01       	movw	r24, r22
     cda:	0e 94 20 07 	call	0xe40	; 0xe40 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     cde:	82 ee       	ldi	r24, 0xE2	; 226
     ce0:	90 e2       	ldi	r25, 0x20	; 32
     ce2:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
			SendFloatPC(EBoxTemp);	//Send the EBox Temperature
     ce6:	69 81       	ldd	r22, Y+1	; 0x01
     ce8:	7a 81       	ldd	r23, Y+2	; 0x02
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	0e 94 20 07 	call	0xe40	; 0xe40 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     cf2:	82 ee       	ldi	r24, 0xE2	; 226
     cf4:	90 e2       	ldi	r25, 0x20	; 32
     cf6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
			SendFloatPC(zero);		//Send 5v_SYS Curr
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	cb 01       	movw	r24, r22
     d00:	0e 94 20 07 	call	0xe40	; 0xe40 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     d04:	82 ee       	ldi	r24, 0xE2	; 226
     d06:	90 e2       	ldi	r25, 0x20	; 32
     d08:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
			SendFloatPC(zero);		//Send 5v_SYS Curr
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	cb 01       	movw	r24, r22
     d12:	0e 94 20 07 	call	0xe40	; 0xe40 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     d16:	82 ee       	ldi	r24, 0xE2	; 226
     d18:	90 e2       	ldi	r25, 0x20	; 32
     d1a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
			SendNumPC(RSSI.value);
     d1e:	f5 01       	movw	r30, r10
     d20:	80 81       	ld	r24, Z
     d22:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z9SendNumPCh>
			if(RSSI.value == 0)
     d26:	f5 01       	movw	r30, r10
     d28:	80 81       	ld	r24, Z
     d2a:	81 11       	cpse	r24, r1
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <main+0x3be>
				SendStringPC("0");
     d2e:	84 ee       	ldi	r24, 0xE4	; 228
     d30:	90 e2       	ldi	r25, 0x20	; 32
     d32:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z12SendStringPCPKc>
			SendStringPC((char *)"|");
     d36:	82 ee       	ldi	r24, 0xE2	; 226
     d38:	90 e2       	ldi	r25, 0x20	; 32
     d3a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
			SendNumPC(remoteInput);
     d3e:	80 91 22 21 	lds	r24, 0x2122
     d42:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z9SendNumPCh>
			//SendStringPC((char *)"|");
			
			debuggingOutput();
			
			//Newline
			SendStringPC((char *)"\n\r");
     d46:	8f ed       	ldi	r24, 0xDF	; 223
     d48:	90 e2       	ldi	r25, 0x20	; 32
     d4a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
	
			//Check if we have outputs that need to "expire"
			if(--remoteOutputCountdown == 0){
     d4e:	80 91 21 21 	lds	r24, 0x2121
     d52:	81 50       	subi	r24, 0x01	; 1
     d54:	80 93 21 21 	sts	0x2121, r24
     d58:	81 11       	cpse	r24, r1
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <main+0x3e8>
				remoteInput = 0;
     d5c:	10 92 22 21 	sts	0x2122, r1
			}
			
			//Check on the output overriding
			if(pixhawkOverrideCountdown){	//If we are still counting down, this also means that
     d60:	80 91 1e 21 	lds	r24, 0x211E
     d64:	90 91 1f 21 	lds	r25, 0x211F
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	31 f0       	breq	.+12     	; 0xd78 <main+0x400>
											//we are currently overriding our output
				--pixhawkOverrideCountdown;	//Decrement our counter
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	80 93 1e 21 	sts	0x211E, r24
     d72:	90 93 1f 21 	sts	0x211F, r25
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <main+0x404>
			}
			else {	//If we are not counting down, then we want to ensure we are outputting the Pixhawk PWM
				pixhawkOverride = 0;
     d78:	10 92 20 21 	sts	0x2120, r1
			}
	
			//Check the updating speed setting
			//The speed shouldn't be set lower than maybe 75mS due to RSSI processing time
			//Be careful if you change these, as they are referenced elsewhere (e.g. Override controls)
			if(CHECK_DIP_SW_1()){
     d7c:	f1 01       	movw	r30, r2
     d7e:	80 85       	ldd	r24, Z+8	; 0x08
     d80:	83 fd       	sbrc	r24, 3
     d82:	06 c0       	rjmp	.+12     	; 0xd90 <main+0x418>
				TCC4.PER = TC_1024_100MS;  //100mS delay
     d84:	85 e3       	ldi	r24, 0x35	; 53
     d86:	9c e0       	ldi	r25, 0x0C	; 12
     d88:	f4 01       	movw	r30, r8
     d8a:	86 a3       	std	Z+38, r24	; 0x26
     d8c:	97 a3       	std	Z+39, r25	; 0x27
     d8e:	52 ce       	rjmp	.-860    	; 0xa34 <main+0xbc>
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
     d90:	89 e0       	ldi	r24, 0x09	; 9
     d92:	9d e3       	ldi	r25, 0x3D	; 61
     d94:	f4 01       	movw	r30, r8
     d96:	86 a3       	std	Z+38, r24	; 0x26
     d98:	97 a3       	std	Z+39, r25	; 0x27
     d9a:	4c ce       	rjmp	.-872    	; 0xa34 <main+0xbc>

00000d9c <_Z12SendStringPCPc>:
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 81       	ld	r18, Z
     da0:	22 23       	and	r18, r18
     da2:	59 f0       	breq	.+22     	; 0xdba <_Z12SendStringPCPc+0x1e>
     da4:	dc 01       	movw	r26, r24
     da6:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
     da8:	e0 ec       	ldi	r30, 0xC0	; 192
     daa:	f8 e0       	ldi	r31, 0x08	; 8
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	95 ff       	sbrs	r25, 5
     db0:	fd cf       	rjmp	.-6      	; 0xdac <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
     db2:	20 83       	st	Z, r18
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     db4:	2d 91       	ld	r18, X+
     db6:	21 11       	cpse	r18, r1
     db8:	f9 cf       	rjmp	.-14     	; 0xdac <_Z12SendStringPCPc+0x10>
     dba:	08 95       	ret

00000dbc <_Z12SendStringPCPKc>:
	}
}

//Sends a string to the computer
void SendStringPC(const char stufftosend[]){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 81       	ld	r18, Z
     dc0:	22 23       	and	r18, r18
     dc2:	59 f0       	breq	.+22     	; 0xdda <_Z12SendStringPCPKc+0x1e>
     dc4:	dc 01       	movw	r26, r24
     dc6:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
     dc8:	e0 ec       	ldi	r30, 0xC0	; 192
     dca:	f8 e0       	ldi	r31, 0x08	; 8
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	95 ff       	sbrs	r25, 5
     dd0:	fd cf       	rjmp	.-6      	; 0xdcc <_Z12SendStringPCPKc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
     dd2:	20 83       	st	Z, r18
	}
}

//Sends a string to the computer
void SendStringPC(const char stufftosend[]){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     dd4:	2d 91       	ld	r18, X+
     dd6:	21 11       	cpse	r18, r1
     dd8:	f9 cf       	rjmp	.-14     	; 0xdcc <_Z12SendStringPCPKc+0x10>
     dda:	08 95       	ret

00000ddc <_Z13SendCharONOFFc>:
void SendCharPC(char charToSend){
	USART_PutChar(&COMP_USART, charToSend);
}

void SendCharONOFF(char charToSend){
	USART_PutChar(&ONOFF_USART, charToSend);	
     ddc:	80 93 c0 09 	sts	0x09C0, r24
     de0:	08 95       	ret

00000de2 <_Z9SendNumPCh>:
}

void SendNumPC(uint8_t numToSend){
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	2a 97       	sbiw	r28, 0x0a	; 10
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     df0:	4a e0       	ldi	r20, 0x0A	; 10
     df2:	be 01       	movw	r22, r28
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__itoa_ncheck>
	char buffer[10];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
     dfe:	ce 01       	movw	r24, r28
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
}
     e06:	2a 96       	adiw	r28, 0x0a	; 10
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <_Z9SendNumPCi>:
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
}

void SendNumPC(int16_t numToSend){
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	64 97       	sbiw	r28, 0x14	; 20
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	4a e0       	ldi	r20, 0x0A	; 10
     e22:	be 01       	movw	r22, r28
     e24:	6f 5f       	subi	r22, 0xFF	; 255
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
     e2c:	ce 01       	movw	r24, r28
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
}
     e34:	64 96       	adiw	r28, 0x14	; 20
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <_Z11SendFloatPCd>:
		sprintf(buffer,"%lx", tempLSB);		
	
	SendStringPC(buffer);
}

void SendFloatPC(double numToSend){
     e40:	8f 92       	push	r8
     e42:	9f 92       	push	r9
     e44:	af 92       	push	r10
     e46:	bf 92       	push	r11
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	c4 56       	subi	r28, 0x64	; 100
     e5e:	d1 09       	sbc	r29, r1
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	4b 01       	movw	r8, r22
     e66:	5c 01       	movw	r10, r24
	char buffer[100];
	
	int d1 = numToSend;
     e68:	0e 94 82 08 	call	0x1104	; 0x1104 <__fixsfsi>
     e6c:	6b 01       	movw	r12, r22
     e6e:	7c 01       	movw	r14, r24
	float f2 = numToSend - d1;
     e70:	07 2e       	mov	r0, r23
     e72:	00 0c       	add	r0, r0
     e74:	88 0b       	sbc	r24, r24
     e76:	99 0b       	sbc	r25, r25
     e78:	0e 94 ba 08 	call	0x1174	; 0x1174 <__floatsisf>
     e7c:	9b 01       	movw	r18, r22
     e7e:	ac 01       	movw	r20, r24
     e80:	c5 01       	movw	r24, r10
     e82:	b4 01       	movw	r22, r8
     e84:	0e 94 a3 07 	call	0xf46	; 0xf46 <__subsf3>
	int d2 = trunc(f2 * 10000);
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e4       	ldi	r19, 0x40	; 64
     e8c:	4c e1       	ldi	r20, 0x1C	; 28
     e8e:	56 e4       	ldi	r21, 0x46	; 70
     e90:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
     e94:	0e 94 b3 09 	call	0x1366	; 0x1366 <trunc>
     e98:	0e 94 82 08 	call	0x1104	; 0x1104 <__fixsfsi>
	
	sprintf(buffer, "%d.%04d", d1, abs(d2));
     e9c:	9b 01       	movw	r18, r22
     e9e:	77 23       	and	r23, r23
     ea0:	24 f4       	brge	.+8      	; 0xeaa <_Z11SendFloatPCd+0x6a>
     ea2:	22 27       	eor	r18, r18
     ea4:	33 27       	eor	r19, r19
     ea6:	26 1b       	sub	r18, r22
     ea8:	37 0b       	sbc	r19, r23
     eaa:	3f 93       	push	r19
     eac:	2f 93       	push	r18
     eae:	df 92       	push	r13
     eb0:	cf 92       	push	r12
     eb2:	8d ee       	ldi	r24, 0xED	; 237
     eb4:	90 e2       	ldi	r25, 0x20	; 32
     eb6:	9f 93       	push	r25
     eb8:	8f 93       	push	r24
     eba:	8e 01       	movw	r16, r28
     ebc:	0f 5f       	subi	r16, 0xFF	; 255
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	1f 93       	push	r17
     ec2:	0f 93       	push	r16
     ec4:	0e 94 ce 0a 	call	0x159c	; 0x159c <sprintf>
	
	//sprintf(buffer, "%f", numToSend);
	SendStringPC(buffer);
     ec8:	c8 01       	movw	r24, r16
     eca:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12SendStringPCPc>
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	de bf       	out	0x3e, r29	; 62
}
     ed2:	cc 59       	subi	r28, 0x9C	; 156
     ed4:	df 4f       	sbci	r29, 0xFF	; 255
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	08 95       	ret

00000ef4 <_Z14configureUSARTv>:

void configureUSART(void){
	/**** ENABLE COMUPTER USART ****/
	
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
     ef4:	e0 e4       	ldi	r30, 0x40	; 64
     ef6:	f6 e0       	ldi	r31, 0x06	; 6
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	41 83       	std	Z+1, r20	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
     efc:	30 e4       	ldi	r19, 0x40	; 64
     efe:	32 83       	std	Z+2, r19	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
     f00:	86 85       	ldd	r24, Z+14	; 0x0e
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     f06:	e0 ec       	ldi	r30, 0xC0	; 192
     f08:	f8 e0       	ldi	r31, 0x08	; 8
     f0a:	23 e0       	ldi	r18, 0x03	; 3
     f0c:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
     f0e:	92 e2       	ldi	r25, 0x22	; 34
     f10:	96 83       	std	Z+6, r25	; 0x06
     f12:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
     f14:	83 81       	ldd	r24, Z+3	; 0x03
     f16:	80 61       	ori	r24, 0x10	; 16
     f18:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
     f1a:	83 81       	ldd	r24, Z+3	; 0x03
     f1c:	88 60       	ori	r24, 0x08	; 8
     f1e:	83 83       	std	Z+3, r24	; 0x03
	
	/**** ENABLE ON/OFF SWITCH USART ****/
	
	//Set TX (pin7) to be output
	PORTD.DIRSET = PIN7_bm;
     f20:	e0 e6       	ldi	r30, 0x60	; 96
     f22:	f6 e0       	ldi	r31, 0x06	; 6
     f24:	41 83       	std	Z+1, r20	; 0x01
	//Set RX (pin6) to be input
	PORTD.DIRCLR = PIN6_bm;
     f26:	32 83       	std	Z+2, r19	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTD.REMAP |= (1 << 4);
     f28:	86 85       	ldd	r24, Z+14	; 0x0e
     f2a:	80 61       	ori	r24, 0x10	; 16
     f2c:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&ONOFF_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     f2e:	e0 ec       	ldi	r30, 0xC0	; 192
     f30:	f9 e0       	ldi	r31, 0x09	; 9
     f32:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&ONOFF_USART, 34, 0);
     f34:	96 83       	std	Z+6, r25	; 0x06
     f36:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&ONOFF_USART);
     f38:	83 81       	ldd	r24, Z+3	; 0x03
     f3a:	80 61       	ori	r24, 0x10	; 16
     f3c:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&ONOFF_USART);
     f3e:	83 81       	ldd	r24, Z+3	; 0x03
     f40:	88 60       	ori	r24, 0x08	; 8
     f42:	83 83       	std	Z+3, r24	; 0x03
     f44:	08 95       	ret

00000f46 <__subsf3>:
     f46:	50 58       	subi	r21, 0x80	; 128

00000f48 <__addsf3>:
     f48:	bb 27       	eor	r27, r27
     f4a:	aa 27       	eor	r26, r26
     f4c:	0e 94 bb 07 	call	0xf76	; 0xf76 <__addsf3x>
     f50:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__fp_round>
     f54:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__fp_pscA>
     f58:	38 f0       	brcs	.+14     	; 0xf68 <__addsf3+0x20>
     f5a:	0e 94 05 09 	call	0x120a	; 0x120a <__fp_pscB>
     f5e:	20 f0       	brcs	.+8      	; 0xf68 <__addsf3+0x20>
     f60:	39 f4       	brne	.+14     	; 0xf70 <__addsf3+0x28>
     f62:	9f 3f       	cpi	r25, 0xFF	; 255
     f64:	19 f4       	brne	.+6      	; 0xf6c <__addsf3+0x24>
     f66:	26 f4       	brtc	.+8      	; 0xf70 <__addsf3+0x28>
     f68:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_nan>
     f6c:	0e f4       	brtc	.+2      	; 0xf70 <__addsf3+0x28>
     f6e:	e0 95       	com	r30
     f70:	e7 fb       	bst	r30, 7
     f72:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_inf>

00000f76 <__addsf3x>:
     f76:	e9 2f       	mov	r30, r25
     f78:	0e 94 1d 09 	call	0x123a	; 0x123a <__fp_split3>
     f7c:	58 f3       	brcs	.-42     	; 0xf54 <__addsf3+0xc>
     f7e:	ba 17       	cp	r27, r26
     f80:	62 07       	cpc	r22, r18
     f82:	73 07       	cpc	r23, r19
     f84:	84 07       	cpc	r24, r20
     f86:	95 07       	cpc	r25, r21
     f88:	20 f0       	brcs	.+8      	; 0xf92 <__addsf3x+0x1c>
     f8a:	79 f4       	brne	.+30     	; 0xfaa <__addsf3x+0x34>
     f8c:	a6 f5       	brtc	.+104    	; 0xff6 <__addsf3x+0x80>
     f8e:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__fp_zero>
     f92:	0e f4       	brtc	.+2      	; 0xf96 <__addsf3x+0x20>
     f94:	e0 95       	com	r30
     f96:	0b 2e       	mov	r0, r27
     f98:	ba 2f       	mov	r27, r26
     f9a:	a0 2d       	mov	r26, r0
     f9c:	0b 01       	movw	r0, r22
     f9e:	b9 01       	movw	r22, r18
     fa0:	90 01       	movw	r18, r0
     fa2:	0c 01       	movw	r0, r24
     fa4:	ca 01       	movw	r24, r20
     fa6:	a0 01       	movw	r20, r0
     fa8:	11 24       	eor	r1, r1
     faa:	ff 27       	eor	r31, r31
     fac:	59 1b       	sub	r21, r25
     fae:	99 f0       	breq	.+38     	; 0xfd6 <__addsf3x+0x60>
     fb0:	59 3f       	cpi	r21, 0xF9	; 249
     fb2:	50 f4       	brcc	.+20     	; 0xfc8 <__addsf3x+0x52>
     fb4:	50 3e       	cpi	r21, 0xE0	; 224
     fb6:	68 f1       	brcs	.+90     	; 0x1012 <__addsf3x+0x9c>
     fb8:	1a 16       	cp	r1, r26
     fba:	f0 40       	sbci	r31, 0x00	; 0
     fbc:	a2 2f       	mov	r26, r18
     fbe:	23 2f       	mov	r18, r19
     fc0:	34 2f       	mov	r19, r20
     fc2:	44 27       	eor	r20, r20
     fc4:	58 5f       	subi	r21, 0xF8	; 248
     fc6:	f3 cf       	rjmp	.-26     	; 0xfae <__addsf3x+0x38>
     fc8:	46 95       	lsr	r20
     fca:	37 95       	ror	r19
     fcc:	27 95       	ror	r18
     fce:	a7 95       	ror	r26
     fd0:	f0 40       	sbci	r31, 0x00	; 0
     fd2:	53 95       	inc	r21
     fd4:	c9 f7       	brne	.-14     	; 0xfc8 <__addsf3x+0x52>
     fd6:	7e f4       	brtc	.+30     	; 0xff6 <__addsf3x+0x80>
     fd8:	1f 16       	cp	r1, r31
     fda:	ba 0b       	sbc	r27, r26
     fdc:	62 0b       	sbc	r22, r18
     fde:	73 0b       	sbc	r23, r19
     fe0:	84 0b       	sbc	r24, r20
     fe2:	ba f0       	brmi	.+46     	; 0x1012 <__addsf3x+0x9c>
     fe4:	91 50       	subi	r25, 0x01	; 1
     fe6:	a1 f0       	breq	.+40     	; 0x1010 <__addsf3x+0x9a>
     fe8:	ff 0f       	add	r31, r31
     fea:	bb 1f       	adc	r27, r27
     fec:	66 1f       	adc	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	c2 f7       	brpl	.-16     	; 0xfe4 <__addsf3x+0x6e>
     ff4:	0e c0       	rjmp	.+28     	; 0x1012 <__addsf3x+0x9c>
     ff6:	ba 0f       	add	r27, r26
     ff8:	62 1f       	adc	r22, r18
     ffa:	73 1f       	adc	r23, r19
     ffc:	84 1f       	adc	r24, r20
     ffe:	48 f4       	brcc	.+18     	; 0x1012 <__addsf3x+0x9c>
    1000:	87 95       	ror	r24
    1002:	77 95       	ror	r23
    1004:	67 95       	ror	r22
    1006:	b7 95       	ror	r27
    1008:	f7 95       	ror	r31
    100a:	9e 3f       	cpi	r25, 0xFE	; 254
    100c:	08 f0       	brcs	.+2      	; 0x1010 <__addsf3x+0x9a>
    100e:	b0 cf       	rjmp	.-160    	; 0xf70 <__addsf3+0x28>
    1010:	93 95       	inc	r25
    1012:	88 0f       	add	r24, r24
    1014:	08 f0       	brcs	.+2      	; 0x1018 <__addsf3x+0xa2>
    1016:	99 27       	eor	r25, r25
    1018:	ee 0f       	add	r30, r30
    101a:	97 95       	ror	r25
    101c:	87 95       	ror	r24
    101e:	08 95       	ret

00001020 <__divsf3>:
    1020:	0e 94 24 08 	call	0x1048	; 0x1048 <__divsf3x>
    1024:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__fp_round>
    1028:	0e 94 05 09 	call	0x120a	; 0x120a <__fp_pscB>
    102c:	58 f0       	brcs	.+22     	; 0x1044 <__divsf3+0x24>
    102e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__fp_pscA>
    1032:	40 f0       	brcs	.+16     	; 0x1044 <__divsf3+0x24>
    1034:	29 f4       	brne	.+10     	; 0x1040 <__divsf3+0x20>
    1036:	5f 3f       	cpi	r21, 0xFF	; 255
    1038:	29 f0       	breq	.+10     	; 0x1044 <__divsf3+0x24>
    103a:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_inf>
    103e:	51 11       	cpse	r21, r1
    1040:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_szero>
    1044:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_nan>

00001048 <__divsf3x>:
    1048:	0e 94 1d 09 	call	0x123a	; 0x123a <__fp_split3>
    104c:	68 f3       	brcs	.-38     	; 0x1028 <__divsf3+0x8>

0000104e <__divsf3_pse>:
    104e:	99 23       	and	r25, r25
    1050:	b1 f3       	breq	.-20     	; 0x103e <__divsf3+0x1e>
    1052:	55 23       	and	r21, r21
    1054:	91 f3       	breq	.-28     	; 0x103a <__divsf3+0x1a>
    1056:	95 1b       	sub	r25, r21
    1058:	55 0b       	sbc	r21, r21
    105a:	bb 27       	eor	r27, r27
    105c:	aa 27       	eor	r26, r26
    105e:	62 17       	cp	r22, r18
    1060:	73 07       	cpc	r23, r19
    1062:	84 07       	cpc	r24, r20
    1064:	38 f0       	brcs	.+14     	; 0x1074 <__divsf3_pse+0x26>
    1066:	9f 5f       	subi	r25, 0xFF	; 255
    1068:	5f 4f       	sbci	r21, 0xFF	; 255
    106a:	22 0f       	add	r18, r18
    106c:	33 1f       	adc	r19, r19
    106e:	44 1f       	adc	r20, r20
    1070:	aa 1f       	adc	r26, r26
    1072:	a9 f3       	breq	.-22     	; 0x105e <__divsf3_pse+0x10>
    1074:	35 d0       	rcall	.+106    	; 0x10e0 <__divsf3_pse+0x92>
    1076:	0e 2e       	mov	r0, r30
    1078:	3a f0       	brmi	.+14     	; 0x1088 <__divsf3_pse+0x3a>
    107a:	e0 e8       	ldi	r30, 0x80	; 128
    107c:	32 d0       	rcall	.+100    	; 0x10e2 <__divsf3_pse+0x94>
    107e:	91 50       	subi	r25, 0x01	; 1
    1080:	50 40       	sbci	r21, 0x00	; 0
    1082:	e6 95       	lsr	r30
    1084:	00 1c       	adc	r0, r0
    1086:	ca f7       	brpl	.-14     	; 0x107a <__divsf3_pse+0x2c>
    1088:	2b d0       	rcall	.+86     	; 0x10e0 <__divsf3_pse+0x92>
    108a:	fe 2f       	mov	r31, r30
    108c:	29 d0       	rcall	.+82     	; 0x10e0 <__divsf3_pse+0x92>
    108e:	66 0f       	add	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	88 1f       	adc	r24, r24
    1094:	bb 1f       	adc	r27, r27
    1096:	26 17       	cp	r18, r22
    1098:	37 07       	cpc	r19, r23
    109a:	48 07       	cpc	r20, r24
    109c:	ab 07       	cpc	r26, r27
    109e:	b0 e8       	ldi	r27, 0x80	; 128
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <__divsf3_pse+0x56>
    10a2:	bb 0b       	sbc	r27, r27
    10a4:	80 2d       	mov	r24, r0
    10a6:	bf 01       	movw	r22, r30
    10a8:	ff 27       	eor	r31, r31
    10aa:	93 58       	subi	r25, 0x83	; 131
    10ac:	5f 4f       	sbci	r21, 0xFF	; 255
    10ae:	3a f0       	brmi	.+14     	; 0x10be <__divsf3_pse+0x70>
    10b0:	9e 3f       	cpi	r25, 0xFE	; 254
    10b2:	51 05       	cpc	r21, r1
    10b4:	78 f0       	brcs	.+30     	; 0x10d4 <__divsf3_pse+0x86>
    10b6:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_inf>
    10ba:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_szero>
    10be:	5f 3f       	cpi	r21, 0xFF	; 255
    10c0:	e4 f3       	brlt	.-8      	; 0x10ba <__divsf3_pse+0x6c>
    10c2:	98 3e       	cpi	r25, 0xE8	; 232
    10c4:	d4 f3       	brlt	.-12     	; 0x10ba <__divsf3_pse+0x6c>
    10c6:	86 95       	lsr	r24
    10c8:	77 95       	ror	r23
    10ca:	67 95       	ror	r22
    10cc:	b7 95       	ror	r27
    10ce:	f7 95       	ror	r31
    10d0:	9f 5f       	subi	r25, 0xFF	; 255
    10d2:	c9 f7       	brne	.-14     	; 0x10c6 <__divsf3_pse+0x78>
    10d4:	88 0f       	add	r24, r24
    10d6:	91 1d       	adc	r25, r1
    10d8:	96 95       	lsr	r25
    10da:	87 95       	ror	r24
    10dc:	97 f9       	bld	r25, 7
    10de:	08 95       	ret
    10e0:	e1 e0       	ldi	r30, 0x01	; 1
    10e2:	66 0f       	add	r22, r22
    10e4:	77 1f       	adc	r23, r23
    10e6:	88 1f       	adc	r24, r24
    10e8:	bb 1f       	adc	r27, r27
    10ea:	62 17       	cp	r22, r18
    10ec:	73 07       	cpc	r23, r19
    10ee:	84 07       	cpc	r24, r20
    10f0:	ba 07       	cpc	r27, r26
    10f2:	20 f0       	brcs	.+8      	; 0x10fc <__divsf3_pse+0xae>
    10f4:	62 1b       	sub	r22, r18
    10f6:	73 0b       	sbc	r23, r19
    10f8:	84 0b       	sbc	r24, r20
    10fa:	ba 0b       	sbc	r27, r26
    10fc:	ee 1f       	adc	r30, r30
    10fe:	88 f7       	brcc	.-30     	; 0x10e2 <__divsf3_pse+0x94>
    1100:	e0 95       	com	r30
    1102:	08 95       	ret

00001104 <__fixsfsi>:
    1104:	0e 94 89 08 	call	0x1112	; 0x1112 <__fixunssfsi>
    1108:	68 94       	set
    110a:	b1 11       	cpse	r27, r1
    110c:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_szero>
    1110:	08 95       	ret

00001112 <__fixunssfsi>:
    1112:	0e 94 25 09 	call	0x124a	; 0x124a <__fp_splitA>
    1116:	88 f0       	brcs	.+34     	; 0x113a <__fixunssfsi+0x28>
    1118:	9f 57       	subi	r25, 0x7F	; 127
    111a:	98 f0       	brcs	.+38     	; 0x1142 <__fixunssfsi+0x30>
    111c:	b9 2f       	mov	r27, r25
    111e:	99 27       	eor	r25, r25
    1120:	b7 51       	subi	r27, 0x17	; 23
    1122:	b0 f0       	brcs	.+44     	; 0x1150 <__fixunssfsi+0x3e>
    1124:	e1 f0       	breq	.+56     	; 0x115e <__fixunssfsi+0x4c>
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	1a f0       	brmi	.+6      	; 0x1136 <__fixunssfsi+0x24>
    1130:	ba 95       	dec	r27
    1132:	c9 f7       	brne	.-14     	; 0x1126 <__fixunssfsi+0x14>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <__fixunssfsi+0x4c>
    1136:	b1 30       	cpi	r27, 0x01	; 1
    1138:	91 f0       	breq	.+36     	; 0x115e <__fixunssfsi+0x4c>
    113a:	0e 94 3f 09 	call	0x127e	; 0x127e <__fp_zero>
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	08 95       	ret
    1142:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__fp_zero>
    1146:	67 2f       	mov	r22, r23
    1148:	78 2f       	mov	r23, r24
    114a:	88 27       	eor	r24, r24
    114c:	b8 5f       	subi	r27, 0xF8	; 248
    114e:	39 f0       	breq	.+14     	; 0x115e <__fixunssfsi+0x4c>
    1150:	b9 3f       	cpi	r27, 0xF9	; 249
    1152:	cc f3       	brlt	.-14     	; 0x1146 <__fixunssfsi+0x34>
    1154:	86 95       	lsr	r24
    1156:	77 95       	ror	r23
    1158:	67 95       	ror	r22
    115a:	b3 95       	inc	r27
    115c:	d9 f7       	brne	.-10     	; 0x1154 <__fixunssfsi+0x42>
    115e:	3e f4       	brtc	.+14     	; 0x116e <__fixunssfsi+0x5c>
    1160:	90 95       	com	r25
    1162:	80 95       	com	r24
    1164:	70 95       	com	r23
    1166:	61 95       	neg	r22
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	08 95       	ret

00001170 <__floatunsisf>:
    1170:	e8 94       	clt
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <__floatsisf+0x12>

00001174 <__floatsisf>:
    1174:	97 fb       	bst	r25, 7
    1176:	3e f4       	brtc	.+14     	; 0x1186 <__floatsisf+0x12>
    1178:	90 95       	com	r25
    117a:	80 95       	com	r24
    117c:	70 95       	com	r23
    117e:	61 95       	neg	r22
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	8f 4f       	sbci	r24, 0xFF	; 255
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	99 23       	and	r25, r25
    1188:	a9 f0       	breq	.+42     	; 0x11b4 <__floatsisf+0x40>
    118a:	f9 2f       	mov	r31, r25
    118c:	96 e9       	ldi	r25, 0x96	; 150
    118e:	bb 27       	eor	r27, r27
    1190:	93 95       	inc	r25
    1192:	f6 95       	lsr	r31
    1194:	87 95       	ror	r24
    1196:	77 95       	ror	r23
    1198:	67 95       	ror	r22
    119a:	b7 95       	ror	r27
    119c:	f1 11       	cpse	r31, r1
    119e:	f8 cf       	rjmp	.-16     	; 0x1190 <__floatsisf+0x1c>
    11a0:	fa f4       	brpl	.+62     	; 0x11e0 <__floatsisf+0x6c>
    11a2:	bb 0f       	add	r27, r27
    11a4:	11 f4       	brne	.+4      	; 0x11aa <__floatsisf+0x36>
    11a6:	60 ff       	sbrs	r22, 0
    11a8:	1b c0       	rjmp	.+54     	; 0x11e0 <__floatsisf+0x6c>
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	8f 4f       	sbci	r24, 0xFF	; 255
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	16 c0       	rjmp	.+44     	; 0x11e0 <__floatsisf+0x6c>
    11b4:	88 23       	and	r24, r24
    11b6:	11 f0       	breq	.+4      	; 0x11bc <__floatsisf+0x48>
    11b8:	96 e9       	ldi	r25, 0x96	; 150
    11ba:	11 c0       	rjmp	.+34     	; 0x11de <__floatsisf+0x6a>
    11bc:	77 23       	and	r23, r23
    11be:	21 f0       	breq	.+8      	; 0x11c8 <__floatsisf+0x54>
    11c0:	9e e8       	ldi	r25, 0x8E	; 142
    11c2:	87 2f       	mov	r24, r23
    11c4:	76 2f       	mov	r23, r22
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <__floatsisf+0x5e>
    11c8:	66 23       	and	r22, r22
    11ca:	71 f0       	breq	.+28     	; 0x11e8 <__floatsisf+0x74>
    11cc:	96 e8       	ldi	r25, 0x86	; 134
    11ce:	86 2f       	mov	r24, r22
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	2a f0       	brmi	.+10     	; 0x11e0 <__floatsisf+0x6c>
    11d6:	9a 95       	dec	r25
    11d8:	66 0f       	add	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	88 1f       	adc	r24, r24
    11de:	da f7       	brpl	.-10     	; 0x11d6 <__floatsisf+0x62>
    11e0:	88 0f       	add	r24, r24
    11e2:	96 95       	lsr	r25
    11e4:	87 95       	ror	r24
    11e6:	97 f9       	bld	r25, 7
    11e8:	08 95       	ret

000011ea <__fp_inf>:
    11ea:	97 f9       	bld	r25, 7
    11ec:	9f 67       	ori	r25, 0x7F	; 127
    11ee:	80 e8       	ldi	r24, 0x80	; 128
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	08 95       	ret

000011f6 <__fp_nan>:
    11f6:	9f ef       	ldi	r25, 0xFF	; 255
    11f8:	80 ec       	ldi	r24, 0xC0	; 192
    11fa:	08 95       	ret

000011fc <__fp_pscA>:
    11fc:	00 24       	eor	r0, r0
    11fe:	0a 94       	dec	r0
    1200:	16 16       	cp	r1, r22
    1202:	17 06       	cpc	r1, r23
    1204:	18 06       	cpc	r1, r24
    1206:	09 06       	cpc	r0, r25
    1208:	08 95       	ret

0000120a <__fp_pscB>:
    120a:	00 24       	eor	r0, r0
    120c:	0a 94       	dec	r0
    120e:	12 16       	cp	r1, r18
    1210:	13 06       	cpc	r1, r19
    1212:	14 06       	cpc	r1, r20
    1214:	05 06       	cpc	r0, r21
    1216:	08 95       	ret

00001218 <__fp_round>:
    1218:	09 2e       	mov	r0, r25
    121a:	03 94       	inc	r0
    121c:	00 0c       	add	r0, r0
    121e:	11 f4       	brne	.+4      	; 0x1224 <__fp_round+0xc>
    1220:	88 23       	and	r24, r24
    1222:	52 f0       	brmi	.+20     	; 0x1238 <__fp_round+0x20>
    1224:	bb 0f       	add	r27, r27
    1226:	40 f4       	brcc	.+16     	; 0x1238 <__fp_round+0x20>
    1228:	bf 2b       	or	r27, r31
    122a:	11 f4       	brne	.+4      	; 0x1230 <__fp_round+0x18>
    122c:	60 ff       	sbrs	r22, 0
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <__fp_round+0x20>
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	08 95       	ret

0000123a <__fp_split3>:
    123a:	57 fd       	sbrc	r21, 7
    123c:	90 58       	subi	r25, 0x80	; 128
    123e:	44 0f       	add	r20, r20
    1240:	55 1f       	adc	r21, r21
    1242:	59 f0       	breq	.+22     	; 0x125a <__fp_splitA+0x10>
    1244:	5f 3f       	cpi	r21, 0xFF	; 255
    1246:	71 f0       	breq	.+28     	; 0x1264 <__fp_splitA+0x1a>
    1248:	47 95       	ror	r20

0000124a <__fp_splitA>:
    124a:	88 0f       	add	r24, r24
    124c:	97 fb       	bst	r25, 7
    124e:	99 1f       	adc	r25, r25
    1250:	61 f0       	breq	.+24     	; 0x126a <__fp_splitA+0x20>
    1252:	9f 3f       	cpi	r25, 0xFF	; 255
    1254:	79 f0       	breq	.+30     	; 0x1274 <__fp_splitA+0x2a>
    1256:	87 95       	ror	r24
    1258:	08 95       	ret
    125a:	12 16       	cp	r1, r18
    125c:	13 06       	cpc	r1, r19
    125e:	14 06       	cpc	r1, r20
    1260:	55 1f       	adc	r21, r21
    1262:	f2 cf       	rjmp	.-28     	; 0x1248 <__fp_split3+0xe>
    1264:	46 95       	lsr	r20
    1266:	f1 df       	rcall	.-30     	; 0x124a <__fp_splitA>
    1268:	08 c0       	rjmp	.+16     	; 0x127a <__fp_splitA+0x30>
    126a:	16 16       	cp	r1, r22
    126c:	17 06       	cpc	r1, r23
    126e:	18 06       	cpc	r1, r24
    1270:	99 1f       	adc	r25, r25
    1272:	f1 cf       	rjmp	.-30     	; 0x1256 <__fp_splitA+0xc>
    1274:	86 95       	lsr	r24
    1276:	71 05       	cpc	r23, r1
    1278:	61 05       	cpc	r22, r1
    127a:	08 94       	sec
    127c:	08 95       	ret

0000127e <__fp_zero>:
    127e:	e8 94       	clt

00001280 <__fp_szero>:
    1280:	bb 27       	eor	r27, r27
    1282:	66 27       	eor	r22, r22
    1284:	77 27       	eor	r23, r23
    1286:	cb 01       	movw	r24, r22
    1288:	97 f9       	bld	r25, 7
    128a:	08 95       	ret

0000128c <__mulsf3>:
    128c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3x>
    1290:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__fp_round>
    1294:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__fp_pscA>
    1298:	38 f0       	brcs	.+14     	; 0x12a8 <__mulsf3+0x1c>
    129a:	0e 94 05 09 	call	0x120a	; 0x120a <__fp_pscB>
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <__mulsf3+0x1c>
    12a0:	95 23       	and	r25, r21
    12a2:	11 f0       	breq	.+4      	; 0x12a8 <__mulsf3+0x1c>
    12a4:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_inf>
    12a8:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_nan>
    12ac:	11 24       	eor	r1, r1
    12ae:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_szero>

000012b2 <__mulsf3x>:
    12b2:	0e 94 1d 09 	call	0x123a	; 0x123a <__fp_split3>
    12b6:	70 f3       	brcs	.-36     	; 0x1294 <__mulsf3+0x8>

000012b8 <__mulsf3_pse>:
    12b8:	95 9f       	mul	r25, r21
    12ba:	c1 f3       	breq	.-16     	; 0x12ac <__mulsf3+0x20>
    12bc:	95 0f       	add	r25, r21
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	55 1f       	adc	r21, r21
    12c2:	62 9f       	mul	r22, r18
    12c4:	f0 01       	movw	r30, r0
    12c6:	72 9f       	mul	r23, r18
    12c8:	bb 27       	eor	r27, r27
    12ca:	f0 0d       	add	r31, r0
    12cc:	b1 1d       	adc	r27, r1
    12ce:	63 9f       	mul	r22, r19
    12d0:	aa 27       	eor	r26, r26
    12d2:	f0 0d       	add	r31, r0
    12d4:	b1 1d       	adc	r27, r1
    12d6:	aa 1f       	adc	r26, r26
    12d8:	64 9f       	mul	r22, r20
    12da:	66 27       	eor	r22, r22
    12dc:	b0 0d       	add	r27, r0
    12de:	a1 1d       	adc	r26, r1
    12e0:	66 1f       	adc	r22, r22
    12e2:	82 9f       	mul	r24, r18
    12e4:	22 27       	eor	r18, r18
    12e6:	b0 0d       	add	r27, r0
    12e8:	a1 1d       	adc	r26, r1
    12ea:	62 1f       	adc	r22, r18
    12ec:	73 9f       	mul	r23, r19
    12ee:	b0 0d       	add	r27, r0
    12f0:	a1 1d       	adc	r26, r1
    12f2:	62 1f       	adc	r22, r18
    12f4:	83 9f       	mul	r24, r19
    12f6:	a0 0d       	add	r26, r0
    12f8:	61 1d       	adc	r22, r1
    12fa:	22 1f       	adc	r18, r18
    12fc:	74 9f       	mul	r23, r20
    12fe:	33 27       	eor	r19, r19
    1300:	a0 0d       	add	r26, r0
    1302:	61 1d       	adc	r22, r1
    1304:	23 1f       	adc	r18, r19
    1306:	84 9f       	mul	r24, r20
    1308:	60 0d       	add	r22, r0
    130a:	21 1d       	adc	r18, r1
    130c:	82 2f       	mov	r24, r18
    130e:	76 2f       	mov	r23, r22
    1310:	6a 2f       	mov	r22, r26
    1312:	11 24       	eor	r1, r1
    1314:	9f 57       	subi	r25, 0x7F	; 127
    1316:	50 40       	sbci	r21, 0x00	; 0
    1318:	9a f0       	brmi	.+38     	; 0x1340 <__mulsf3_pse+0x88>
    131a:	f1 f0       	breq	.+60     	; 0x1358 <__mulsf3_pse+0xa0>
    131c:	88 23       	and	r24, r24
    131e:	4a f0       	brmi	.+18     	; 0x1332 <__mulsf3_pse+0x7a>
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	bb 1f       	adc	r27, r27
    1326:	66 1f       	adc	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	91 50       	subi	r25, 0x01	; 1
    132e:	50 40       	sbci	r21, 0x00	; 0
    1330:	a9 f7       	brne	.-22     	; 0x131c <__mulsf3_pse+0x64>
    1332:	9e 3f       	cpi	r25, 0xFE	; 254
    1334:	51 05       	cpc	r21, r1
    1336:	80 f0       	brcs	.+32     	; 0x1358 <__mulsf3_pse+0xa0>
    1338:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_inf>
    133c:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_szero>
    1340:	5f 3f       	cpi	r21, 0xFF	; 255
    1342:	e4 f3       	brlt	.-8      	; 0x133c <__mulsf3_pse+0x84>
    1344:	98 3e       	cpi	r25, 0xE8	; 232
    1346:	d4 f3       	brlt	.-12     	; 0x133c <__mulsf3_pse+0x84>
    1348:	86 95       	lsr	r24
    134a:	77 95       	ror	r23
    134c:	67 95       	ror	r22
    134e:	b7 95       	ror	r27
    1350:	f7 95       	ror	r31
    1352:	e7 95       	ror	r30
    1354:	9f 5f       	subi	r25, 0xFF	; 255
    1356:	c1 f7       	brne	.-16     	; 0x1348 <__mulsf3_pse+0x90>
    1358:	fe 2b       	or	r31, r30
    135a:	88 0f       	add	r24, r24
    135c:	91 1d       	adc	r25, r1
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	97 f9       	bld	r25, 7
    1364:	08 95       	ret

00001366 <trunc>:
    1366:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_trunc>
    136a:	30 f0       	brcs	.+12     	; 0x1378 <trunc+0x12>
    136c:	9f 37       	cpi	r25, 0x7F	; 127
    136e:	10 f4       	brcc	.+4      	; 0x1374 <trunc+0xe>
    1370:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_szero>
    1374:	0c 94 be 09 	jmp	0x137c	; 0x137c <__fp_mintl>
    1378:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__fp_mpack>

0000137c <__fp_mintl>:
    137c:	88 23       	and	r24, r24
    137e:	71 f4       	brne	.+28     	; 0x139c <__fp_mintl+0x20>
    1380:	77 23       	and	r23, r23
    1382:	21 f0       	breq	.+8      	; 0x138c <__fp_mintl+0x10>
    1384:	98 50       	subi	r25, 0x08	; 8
    1386:	87 2b       	or	r24, r23
    1388:	76 2f       	mov	r23, r22
    138a:	07 c0       	rjmp	.+14     	; 0x139a <__fp_mintl+0x1e>
    138c:	66 23       	and	r22, r22
    138e:	11 f4       	brne	.+4      	; 0x1394 <__fp_mintl+0x18>
    1390:	99 27       	eor	r25, r25
    1392:	0d c0       	rjmp	.+26     	; 0x13ae <__fp_mintl+0x32>
    1394:	90 51       	subi	r25, 0x10	; 16
    1396:	86 2b       	or	r24, r22
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	2a f0       	brmi	.+10     	; 0x13a8 <__fp_mintl+0x2c>
    139e:	9a 95       	dec	r25
    13a0:	66 0f       	add	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	da f7       	brpl	.-10     	; 0x139e <__fp_mintl+0x22>
    13a8:	88 0f       	add	r24, r24
    13aa:	96 95       	lsr	r25
    13ac:	87 95       	ror	r24
    13ae:	97 f9       	bld	r25, 7
    13b0:	08 95       	ret

000013b2 <__fp_mpack>:
    13b2:	9f 3f       	cpi	r25, 0xFF	; 255
    13b4:	31 f0       	breq	.+12     	; 0x13c2 <__fp_mpack_finite+0xc>

000013b6 <__fp_mpack_finite>:
    13b6:	91 50       	subi	r25, 0x01	; 1
    13b8:	20 f4       	brcc	.+8      	; 0x13c2 <__fp_mpack_finite+0xc>
    13ba:	87 95       	ror	r24
    13bc:	77 95       	ror	r23
    13be:	67 95       	ror	r22
    13c0:	b7 95       	ror	r27
    13c2:	88 0f       	add	r24, r24
    13c4:	91 1d       	adc	r25, r1
    13c6:	96 95       	lsr	r25
    13c8:	87 95       	ror	r24
    13ca:	97 f9       	bld	r25, 7
    13cc:	08 95       	ret

000013ce <__fp_trunc>:
    13ce:	0e 94 25 09 	call	0x124a	; 0x124a <__fp_splitA>
    13d2:	a0 f0       	brcs	.+40     	; 0x13fc <__fp_trunc+0x2e>
    13d4:	be e7       	ldi	r27, 0x7E	; 126
    13d6:	b9 17       	cp	r27, r25
    13d8:	88 f4       	brcc	.+34     	; 0x13fc <__fp_trunc+0x2e>
    13da:	bb 27       	eor	r27, r27
    13dc:	9f 38       	cpi	r25, 0x8F	; 143
    13de:	60 f4       	brcc	.+24     	; 0x13f8 <__fp_trunc+0x2a>
    13e0:	16 16       	cp	r1, r22
    13e2:	b1 1d       	adc	r27, r1
    13e4:	67 2f       	mov	r22, r23
    13e6:	78 2f       	mov	r23, r24
    13e8:	88 27       	eor	r24, r24
    13ea:	98 5f       	subi	r25, 0xF8	; 248
    13ec:	f7 cf       	rjmp	.-18     	; 0x13dc <__fp_trunc+0xe>
    13ee:	86 95       	lsr	r24
    13f0:	77 95       	ror	r23
    13f2:	67 95       	ror	r22
    13f4:	b1 1d       	adc	r27, r1
    13f6:	93 95       	inc	r25
    13f8:	96 39       	cpi	r25, 0x96	; 150
    13fa:	c8 f3       	brcs	.-14     	; 0x13ee <__fp_trunc+0x20>
    13fc:	08 95       	ret

000013fe <__udivmodhi4>:
    13fe:	aa 1b       	sub	r26, r26
    1400:	bb 1b       	sub	r27, r27
    1402:	51 e1       	ldi	r21, 0x11	; 17
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <__udivmodhi4_ep>

00001406 <__udivmodhi4_loop>:
    1406:	aa 1f       	adc	r26, r26
    1408:	bb 1f       	adc	r27, r27
    140a:	a6 17       	cp	r26, r22
    140c:	b7 07       	cpc	r27, r23
    140e:	10 f0       	brcs	.+4      	; 0x1414 <__udivmodhi4_ep>
    1410:	a6 1b       	sub	r26, r22
    1412:	b7 0b       	sbc	r27, r23

00001414 <__udivmodhi4_ep>:
    1414:	88 1f       	adc	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	5a 95       	dec	r21
    141a:	a9 f7       	brne	.-22     	; 0x1406 <__udivmodhi4_loop>
    141c:	80 95       	com	r24
    141e:	90 95       	com	r25
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	08 95       	ret

00001426 <__udivmodsi4>:
    1426:	a1 e2       	ldi	r26, 0x21	; 33
    1428:	1a 2e       	mov	r1, r26
    142a:	aa 1b       	sub	r26, r26
    142c:	bb 1b       	sub	r27, r27
    142e:	fd 01       	movw	r30, r26
    1430:	0d c0       	rjmp	.+26     	; 0x144c <__udivmodsi4_ep>

00001432 <__udivmodsi4_loop>:
    1432:	aa 1f       	adc	r26, r26
    1434:	bb 1f       	adc	r27, r27
    1436:	ee 1f       	adc	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	a2 17       	cp	r26, r18
    143c:	b3 07       	cpc	r27, r19
    143e:	e4 07       	cpc	r30, r20
    1440:	f5 07       	cpc	r31, r21
    1442:	20 f0       	brcs	.+8      	; 0x144c <__udivmodsi4_ep>
    1444:	a2 1b       	sub	r26, r18
    1446:	b3 0b       	sbc	r27, r19
    1448:	e4 0b       	sbc	r30, r20
    144a:	f5 0b       	sbc	r31, r21

0000144c <__udivmodsi4_ep>:
    144c:	66 1f       	adc	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	1a 94       	dec	r1
    1456:	69 f7       	brne	.-38     	; 0x1432 <__udivmodsi4_loop>
    1458:	60 95       	com	r22
    145a:	70 95       	com	r23
    145c:	80 95       	com	r24
    145e:	90 95       	com	r25
    1460:	9b 01       	movw	r18, r22
    1462:	ac 01       	movw	r20, r24
    1464:	bd 01       	movw	r22, r26
    1466:	cf 01       	movw	r24, r30
    1468:	08 95       	ret

0000146a <__umoddi3>:
    146a:	68 94       	set
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <__udivdi3_umoddi3>

0000146e <__udivdi3>:
    146e:	e8 94       	clt

00001470 <__udivdi3_umoddi3>:
    1470:	8f 92       	push	r8
    1472:	9f 92       	push	r9
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	0e 94 43 0a 	call	0x1486	; 0x1486 <__udivmod64>
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	9f 90       	pop	r9
    1482:	8f 90       	pop	r8
    1484:	08 95       	ret

00001486 <__udivmod64>:
    1486:	88 24       	eor	r8, r8
    1488:	99 24       	eor	r9, r9
    148a:	f4 01       	movw	r30, r8
    148c:	e4 01       	movw	r28, r8
    148e:	b0 e4       	ldi	r27, 0x40	; 64
    1490:	9f 93       	push	r25
    1492:	aa 27       	eor	r26, r26
    1494:	9a 15       	cp	r25, r10
    1496:	8b 04       	cpc	r8, r11
    1498:	9c 04       	cpc	r9, r12
    149a:	ed 05       	cpc	r30, r13
    149c:	fe 05       	cpc	r31, r14
    149e:	cf 05       	cpc	r28, r15
    14a0:	d0 07       	cpc	r29, r16
    14a2:	a1 07       	cpc	r26, r17
    14a4:	98 f4       	brcc	.+38     	; 0x14cc <__udivmod64+0x46>
    14a6:	ad 2f       	mov	r26, r29
    14a8:	dc 2f       	mov	r29, r28
    14aa:	cf 2f       	mov	r28, r31
    14ac:	fe 2f       	mov	r31, r30
    14ae:	e9 2d       	mov	r30, r9
    14b0:	98 2c       	mov	r9, r8
    14b2:	89 2e       	mov	r8, r25
    14b4:	98 2f       	mov	r25, r24
    14b6:	87 2f       	mov	r24, r23
    14b8:	76 2f       	mov	r23, r22
    14ba:	65 2f       	mov	r22, r21
    14bc:	54 2f       	mov	r21, r20
    14be:	43 2f       	mov	r20, r19
    14c0:	32 2f       	mov	r19, r18
    14c2:	22 27       	eor	r18, r18
    14c4:	b8 50       	subi	r27, 0x08	; 8
    14c6:	31 f7       	brne	.-52     	; 0x1494 <__udivmod64+0xe>
    14c8:	bf 91       	pop	r27
    14ca:	27 c0       	rjmp	.+78     	; 0x151a <__udivmod64+0x94>
    14cc:	1b 2e       	mov	r1, r27
    14ce:	bf 91       	pop	r27
    14d0:	bb 27       	eor	r27, r27
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	44 1f       	adc	r20, r20
    14d8:	55 1f       	adc	r21, r21
    14da:	66 1f       	adc	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	88 1f       	adc	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	88 1c       	adc	r8, r8
    14e4:	99 1c       	adc	r9, r9
    14e6:	ee 1f       	adc	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	cc 1f       	adc	r28, r28
    14ec:	dd 1f       	adc	r29, r29
    14ee:	aa 1f       	adc	r26, r26
    14f0:	bb 1f       	adc	r27, r27
    14f2:	8a 14       	cp	r8, r10
    14f4:	9b 04       	cpc	r9, r11
    14f6:	ec 05       	cpc	r30, r12
    14f8:	fd 05       	cpc	r31, r13
    14fa:	ce 05       	cpc	r28, r14
    14fc:	df 05       	cpc	r29, r15
    14fe:	a0 07       	cpc	r26, r16
    1500:	b1 07       	cpc	r27, r17
    1502:	48 f0       	brcs	.+18     	; 0x1516 <__udivmod64+0x90>
    1504:	8a 18       	sub	r8, r10
    1506:	9b 08       	sbc	r9, r11
    1508:	ec 09       	sbc	r30, r12
    150a:	fd 09       	sbc	r31, r13
    150c:	ce 09       	sbc	r28, r14
    150e:	df 09       	sbc	r29, r15
    1510:	a0 0b       	sbc	r26, r16
    1512:	b1 0b       	sbc	r27, r17
    1514:	21 60       	ori	r18, 0x01	; 1
    1516:	1a 94       	dec	r1
    1518:	e1 f6       	brne	.-72     	; 0x14d2 <__udivmod64+0x4c>
    151a:	2e f4       	brtc	.+10     	; 0x1526 <__udivmod64+0xa0>
    151c:	94 01       	movw	r18, r8
    151e:	af 01       	movw	r20, r30
    1520:	be 01       	movw	r22, r28
    1522:	cd 01       	movw	r24, r26
    1524:	00 0c       	add	r0, r0
    1526:	08 95       	ret

00001528 <__adddi3>:
    1528:	2a 0d       	add	r18, r10
    152a:	3b 1d       	adc	r19, r11
    152c:	4c 1d       	adc	r20, r12
    152e:	5d 1d       	adc	r21, r13
    1530:	6e 1d       	adc	r22, r14
    1532:	7f 1d       	adc	r23, r15
    1534:	80 1f       	adc	r24, r16
    1536:	91 1f       	adc	r25, r17
    1538:	08 95       	ret

0000153a <__adddi3_s8>:
    153a:	00 24       	eor	r0, r0
    153c:	a7 fd       	sbrc	r26, 7
    153e:	00 94       	com	r0
    1540:	2a 0f       	add	r18, r26
    1542:	30 1d       	adc	r19, r0
    1544:	40 1d       	adc	r20, r0
    1546:	50 1d       	adc	r21, r0
    1548:	60 1d       	adc	r22, r0
    154a:	70 1d       	adc	r23, r0
    154c:	80 1d       	adc	r24, r0
    154e:	90 1d       	adc	r25, r0
    1550:	08 95       	ret

00001552 <__itoa_ncheck>:
    1552:	bb 27       	eor	r27, r27
    1554:	4a 30       	cpi	r20, 0x0A	; 10
    1556:	31 f4       	brne	.+12     	; 0x1564 <__itoa_ncheck+0x12>
    1558:	99 23       	and	r25, r25
    155a:	22 f4       	brpl	.+8      	; 0x1564 <__itoa_ncheck+0x12>
    155c:	bd e2       	ldi	r27, 0x2D	; 45
    155e:	90 95       	com	r25
    1560:	81 95       	neg	r24
    1562:	9f 4f       	sbci	r25, 0xFF	; 255
    1564:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__utoa_common>

00001568 <__utoa_ncheck>:
    1568:	bb 27       	eor	r27, r27

0000156a <__utoa_common>:
    156a:	fb 01       	movw	r30, r22
    156c:	55 27       	eor	r21, r21
    156e:	aa 27       	eor	r26, r26
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	aa 1f       	adc	r26, r26
    1576:	a4 17       	cp	r26, r20
    1578:	10 f0       	brcs	.+4      	; 0x157e <__utoa_common+0x14>
    157a:	a4 1b       	sub	r26, r20
    157c:	83 95       	inc	r24
    157e:	50 51       	subi	r21, 0x10	; 16
    1580:	b9 f7       	brne	.-18     	; 0x1570 <__utoa_common+0x6>
    1582:	a0 5d       	subi	r26, 0xD0	; 208
    1584:	aa 33       	cpi	r26, 0x3A	; 58
    1586:	08 f0       	brcs	.+2      	; 0x158a <__utoa_common+0x20>
    1588:	a9 5d       	subi	r26, 0xD9	; 217
    158a:	a1 93       	st	Z+, r26
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	79 f7       	brne	.-34     	; 0x156e <__utoa_common+0x4>
    1590:	b1 11       	cpse	r27, r1
    1592:	b1 93       	st	Z+, r27
    1594:	11 92       	st	Z+, r1
    1596:	cb 01       	movw	r24, r22
    1598:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <strrev>

0000159c <sprintf>:
    159c:	ae e0       	ldi	r26, 0x0E	; 14
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e4 ed       	ldi	r30, 0xD4	; 212
    15a2:	fa e0       	ldi	r31, 0x0A	; 10
    15a4:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__prologue_saves__+0x1c>
    15a8:	0d 89       	ldd	r16, Y+21	; 0x15
    15aa:	1e 89       	ldd	r17, Y+22	; 0x16
    15ac:	86 e0       	ldi	r24, 0x06	; 6
    15ae:	8c 83       	std	Y+4, r24	; 0x04
    15b0:	09 83       	std	Y+1, r16	; 0x01
    15b2:	1a 83       	std	Y+2, r17	; 0x02
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	9f e7       	ldi	r25, 0x7F	; 127
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	ae 01       	movw	r20, r28
    15be:	47 5e       	subi	r20, 0xE7	; 231
    15c0:	5f 4f       	sbci	r21, 0xFF	; 255
    15c2:	6f 89       	ldd	r22, Y+23	; 0x17
    15c4:	78 8d       	ldd	r23, Y+24	; 0x18
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <vfprintf>
    15ce:	2f 81       	ldd	r18, Y+7	; 0x07
    15d0:	38 85       	ldd	r19, Y+8	; 0x08
    15d2:	f8 01       	movw	r30, r16
    15d4:	e2 0f       	add	r30, r18
    15d6:	f3 1f       	adc	r31, r19
    15d8:	10 82       	st	Z, r1
    15da:	2e 96       	adiw	r28, 0x0e	; 14
    15dc:	e4 e0       	ldi	r30, 0x04	; 4
    15de:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__epilogue_restores__+0x1c>

000015e2 <vfprintf>:
    15e2:	ac e0       	ldi	r26, 0x0C	; 12
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e7 ef       	ldi	r30, 0xF7	; 247
    15e8:	fa e0       	ldi	r31, 0x0A	; 10
    15ea:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__prologue_saves__>
    15ee:	7c 01       	movw	r14, r24
    15f0:	6b 01       	movw	r12, r22
    15f2:	8a 01       	movw	r16, r20
    15f4:	fc 01       	movw	r30, r24
    15f6:	16 82       	std	Z+6, r1	; 0x06
    15f8:	17 82       	std	Z+7, r1	; 0x07
    15fa:	83 81       	ldd	r24, Z+3	; 0x03
    15fc:	81 ff       	sbrs	r24, 1
    15fe:	bd c1       	rjmp	.+890    	; 0x197a <vfprintf+0x398>
    1600:	ce 01       	movw	r24, r28
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	4c 01       	movw	r8, r24
    1606:	f7 01       	movw	r30, r14
    1608:	93 81       	ldd	r25, Z+3	; 0x03
    160a:	f6 01       	movw	r30, r12
    160c:	93 fd       	sbrc	r25, 3
    160e:	85 91       	lpm	r24, Z+
    1610:	93 ff       	sbrs	r25, 3
    1612:	81 91       	ld	r24, Z+
    1614:	6f 01       	movw	r12, r30
    1616:	88 23       	and	r24, r24
    1618:	09 f4       	brne	.+2      	; 0x161c <vfprintf+0x3a>
    161a:	ab c1       	rjmp	.+854    	; 0x1972 <vfprintf+0x390>
    161c:	85 32       	cpi	r24, 0x25	; 37
    161e:	39 f4       	brne	.+14     	; 0x162e <vfprintf+0x4c>
    1620:	93 fd       	sbrc	r25, 3
    1622:	85 91       	lpm	r24, Z+
    1624:	93 ff       	sbrs	r25, 3
    1626:	81 91       	ld	r24, Z+
    1628:	6f 01       	movw	r12, r30
    162a:	85 32       	cpi	r24, 0x25	; 37
    162c:	29 f4       	brne	.+10     	; 0x1638 <vfprintf+0x56>
    162e:	b7 01       	movw	r22, r14
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <fputc>
    1636:	e7 cf       	rjmp	.-50     	; 0x1606 <vfprintf+0x24>
    1638:	51 2c       	mov	r5, r1
    163a:	31 2c       	mov	r3, r1
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	20 32       	cpi	r18, 0x20	; 32
    1640:	a0 f4       	brcc	.+40     	; 0x166a <vfprintf+0x88>
    1642:	8b 32       	cpi	r24, 0x2B	; 43
    1644:	69 f0       	breq	.+26     	; 0x1660 <vfprintf+0x7e>
    1646:	30 f4       	brcc	.+12     	; 0x1654 <vfprintf+0x72>
    1648:	80 32       	cpi	r24, 0x20	; 32
    164a:	59 f0       	breq	.+22     	; 0x1662 <vfprintf+0x80>
    164c:	83 32       	cpi	r24, 0x23	; 35
    164e:	69 f4       	brne	.+26     	; 0x166a <vfprintf+0x88>
    1650:	20 61       	ori	r18, 0x10	; 16
    1652:	2c c0       	rjmp	.+88     	; 0x16ac <vfprintf+0xca>
    1654:	8d 32       	cpi	r24, 0x2D	; 45
    1656:	39 f0       	breq	.+14     	; 0x1666 <vfprintf+0x84>
    1658:	80 33       	cpi	r24, 0x30	; 48
    165a:	39 f4       	brne	.+14     	; 0x166a <vfprintf+0x88>
    165c:	21 60       	ori	r18, 0x01	; 1
    165e:	26 c0       	rjmp	.+76     	; 0x16ac <vfprintf+0xca>
    1660:	22 60       	ori	r18, 0x02	; 2
    1662:	24 60       	ori	r18, 0x04	; 4
    1664:	23 c0       	rjmp	.+70     	; 0x16ac <vfprintf+0xca>
    1666:	28 60       	ori	r18, 0x08	; 8
    1668:	21 c0       	rjmp	.+66     	; 0x16ac <vfprintf+0xca>
    166a:	27 fd       	sbrc	r18, 7
    166c:	27 c0       	rjmp	.+78     	; 0x16bc <vfprintf+0xda>
    166e:	30 ed       	ldi	r19, 0xD0	; 208
    1670:	38 0f       	add	r19, r24
    1672:	3a 30       	cpi	r19, 0x0A	; 10
    1674:	78 f4       	brcc	.+30     	; 0x1694 <vfprintf+0xb2>
    1676:	26 ff       	sbrs	r18, 6
    1678:	06 c0       	rjmp	.+12     	; 0x1686 <vfprintf+0xa4>
    167a:	fa e0       	ldi	r31, 0x0A	; 10
    167c:	5f 9e       	mul	r5, r31
    167e:	30 0d       	add	r19, r0
    1680:	11 24       	eor	r1, r1
    1682:	53 2e       	mov	r5, r19
    1684:	13 c0       	rjmp	.+38     	; 0x16ac <vfprintf+0xca>
    1686:	8a e0       	ldi	r24, 0x0A	; 10
    1688:	38 9e       	mul	r3, r24
    168a:	30 0d       	add	r19, r0
    168c:	11 24       	eor	r1, r1
    168e:	33 2e       	mov	r3, r19
    1690:	20 62       	ori	r18, 0x20	; 32
    1692:	0c c0       	rjmp	.+24     	; 0x16ac <vfprintf+0xca>
    1694:	8e 32       	cpi	r24, 0x2E	; 46
    1696:	21 f4       	brne	.+8      	; 0x16a0 <vfprintf+0xbe>
    1698:	26 fd       	sbrc	r18, 6
    169a:	6b c1       	rjmp	.+726    	; 0x1972 <vfprintf+0x390>
    169c:	20 64       	ori	r18, 0x40	; 64
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <vfprintf+0xca>
    16a0:	8c 36       	cpi	r24, 0x6C	; 108
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <vfprintf+0xc6>
    16a4:	20 68       	ori	r18, 0x80	; 128
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0xca>
    16a8:	88 36       	cpi	r24, 0x68	; 104
    16aa:	41 f4       	brne	.+16     	; 0x16bc <vfprintf+0xda>
    16ac:	f6 01       	movw	r30, r12
    16ae:	93 fd       	sbrc	r25, 3
    16b0:	85 91       	lpm	r24, Z+
    16b2:	93 ff       	sbrs	r25, 3
    16b4:	81 91       	ld	r24, Z+
    16b6:	6f 01       	movw	r12, r30
    16b8:	81 11       	cpse	r24, r1
    16ba:	c1 cf       	rjmp	.-126    	; 0x163e <vfprintf+0x5c>
    16bc:	98 2f       	mov	r25, r24
    16be:	9f 7d       	andi	r25, 0xDF	; 223
    16c0:	95 54       	subi	r25, 0x45	; 69
    16c2:	93 30       	cpi	r25, 0x03	; 3
    16c4:	28 f4       	brcc	.+10     	; 0x16d0 <vfprintf+0xee>
    16c6:	0c 5f       	subi	r16, 0xFC	; 252
    16c8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ca:	ff e3       	ldi	r31, 0x3F	; 63
    16cc:	f9 83       	std	Y+1, r31	; 0x01
    16ce:	0d c0       	rjmp	.+26     	; 0x16ea <vfprintf+0x108>
    16d0:	83 36       	cpi	r24, 0x63	; 99
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <vfprintf+0xfe>
    16d4:	83 37       	cpi	r24, 0x73	; 115
    16d6:	71 f0       	breq	.+28     	; 0x16f4 <vfprintf+0x112>
    16d8:	83 35       	cpi	r24, 0x53	; 83
    16da:	09 f0       	breq	.+2      	; 0x16de <vfprintf+0xfc>
    16dc:	5b c0       	rjmp	.+182    	; 0x1794 <vfprintf+0x1b2>
    16de:	22 c0       	rjmp	.+68     	; 0x1724 <vfprintf+0x142>
    16e0:	f8 01       	movw	r30, r16
    16e2:	80 81       	ld	r24, Z
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	0e 5f       	subi	r16, 0xFE	; 254
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	44 24       	eor	r4, r4
    16ec:	43 94       	inc	r4
    16ee:	51 2c       	mov	r5, r1
    16f0:	54 01       	movw	r10, r8
    16f2:	15 c0       	rjmp	.+42     	; 0x171e <vfprintf+0x13c>
    16f4:	38 01       	movw	r6, r16
    16f6:	f2 e0       	ldi	r31, 0x02	; 2
    16f8:	6f 0e       	add	r6, r31
    16fa:	71 1c       	adc	r7, r1
    16fc:	f8 01       	movw	r30, r16
    16fe:	a0 80       	ld	r10, Z
    1700:	b1 80       	ldd	r11, Z+1	; 0x01
    1702:	26 ff       	sbrs	r18, 6
    1704:	03 c0       	rjmp	.+6      	; 0x170c <vfprintf+0x12a>
    1706:	65 2d       	mov	r22, r5
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <vfprintf+0x12e>
    170c:	6f ef       	ldi	r22, 0xFF	; 255
    170e:	7f ef       	ldi	r23, 0xFF	; 255
    1710:	c5 01       	movw	r24, r10
    1712:	2c 87       	std	Y+12, r18	; 0x0c
    1714:	0e 94 ce 0c 	call	0x199c	; 0x199c <strnlen>
    1718:	2c 01       	movw	r4, r24
    171a:	83 01       	movw	r16, r6
    171c:	2c 85       	ldd	r18, Y+12	; 0x0c
    171e:	2f 77       	andi	r18, 0x7F	; 127
    1720:	22 2e       	mov	r2, r18
    1722:	17 c0       	rjmp	.+46     	; 0x1752 <vfprintf+0x170>
    1724:	38 01       	movw	r6, r16
    1726:	f2 e0       	ldi	r31, 0x02	; 2
    1728:	6f 0e       	add	r6, r31
    172a:	71 1c       	adc	r7, r1
    172c:	f8 01       	movw	r30, r16
    172e:	a0 80       	ld	r10, Z
    1730:	b1 80       	ldd	r11, Z+1	; 0x01
    1732:	26 ff       	sbrs	r18, 6
    1734:	03 c0       	rjmp	.+6      	; 0x173c <vfprintf+0x15a>
    1736:	65 2d       	mov	r22, r5
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <vfprintf+0x15e>
    173c:	6f ef       	ldi	r22, 0xFF	; 255
    173e:	7f ef       	ldi	r23, 0xFF	; 255
    1740:	c5 01       	movw	r24, r10
    1742:	2c 87       	std	Y+12, r18	; 0x0c
    1744:	0e 94 c3 0c 	call	0x1986	; 0x1986 <strnlen_P>
    1748:	2c 01       	movw	r4, r24
    174a:	2c 85       	ldd	r18, Y+12	; 0x0c
    174c:	20 68       	ori	r18, 0x80	; 128
    174e:	22 2e       	mov	r2, r18
    1750:	83 01       	movw	r16, r6
    1752:	23 fc       	sbrc	r2, 3
    1754:	1b c0       	rjmp	.+54     	; 0x178c <vfprintf+0x1aa>
    1756:	83 2d       	mov	r24, r3
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	48 16       	cp	r4, r24
    175c:	59 06       	cpc	r5, r25
    175e:	b0 f4       	brcc	.+44     	; 0x178c <vfprintf+0x1aa>
    1760:	b7 01       	movw	r22, r14
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <fputc>
    176a:	3a 94       	dec	r3
    176c:	f4 cf       	rjmp	.-24     	; 0x1756 <vfprintf+0x174>
    176e:	f5 01       	movw	r30, r10
    1770:	27 fc       	sbrc	r2, 7
    1772:	85 91       	lpm	r24, Z+
    1774:	27 fe       	sbrs	r2, 7
    1776:	81 91       	ld	r24, Z+
    1778:	5f 01       	movw	r10, r30
    177a:	b7 01       	movw	r22, r14
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <fputc>
    1782:	31 10       	cpse	r3, r1
    1784:	3a 94       	dec	r3
    1786:	f1 e0       	ldi	r31, 0x01	; 1
    1788:	4f 1a       	sub	r4, r31
    178a:	51 08       	sbc	r5, r1
    178c:	41 14       	cp	r4, r1
    178e:	51 04       	cpc	r5, r1
    1790:	71 f7       	brne	.-36     	; 0x176e <vfprintf+0x18c>
    1792:	e5 c0       	rjmp	.+458    	; 0x195e <vfprintf+0x37c>
    1794:	84 36       	cpi	r24, 0x64	; 100
    1796:	11 f0       	breq	.+4      	; 0x179c <vfprintf+0x1ba>
    1798:	89 36       	cpi	r24, 0x69	; 105
    179a:	39 f5       	brne	.+78     	; 0x17ea <vfprintf+0x208>
    179c:	f8 01       	movw	r30, r16
    179e:	27 ff       	sbrs	r18, 7
    17a0:	07 c0       	rjmp	.+14     	; 0x17b0 <vfprintf+0x1ce>
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	0c 5f       	subi	r16, 0xFC	; 252
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <vfprintf+0x1de>
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	07 2e       	mov	r0, r23
    17b6:	00 0c       	add	r0, r0
    17b8:	88 0b       	sbc	r24, r24
    17ba:	99 0b       	sbc	r25, r25
    17bc:	0e 5f       	subi	r16, 0xFE	; 254
    17be:	1f 4f       	sbci	r17, 0xFF	; 255
    17c0:	2f 76       	andi	r18, 0x6F	; 111
    17c2:	72 2e       	mov	r7, r18
    17c4:	97 ff       	sbrs	r25, 7
    17c6:	09 c0       	rjmp	.+18     	; 0x17da <vfprintf+0x1f8>
    17c8:	90 95       	com	r25
    17ca:	80 95       	com	r24
    17cc:	70 95       	com	r23
    17ce:	61 95       	neg	r22
    17d0:	7f 4f       	sbci	r23, 0xFF	; 255
    17d2:	8f 4f       	sbci	r24, 0xFF	; 255
    17d4:	9f 4f       	sbci	r25, 0xFF	; 255
    17d6:	20 68       	ori	r18, 0x80	; 128
    17d8:	72 2e       	mov	r7, r18
    17da:	2a e0       	ldi	r18, 0x0A	; 10
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	a4 01       	movw	r20, r8
    17e0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__ultoa_invert>
    17e4:	a8 2e       	mov	r10, r24
    17e6:	a8 18       	sub	r10, r8
    17e8:	44 c0       	rjmp	.+136    	; 0x1872 <vfprintf+0x290>
    17ea:	85 37       	cpi	r24, 0x75	; 117
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <vfprintf+0x216>
    17ee:	2f 7e       	andi	r18, 0xEF	; 239
    17f0:	b2 2e       	mov	r11, r18
    17f2:	2a e0       	ldi	r18, 0x0A	; 10
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	25 c0       	rjmp	.+74     	; 0x1842 <vfprintf+0x260>
    17f8:	f2 2f       	mov	r31, r18
    17fa:	f9 7f       	andi	r31, 0xF9	; 249
    17fc:	bf 2e       	mov	r11, r31
    17fe:	8f 36       	cpi	r24, 0x6F	; 111
    1800:	c1 f0       	breq	.+48     	; 0x1832 <vfprintf+0x250>
    1802:	18 f4       	brcc	.+6      	; 0x180a <vfprintf+0x228>
    1804:	88 35       	cpi	r24, 0x58	; 88
    1806:	79 f0       	breq	.+30     	; 0x1826 <vfprintf+0x244>
    1808:	b4 c0       	rjmp	.+360    	; 0x1972 <vfprintf+0x390>
    180a:	80 37       	cpi	r24, 0x70	; 112
    180c:	19 f0       	breq	.+6      	; 0x1814 <vfprintf+0x232>
    180e:	88 37       	cpi	r24, 0x78	; 120
    1810:	21 f0       	breq	.+8      	; 0x181a <vfprintf+0x238>
    1812:	af c0       	rjmp	.+350    	; 0x1972 <vfprintf+0x390>
    1814:	2f 2f       	mov	r18, r31
    1816:	20 61       	ori	r18, 0x10	; 16
    1818:	b2 2e       	mov	r11, r18
    181a:	b4 fe       	sbrs	r11, 4
    181c:	0d c0       	rjmp	.+26     	; 0x1838 <vfprintf+0x256>
    181e:	8b 2d       	mov	r24, r11
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	b8 2e       	mov	r11, r24
    1824:	09 c0       	rjmp	.+18     	; 0x1838 <vfprintf+0x256>
    1826:	24 ff       	sbrs	r18, 4
    1828:	0a c0       	rjmp	.+20     	; 0x183e <vfprintf+0x25c>
    182a:	9f 2f       	mov	r25, r31
    182c:	96 60       	ori	r25, 0x06	; 6
    182e:	b9 2e       	mov	r11, r25
    1830:	06 c0       	rjmp	.+12     	; 0x183e <vfprintf+0x25c>
    1832:	28 e0       	ldi	r18, 0x08	; 8
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <vfprintf+0x260>
    1838:	20 e1       	ldi	r18, 0x10	; 16
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <vfprintf+0x260>
    183e:	20 e1       	ldi	r18, 0x10	; 16
    1840:	32 e0       	ldi	r19, 0x02	; 2
    1842:	f8 01       	movw	r30, r16
    1844:	b7 fe       	sbrs	r11, 7
    1846:	07 c0       	rjmp	.+14     	; 0x1856 <vfprintf+0x274>
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	0c 5f       	subi	r16, 0xFC	; 252
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x280>
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 5f       	subi	r16, 0xFE	; 254
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	a4 01       	movw	r20, r8
    1864:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__ultoa_invert>
    1868:	a8 2e       	mov	r10, r24
    186a:	a8 18       	sub	r10, r8
    186c:	fb 2d       	mov	r31, r11
    186e:	ff 77       	andi	r31, 0x7F	; 127
    1870:	7f 2e       	mov	r7, r31
    1872:	76 fe       	sbrs	r7, 6
    1874:	0b c0       	rjmp	.+22     	; 0x188c <vfprintf+0x2aa>
    1876:	37 2d       	mov	r19, r7
    1878:	3e 7f       	andi	r19, 0xFE	; 254
    187a:	a5 14       	cp	r10, r5
    187c:	50 f4       	brcc	.+20     	; 0x1892 <vfprintf+0x2b0>
    187e:	74 fe       	sbrs	r7, 4
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <vfprintf+0x2b4>
    1882:	72 fc       	sbrc	r7, 2
    1884:	08 c0       	rjmp	.+16     	; 0x1896 <vfprintf+0x2b4>
    1886:	37 2d       	mov	r19, r7
    1888:	3e 7e       	andi	r19, 0xEE	; 238
    188a:	05 c0       	rjmp	.+10     	; 0x1896 <vfprintf+0x2b4>
    188c:	ba 2c       	mov	r11, r10
    188e:	37 2d       	mov	r19, r7
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <vfprintf+0x2b6>
    1892:	ba 2c       	mov	r11, r10
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <vfprintf+0x2b6>
    1896:	b5 2c       	mov	r11, r5
    1898:	34 ff       	sbrs	r19, 4
    189a:	0d c0       	rjmp	.+26     	; 0x18b6 <vfprintf+0x2d4>
    189c:	fe 01       	movw	r30, r28
    189e:	ea 0d       	add	r30, r10
    18a0:	f1 1d       	adc	r31, r1
    18a2:	80 81       	ld	r24, Z
    18a4:	80 33       	cpi	r24, 0x30	; 48
    18a6:	11 f4       	brne	.+4      	; 0x18ac <vfprintf+0x2ca>
    18a8:	39 7e       	andi	r19, 0xE9	; 233
    18aa:	09 c0       	rjmp	.+18     	; 0x18be <vfprintf+0x2dc>
    18ac:	32 ff       	sbrs	r19, 2
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <vfprintf+0x2da>
    18b0:	b3 94       	inc	r11
    18b2:	b3 94       	inc	r11
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <vfprintf+0x2dc>
    18b6:	83 2f       	mov	r24, r19
    18b8:	86 78       	andi	r24, 0x86	; 134
    18ba:	09 f0       	breq	.+2      	; 0x18be <vfprintf+0x2dc>
    18bc:	b3 94       	inc	r11
    18be:	33 fd       	sbrc	r19, 3
    18c0:	13 c0       	rjmp	.+38     	; 0x18e8 <vfprintf+0x306>
    18c2:	30 ff       	sbrs	r19, 0
    18c4:	06 c0       	rjmp	.+12     	; 0x18d2 <vfprintf+0x2f0>
    18c6:	5a 2c       	mov	r5, r10
    18c8:	b3 14       	cp	r11, r3
    18ca:	18 f4       	brcc	.+6      	; 0x18d2 <vfprintf+0x2f0>
    18cc:	53 0c       	add	r5, r3
    18ce:	5b 18       	sub	r5, r11
    18d0:	b3 2c       	mov	r11, r3
    18d2:	b3 14       	cp	r11, r3
    18d4:	68 f4       	brcc	.+26     	; 0x18f0 <vfprintf+0x30e>
    18d6:	b7 01       	movw	r22, r14
    18d8:	80 e2       	ldi	r24, 0x20	; 32
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	3c 87       	std	Y+12, r19	; 0x0c
    18de:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <fputc>
    18e2:	b3 94       	inc	r11
    18e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    18e6:	f5 cf       	rjmp	.-22     	; 0x18d2 <vfprintf+0x2f0>
    18e8:	b3 14       	cp	r11, r3
    18ea:	10 f4       	brcc	.+4      	; 0x18f0 <vfprintf+0x30e>
    18ec:	3b 18       	sub	r3, r11
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <vfprintf+0x310>
    18f0:	31 2c       	mov	r3, r1
    18f2:	34 ff       	sbrs	r19, 4
    18f4:	12 c0       	rjmp	.+36     	; 0x191a <vfprintf+0x338>
    18f6:	b7 01       	movw	r22, r14
    18f8:	80 e3       	ldi	r24, 0x30	; 48
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	3c 87       	std	Y+12, r19	; 0x0c
    18fe:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <fputc>
    1902:	3c 85       	ldd	r19, Y+12	; 0x0c
    1904:	32 ff       	sbrs	r19, 2
    1906:	17 c0       	rjmp	.+46     	; 0x1936 <vfprintf+0x354>
    1908:	31 fd       	sbrc	r19, 1
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <vfprintf+0x330>
    190c:	88 e7       	ldi	r24, 0x78	; 120
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <vfprintf+0x334>
    1912:	88 e5       	ldi	r24, 0x58	; 88
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	b7 01       	movw	r22, r14
    1918:	0c c0       	rjmp	.+24     	; 0x1932 <vfprintf+0x350>
    191a:	83 2f       	mov	r24, r19
    191c:	86 78       	andi	r24, 0x86	; 134
    191e:	59 f0       	breq	.+22     	; 0x1936 <vfprintf+0x354>
    1920:	31 ff       	sbrs	r19, 1
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0x346>
    1924:	8b e2       	ldi	r24, 0x2B	; 43
    1926:	01 c0       	rjmp	.+2      	; 0x192a <vfprintf+0x348>
    1928:	80 e2       	ldi	r24, 0x20	; 32
    192a:	37 fd       	sbrc	r19, 7
    192c:	8d e2       	ldi	r24, 0x2D	; 45
    192e:	b7 01       	movw	r22, r14
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <fputc>
    1936:	a5 14       	cp	r10, r5
    1938:	38 f4       	brcc	.+14     	; 0x1948 <vfprintf+0x366>
    193a:	b7 01       	movw	r22, r14
    193c:	80 e3       	ldi	r24, 0x30	; 48
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <fputc>
    1944:	5a 94       	dec	r5
    1946:	f7 cf       	rjmp	.-18     	; 0x1936 <vfprintf+0x354>
    1948:	aa 94       	dec	r10
    194a:	f4 01       	movw	r30, r8
    194c:	ea 0d       	add	r30, r10
    194e:	f1 1d       	adc	r31, r1
    1950:	80 81       	ld	r24, Z
    1952:	b7 01       	movw	r22, r14
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <fputc>
    195a:	a1 10       	cpse	r10, r1
    195c:	f5 cf       	rjmp	.-22     	; 0x1948 <vfprintf+0x366>
    195e:	33 20       	and	r3, r3
    1960:	09 f4       	brne	.+2      	; 0x1964 <vfprintf+0x382>
    1962:	51 ce       	rjmp	.-862    	; 0x1606 <vfprintf+0x24>
    1964:	b7 01       	movw	r22, r14
    1966:	80 e2       	ldi	r24, 0x20	; 32
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <fputc>
    196e:	3a 94       	dec	r3
    1970:	f6 cf       	rjmp	.-20     	; 0x195e <vfprintf+0x37c>
    1972:	f7 01       	movw	r30, r14
    1974:	86 81       	ldd	r24, Z+6	; 0x06
    1976:	97 81       	ldd	r25, Z+7	; 0x07
    1978:	02 c0       	rjmp	.+4      	; 0x197e <vfprintf+0x39c>
    197a:	8f ef       	ldi	r24, 0xFF	; 255
    197c:	9f ef       	ldi	r25, 0xFF	; 255
    197e:	2c 96       	adiw	r28, 0x0c	; 12
    1980:	e2 e1       	ldi	r30, 0x12	; 18
    1982:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__epilogue_restores__>

00001986 <strnlen_P>:
    1986:	fc 01       	movw	r30, r24
    1988:	05 90       	lpm	r0, Z+
    198a:	61 50       	subi	r22, 0x01	; 1
    198c:	70 40       	sbci	r23, 0x00	; 0
    198e:	01 10       	cpse	r0, r1
    1990:	d8 f7       	brcc	.-10     	; 0x1988 <strnlen_P+0x2>
    1992:	80 95       	com	r24
    1994:	90 95       	com	r25
    1996:	8e 0f       	add	r24, r30
    1998:	9f 1f       	adc	r25, r31
    199a:	08 95       	ret

0000199c <strnlen>:
    199c:	fc 01       	movw	r30, r24
    199e:	61 50       	subi	r22, 0x01	; 1
    19a0:	70 40       	sbci	r23, 0x00	; 0
    19a2:	01 90       	ld	r0, Z+
    19a4:	01 10       	cpse	r0, r1
    19a6:	d8 f7       	brcc	.-10     	; 0x199e <strnlen+0x2>
    19a8:	80 95       	com	r24
    19aa:	90 95       	com	r25
    19ac:	8e 0f       	add	r24, r30
    19ae:	9f 1f       	adc	r25, r31
    19b0:	08 95       	ret

000019b2 <strrev>:
    19b2:	dc 01       	movw	r26, r24
    19b4:	fc 01       	movw	r30, r24
    19b6:	67 2f       	mov	r22, r23
    19b8:	71 91       	ld	r23, Z+
    19ba:	77 23       	and	r23, r23
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <strrev+0x4>
    19be:	32 97       	sbiw	r30, 0x02	; 2
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <strrev+0x18>
    19c2:	7c 91       	ld	r23, X
    19c4:	6d 93       	st	X+, r22
    19c6:	70 83       	st	Z, r23
    19c8:	62 91       	ld	r22, -Z
    19ca:	ae 17       	cp	r26, r30
    19cc:	bf 07       	cpc	r27, r31
    19ce:	c8 f3       	brcs	.-14     	; 0x19c2 <strrev+0x10>
    19d0:	08 95       	ret

000019d2 <fputc>:
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	fb 01       	movw	r30, r22
    19dc:	23 81       	ldd	r18, Z+3	; 0x03
    19de:	21 fd       	sbrc	r18, 1
    19e0:	03 c0       	rjmp	.+6      	; 0x19e8 <fputc+0x16>
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	9f ef       	ldi	r25, 0xFF	; 255
    19e6:	28 c0       	rjmp	.+80     	; 0x1a38 <fputc+0x66>
    19e8:	22 ff       	sbrs	r18, 2
    19ea:	16 c0       	rjmp	.+44     	; 0x1a18 <fputc+0x46>
    19ec:	46 81       	ldd	r20, Z+6	; 0x06
    19ee:	57 81       	ldd	r21, Z+7	; 0x07
    19f0:	24 81       	ldd	r18, Z+4	; 0x04
    19f2:	35 81       	ldd	r19, Z+5	; 0x05
    19f4:	42 17       	cp	r20, r18
    19f6:	53 07       	cpc	r21, r19
    19f8:	44 f4       	brge	.+16     	; 0x1a0a <fputc+0x38>
    19fa:	a0 81       	ld	r26, Z
    19fc:	b1 81       	ldd	r27, Z+1	; 0x01
    19fe:	9d 01       	movw	r18, r26
    1a00:	2f 5f       	subi	r18, 0xFF	; 255
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	20 83       	st	Z, r18
    1a06:	31 83       	std	Z+1, r19	; 0x01
    1a08:	8c 93       	st	X, r24
    1a0a:	26 81       	ldd	r18, Z+6	; 0x06
    1a0c:	37 81       	ldd	r19, Z+7	; 0x07
    1a0e:	2f 5f       	subi	r18, 0xFF	; 255
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	26 83       	std	Z+6, r18	; 0x06
    1a14:	37 83       	std	Z+7, r19	; 0x07
    1a16:	10 c0       	rjmp	.+32     	; 0x1a38 <fputc+0x66>
    1a18:	eb 01       	movw	r28, r22
    1a1a:	09 2f       	mov	r16, r25
    1a1c:	18 2f       	mov	r17, r24
    1a1e:	00 84       	ldd	r0, Z+8	; 0x08
    1a20:	f1 85       	ldd	r31, Z+9	; 0x09
    1a22:	e0 2d       	mov	r30, r0
    1a24:	09 95       	icall
    1a26:	89 2b       	or	r24, r25
    1a28:	e1 f6       	brne	.-72     	; 0x19e2 <fputc+0x10>
    1a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	8e 83       	std	Y+6, r24	; 0x06
    1a32:	9f 83       	std	Y+7, r25	; 0x07
    1a34:	81 2f       	mov	r24, r17
    1a36:	90 2f       	mov	r25, r16
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	08 95       	ret

00001a42 <__ultoa_invert>:
    1a42:	fa 01       	movw	r30, r20
    1a44:	aa 27       	eor	r26, r26
    1a46:	28 30       	cpi	r18, 0x08	; 8
    1a48:	51 f1       	breq	.+84     	; 0x1a9e <__ultoa_invert+0x5c>
    1a4a:	20 31       	cpi	r18, 0x10	; 16
    1a4c:	81 f1       	breq	.+96     	; 0x1aae <__ultoa_invert+0x6c>
    1a4e:	e8 94       	clt
    1a50:	6f 93       	push	r22
    1a52:	6e 7f       	andi	r22, 0xFE	; 254
    1a54:	6e 5f       	subi	r22, 0xFE	; 254
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	af 4f       	sbci	r26, 0xFF	; 255
    1a5e:	b1 e0       	ldi	r27, 0x01	; 1
    1a60:	3e d0       	rcall	.+124    	; 0x1ade <__ultoa_invert+0x9c>
    1a62:	b4 e0       	ldi	r27, 0x04	; 4
    1a64:	3c d0       	rcall	.+120    	; 0x1ade <__ultoa_invert+0x9c>
    1a66:	67 0f       	add	r22, r23
    1a68:	78 1f       	adc	r23, r24
    1a6a:	89 1f       	adc	r24, r25
    1a6c:	9a 1f       	adc	r25, r26
    1a6e:	a1 1d       	adc	r26, r1
    1a70:	68 0f       	add	r22, r24
    1a72:	79 1f       	adc	r23, r25
    1a74:	8a 1f       	adc	r24, r26
    1a76:	91 1d       	adc	r25, r1
    1a78:	a1 1d       	adc	r26, r1
    1a7a:	6a 0f       	add	r22, r26
    1a7c:	71 1d       	adc	r23, r1
    1a7e:	81 1d       	adc	r24, r1
    1a80:	91 1d       	adc	r25, r1
    1a82:	a1 1d       	adc	r26, r1
    1a84:	20 d0       	rcall	.+64     	; 0x1ac6 <__ultoa_invert+0x84>
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <__ultoa_invert+0x48>
    1a88:	68 94       	set
    1a8a:	3f 91       	pop	r19
    1a8c:	2a e0       	ldi	r18, 0x0A	; 10
    1a8e:	26 9f       	mul	r18, r22
    1a90:	11 24       	eor	r1, r1
    1a92:	30 19       	sub	r19, r0
    1a94:	30 5d       	subi	r19, 0xD0	; 208
    1a96:	31 93       	st	Z+, r19
    1a98:	de f6       	brtc	.-74     	; 0x1a50 <__ultoa_invert+0xe>
    1a9a:	cf 01       	movw	r24, r30
    1a9c:	08 95       	ret
    1a9e:	46 2f       	mov	r20, r22
    1aa0:	47 70       	andi	r20, 0x07	; 7
    1aa2:	40 5d       	subi	r20, 0xD0	; 208
    1aa4:	41 93       	st	Z+, r20
    1aa6:	b3 e0       	ldi	r27, 0x03	; 3
    1aa8:	0f d0       	rcall	.+30     	; 0x1ac8 <__ultoa_invert+0x86>
    1aaa:	c9 f7       	brne	.-14     	; 0x1a9e <__ultoa_invert+0x5c>
    1aac:	f6 cf       	rjmp	.-20     	; 0x1a9a <__ultoa_invert+0x58>
    1aae:	46 2f       	mov	r20, r22
    1ab0:	4f 70       	andi	r20, 0x0F	; 15
    1ab2:	40 5d       	subi	r20, 0xD0	; 208
    1ab4:	4a 33       	cpi	r20, 0x3A	; 58
    1ab6:	18 f0       	brcs	.+6      	; 0x1abe <__ultoa_invert+0x7c>
    1ab8:	49 5d       	subi	r20, 0xD9	; 217
    1aba:	31 fd       	sbrc	r19, 1
    1abc:	40 52       	subi	r20, 0x20	; 32
    1abe:	41 93       	st	Z+, r20
    1ac0:	02 d0       	rcall	.+4      	; 0x1ac6 <__ultoa_invert+0x84>
    1ac2:	a9 f7       	brne	.-22     	; 0x1aae <__ultoa_invert+0x6c>
    1ac4:	ea cf       	rjmp	.-44     	; 0x1a9a <__ultoa_invert+0x58>
    1ac6:	b4 e0       	ldi	r27, 0x04	; 4
    1ac8:	a6 95       	lsr	r26
    1aca:	97 95       	ror	r25
    1acc:	87 95       	ror	r24
    1ace:	77 95       	ror	r23
    1ad0:	67 95       	ror	r22
    1ad2:	ba 95       	dec	r27
    1ad4:	c9 f7       	brne	.-14     	; 0x1ac8 <__ultoa_invert+0x86>
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	61 05       	cpc	r22, r1
    1ada:	71 05       	cpc	r23, r1
    1adc:	08 95       	ret
    1ade:	9b 01       	movw	r18, r22
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	0a 2e       	mov	r0, r26
    1ae4:	06 94       	lsr	r0
    1ae6:	57 95       	ror	r21
    1ae8:	47 95       	ror	r20
    1aea:	37 95       	ror	r19
    1aec:	27 95       	ror	r18
    1aee:	ba 95       	dec	r27
    1af0:	c9 f7       	brne	.-14     	; 0x1ae4 <__ultoa_invert+0xa2>
    1af2:	62 0f       	add	r22, r18
    1af4:	73 1f       	adc	r23, r19
    1af6:	84 1f       	adc	r24, r20
    1af8:	95 1f       	adc	r25, r21
    1afa:	a0 1d       	adc	r26, r0
    1afc:	08 95       	ret

00001afe <__prologue_saves__>:
    1afe:	2f 92       	push	r2
    1b00:	3f 92       	push	r3
    1b02:	4f 92       	push	r4
    1b04:	5f 92       	push	r5
    1b06:	6f 92       	push	r6
    1b08:	7f 92       	push	r7
    1b0a:	8f 92       	push	r8
    1b0c:	9f 92       	push	r9
    1b0e:	af 92       	push	r10
    1b10:	bf 92       	push	r11
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	ca 1b       	sub	r28, r26
    1b28:	db 0b       	sbc	r29, r27
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	09 94       	ijmp

00001b30 <__epilogue_restores__>:
    1b30:	2a 88       	ldd	r2, Y+18	; 0x12
    1b32:	39 88       	ldd	r3, Y+17	; 0x11
    1b34:	48 88       	ldd	r4, Y+16	; 0x10
    1b36:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b38:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b40:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b42:	b9 84       	ldd	r11, Y+9	; 0x09
    1b44:	c8 84       	ldd	r12, Y+8	; 0x08
    1b46:	df 80       	ldd	r13, Y+7	; 0x07
    1b48:	ee 80       	ldd	r14, Y+6	; 0x06
    1b4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b4e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b50:	aa 81       	ldd	r26, Y+2	; 0x02
    1b52:	b9 81       	ldd	r27, Y+1	; 0x01
    1b54:	ce 0f       	add	r28, r30
    1b56:	d1 1d       	adc	r29, r1
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	ed 01       	movw	r28, r26
    1b5e:	08 95       	ret

00001b60 <_exit>:
    1b60:	f8 94       	cli

00001b62 <__stop_program>:
    1b62:	ff cf       	rjmp	.-2      	; 0x1b62 <__stop_program>
