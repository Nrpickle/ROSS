
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001700  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00802000  00001700  00001794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008020be  008020be  00001852  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004386  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090c  00000000  00000000  00005d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000768  00000000  00000000  000066a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00006e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000225a  00000000  00000000  000071dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0e  00000000  00000000  00009436  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00009e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_7>
      20:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_8>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_12>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_18>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_30>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_35>
      90:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_36>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_38>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	cd bf       	out	0x3d, r28	; 61
      b4:	df e2       	ldi	r29, 0x2F	; 47
      b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
      b8:	10 e2       	ldi	r17, 0x20	; 32
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b0 e2       	ldi	r27, 0x20	; 32
      be:	e0 e0       	ldi	r30, 0x00	; 0
      c0:	f7 e1       	ldi	r31, 0x17	; 23
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	ae 3b       	cpi	r26, 0xBE	; 190
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	20 e2       	ldi	r18, 0x20	; 32
      d0:	ae eb       	ldi	r26, 0xBE	; 190
      d2:	b0 e2       	ldi	r27, 0x20	; 32
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a4 3d       	cpi	r26, 0xD4	; 212
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <main>
      e2:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
      ea:	e0 e5       	ldi	r30, 0x50	; 80
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	8b e4       	ldi	r24, 0x4B	; 75
      f0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
      f2:	80 81       	ld	r24, Z
      f4:	88 60       	ori	r24, 0x08	; 8
      f6:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
      f8:	81 81       	ldd	r24, Z+1	; 0x01
      fa:	83 fd       	sbrc	r24, 3
      fc:	09 c0       	rjmp	.+18     	; 0x110 <_Z27configureExternalOscillatorv+0x26>
      fe:	a0 e4       	ldi	r26, 0x40	; 64
     100:	b6 e0       	ldi	r27, 0x06	; 6
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	15 96       	adiw	r26, 0x05	; 5
     106:	9c 93       	st	X, r25
     108:	15 97       	sbiw	r26, 0x05	; 5
     10a:	81 81       	ldd	r24, Z+1	; 0x01
     10c:	83 ff       	sbrs	r24, 3
     10e:	fa cf       	rjmp	.-12     	; 0x104 <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
     116:	88 ed       	ldi	r24, 0xD8	; 216
     118:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
     11a:	e0 e5       	ldi	r30, 0x50	; 80
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	88 ec       	ldi	r24, 0xC8	; 200
     120:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
     122:	80 81       	ld	r24, Z
     124:	80 61       	ori	r24, 0x10	; 16
     126:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	84 fd       	sbrc	r24, 4
     12c:	09 c0       	rjmp	.+18     	; 0x140 <_Z27configureExternalOscillatorv+0x56>
     12e:	a0 e4       	ldi	r26, 0x40	; 64
     130:	b6 e0       	ldi	r27, 0x06	; 6
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	15 96       	adiw	r26, 0x05	; 5
     136:	9c 93       	st	X, r25
     138:	15 97       	sbiw	r26, 0x05	; 5
     13a:	81 81       	ldd	r24, Z+1	; 0x01
     13c:	84 ff       	sbrs	r24, 4
     13e:	fa cf       	rjmp	.-12     	; 0x134 <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
     146:	88 ed       	ldi	r24, 0xD8	; 216
     148:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
     14a:	e0 e4       	ldi	r30, 0x40	; 64
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
     150:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	80 83       	st	Z, r24
     156:	08 95       	ret

00000158 <_Z11configureIOv>:
	
	
}

void configureIO(void){
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
     15c:	e0 e4       	ldi	r30, 0x40	; 64
     15e:	f6 e0       	ldi	r31, 0x06	; 6
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = PIN0_bm;
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	91 83       	std	Z+1, r25	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
     168:	20 e2       	ldi	r18, 0x20	; 32
     16a:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
     16c:	34 e0       	ldi	r19, 0x04	; 4
     16e:	32 83       	std	Z+2, r19	; 0x02
	PORTC.DIRCLR = PIN3_bm;
     170:	48 e0       	ldi	r20, 0x08	; 8
     172:	42 83       	std	Z+2, r20	; 0x02
	
	//Set pullups on the setting switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
     174:	48 e1       	ldi	r20, 0x18	; 24
     176:	42 8b       	std	Z+18, r20	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
     178:	43 8b       	std	Z+19, r20	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
     17a:	c0 e0       	ldi	r28, 0x00	; 0
     17c:	d6 e0       	ldi	r29, 0x06	; 6
     17e:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
     180:	8a 83       	std	Y+2, r24	; 0x02
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
     182:	a0 e6       	ldi	r26, 0x60	; 96
     184:	b6 e0       	ldi	r27, 0x06	; 6
     186:	12 96       	adiw	r26, 0x02	; 2
     188:	9c 93       	st	X, r25
     18a:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN1_bm;  //Voltage Sense - Electronics Battery
     18c:	12 96       	adiw	r26, 0x02	; 2
     18e:	8c 93       	st	X, r24
     190:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN2_bm;  //Voltage Sense - Rear Battery
     192:	12 96       	adiw	r26, 0x02	; 2
     194:	3c 93       	st	X, r19
     196:	12 97       	sbiw	r26, 0x02	; 2
	
	//Setup the RSSI input
	PORTA.DIRCLR = PIN2_bm;				//Set the RSSI pin to be an input
     198:	3a 83       	std	Y+2, r19	; 0x02
	
	//Setup the steering signal I/O
	PORTD.DIRCLR = PIN4_bm;  //Set the STEER_SIG_3v3 pin as an input
     19a:	30 e1       	ldi	r19, 0x10	; 16
     19c:	12 96       	adiw	r26, 0x02	; 2
     19e:	3c 93       	st	X, r19
     1a0:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRSET = PIN5_bm;	 //Set the STEER_SIG_3v3_PROCESSED pin to be an output
     1a2:	11 96       	adiw	r26, 0x01	; 1
     1a4:	2c 93       	st	X, r18
     1a6:	11 97       	sbiw	r26, 0x01	; 1

	//Setup steering control PWM interrupts
	PORTD.INTCTRL  = PMIC_MEDLVLEN_bm;	//Set PORTC's interrupt to be medium level
     1a8:	19 96       	adiw	r26, 0x09	; 9
     1aa:	8c 93       	st	X, r24
     1ac:	19 97       	sbiw	r26, 0x09	; 9
	PORTD.INTMASK  = PIN4_bm;			//Configure the PWM input pin as an interrupt
     1ae:	1a 96       	adiw	r26, 0x0a	; 10
     1b0:	3c 93       	st	X, r19
     1b2:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;  //Init the pin as a rising edge interrupt only
     1b4:	54 96       	adiw	r26, 0x14	; 20
     1b6:	9c 93       	st	X, r25
     1b8:	54 97       	sbiw	r26, 0x14	; 20

	
	//Initialize output values
	STATUS_CLR();
     1ba:	96 83       	std	Z+6, r25	; 0x06
	ERROR_CLR();
     1bc:	86 83       	std	Z+6, r24	; 0x06
	
	REAR_RELAY_CLR();
     1be:	26 83       	std	Z+6, r18	; 0x06
	
	STEER_SIG_CLR();	
     1c0:	16 96       	adiw	r26, 0x06	; 6
     1c2:	2c 93       	st	X, r18
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <__vector_35>:
if timer has overflown, then we missed the appropriate edge, throw out our data
If timer is good, calculate PWM high time
Store in global variable

*/
ISR(PORTD_INT_vect){
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	11 24       	eor	r1, r1
     1d4:	8f 93       	push	r24
     1d6:	9f 93       	push	r25
	PORTD.INTFLAGS = PIN4_bm;
     1d8:	80 e1       	ldi	r24, 0x10	; 16
     1da:	80 93 6c 06 	sts	0x066C, r24

	
	if(PWMMeasuringStatus == NOT_MEASURING){  //We encountered the first part of the wave
     1de:	80 91 00 20 	lds	r24, 0x2000
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	81 f4       	brne	.+32     	; 0x206 <__vector_35+0x3c>
		TCC5.CNT = 0;	//Start counting
     1e6:	10 92 60 08 	sts	0x0860, r1
     1ea:	10 92 61 08 	sts	0x0861, r1
		PWMMeasuringStatus = MEASURING;
     1ee:	10 92 00 20 	sts	0x2000, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f2:	87 ec       	ldi	r24, 0xC7	; 199
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <__vector_35+0x2c>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <__vector_35+0x32>
     1fc:	00 00       	nop
		
		_delay_us(25);  //Delay ~6-7 clock cycles
		
		PORTD.PIN4CTRL = PORT_ISC_FALLING_gc; //Set the interrupt to wait for a falling wave (end of signal)
     1fe:	82 e0       	ldi	r24, 0x02	; 2
     200:	80 93 74 06 	sts	0x0674, r24
     204:	0f c0       	rjmp	.+30     	; 0x224 <__vector_35+0x5a>
	}
	else { //We finished encountering the wave (process the data)
		steeringPWMPeriod = TCC5.CNT * 2;
     206:	80 91 60 08 	lds	r24, 0x0860
     20a:	90 91 61 08 	lds	r25, 0x0861
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	80 93 be 20 	sts	0x20BE, r24
     216:	90 93 bf 20 	sts	0x20BF, r25
		PWMMeasuringStatus = NOT_MEASURING;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 00 20 	sts	0x2000, r24
		
		PORTD.PIN4CTRL = PORT_ISC_RISING_gc; 
     220:	80 93 74 06 	sts	0x0674, r24
	}
	
}
     224:	9f 91       	pop	r25
     226:	8f 91       	pop	r24
     228:	0f 90       	pop	r0
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	0f 90       	pop	r0
     22e:	1f 90       	pop	r1
     230:	18 95       	reti

00000232 <__vector_30>:

//This function will be called on the edges of the RSSI signal 
//*CURRENTLY DISABLED*
ISR(PORTA_INT_vect){
     232:	1f 92       	push	r1
     234:	0f 92       	push	r0
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	0f 92       	push	r0
     23a:	11 24       	eor	r1, r1
     23c:	8f 93       	push	r24
     23e:	9f 93       	push	r25
     240:	ef 93       	push	r30
     242:	ff 93       	push	r31
	cli();
     244:	f8 94       	cli
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
     246:	84 e0       	ldi	r24, 0x04	; 4
     248:	80 93 0c 06 	sts	0x060C, r24
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
     24c:	80 91 cb 20 	lds	r24, 0x20CB
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	61 f4       	brne	.+24     	; 0x26c <__vector_30+0x3a>
     254:	80 91 08 06 	lds	r24, 0x0608
     258:	82 fd       	sbrc	r24, 2
     25a:	0b c0       	rjmp	.+22     	; 0x272 <__vector_30+0x40>
     25c:	1f c0       	rjmp	.+62     	; 0x29c <__vector_30+0x6a>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     25e:	80 91 08 06 	lds	r24, 0x0608
     262:	82 ff       	sbrs	r24, 2
     264:	0d c0       	rjmp	.+26     	; 0x280 <__vector_30+0x4e>
     266:	1a c0       	rjmp	.+52     	; 0x29c <__vector_30+0x6a>
		ERROR_SET();
	}
	
	
	//_delay_us(200);
	sei();
     268:	78 94       	sei
     26a:	1c c0       	rjmp	.+56     	; 0x2a4 <__vector_30+0x72>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     26c:	88 23       	and	r24, r24
     26e:	b9 f3       	breq	.-18     	; 0x25e <__vector_30+0x2c>
     270:	15 c0       	rjmp	.+42     	; 0x29c <__vector_30+0x6a>
	cli();
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
		RTC.CNT = 0;		//We want to start counting the counter now
     272:	10 92 08 04 	sts	0x0408, r1
     276:	10 92 09 04 	sts	0x0409, r1
		RSSI.measuring = MEASURING;
     27a:	10 92 cb 20 	sts	0x20CB, r1
     27e:	f4 cf       	rjmp	.-24     	; 0x268 <__vector_30+0x36>
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
		RSSI.countDifference = RTC.CNT;
     280:	80 91 08 04 	lds	r24, 0x0408
     284:	90 91 09 04 	lds	r25, 0x0409
     288:	ea ec       	ldi	r30, 0xCA	; 202
     28a:	f0 e2       	ldi	r31, 0x20	; 32
     28c:	84 83       	std	Z+4, r24	; 0x04
     28e:	95 83       	std	Z+5, r25	; 0x05
		
		RSSI.sampleCount++;
     290:	86 81       	ldd	r24, Z+6	; 0x06
     292:	97 81       	ldd	r25, Z+7	; 0x07
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	86 83       	std	Z+6, r24	; 0x06
     298:	97 83       	std	Z+7, r25	; 0x07
     29a:	e6 cf       	rjmp	.-52     	; 0x268 <__vector_30+0x36>
	}
	else {
		ERROR_SET();
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	80 93 45 06 	sts	0x0645, r24
     2a2:	e2 cf       	rjmp	.-60     	; 0x268 <__vector_30+0x36>
	}
	
	
	//_delay_us(200);
	sei();
}
     2a4:	ff 91       	pop	r31
     2a6:	ef 91       	pop	r30
     2a8:	9f 91       	pop	r25
     2aa:	8f 91       	pop	r24
     2ac:	0f 90       	pop	r0
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	0f 90       	pop	r0
     2b2:	1f 90       	pop	r1
     2b4:	18 95       	reti

000002b6 <_Z21configureTimerCounterv>:
1S    = 0x7A12

*/
void configureTimerCounter(){
	//Configure the accurate reporting timer
	TCC4.CTRLA = TC45_CLKSEL_DIV1024_gc;	//Configure a 1024 prescaler (we want very broad timing here, exact precision isn't required)
     2b6:	e0 e0       	ldi	r30, 0x00	; 0
     2b8:	f8 e0       	ldi	r31, 0x08	; 8
     2ba:	87 e0       	ldi	r24, 0x07	; 7
     2bc:	80 83       	st	Z, r24
	TCC4.PER = TC_1024_500MS;               //500mS delay
     2be:	89 e0       	ldi	r24, 0x09	; 9
     2c0:	9d e3       	ldi	r25, 0x3D	; 61
     2c2:	86 a3       	std	Z+38, r24	; 0x26
     2c4:	97 a3       	std	Z+39, r25	; 0x27
											//Default delay value. Reference pre-calculated table up above for more information
	TCC4.CTRLB = TC45_WGMODE_NORMAL_gc;		//Configure the timer for Normal mode operation
     2c6:	11 82       	std	Z+1, r1	; 0x01
	TCC4.INTCTRLA = TC45_OVFINTLVL_LO_gc;	//Set a low priority overflow interrupt
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	86 83       	std	Z+6, r24	; 0x06

	//Configure the PWM sense module
	//Input capture described on (168)
	TCC5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     2cc:	e0 e4       	ldi	r30, 0x40	; 64
     2ce:	f8 e0       	ldi	r31, 0x08	; 8
     2d0:	85 e0       	ldi	r24, 0x05	; 5
     2d2:	80 83       	st	Z, r24
	TCC5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     2d4:	11 82       	std	Z+1, r1	; 0x01
	TCC5.PER   = 12000;						//This is set to be 20% longer than the 20mS cycle should be
     2d6:	20 ee       	ldi	r18, 0xE0	; 224
     2d8:	3e e2       	ldi	r19, 0x2E	; 46
     2da:	26 a3       	std	Z+38, r18	; 0x26
     2dc:	37 a3       	std	Z+39, r19	; 0x27
	
	//Is the following necessary?
	TCC5.INTCTRLA = TC45_OVFINTLVL_MED_gc;	//Set a medium priority overflow interrupt (we want the PWM generation to remain stable)
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	96 83       	std	Z+6, r25	; 0x06
											//as it will only take a few clock cycles compared to this interrupt
	
	//Configure the PWM generation module
	TCD5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     2e2:	e0 e4       	ldi	r30, 0x40	; 64
     2e4:	f9 e0       	ldi	r31, 0x09	; 9
     2e6:	80 83       	st	Z, r24
	TCD5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     2e8:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PER   = 10000;						//We want to establish a 50Hz control loop here (20ms period)
     2ea:	80 e1       	ldi	r24, 0x10	; 16
     2ec:	97 e2       	ldi	r25, 0x27	; 39
     2ee:	86 a3       	std	Z+38, r24	; 0x26
     2f0:	97 a3       	std	Z+39, r25	; 0x27
	TCD5.INTCTRLA = TC45_OVFINTLVL_HI_gc;	//Set a high priority overflow interrupt
     2f2:	83 e0       	ldi	r24, 0x03	; 3
     2f4:	86 83       	std	Z+6, r24	; 0x06
	TCD5.INTCTRLB = TC45_CCAINTLVL_HI_gc;   
     2f6:	87 83       	std	Z+7, r24	; 0x07
	
	TCD5.CCA = 950;		//Initial value for compare
     2f8:	86 eb       	ldi	r24, 0xB6	; 182
     2fa:	93 e0       	ldi	r25, 0x03	; 3
     2fc:	80 a7       	std	Z+40, r24	; 0x28
     2fe:	91 a7       	std	Z+41, r25	; 0x29
     300:	08 95       	ret

00000302 <__vector_18>:
}

//This triggers when a PWM signal hasn't been detected for the past ~24mS
ISR (TCC5_OVF_vect){
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	8f 93       	push	r24
     30e:	9f 93       	push	r25
     310:	ef 93       	push	r30
     312:	ff 93       	push	r31
	TCC5.INTFLAGS |= 0b1;  //Reset interrupt flag
     314:	e0 e4       	ldi	r30, 0x40	; 64
     316:	f8 e0       	ldi	r31, 0x08	; 8
     318:	84 85       	ldd	r24, Z+12	; 0x0c
     31a:	81 60       	ori	r24, 0x01	; 1
     31c:	84 87       	std	Z+12, r24	; 0x0c
	
	PWMMeasuringStatus = NOT_MEASURING;		//Reset the "NOT MEASURING" flag
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 00 20 	sts	0x2000, r24
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;	//Reconfigure the port to wait for a high pulse
     324:	80 93 74 06 	sts	0x0674, r24
	
	steeringPWMPeriod = 1500;				//Set the steering PWM period to a stable "standby position"
     328:	8c ed       	ldi	r24, 0xDC	; 220
     32a:	95 e0       	ldi	r25, 0x05	; 5
     32c:	80 93 be 20 	sts	0x20BE, r24
     330:	90 93 bf 20 	sts	0x20BF, r25
}
     334:	ff 91       	pop	r31
     336:	ef 91       	pop	r30
     338:	9f 91       	pop	r25
     33a:	8f 91       	pop	r24
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_38>:
/*
Compare vector A for the PWM generation module
This situation ------\______

*/
ISR (TCD5_CCA_vect){
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	8f 93       	push	r24
	STEER_SIG_CLR();
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	80 93 66 06 	sts	0x0666, r24
	//STATUS_SET();
}
     358:	8f 91       	pop	r24
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <__vector_36>:
This situation: _____/-----

*/


ISR (TCD5_OVF_vect){
     364:	1f 92       	push	r1
     366:	0f 92       	push	r0
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	0f 92       	push	r0
     36c:	11 24       	eor	r1, r1
     36e:	8f 93       	push	r24
     370:	ef 93       	push	r30
     372:	ff 93       	push	r31
	STEER_SIG_SET();
     374:	80 e2       	ldi	r24, 0x20	; 32
     376:	80 93 65 06 	sts	0x0665, r24
	
	TCD5.INTFLAGS |= 0b1;
     37a:	e0 e4       	ldi	r30, 0x40	; 64
     37c:	f9 e0       	ldi	r31, 0x09	; 9
     37e:	84 85       	ldd	r24, Z+12	; 0x0c
     380:	81 60       	ori	r24, 0x01	; 1
     382:	84 87       	std	Z+12, r24	; 0x0c
	
	TCD5.CNT = 0;
     384:	10 a2       	std	Z+32, r1	; 0x20
     386:	11 a2       	std	Z+33, r1	; 0x21
}
     388:	ff 91       	pop	r31
     38a:	ef 91       	pop	r30
     38c:	8f 91       	pop	r24
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <__vector_12>:

//Handles compare vector for T/C 4
ISR (TCC4_OVF_vect){
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	2f 93       	push	r18
     3a4:	3f 93       	push	r19
     3a6:	4f 93       	push	r20
     3a8:	5f 93       	push	r21
     3aa:	6f 93       	push	r22
     3ac:	7f 93       	push	r23
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
     3b2:	af 93       	push	r26
     3b4:	ef 93       	push	r30
     3b6:	ff 93       	push	r31
	++longCounter;
     3b8:	20 91 c0 20 	lds	r18, 0x20C0
     3bc:	30 91 c1 20 	lds	r19, 0x20C1
     3c0:	40 91 c2 20 	lds	r20, 0x20C2
     3c4:	50 91 c3 20 	lds	r21, 0x20C3
     3c8:	60 91 c4 20 	lds	r22, 0x20C4
     3cc:	70 91 c5 20 	lds	r23, 0x20C5
     3d0:	80 91 c6 20 	lds	r24, 0x20C6
     3d4:	90 91 c7 20 	lds	r25, 0x20C7
     3d8:	a1 e0       	ldi	r26, 0x01	; 1
     3da:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__adddi3_s8>
     3de:	20 93 c0 20 	sts	0x20C0, r18
     3e2:	30 93 c1 20 	sts	0x20C1, r19
     3e6:	40 93 c2 20 	sts	0x20C2, r20
     3ea:	50 93 c3 20 	sts	0x20C3, r21
     3ee:	60 93 c4 20 	sts	0x20C4, r22
     3f2:	70 93 c5 20 	sts	0x20C5, r23
     3f6:	80 93 c6 20 	sts	0x20C6, r24
     3fa:	90 93 c7 20 	sts	0x20C7, r25
	
	TCC4.INTFLAGS |= 0b1;  //Reset overflow interrupt
     3fe:	e0 e0       	ldi	r30, 0x00	; 0
     400:	f8 e0       	ldi	r31, 0x08	; 8
     402:	84 85       	ldd	r24, Z+12	; 0x0c
     404:	81 60       	ori	r24, 0x01	; 1
     406:	84 87       	std	Z+12, r24	; 0x0c
	
	broadcastStatus = 1;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 c8 20 	sts	0x20C8, r24
}
     40e:	ff 91       	pop	r31
     410:	ef 91       	pop	r30
     412:	af 91       	pop	r26
     414:	9f 91       	pop	r25
     416:	8f 91       	pop	r24
     418:	7f 91       	pop	r23
     41a:	6f 91       	pop	r22
     41c:	5f 91       	pop	r21
     41e:	4f 91       	pop	r20
     420:	3f 91       	pop	r19
     422:	2f 91       	pop	r18
     424:	0f 90       	pop	r0
     426:	0f be       	out	0x3f, r0	; 63
     428:	0f 90       	pop	r0
     42a:	1f 90       	pop	r1
     42c:	18 95       	reti

0000042e <_Z12configureRTCv>:

/*
The real time clock is configured to handle XTend RSSI Interpret
*/
void configureRTC(){
	RTC.CTRL = RTC_CORREN_bm | RTC_PRESCALER_DIV1_gc;		//Enable the RTC correction process, and the RTC itself with no prescaler
     42e:	e0 e0       	ldi	r30, 0x00	; 0
     430:	f4 e0       	ldi	r31, 0x04	; 4
     432:	89 e0       	ldi	r24, 0x09	; 9
     434:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_COMPINTLVL_LO_gc | RTC_OVFINTLVL_LO_gc; //Enable the overflow and 
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	82 83       	std	Z+2, r24	; 0x02
	
    OSC.CTRL |= OSC_RC32KEN_bm;								//Enable the 32.768kHz internal oscillator
     43a:	a0 e5       	ldi	r26, 0x50	; 80
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	8c 91       	ld	r24, X
     440:	84 60       	ori	r24, 0x04	; 4
     442:	8c 93       	st	X, r24
     444:	8f e7       	ldi	r24, 0x7F	; 127
     446:	9c e0       	ldi	r25, 0x0C	; 12
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <_Z12configureRTCv+0x1a>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <_Z12configureRTCv+0x20>
     44e:	00 00       	nop
	
	_delay_us(400);											//Wait for the oscillator to stabalize.
	
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC32_gc;					//Set the RTC input as the 32.768kHz internal oscillator
     450:	a0 e4       	ldi	r26, 0x40	; 64
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	8c e0       	ldi	r24, 0x0C	; 12
     456:	13 96       	adiw	r26, 0x03	; 3
     458:	8c 93       	st	X, r24
     45a:	13 97       	sbiw	r26, 0x03	; 3
	CLK.RTCCTRL |= CLK_RTCEN_bm;							//Enable the clock input
     45c:	13 96       	adiw	r26, 0x03	; 3
     45e:	8c 91       	ld	r24, X
     460:	13 97       	sbiw	r26, 0x03	; 3
     462:	81 60       	ori	r24, 0x01	; 1
     464:	13 96       	adiw	r26, 0x03	; 3
     466:	8c 93       	st	X, r24
	
	//Testing setup code
	RTC.COMP = 16384; //~1 second? Assuming 32.768 KHz
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e4       	ldi	r25, 0x40	; 64
     46c:	84 87       	std	Z+12, r24	; 0x0c
     46e:	95 87       	std	Z+13, r25	; 0x0d
	RTC.PER = 0xFF00;  //No tengo nuguien idea
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	9f ef       	ldi	r25, 0xFF	; 255
     474:	82 87       	std	Z+10, r24	; 0x0a
     476:	93 87       	std	Z+11, r25	; 0x0b
     478:	08 95       	ret

0000047a <__vector_7>:

}

ISR(RTC_OVF_vect){
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
	
}
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <__vector_8>:

ISR(RTC_COMP_vect){
     48e:	1f 92       	push	r1
     490:	0f 92       	push	r0
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	0f 92       	push	r0
     496:	11 24       	eor	r1, r1
     498:	8f 93       	push	r24
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
	
	RTC.CNT = 0;
     49e:	e0 e0       	ldi	r30, 0x00	; 0
     4a0:	f4 e0       	ldi	r31, 0x04	; 4
     4a2:	10 86       	std	Z+8, r1	; 0x08
     4a4:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTFLAGS = 0x02;
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	83 83       	std	Z+3, r24	; 0x03
	
	RSSI.countDifference = 0;
     4aa:	10 92 ce 20 	sts	0x20CE, r1
     4ae:	10 92 cf 20 	sts	0x20CF, r1
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	8f 91       	pop	r24
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <_Z12configureXCLv>:

void configureXCL(){
     4c2:	08 95       	ret

000004c4 <_Z19ReadCalibrationByteh>:
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     4c4:	aa ec       	ldi	r26, 0xCA	; 202
     4c6:	b1 e0       	ldi	r27, 0x01	; 1
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     4cc:	e8 2f       	mov	r30, r24
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     4d2:	1c 92       	st	X, r1

	return( result );
}
     4d4:	08 95       	ret

000004d6 <_Z13configureADCsv>:

#include "config.h"

extern RSSI_type RSSI;

void configureADCs(){
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
	// Batt Input Voltage
	// Halve Input
	//Set to single ended input
	//Set to 12-bit mode
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
     4da:	c0 e0       	ldi	r28, 0x00	; 0
     4dc:	d2 e0       	ldi	r29, 0x02	; 2
     4de:	82 e1       	ldi	r24, 0x12	; 18
     4e0:	89 83       	std	Y+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; //Disable events
     4e6:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
     4e8:	87 e0       	ldi	r24, 0x07	; 7
     4ea:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
     4ec:	80 e2       	ldi	r24, 0x20	; 32
     4ee:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z19ReadCalibrationByteh>
     4f2:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
     4f4:	81 e2       	ldi	r24, 0x21	; 33
     4f6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z19ReadCalibrationByteh>
     4fa:	8d 87       	std	Y+13, r24	; 0x0d
     4fc:	8f e7       	ldi	r24, 0x7F	; 127
     4fe:	9c e0       	ldi	r25, 0x0C	; 12
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <_Z13configureADCsv+0x2a>
     504:	00 c0       	rjmp	.+0      	; 0x506 <_Z13configureADCsv+0x30>
     506:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	88 a3       	std	Y+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
     50c:	81 e4       	ldi	r24, 0x41	; 65
     50e:	89 a3       	std	Y+33, r24	; 0x21
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
     510:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	88 83       	st	Y, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
	//ADCA.CTRLA |= ADC_CH8START_bm;
	*/	
}	
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <_Z23sampleTempSensorVoltagev>:

	
}

int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);//ADC_CH_MUXNEG0_bm);
     51c:	e0 e0       	ldi	r30, 0x00	; 0
     51e:	f2 e0       	ldi	r31, 0x02	; 2
     520:	81 e4       	ldi	r24, 0x41	; 65
     522:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     524:	80 a1       	ldd	r24, Z+32	; 0x20
     526:	80 68       	ori	r24, 0x80	; 128
     528:	80 a3       	std	Z+32, r24	; 0x20
     52a:	8f e7       	ldi	r24, 0x7F	; 127
     52c:	9c e0       	ldi	r25, 0x0C	; 12
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	f1 f7       	brne	.-4      	; 0x52e <_Z23sampleTempSensorVoltagev+0x12>
     532:	00 c0       	rjmp	.+0      	; 0x534 <_Z23sampleTempSensorVoltagev+0x18>
     534:	00 00       	nop
	
	_delay_us(400);
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 8)) != (1U << 8)); // (1U << n) where n is the adc channel, so zero for this one
	
	while(!(ADCA.INTFLAGS & (1 << 0)));
     536:	86 81       	ldd	r24, Z+6	; 0x06
     538:	80 ff       	sbrs	r24, 0
     53a:	fd cf       	rjmp	.-6      	; 0x536 <_Z23sampleTempSensorVoltagev+0x1a>
	ADCA.INTFLAGS = (1 << 0);
     53c:	e0 e0       	ldi	r30, 0x00	; 0
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     544:	84 a1       	ldd	r24, Z+36	; 0x24
     546:	95 a1       	ldd	r25, Z+37	; 0x25
}
     548:	08 95       	ret

0000054a <_Z20sampleBatteryVoltagev>:

int16_t sampleBatteryVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN9_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for batt voltage sense
     54a:	e0 e0       	ldi	r30, 0x00	; 0
     54c:	f2 e0       	ldi	r31, 0x02	; 2
     54e:	89 e4       	ldi	r24, 0x49	; 73
     550:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     552:	80 a1       	ldd	r24, Z+32	; 0x20
     554:	80 68       	ori	r24, 0x80	; 128
     556:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
	//ADCA.INTFLAGS = ((1U << 0) << ADC_CH0IF_bp);
	while(!(ADCA.INTFLAGS & (1 << 0)));
     558:	86 81       	ldd	r24, Z+6	; 0x06
     55a:	80 ff       	sbrs	r24, 0
     55c:	fd cf       	rjmp	.-6      	; 0x558 <_Z20sampleBatteryVoltagev+0xe>
	ADCA.INTFLAGS = (1 << 0);
     55e:	e0 e0       	ldi	r30, 0x00	; 0
     560:	f2 e0       	ldi	r31, 0x02	; 2
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     566:	84 a1       	ldd	r24, Z+36	; 0x24
     568:	95 a1       	ldd	r25, Z+37	; 0x25
}
     56a:	08 95       	ret

0000056c <_Z18getEBoxTemperaturev>:

double getEBoxTemperature(){
     56c:	2f 92       	push	r2
     56e:	3f 92       	push	r3
     570:	4f 92       	push	r4
     572:	5f 92       	push	r5
     574:	6f 92       	push	r6
     576:	7f 92       	push	r7
     578:	8f 92       	push	r8
     57a:	9f 92       	push	r9
     57c:	af 92       	push	r10
     57e:	bf 92       	push	r11
     580:	cf 92       	push	r12
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	0f 2e       	mov	r0, r31
     592:	f4 e6       	ldi	r31, 0x64	; 100
     594:	6f 2e       	mov	r6, r31
     596:	71 2c       	mov	r7, r1
     598:	f0 2d       	mov	r31, r0
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
     59a:	41 2c       	mov	r4, r1
     59c:	51 2c       	mov	r5, r1
     59e:	81 2c       	mov	r8, r1
     5a0:	91 2c       	mov	r9, r1
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
     5a4:	c0 e0       	ldi	r28, 0x00	; 0
     5a6:	21 2c       	mov	r2, r1
     5a8:	31 2c       	mov	r3, r1
	for(int i = 0; i < avgVal; ++i){
		sum += sampleTempSensorVoltage();
     5aa:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z23sampleTempSensorVoltagev>
     5ae:	b9 2e       	mov	r11, r25
     5b0:	a8 2e       	mov	r10, r24
     5b2:	19 2f       	mov	r17, r25
     5b4:	11 0f       	add	r17, r17
     5b6:	11 0b       	sbc	r17, r17
     5b8:	24 2d       	mov	r18, r4
     5ba:	35 2d       	mov	r19, r5
     5bc:	48 2d       	mov	r20, r8
     5be:	59 2d       	mov	r21, r9
     5c0:	6d 2f       	mov	r22, r29
     5c2:	7c 2f       	mov	r23, r28
     5c4:	82 2d       	mov	r24, r2
     5c6:	93 2d       	mov	r25, r3
     5c8:	c1 2e       	mov	r12, r17
     5ca:	d1 2e       	mov	r13, r17
     5cc:	e1 2e       	mov	r14, r17
     5ce:	f1 2e       	mov	r15, r17
     5d0:	01 2f       	mov	r16, r17
     5d2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__adddi3>
     5d6:	42 2e       	mov	r4, r18
     5d8:	53 2e       	mov	r5, r19
     5da:	84 2e       	mov	r8, r20
     5dc:	95 2e       	mov	r9, r21
     5de:	d6 2f       	mov	r29, r22
     5e0:	c7 2f       	mov	r28, r23
     5e2:	28 2e       	mov	r2, r24
     5e4:	39 2e       	mov	r3, r25
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	68 1a       	sub	r6, r24
     5ea:	71 08       	sbc	r7, r1
double getEBoxTemperature(){
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
	for(int i = 0; i < avgVal; ++i){
     5ec:	f1 f6       	brne	.-68     	; 0x5aa <_Z18getEBoxTemperaturev+0x3e>
		sum += sampleTempSensorVoltage();
	}
	temperature = sum / avgVal;
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f4 e6       	ldi	r31, 0x64	; 100
     5f2:	af 2e       	mov	r10, r31
     5f4:	f0 2d       	mov	r31, r0
     5f6:	b1 2c       	mov	r11, r1
     5f8:	c1 2c       	mov	r12, r1
     5fa:	d1 2c       	mov	r13, r1
     5fc:	e1 2c       	mov	r14, r1
     5fe:	f1 2c       	mov	r15, r1
     600:	00 e0       	ldi	r16, 0x00	; 0
     602:	10 e0       	ldi	r17, 0x00	; 0
     604:	24 2d       	mov	r18, r4
     606:	35 2d       	mov	r19, r5
     608:	48 2d       	mov	r20, r8
     60a:	59 2d       	mov	r21, r9
     60c:	6d 2f       	mov	r22, r29
     60e:	7c 2f       	mov	r23, r28
     610:	82 2d       	mov	r24, r2
     612:	93 2d       	mov	r25, r3
     614:	0e 94 05 08 	call	0x100a	; 0x100a <__udivdi3>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     618:	62 2f       	mov	r22, r18
     61a:	73 2f       	mov	r23, r19
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 86 06 	call	0xd0c	; 0xd0c <__floatunsisf>
     624:	29 e8       	ldi	r18, 0x89	; 137
     626:	3d e0       	ldi	r19, 0x0D	; 13
     628:	4d e9       	ldi	r20, 0x9D	; 157
     62a:	5a e3       	ldi	r21, 0x3A	; 58
     62c:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     630:	24 e6       	ldi	r18, 0x64	; 100
     632:	37 e6       	ldi	r19, 0x67	; 103
     634:	49 e1       	ldi	r20, 0x19	; 25
     636:	5b e3       	ldi	r21, 0x3B	; 59
     638:	0e 94 72 05 	call	0xae4	; 0xae4 <__addsf3>
	
	#ifdef TMP36
		temperatureFloat = 100.0 * temperatureVoltage - 50.0;
	#endif
	#ifdef TMP37
		temperatureFloat = 50.0 * temperatureVoltage;
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	48 e4       	ldi	r20, 0x48	; 72
     642:	52 e4       	ldi	r21, 0x42	; 66
     644:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
	#endif
	
	return temperatureFloat;
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	bf 90       	pop	r11
     65a:	af 90       	pop	r10
     65c:	9f 90       	pop	r9
     65e:	8f 90       	pop	r8
     660:	7f 90       	pop	r7
     662:	6f 90       	pop	r6
     664:	5f 90       	pop	r5
     666:	4f 90       	pop	r4
     668:	3f 90       	pop	r3
     66a:	2f 90       	pop	r2
     66c:	08 95       	ret

0000066e <_Z28getElectronicsBatteryVoltagev>:

double getElectronicsBatteryVoltage(){
     66e:	cf 92       	push	r12
     670:	df 92       	push	r13
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	c2 e3       	ldi	r28, 0x32	; 50
     67c:	d0 e0       	ldi	r29, 0x00	; 0

	int avgVal = 50;
	uint32_t sum = 0;
     67e:	c1 2c       	mov	r12, r1
     680:	d1 2c       	mov	r13, r1
     682:	76 01       	movw	r14, r12
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
     684:	0e 94 a5 02 	call	0x54a	; 0x54a <_Z20sampleBatteryVoltagev>
     688:	09 2e       	mov	r0, r25
     68a:	00 0c       	add	r0, r0
     68c:	aa 0b       	sbc	r26, r26
     68e:	bb 0b       	sbc	r27, r27
     690:	c8 0e       	add	r12, r24
     692:	d9 1e       	adc	r13, r25
     694:	ea 1e       	adc	r14, r26
     696:	fb 1e       	adc	r15, r27
     698:	21 97       	sbiw	r28, 0x01	; 1
double getElectronicsBatteryVoltage(){

	int avgVal = 50;
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
     69a:	a1 f7       	brne	.-24     	; 0x684 <_Z28getElectronicsBatteryVoltagev+0x16>
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
     69c:	c7 01       	movw	r24, r14
     69e:	b6 01       	movw	r22, r12
     6a0:	22 e3       	ldi	r18, 0x32	; 50
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__udivmodsi4>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     6ac:	b9 01       	movw	r22, r18
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 86 06 	call	0xd0c	; 0xd0c <__floatunsisf>
     6b6:	29 e8       	ldi	r18, 0x89	; 137
     6b8:	3d e0       	ldi	r19, 0x0D	; 13
     6ba:	4d e9       	ldi	r20, 0x9D	; 157
     6bc:	5a e3       	ldi	r21, 0x3A	; 58
     6be:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     6c2:	24 e6       	ldi	r18, 0x64	; 100
     6c4:	37 e6       	ldi	r19, 0x67	; 103
     6c6:	49 e1       	ldi	r20, 0x19	; 25
     6c8:	5b e3       	ldi	r21, 0x3B	; 59
     6ca:	0e 94 72 05 	call	0xae4	; 0xae4 <__addsf3>
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
	double electronicsVoltage = ADCCountToVoltage(electronicsVoltageCount);
	double calculatedElectronicsVoltage =  (electronicsVoltage / .56) + (10.0 - .05);
     6ce:	29 e2       	ldi	r18, 0x29	; 41
     6d0:	3c e5       	ldi	r19, 0x5C	; 92
     6d2:	4f e0       	ldi	r20, 0x0F	; 15
     6d4:	5f e3       	ldi	r21, 0x3F	; 63
     6d6:	0e 94 de 05 	call	0xbbc	; 0xbbc <__divsf3>
     6da:	23 e3       	ldi	r18, 0x33	; 51
     6dc:	33 e3       	ldi	r19, 0x33	; 51
     6de:	4f e1       	ldi	r20, 0x1F	; 31
     6e0:	51 e4       	ldi	r21, 0x41	; 65
     6e2:	0e 94 72 05 	call	0xae4	; 0xae4 <__addsf3>

	return calculatedElectronicsVoltage;
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	08 95       	ret

000006f4 <main>:
volatile int toggle = 0;
volatile int temp = 1000;
uint8_t remoteInput = 0;

int main(void)
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	28 97       	sbiw	r28, 0x08	; 8
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	de bf       	out	0x3e, r29	; 62
	configureIO();
     702:	0e 94 ac 00 	call	0x158	; 0x158 <_Z11configureIOv>
	configureExternalOscillator();
     706:	0e 94 75 00 	call	0xea	; 0xea <_Z27configureExternalOscillatorv>
	configureUSART();					//Set up for 57600 Baud
     70a:	0e 94 48 05 	call	0xa90	; 0xa90 <_Z14configureUSARTv>
	configureTimerCounter();
     70e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z21configureTimerCounterv>
	configureADCs();
     712:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z13configureADCsv>
	configureRTC();
     716:	0e 94 17 02 	call	0x42e	; 0x42e <_Z12configureRTCv>
	configureXCL();
     71a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z12configureXCLv>
	
	LOW_LEVEL_INTERRUPTS_ENABLE();
     71e:	e0 ea       	ldi	r30, 0xA0	; 160
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	81 60       	ori	r24, 0x01	; 1
     726:	82 83       	std	Z+2, r24	; 0x02
	MED_LEVEL_INTERRUPTS_ENABLE();
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	82 60       	ori	r24, 0x02	; 2
     72c:	82 83       	std	Z+2, r24	; 0x02
	HIGH_LEVEL_INTERRUPTS_ENABLE();
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	84 60       	ori	r24, 0x04	; 4
     732:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable global interrupts
     734:	78 94       	sei
	
	uint8_t receivedUSARTData;
	
	RSSI.measuring = NOT_MEASURING;
     736:	ea ec       	ldi	r30, 0xCA	; 202
     738:	f0 e2       	ldi	r31, 0x20	; 32
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	81 83       	std	Z+1, r24	; 0x01
	RSSI.timeDifference = 0;
     73e:	12 82       	std	Z+2, r1	; 0x02
     740:	13 82       	std	Z+3, r1	; 0x03
	RSSI.sampleCount = 0;
     742:	16 82       	std	Z+6, r1	; 0x06
     744:	17 82       	std	Z+7, r1	; 0x07

	//Init string with basic documentation
	SendStringPC((char *)"#[INIT ROSS PDB]\n\r");
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e2       	ldi	r25, 0x20	; 32
     74a:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
	SendStringPC((char *)"#Firmware version ");
     74e:	84 e1       	ldi	r24, 0x14	; 20
     750:	90 e2       	ldi	r25, 0x20	; 32
     752:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
	SendStringPC((char *)FIRMWARE_VERSION_STR);
     756:	87 e2       	ldi	r24, 0x27	; 39
     758:	90 e2       	ldi	r25, 0x20	; 32
     75a:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
	SendStringPC((char *)"\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr | XTend RSSI | \"Remote Input\" | \n\r");
     75e:	8a e2       	ldi	r24, 0x2A	; 42
     760:	90 e2       	ldi	r25, 0x20	; 32
     762:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     766:	0f 2e       	mov	r0, r31
     768:	f0 ec       	ldi	r31, 0xC0	; 192
     76a:	cf 2e       	mov	r12, r31
     76c:	f8 e0       	ldi	r31, 0x08	; 8
     76e:	df 2e       	mov	r13, r31
     770:	f0 2d       	mov	r31, r0
			receivedUSARTData = USART_GetChar(&COMP_USART);
			if(receivedUSARTData == 'y')
				REAR_RELAY_SET();
			else if(receivedUSARTData == 'n')
				REAR_RELAY_CLR();
     772:	0f 2e       	mov	r0, r31
     774:	f0 e4       	ldi	r31, 0x40	; 64
     776:	6f 2e       	mov	r6, r31
     778:	f6 e0       	ldi	r31, 0x06	; 6
     77a:	7f 2e       	mov	r7, r31
     77c:	f0 2d       	mov	r31, r0
		}		
		
		if(USART_IsRXComplete(&ONOFF_USART)){
     77e:	0f 2e       	mov	r0, r31
     780:	f0 ec       	ldi	r31, 0xC0	; 192
     782:	2f 2e       	mov	r2, r31
     784:	f9 e0       	ldi	r31, 0x09	; 9
     786:	3f 2e       	mov	r3, r31
     788:	f0 2d       	mov	r31, r0
			
		}
		
		//TODO: if(pixhawkControl)
		TC_PWM_SET(steeringPWMPeriod);	//Process the artificial PWM output
     78a:	0f 2e       	mov	r0, r31
     78c:	f0 e4       	ldi	r31, 0x40	; 64
     78e:	8f 2e       	mov	r8, r31
     790:	f9 e0       	ldi	r31, 0x09	; 9
     792:	9f 2e       	mov	r9, r31
     794:	f0 2d       	mov	r31, r0
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
			broadcastStatus = 0;
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     796:	a1 2c       	mov	r10, r1
     798:	68 94       	set
     79a:	bb 24       	eor	r11, r11
     79c:	b3 f8       	bld	r11, 3
		}
    }
}

uint16_t inline getXTendRSSI(){
	RTC.CNT = 0;
     79e:	41 2c       	mov	r4, r1
     7a0:	68 94       	set
     7a2:	55 24       	eor	r5, r5
     7a4:	52 f8       	bld	r5, 2
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
					
	}while(READ_RSSI_PIN());
     7a6:	00 e0       	ldi	r16, 0x00	; 0
     7a8:	16 e0       	ldi	r17, 0x06	; 6
		if(USART_IsRXComplete(&COMP_USART)){
			receivedUSARTData = USART_GetChar(&COMP_USART);
			if(receivedUSARTData == 'y')
				REAR_RELAY_SET();
			else if(receivedUSARTData == 'n')
				REAR_RELAY_CLR();
     7aa:	68 94       	set
     7ac:	ff 24       	eor	r15, r15
     7ae:	f5 f8       	bld	r15, 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b0:	8f e3       	ldi	r24, 0x3F	; 63
     7b2:	9f e1       	ldi	r25, 0x1F	; 31
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <main+0xc0>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <main+0xc6>
     7ba:	00 00       	nop
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     7bc:	f6 01       	movw	r30, r12
     7be:	81 81       	ldd	r24, Z+1	; 0x01
     7c0:	88 23       	and	r24, r24
     7c2:	54 f4       	brge	.+20     	; 0x7d8 <main+0xe4>
			receivedUSARTData = USART_GetChar(&COMP_USART);
     7c4:	80 81       	ld	r24, Z
			if(receivedUSARTData == 'y')
     7c6:	89 37       	cpi	r24, 0x79	; 121
     7c8:	19 f4       	brne	.+6      	; 0x7d0 <main+0xdc>
				REAR_RELAY_SET();
     7ca:	f3 01       	movw	r30, r6
     7cc:	f5 82       	std	Z+5, r15	; 0x05
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <main+0xe4>
			else if(receivedUSARTData == 'n')
     7d0:	8e 36       	cpi	r24, 0x6E	; 110
     7d2:	11 f4       	brne	.+4      	; 0x7d8 <main+0xe4>
				REAR_RELAY_CLR();
     7d4:	f3 01       	movw	r30, r6
     7d6:	f6 82       	std	Z+6, r15	; 0x06
		}		
		
		if(USART_IsRXComplete(&ONOFF_USART)){
     7d8:	f1 01       	movw	r30, r2
     7da:	81 81       	ldd	r24, Z+1	; 0x01
			
		}
		
		//TODO: if(pixhawkControl)
		TC_PWM_SET(steeringPWMPeriod);	//Process the artificial PWM output
     7dc:	60 91 be 20 	lds	r22, 0x20BE
     7e0:	70 91 bf 20 	lds	r23, 0x20BF
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 86 06 	call	0xd0c	; 0xd0c <__floatunsisf>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	5f e3       	ldi	r21, 0x3F	; 63
     7f4:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     7f8:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     7fc:	f4 01       	movw	r30, r8
     7fe:	60 a7       	std	Z+40, r22	; 0x28
     800:	71 a7       	std	Z+41, r23	; 0x29
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
     802:	80 91 c8 20 	lds	r24, 0x20C8
     806:	88 23       	and	r24, r24
     808:	99 f2       	breq	.-90     	; 0x7b0 <main+0xbc>
			broadcastStatus = 0;
     80a:	10 92 c8 20 	sts	0x20C8, r1
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     80e:	f5 01       	movw	r30, r10
     810:	10 a2       	std	Z+32, r1	; 0x20
     812:	11 a2       	std	Z+33, r1	; 0x21
							//have a consistent report time. (We don't want to throw
							//out the accuracy of the TC)
			
			//Calculated desired output values
			double EBoxTemp = getEBoxTemperature();
     814:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z18getEBoxTemperaturev>
     818:	69 83       	std	Y+1, r22	; 0x01
     81a:	7a 83       	std	Y+2, r23	; 0x02
     81c:	8b 83       	std	Y+3, r24	; 0x03
     81e:	9c 83       	std	Y+4, r25	; 0x04
			double electronicsBatteryVoltage = getElectronicsBatteryVoltage();
     820:	0e 94 37 03 	call	0x66e	; 0x66e <_Z28getElectronicsBatteryVoltagev>
     824:	6d 83       	std	Y+5, r22	; 0x05
     826:	7e 83       	std	Y+6, r23	; 0x06
     828:	8f 83       	std	Y+7, r24	; 0x07
     82a:	98 87       	std	Y+8, r25	; 0x08
		}
    }
}

uint16_t inline getXTendRSSI(){
	RTC.CNT = 0;
     82c:	f2 01       	movw	r30, r4
     82e:	10 86       	std	Z+8, r1	; 0x08
     830:	11 86       	std	Z+9, r1	; 0x09
				
	//Get RSSI from XTend
	RSSI.measuring = 0;
     832:	10 92 cb 20 	sts	0x20CB, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     836:	8f e8       	ldi	r24, 0x8F	; 143
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <main+0x146>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <main+0x14c>
     840:	00 00       	nop
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     842:	f2 01       	movw	r30, r4
     844:	80 85       	ldd	r24, Z+8	; 0x08
     846:	91 85       	ldd	r25, Z+9	; 0x09
     848:	82 31       	cpi	r24, 0x12	; 18
     84a:	91 40       	sbci	r25, 0x01	; 1
     84c:	20 f4       	brcc	.+8      	; 0x856 <main+0x162>
		break;
					
	}while(READ_RSSI_PIN());
     84e:	f8 01       	movw	r30, r16
     850:	80 85       	ldd	r24, Z+8	; 0x08
uint16_t inline getXTendRSSI(){
	RTC.CNT = 0;
				
	//Get RSSI from XTend
	RSSI.measuring = 0;
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
     852:	82 fd       	sbrc	r24, 2
     854:	f0 cf       	rjmp	.-32     	; 0x836 <main+0x142>
     856:	8f e8       	ldi	r24, 0x8F	; 143
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <main+0x166>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <main+0x16c>
     860:	00 00       	nop
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     862:	f2 01       	movw	r30, r4
     864:	80 85       	ldd	r24, Z+8	; 0x08
     866:	91 85       	ldd	r25, Z+9	; 0x09
     868:	82 31       	cpi	r24, 0x12	; 18
     86a:	91 40       	sbci	r25, 0x01	; 1
     86c:	20 f4       	brcc	.+8      	; 0x876 <main+0x182>
		break;
	}while(!READ_RSSI_PIN());
     86e:	f8 01       	movw	r30, r16
     870:	80 85       	ldd	r24, Z+8	; 0x08
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
					
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
     872:	82 ff       	sbrs	r24, 2
     874:	f0 cf       	rjmp	.-32     	; 0x856 <main+0x162>
					
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
	}while(!READ_RSSI_PIN());
				
	RTC.CNT = 0;  //Start counting
     876:	f2 01       	movw	r30, r4
     878:	10 86       	std	Z+8, r1	; 0x08
     87a:	11 86       	std	Z+9, r1	; 0x09
     87c:	8f e8       	ldi	r24, 0x8F	; 143
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <main+0x18c>
     884:	00 c0       	rjmp	.+0      	; 0x886 <main+0x192>
     886:	00 00       	nop
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     888:	f2 01       	movw	r30, r4
     88a:	80 85       	ldd	r24, Z+8	; 0x08
     88c:	91 85       	ldd	r25, Z+9	; 0x09
     88e:	82 31       	cpi	r24, 0x12	; 18
     890:	91 40       	sbci	r25, 0x01	; 1
     892:	20 f4       	brcc	.+8      	; 0x89c <main+0x1a8>
		break;
	}while(READ_RSSI_PIN());
     894:	f8 01       	movw	r30, r16
     896:	80 85       	ldd	r24, Z+8	; 0x08
		break;
	}while(!READ_RSSI_PIN());
				
	RTC.CNT = 0;  //Start counting
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
     898:	82 fd       	sbrc	r24, 2
     89a:	f0 cf       	rjmp	.-32     	; 0x87c <main+0x188>
					
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
	}while(READ_RSSI_PIN());
				
	RSSI.countDifference = RTC.CNT;
     89c:	f2 01       	movw	r30, r4
     89e:	80 85       	ldd	r24, Z+8	; 0x08
     8a0:	91 85       	ldd	r25, Z+9	; 0x09
     8a2:	0f 2e       	mov	r0, r31
     8a4:	fa ec       	ldi	r31, 0xCA	; 202
     8a6:	ef 2e       	mov	r14, r31
     8a8:	f0 e2       	ldi	r31, 0x20	; 32
     8aa:	ff 2e       	mov	r15, r31
     8ac:	f0 2d       	mov	r31, r0
     8ae:	f7 01       	movw	r30, r14
     8b0:	84 83       	std	Z+4, r24	; 0x04
     8b2:	95 83       	std	Z+5, r25	; 0x05
	
	RSSI.value = (100 * RSSI.countDifference) / RSSI_MAX_COUNT;
     8b4:	24 81       	ldd	r18, Z+4	; 0x04
     8b6:	35 81       	ldd	r19, Z+5	; 0x05
     8b8:	44 e6       	ldi	r20, 0x64	; 100
     8ba:	42 9f       	mul	r20, r18
     8bc:	c0 01       	movw	r24, r0
     8be:	43 9f       	mul	r20, r19
     8c0:	90 0d       	add	r25, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	61 e1       	ldi	r22, 0x11	; 17
     8c6:	71 e0       	ldi	r23, 0x01	; 1
     8c8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__udivmodhi4>
     8cc:	60 83       	st	Z, r22
				
	RSSI.sampleCount++;
     8ce:	86 81       	ldd	r24, Z+6	; 0x06
     8d0:	97 81       	ldd	r25, Z+7	; 0x07
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	86 83       	std	Z+6, r24	; 0x06
     8d6:	97 83       	std	Z+7, r25	; 0x07
	
	return RSSI.countDifference;
     8d8:	84 81       	ldd	r24, Z+4	; 0x04
     8da:	95 81       	ldd	r25, Z+5	; 0x05
							//it is quick to sample.
			
			//Actually output the desired values
			//Not the most elegant code in the world, but it works...
			
			SendFloatPC(electronicsBatteryVoltage);	//Send the battery voltage
     8dc:	6d 81       	ldd	r22, Y+5	; 0x05
     8de:	7e 81       	ldd	r23, Y+6	; 0x06
     8e0:	8f 81       	ldd	r24, Y+7	; 0x07
     8e2:	98 85       	ldd	r25, Y+8	; 0x08
     8e4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     8e8:	83 eb       	ldi	r24, 0xB3	; 179
     8ea:	90 e2       	ldi	r25, 0x20	; 32
     8ec:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
			SendFloatPC(zero);		//Send the rear battery voltage
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	cb 01       	movw	r24, r22
     8f6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     8fa:	83 eb       	ldi	r24, 0xB3	; 179
     8fc:	90 e2       	ldi	r25, 0x20	; 32
     8fe:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
			SendFloatPC(EBoxTemp);	//Send the EBox Temperature
     902:	69 81       	ldd	r22, Y+1	; 0x01
     904:	7a 81       	ldd	r23, Y+2	; 0x02
     906:	8b 81       	ldd	r24, Y+3	; 0x03
     908:	9c 81       	ldd	r25, Y+4	; 0x04
     90a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     90e:	83 eb       	ldi	r24, 0xB3	; 179
     910:	90 e2       	ldi	r25, 0x20	; 32
     912:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
			SendFloatPC(zero);		//Send 5v_SYS Curr
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	cb 01       	movw	r24, r22
     91c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     920:	83 eb       	ldi	r24, 0xB3	; 179
     922:	90 e2       	ldi	r25, 0x20	; 32
     924:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
			SendFloatPC(zero);		//Send 5v_SYS Curr
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	cb 01       	movw	r24, r22
     92e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     932:	83 eb       	ldi	r24, 0xB3	; 179
     934:	90 e2       	ldi	r25, 0x20	; 32
     936:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
			SendNumPC(RSSI.value);
     93a:	f7 01       	movw	r30, r14
     93c:	80 81       	ld	r24, Z
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_Z9SendNumPCj>
			if(RSSI.value == 0)
     944:	f7 01       	movw	r30, r14
     946:	80 81       	ld	r24, Z
     948:	81 11       	cpse	r24, r1
     94a:	04 c0       	rjmp	.+8      	; 0x954 <main+0x260>
				SendNumPC(zero);
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_Z9SendNumPCj>
			SendStringPC((char *)"|");
     954:	83 eb       	ldi	r24, 0xB3	; 179
     956:	90 e2       	ldi	r25, 0x20	; 32
     958:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
			SendNumPC(remoteInput);
     95c:	80 91 c9 20 	lds	r24, 0x20C9
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_Z9SendNumPCj>
			//SendStringPC((char *)"|");
			
			debuggingOutput();
			
			//Newline
			SendStringPC((char *)"\n\r");
     966:	80 eb       	ldi	r24, 0xB0	; 176
     968:	90 e2       	ldi	r25, 0x20	; 32
     96a:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
	
			//Check the updating speed setting
			//The speed shouldn't be set lower than maybe 75mS due to RSSI processing time
			if(CHECK_DIP_SW_1()){
     96e:	f3 01       	movw	r30, r6
     970:	80 85       	ldd	r24, Z+8	; 0x08
     972:	83 fd       	sbrc	r24, 3
     974:	06 c0       	rjmp	.+12     	; 0x982 <main+0x28e>
				TCC4.PER = TC_1024_100MS;  //100mS delay
     976:	85 e3       	ldi	r24, 0x35	; 53
     978:	9c e0       	ldi	r25, 0x0C	; 12
     97a:	f5 01       	movw	r30, r10
     97c:	86 a3       	std	Z+38, r24	; 0x26
     97e:	97 a3       	std	Z+39, r25	; 0x27
     980:	14 cf       	rjmp	.-472    	; 0x7aa <main+0xb6>
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
     982:	89 e0       	ldi	r24, 0x09	; 9
     984:	9d e3       	ldi	r25, 0x3D	; 61
     986:	f5 01       	movw	r30, r10
     988:	86 a3       	std	Z+38, r24	; 0x26
     98a:	97 a3       	std	Z+39, r25	; 0x27
     98c:	0e cf       	rjmp	.-484    	; 0x7aa <main+0xb6>

0000098e <_Z12SendStringPCPc>:
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     98e:	fc 01       	movw	r30, r24
     990:	20 81       	ld	r18, Z
     992:	22 23       	and	r18, r18
     994:	59 f0       	breq	.+22     	; 0x9ac <_Z12SendStringPCPc+0x1e>
     996:	dc 01       	movw	r26, r24
     998:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
     99a:	e0 ec       	ldi	r30, 0xC0	; 192
     99c:	f8 e0       	ldi	r31, 0x08	; 8
     99e:	91 81       	ldd	r25, Z+1	; 0x01
     9a0:	95 ff       	sbrs	r25, 5
     9a2:	fd cf       	rjmp	.-6      	; 0x99e <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
     9a4:	20 83       	st	Z, r18
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     9a6:	2d 91       	ld	r18, X+
     9a8:	21 11       	cpse	r18, r1
     9aa:	f9 cf       	rjmp	.-14     	; 0x99e <_Z12SendStringPCPc+0x10>
     9ac:	08 95       	ret

000009ae <_Z9SendNumPCj>:
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
		USART_PutChar(&COMP_USART, stufftosend[i]);
	}
}

void SendNumPC(uint16_t numToSend){
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	64 97       	sbiw	r28, 0x14	; 20
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9bc:	4a e0       	ldi	r20, 0x0A	; 10
     9be:	be 01       	movw	r22, r28
     9c0:	6f 5f       	subi	r22, 0xFF	; 255
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255
     9c4:	0e 94 77 08 	call	0x10ee	; 0x10ee <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
}
     9d0:	64 96       	adiw	r28, 0x14	; 20
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <_Z11SendFloatPCd>:

void SendFloatPC(double numToSend){
     9dc:	8f 92       	push	r8
     9de:	9f 92       	push	r9
     9e0:	af 92       	push	r10
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	c4 56       	subi	r28, 0x64	; 100
     9fa:	d1 09       	sbc	r29, r1
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	4b 01       	movw	r8, r22
     a02:	5c 01       	movw	r10, r24
	char buffer[100];
	
	int d1 = numToSend;
     a04:	0e 94 50 06 	call	0xca0	; 0xca0 <__fixsfsi>
     a08:	6b 01       	movw	r12, r22
     a0a:	7c 01       	movw	r14, r24
	float f2 = numToSend - d1;
     a0c:	07 2e       	mov	r0, r23
     a0e:	00 0c       	add	r0, r0
     a10:	88 0b       	sbc	r24, r24
     a12:	99 0b       	sbc	r25, r25
     a14:	0e 94 88 06 	call	0xd10	; 0xd10 <__floatsisf>
     a18:	9b 01       	movw	r18, r22
     a1a:	ac 01       	movw	r20, r24
     a1c:	c5 01       	movw	r24, r10
     a1e:	b4 01       	movw	r22, r8
     a20:	0e 94 71 05 	call	0xae2	; 0xae2 <__subsf3>
	int d2 = trunc(f2 * 10000);
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e4       	ldi	r19, 0x40	; 64
     a28:	4c e1       	ldi	r20, 0x1C	; 28
     a2a:	56 e4       	ldi	r21, 0x46	; 70
     a2c:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     a30:	0e 94 81 07 	call	0xf02	; 0xf02 <trunc>
     a34:	0e 94 50 06 	call	0xca0	; 0xca0 <__fixsfsi>
	
	sprintf(buffer, "%d.%04d", d1, abs(d2));
     a38:	9b 01       	movw	r18, r22
     a3a:	77 23       	and	r23, r23
     a3c:	24 f4       	brge	.+8      	; 0xa46 <_Z11SendFloatPCd+0x6a>
     a3e:	22 27       	eor	r18, r18
     a40:	33 27       	eor	r19, r19
     a42:	26 1b       	sub	r18, r22
     a44:	37 0b       	sbc	r19, r23
     a46:	3f 93       	push	r19
     a48:	2f 93       	push	r18
     a4a:	df 92       	push	r13
     a4c:	cf 92       	push	r12
     a4e:	85 eb       	ldi	r24, 0xB5	; 181
     a50:	90 e2       	ldi	r25, 0x20	; 32
     a52:	9f 93       	push	r25
     a54:	8f 93       	push	r24
     a56:	8e 01       	movw	r16, r28
     a58:	0f 5f       	subi	r16, 0xFF	; 255
     a5a:	1f 4f       	sbci	r17, 0xFF	; 255
     a5c:	1f 93       	push	r17
     a5e:	0f 93       	push	r16
     a60:	0e 94 9c 08 	call	0x1138	; 0x1138 <sprintf>
	
	//sprintf(buffer, "%f", numToSend);
	SendStringPC(buffer);
     a64:	c8 01       	movw	r24, r16
     a66:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z12SendStringPCPc>
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	de bf       	out	0x3e, r29	; 62
}
     a6e:	cc 59       	subi	r28, 0x9C	; 156
     a70:	df 4f       	sbci	r29, 0xFF	; 255
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	08 95       	ret

00000a90 <_Z14configureUSARTv>:

void configureUSART(void){
	//ENABLE COMUPTER USART
	
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
     a90:	e0 e4       	ldi	r30, 0x40	; 64
     a92:	f6 e0       	ldi	r31, 0x06	; 6
     a94:	40 e8       	ldi	r20, 0x80	; 128
     a96:	41 83       	std	Z+1, r20	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
     a98:	30 e4       	ldi	r19, 0x40	; 64
     a9a:	32 83       	std	Z+2, r19	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
     a9c:	86 85       	ldd	r24, Z+14	; 0x0e
     a9e:	80 61       	ori	r24, 0x10	; 16
     aa0:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     aa2:	e0 ec       	ldi	r30, 0xC0	; 192
     aa4:	f8 e0       	ldi	r31, 0x08	; 8
     aa6:	23 e0       	ldi	r18, 0x03	; 3
     aa8:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
     aaa:	92 e2       	ldi	r25, 0x22	; 34
     aac:	96 83       	std	Z+6, r25	; 0x06
     aae:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
     ab0:	83 81       	ldd	r24, Z+3	; 0x03
     ab2:	80 61       	ori	r24, 0x10	; 16
     ab4:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
     ab6:	83 81       	ldd	r24, Z+3	; 0x03
     ab8:	88 60       	ori	r24, 0x08	; 8
     aba:	83 83       	std	Z+3, r24	; 0x03
	
	//ENABLE ON/OFF SWITCH USART
	
	//Set TX (pin7) to be output
	PORTD.DIRSET = PIN7_bm;
     abc:	e0 e6       	ldi	r30, 0x60	; 96
     abe:	f6 e0       	ldi	r31, 0x06	; 6
     ac0:	41 83       	std	Z+1, r20	; 0x01
	//Set RX (pin6) to be input
	PORTD.DIRCLR = PIN6_bm;
     ac2:	32 83       	std	Z+2, r19	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTD.REMAP |= (1 << 4);
     ac4:	86 85       	ldd	r24, Z+14	; 0x0e
     ac6:	80 61       	ori	r24, 0x10	; 16
     ac8:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&ONOFF_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     aca:	e0 ec       	ldi	r30, 0xC0	; 192
     acc:	f9 e0       	ldi	r31, 0x09	; 9
     ace:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&ONOFF_USART, 34, 0);
     ad0:	96 83       	std	Z+6, r25	; 0x06
     ad2:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&ONOFF_USART);
     ad4:	83 81       	ldd	r24, Z+3	; 0x03
     ad6:	80 61       	ori	r24, 0x10	; 16
     ad8:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&ONOFF_USART);
     ada:	83 81       	ldd	r24, Z+3	; 0x03
     adc:	88 60       	ori	r24, 0x08	; 8
     ade:	83 83       	std	Z+3, r24	; 0x03
     ae0:	08 95       	ret

00000ae2 <__subsf3>:
     ae2:	50 58       	subi	r21, 0x80	; 128

00000ae4 <__addsf3>:
     ae4:	bb 27       	eor	r27, r27
     ae6:	aa 27       	eor	r26, r26
     ae8:	0e 94 89 05 	call	0xb12	; 0xb12 <__addsf3x>
     aec:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_round>
     af0:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscA>
     af4:	38 f0       	brcs	.+14     	; 0xb04 <__addsf3+0x20>
     af6:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscB>
     afa:	20 f0       	brcs	.+8      	; 0xb04 <__addsf3+0x20>
     afc:	39 f4       	brne	.+14     	; 0xb0c <__addsf3+0x28>
     afe:	9f 3f       	cpi	r25, 0xFF	; 255
     b00:	19 f4       	brne	.+6      	; 0xb08 <__addsf3+0x24>
     b02:	26 f4       	brtc	.+8      	; 0xb0c <__addsf3+0x28>
     b04:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_nan>
     b08:	0e f4       	brtc	.+2      	; 0xb0c <__addsf3+0x28>
     b0a:	e0 95       	com	r30
     b0c:	e7 fb       	bst	r30, 7
     b0e:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_inf>

00000b12 <__addsf3x>:
     b12:	e9 2f       	mov	r30, r25
     b14:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_split3>
     b18:	58 f3       	brcs	.-42     	; 0xaf0 <__addsf3+0xc>
     b1a:	ba 17       	cp	r27, r26
     b1c:	62 07       	cpc	r22, r18
     b1e:	73 07       	cpc	r23, r19
     b20:	84 07       	cpc	r24, r20
     b22:	95 07       	cpc	r25, r21
     b24:	20 f0       	brcs	.+8      	; 0xb2e <__addsf3x+0x1c>
     b26:	79 f4       	brne	.+30     	; 0xb46 <__addsf3x+0x34>
     b28:	a6 f5       	brtc	.+104    	; 0xb92 <__addsf3x+0x80>
     b2a:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_zero>
     b2e:	0e f4       	brtc	.+2      	; 0xb32 <__addsf3x+0x20>
     b30:	e0 95       	com	r30
     b32:	0b 2e       	mov	r0, r27
     b34:	ba 2f       	mov	r27, r26
     b36:	a0 2d       	mov	r26, r0
     b38:	0b 01       	movw	r0, r22
     b3a:	b9 01       	movw	r22, r18
     b3c:	90 01       	movw	r18, r0
     b3e:	0c 01       	movw	r0, r24
     b40:	ca 01       	movw	r24, r20
     b42:	a0 01       	movw	r20, r0
     b44:	11 24       	eor	r1, r1
     b46:	ff 27       	eor	r31, r31
     b48:	59 1b       	sub	r21, r25
     b4a:	99 f0       	breq	.+38     	; 0xb72 <__addsf3x+0x60>
     b4c:	59 3f       	cpi	r21, 0xF9	; 249
     b4e:	50 f4       	brcc	.+20     	; 0xb64 <__addsf3x+0x52>
     b50:	50 3e       	cpi	r21, 0xE0	; 224
     b52:	68 f1       	brcs	.+90     	; 0xbae <__addsf3x+0x9c>
     b54:	1a 16       	cp	r1, r26
     b56:	f0 40       	sbci	r31, 0x00	; 0
     b58:	a2 2f       	mov	r26, r18
     b5a:	23 2f       	mov	r18, r19
     b5c:	34 2f       	mov	r19, r20
     b5e:	44 27       	eor	r20, r20
     b60:	58 5f       	subi	r21, 0xF8	; 248
     b62:	f3 cf       	rjmp	.-26     	; 0xb4a <__addsf3x+0x38>
     b64:	46 95       	lsr	r20
     b66:	37 95       	ror	r19
     b68:	27 95       	ror	r18
     b6a:	a7 95       	ror	r26
     b6c:	f0 40       	sbci	r31, 0x00	; 0
     b6e:	53 95       	inc	r21
     b70:	c9 f7       	brne	.-14     	; 0xb64 <__addsf3x+0x52>
     b72:	7e f4       	brtc	.+30     	; 0xb92 <__addsf3x+0x80>
     b74:	1f 16       	cp	r1, r31
     b76:	ba 0b       	sbc	r27, r26
     b78:	62 0b       	sbc	r22, r18
     b7a:	73 0b       	sbc	r23, r19
     b7c:	84 0b       	sbc	r24, r20
     b7e:	ba f0       	brmi	.+46     	; 0xbae <__addsf3x+0x9c>
     b80:	91 50       	subi	r25, 0x01	; 1
     b82:	a1 f0       	breq	.+40     	; 0xbac <__addsf3x+0x9a>
     b84:	ff 0f       	add	r31, r31
     b86:	bb 1f       	adc	r27, r27
     b88:	66 1f       	adc	r22, r22
     b8a:	77 1f       	adc	r23, r23
     b8c:	88 1f       	adc	r24, r24
     b8e:	c2 f7       	brpl	.-16     	; 0xb80 <__addsf3x+0x6e>
     b90:	0e c0       	rjmp	.+28     	; 0xbae <__addsf3x+0x9c>
     b92:	ba 0f       	add	r27, r26
     b94:	62 1f       	adc	r22, r18
     b96:	73 1f       	adc	r23, r19
     b98:	84 1f       	adc	r24, r20
     b9a:	48 f4       	brcc	.+18     	; 0xbae <__addsf3x+0x9c>
     b9c:	87 95       	ror	r24
     b9e:	77 95       	ror	r23
     ba0:	67 95       	ror	r22
     ba2:	b7 95       	ror	r27
     ba4:	f7 95       	ror	r31
     ba6:	9e 3f       	cpi	r25, 0xFE	; 254
     ba8:	08 f0       	brcs	.+2      	; 0xbac <__addsf3x+0x9a>
     baa:	b0 cf       	rjmp	.-160    	; 0xb0c <__addsf3+0x28>
     bac:	93 95       	inc	r25
     bae:	88 0f       	add	r24, r24
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <__addsf3x+0xa2>
     bb2:	99 27       	eor	r25, r25
     bb4:	ee 0f       	add	r30, r30
     bb6:	97 95       	ror	r25
     bb8:	87 95       	ror	r24
     bba:	08 95       	ret

00000bbc <__divsf3>:
     bbc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__divsf3x>
     bc0:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_round>
     bc4:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscB>
     bc8:	58 f0       	brcs	.+22     	; 0xbe0 <__divsf3+0x24>
     bca:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscA>
     bce:	40 f0       	brcs	.+16     	; 0xbe0 <__divsf3+0x24>
     bd0:	29 f4       	brne	.+10     	; 0xbdc <__divsf3+0x20>
     bd2:	5f 3f       	cpi	r21, 0xFF	; 255
     bd4:	29 f0       	breq	.+10     	; 0xbe0 <__divsf3+0x24>
     bd6:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_inf>
     bda:	51 11       	cpse	r21, r1
     bdc:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
     be0:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_nan>

00000be4 <__divsf3x>:
     be4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_split3>
     be8:	68 f3       	brcs	.-38     	; 0xbc4 <__divsf3+0x8>

00000bea <__divsf3_pse>:
     bea:	99 23       	and	r25, r25
     bec:	b1 f3       	breq	.-20     	; 0xbda <__divsf3+0x1e>
     bee:	55 23       	and	r21, r21
     bf0:	91 f3       	breq	.-28     	; 0xbd6 <__divsf3+0x1a>
     bf2:	95 1b       	sub	r25, r21
     bf4:	55 0b       	sbc	r21, r21
     bf6:	bb 27       	eor	r27, r27
     bf8:	aa 27       	eor	r26, r26
     bfa:	62 17       	cp	r22, r18
     bfc:	73 07       	cpc	r23, r19
     bfe:	84 07       	cpc	r24, r20
     c00:	38 f0       	brcs	.+14     	; 0xc10 <__divsf3_pse+0x26>
     c02:	9f 5f       	subi	r25, 0xFF	; 255
     c04:	5f 4f       	sbci	r21, 0xFF	; 255
     c06:	22 0f       	add	r18, r18
     c08:	33 1f       	adc	r19, r19
     c0a:	44 1f       	adc	r20, r20
     c0c:	aa 1f       	adc	r26, r26
     c0e:	a9 f3       	breq	.-22     	; 0xbfa <__divsf3_pse+0x10>
     c10:	35 d0       	rcall	.+106    	; 0xc7c <__divsf3_pse+0x92>
     c12:	0e 2e       	mov	r0, r30
     c14:	3a f0       	brmi	.+14     	; 0xc24 <__divsf3_pse+0x3a>
     c16:	e0 e8       	ldi	r30, 0x80	; 128
     c18:	32 d0       	rcall	.+100    	; 0xc7e <__divsf3_pse+0x94>
     c1a:	91 50       	subi	r25, 0x01	; 1
     c1c:	50 40       	sbci	r21, 0x00	; 0
     c1e:	e6 95       	lsr	r30
     c20:	00 1c       	adc	r0, r0
     c22:	ca f7       	brpl	.-14     	; 0xc16 <__divsf3_pse+0x2c>
     c24:	2b d0       	rcall	.+86     	; 0xc7c <__divsf3_pse+0x92>
     c26:	fe 2f       	mov	r31, r30
     c28:	29 d0       	rcall	.+82     	; 0xc7c <__divsf3_pse+0x92>
     c2a:	66 0f       	add	r22, r22
     c2c:	77 1f       	adc	r23, r23
     c2e:	88 1f       	adc	r24, r24
     c30:	bb 1f       	adc	r27, r27
     c32:	26 17       	cp	r18, r22
     c34:	37 07       	cpc	r19, r23
     c36:	48 07       	cpc	r20, r24
     c38:	ab 07       	cpc	r26, r27
     c3a:	b0 e8       	ldi	r27, 0x80	; 128
     c3c:	09 f0       	breq	.+2      	; 0xc40 <__divsf3_pse+0x56>
     c3e:	bb 0b       	sbc	r27, r27
     c40:	80 2d       	mov	r24, r0
     c42:	bf 01       	movw	r22, r30
     c44:	ff 27       	eor	r31, r31
     c46:	93 58       	subi	r25, 0x83	; 131
     c48:	5f 4f       	sbci	r21, 0xFF	; 255
     c4a:	3a f0       	brmi	.+14     	; 0xc5a <__divsf3_pse+0x70>
     c4c:	9e 3f       	cpi	r25, 0xFE	; 254
     c4e:	51 05       	cpc	r21, r1
     c50:	78 f0       	brcs	.+30     	; 0xc70 <__divsf3_pse+0x86>
     c52:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_inf>
     c56:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
     c5a:	5f 3f       	cpi	r21, 0xFF	; 255
     c5c:	e4 f3       	brlt	.-8      	; 0xc56 <__divsf3_pse+0x6c>
     c5e:	98 3e       	cpi	r25, 0xE8	; 232
     c60:	d4 f3       	brlt	.-12     	; 0xc56 <__divsf3_pse+0x6c>
     c62:	86 95       	lsr	r24
     c64:	77 95       	ror	r23
     c66:	67 95       	ror	r22
     c68:	b7 95       	ror	r27
     c6a:	f7 95       	ror	r31
     c6c:	9f 5f       	subi	r25, 0xFF	; 255
     c6e:	c9 f7       	brne	.-14     	; 0xc62 <__divsf3_pse+0x78>
     c70:	88 0f       	add	r24, r24
     c72:	91 1d       	adc	r25, r1
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	97 f9       	bld	r25, 7
     c7a:	08 95       	ret
     c7c:	e1 e0       	ldi	r30, 0x01	; 1
     c7e:	66 0f       	add	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	88 1f       	adc	r24, r24
     c84:	bb 1f       	adc	r27, r27
     c86:	62 17       	cp	r22, r18
     c88:	73 07       	cpc	r23, r19
     c8a:	84 07       	cpc	r24, r20
     c8c:	ba 07       	cpc	r27, r26
     c8e:	20 f0       	brcs	.+8      	; 0xc98 <__divsf3_pse+0xae>
     c90:	62 1b       	sub	r22, r18
     c92:	73 0b       	sbc	r23, r19
     c94:	84 0b       	sbc	r24, r20
     c96:	ba 0b       	sbc	r27, r26
     c98:	ee 1f       	adc	r30, r30
     c9a:	88 f7       	brcc	.-30     	; 0xc7e <__divsf3_pse+0x94>
     c9c:	e0 95       	com	r30
     c9e:	08 95       	ret

00000ca0 <__fixsfsi>:
     ca0:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     ca4:	68 94       	set
     ca6:	b1 11       	cpse	r27, r1
     ca8:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
     cac:	08 95       	ret

00000cae <__fixunssfsi>:
     cae:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_splitA>
     cb2:	88 f0       	brcs	.+34     	; 0xcd6 <__fixunssfsi+0x28>
     cb4:	9f 57       	subi	r25, 0x7F	; 127
     cb6:	98 f0       	brcs	.+38     	; 0xcde <__fixunssfsi+0x30>
     cb8:	b9 2f       	mov	r27, r25
     cba:	99 27       	eor	r25, r25
     cbc:	b7 51       	subi	r27, 0x17	; 23
     cbe:	b0 f0       	brcs	.+44     	; 0xcec <__fixunssfsi+0x3e>
     cc0:	e1 f0       	breq	.+56     	; 0xcfa <__fixunssfsi+0x4c>
     cc2:	66 0f       	add	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	88 1f       	adc	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	1a f0       	brmi	.+6      	; 0xcd2 <__fixunssfsi+0x24>
     ccc:	ba 95       	dec	r27
     cce:	c9 f7       	brne	.-14     	; 0xcc2 <__fixunssfsi+0x14>
     cd0:	14 c0       	rjmp	.+40     	; 0xcfa <__fixunssfsi+0x4c>
     cd2:	b1 30       	cpi	r27, 0x01	; 1
     cd4:	91 f0       	breq	.+36     	; 0xcfa <__fixunssfsi+0x4c>
     cd6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_zero>
     cda:	b1 e0       	ldi	r27, 0x01	; 1
     cdc:	08 95       	ret
     cde:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_zero>
     ce2:	67 2f       	mov	r22, r23
     ce4:	78 2f       	mov	r23, r24
     ce6:	88 27       	eor	r24, r24
     ce8:	b8 5f       	subi	r27, 0xF8	; 248
     cea:	39 f0       	breq	.+14     	; 0xcfa <__fixunssfsi+0x4c>
     cec:	b9 3f       	cpi	r27, 0xF9	; 249
     cee:	cc f3       	brlt	.-14     	; 0xce2 <__fixunssfsi+0x34>
     cf0:	86 95       	lsr	r24
     cf2:	77 95       	ror	r23
     cf4:	67 95       	ror	r22
     cf6:	b3 95       	inc	r27
     cf8:	d9 f7       	brne	.-10     	; 0xcf0 <__fixunssfsi+0x42>
     cfa:	3e f4       	brtc	.+14     	; 0xd0a <__fixunssfsi+0x5c>
     cfc:	90 95       	com	r25
     cfe:	80 95       	com	r24
     d00:	70 95       	com	r23
     d02:	61 95       	neg	r22
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	8f 4f       	sbci	r24, 0xFF	; 255
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	08 95       	ret

00000d0c <__floatunsisf>:
     d0c:	e8 94       	clt
     d0e:	09 c0       	rjmp	.+18     	; 0xd22 <__floatsisf+0x12>

00000d10 <__floatsisf>:
     d10:	97 fb       	bst	r25, 7
     d12:	3e f4       	brtc	.+14     	; 0xd22 <__floatsisf+0x12>
     d14:	90 95       	com	r25
     d16:	80 95       	com	r24
     d18:	70 95       	com	r23
     d1a:	61 95       	neg	r22
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	8f 4f       	sbci	r24, 0xFF	; 255
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	99 23       	and	r25, r25
     d24:	a9 f0       	breq	.+42     	; 0xd50 <__floatsisf+0x40>
     d26:	f9 2f       	mov	r31, r25
     d28:	96 e9       	ldi	r25, 0x96	; 150
     d2a:	bb 27       	eor	r27, r27
     d2c:	93 95       	inc	r25
     d2e:	f6 95       	lsr	r31
     d30:	87 95       	ror	r24
     d32:	77 95       	ror	r23
     d34:	67 95       	ror	r22
     d36:	b7 95       	ror	r27
     d38:	f1 11       	cpse	r31, r1
     d3a:	f8 cf       	rjmp	.-16     	; 0xd2c <__floatsisf+0x1c>
     d3c:	fa f4       	brpl	.+62     	; 0xd7c <__floatsisf+0x6c>
     d3e:	bb 0f       	add	r27, r27
     d40:	11 f4       	brne	.+4      	; 0xd46 <__floatsisf+0x36>
     d42:	60 ff       	sbrs	r22, 0
     d44:	1b c0       	rjmp	.+54     	; 0xd7c <__floatsisf+0x6c>
     d46:	6f 5f       	subi	r22, 0xFF	; 255
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	8f 4f       	sbci	r24, 0xFF	; 255
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	16 c0       	rjmp	.+44     	; 0xd7c <__floatsisf+0x6c>
     d50:	88 23       	and	r24, r24
     d52:	11 f0       	breq	.+4      	; 0xd58 <__floatsisf+0x48>
     d54:	96 e9       	ldi	r25, 0x96	; 150
     d56:	11 c0       	rjmp	.+34     	; 0xd7a <__floatsisf+0x6a>
     d58:	77 23       	and	r23, r23
     d5a:	21 f0       	breq	.+8      	; 0xd64 <__floatsisf+0x54>
     d5c:	9e e8       	ldi	r25, 0x8E	; 142
     d5e:	87 2f       	mov	r24, r23
     d60:	76 2f       	mov	r23, r22
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <__floatsisf+0x5e>
     d64:	66 23       	and	r22, r22
     d66:	71 f0       	breq	.+28     	; 0xd84 <__floatsisf+0x74>
     d68:	96 e8       	ldi	r25, 0x86	; 134
     d6a:	86 2f       	mov	r24, r22
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	2a f0       	brmi	.+10     	; 0xd7c <__floatsisf+0x6c>
     d72:	9a 95       	dec	r25
     d74:	66 0f       	add	r22, r22
     d76:	77 1f       	adc	r23, r23
     d78:	88 1f       	adc	r24, r24
     d7a:	da f7       	brpl	.-10     	; 0xd72 <__floatsisf+0x62>
     d7c:	88 0f       	add	r24, r24
     d7e:	96 95       	lsr	r25
     d80:	87 95       	ror	r24
     d82:	97 f9       	bld	r25, 7
     d84:	08 95       	ret

00000d86 <__fp_inf>:
     d86:	97 f9       	bld	r25, 7
     d88:	9f 67       	ori	r25, 0x7F	; 127
     d8a:	80 e8       	ldi	r24, 0x80	; 128
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	08 95       	ret

00000d92 <__fp_nan>:
     d92:	9f ef       	ldi	r25, 0xFF	; 255
     d94:	80 ec       	ldi	r24, 0xC0	; 192
     d96:	08 95       	ret

00000d98 <__fp_pscA>:
     d98:	00 24       	eor	r0, r0
     d9a:	0a 94       	dec	r0
     d9c:	16 16       	cp	r1, r22
     d9e:	17 06       	cpc	r1, r23
     da0:	18 06       	cpc	r1, r24
     da2:	09 06       	cpc	r0, r25
     da4:	08 95       	ret

00000da6 <__fp_pscB>:
     da6:	00 24       	eor	r0, r0
     da8:	0a 94       	dec	r0
     daa:	12 16       	cp	r1, r18
     dac:	13 06       	cpc	r1, r19
     dae:	14 06       	cpc	r1, r20
     db0:	05 06       	cpc	r0, r21
     db2:	08 95       	ret

00000db4 <__fp_round>:
     db4:	09 2e       	mov	r0, r25
     db6:	03 94       	inc	r0
     db8:	00 0c       	add	r0, r0
     dba:	11 f4       	brne	.+4      	; 0xdc0 <__fp_round+0xc>
     dbc:	88 23       	and	r24, r24
     dbe:	52 f0       	brmi	.+20     	; 0xdd4 <__fp_round+0x20>
     dc0:	bb 0f       	add	r27, r27
     dc2:	40 f4       	brcc	.+16     	; 0xdd4 <__fp_round+0x20>
     dc4:	bf 2b       	or	r27, r31
     dc6:	11 f4       	brne	.+4      	; 0xdcc <__fp_round+0x18>
     dc8:	60 ff       	sbrs	r22, 0
     dca:	04 c0       	rjmp	.+8      	; 0xdd4 <__fp_round+0x20>
     dcc:	6f 5f       	subi	r22, 0xFF	; 255
     dce:	7f 4f       	sbci	r23, 0xFF	; 255
     dd0:	8f 4f       	sbci	r24, 0xFF	; 255
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	08 95       	ret

00000dd6 <__fp_split3>:
     dd6:	57 fd       	sbrc	r21, 7
     dd8:	90 58       	subi	r25, 0x80	; 128
     dda:	44 0f       	add	r20, r20
     ddc:	55 1f       	adc	r21, r21
     dde:	59 f0       	breq	.+22     	; 0xdf6 <__fp_splitA+0x10>
     de0:	5f 3f       	cpi	r21, 0xFF	; 255
     de2:	71 f0       	breq	.+28     	; 0xe00 <__fp_splitA+0x1a>
     de4:	47 95       	ror	r20

00000de6 <__fp_splitA>:
     de6:	88 0f       	add	r24, r24
     de8:	97 fb       	bst	r25, 7
     dea:	99 1f       	adc	r25, r25
     dec:	61 f0       	breq	.+24     	; 0xe06 <__fp_splitA+0x20>
     dee:	9f 3f       	cpi	r25, 0xFF	; 255
     df0:	79 f0       	breq	.+30     	; 0xe10 <__fp_splitA+0x2a>
     df2:	87 95       	ror	r24
     df4:	08 95       	ret
     df6:	12 16       	cp	r1, r18
     df8:	13 06       	cpc	r1, r19
     dfa:	14 06       	cpc	r1, r20
     dfc:	55 1f       	adc	r21, r21
     dfe:	f2 cf       	rjmp	.-28     	; 0xde4 <__fp_split3+0xe>
     e00:	46 95       	lsr	r20
     e02:	f1 df       	rcall	.-30     	; 0xde6 <__fp_splitA>
     e04:	08 c0       	rjmp	.+16     	; 0xe16 <__fp_splitA+0x30>
     e06:	16 16       	cp	r1, r22
     e08:	17 06       	cpc	r1, r23
     e0a:	18 06       	cpc	r1, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	f1 cf       	rjmp	.-30     	; 0xdf2 <__fp_splitA+0xc>
     e10:	86 95       	lsr	r24
     e12:	71 05       	cpc	r23, r1
     e14:	61 05       	cpc	r22, r1
     e16:	08 94       	sec
     e18:	08 95       	ret

00000e1a <__fp_zero>:
     e1a:	e8 94       	clt

00000e1c <__fp_szero>:
     e1c:	bb 27       	eor	r27, r27
     e1e:	66 27       	eor	r22, r22
     e20:	77 27       	eor	r23, r23
     e22:	cb 01       	movw	r24, r22
     e24:	97 f9       	bld	r25, 7
     e26:	08 95       	ret

00000e28 <__mulsf3>:
     e28:	0e 94 27 07 	call	0xe4e	; 0xe4e <__mulsf3x>
     e2c:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_round>
     e30:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscA>
     e34:	38 f0       	brcs	.+14     	; 0xe44 <__mulsf3+0x1c>
     e36:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscB>
     e3a:	20 f0       	brcs	.+8      	; 0xe44 <__mulsf3+0x1c>
     e3c:	95 23       	and	r25, r21
     e3e:	11 f0       	breq	.+4      	; 0xe44 <__mulsf3+0x1c>
     e40:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_inf>
     e44:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_nan>
     e48:	11 24       	eor	r1, r1
     e4a:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>

00000e4e <__mulsf3x>:
     e4e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_split3>
     e52:	70 f3       	brcs	.-36     	; 0xe30 <__mulsf3+0x8>

00000e54 <__mulsf3_pse>:
     e54:	95 9f       	mul	r25, r21
     e56:	c1 f3       	breq	.-16     	; 0xe48 <__mulsf3+0x20>
     e58:	95 0f       	add	r25, r21
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	55 1f       	adc	r21, r21
     e5e:	62 9f       	mul	r22, r18
     e60:	f0 01       	movw	r30, r0
     e62:	72 9f       	mul	r23, r18
     e64:	bb 27       	eor	r27, r27
     e66:	f0 0d       	add	r31, r0
     e68:	b1 1d       	adc	r27, r1
     e6a:	63 9f       	mul	r22, r19
     e6c:	aa 27       	eor	r26, r26
     e6e:	f0 0d       	add	r31, r0
     e70:	b1 1d       	adc	r27, r1
     e72:	aa 1f       	adc	r26, r26
     e74:	64 9f       	mul	r22, r20
     e76:	66 27       	eor	r22, r22
     e78:	b0 0d       	add	r27, r0
     e7a:	a1 1d       	adc	r26, r1
     e7c:	66 1f       	adc	r22, r22
     e7e:	82 9f       	mul	r24, r18
     e80:	22 27       	eor	r18, r18
     e82:	b0 0d       	add	r27, r0
     e84:	a1 1d       	adc	r26, r1
     e86:	62 1f       	adc	r22, r18
     e88:	73 9f       	mul	r23, r19
     e8a:	b0 0d       	add	r27, r0
     e8c:	a1 1d       	adc	r26, r1
     e8e:	62 1f       	adc	r22, r18
     e90:	83 9f       	mul	r24, r19
     e92:	a0 0d       	add	r26, r0
     e94:	61 1d       	adc	r22, r1
     e96:	22 1f       	adc	r18, r18
     e98:	74 9f       	mul	r23, r20
     e9a:	33 27       	eor	r19, r19
     e9c:	a0 0d       	add	r26, r0
     e9e:	61 1d       	adc	r22, r1
     ea0:	23 1f       	adc	r18, r19
     ea2:	84 9f       	mul	r24, r20
     ea4:	60 0d       	add	r22, r0
     ea6:	21 1d       	adc	r18, r1
     ea8:	82 2f       	mov	r24, r18
     eaa:	76 2f       	mov	r23, r22
     eac:	6a 2f       	mov	r22, r26
     eae:	11 24       	eor	r1, r1
     eb0:	9f 57       	subi	r25, 0x7F	; 127
     eb2:	50 40       	sbci	r21, 0x00	; 0
     eb4:	9a f0       	brmi	.+38     	; 0xedc <__mulsf3_pse+0x88>
     eb6:	f1 f0       	breq	.+60     	; 0xef4 <__mulsf3_pse+0xa0>
     eb8:	88 23       	and	r24, r24
     eba:	4a f0       	brmi	.+18     	; 0xece <__mulsf3_pse+0x7a>
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	bb 1f       	adc	r27, r27
     ec2:	66 1f       	adc	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	91 50       	subi	r25, 0x01	; 1
     eca:	50 40       	sbci	r21, 0x00	; 0
     ecc:	a9 f7       	brne	.-22     	; 0xeb8 <__mulsf3_pse+0x64>
     ece:	9e 3f       	cpi	r25, 0xFE	; 254
     ed0:	51 05       	cpc	r21, r1
     ed2:	80 f0       	brcs	.+32     	; 0xef4 <__mulsf3_pse+0xa0>
     ed4:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_inf>
     ed8:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
     edc:	5f 3f       	cpi	r21, 0xFF	; 255
     ede:	e4 f3       	brlt	.-8      	; 0xed8 <__mulsf3_pse+0x84>
     ee0:	98 3e       	cpi	r25, 0xE8	; 232
     ee2:	d4 f3       	brlt	.-12     	; 0xed8 <__mulsf3_pse+0x84>
     ee4:	86 95       	lsr	r24
     ee6:	77 95       	ror	r23
     ee8:	67 95       	ror	r22
     eea:	b7 95       	ror	r27
     eec:	f7 95       	ror	r31
     eee:	e7 95       	ror	r30
     ef0:	9f 5f       	subi	r25, 0xFF	; 255
     ef2:	c1 f7       	brne	.-16     	; 0xee4 <__mulsf3_pse+0x90>
     ef4:	fe 2b       	or	r31, r30
     ef6:	88 0f       	add	r24, r24
     ef8:	91 1d       	adc	r25, r1
     efa:	96 95       	lsr	r25
     efc:	87 95       	ror	r24
     efe:	97 f9       	bld	r25, 7
     f00:	08 95       	ret

00000f02 <trunc>:
     f02:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_trunc>
     f06:	30 f0       	brcs	.+12     	; 0xf14 <trunc+0x12>
     f08:	9f 37       	cpi	r25, 0x7F	; 127
     f0a:	10 f4       	brcc	.+4      	; 0xf10 <trunc+0xe>
     f0c:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
     f10:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_mintl>
     f14:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_mpack>

00000f18 <__fp_mintl>:
     f18:	88 23       	and	r24, r24
     f1a:	71 f4       	brne	.+28     	; 0xf38 <__fp_mintl+0x20>
     f1c:	77 23       	and	r23, r23
     f1e:	21 f0       	breq	.+8      	; 0xf28 <__fp_mintl+0x10>
     f20:	98 50       	subi	r25, 0x08	; 8
     f22:	87 2b       	or	r24, r23
     f24:	76 2f       	mov	r23, r22
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <__fp_mintl+0x1e>
     f28:	66 23       	and	r22, r22
     f2a:	11 f4       	brne	.+4      	; 0xf30 <__fp_mintl+0x18>
     f2c:	99 27       	eor	r25, r25
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <__fp_mintl+0x32>
     f30:	90 51       	subi	r25, 0x10	; 16
     f32:	86 2b       	or	r24, r22
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	2a f0       	brmi	.+10     	; 0xf44 <__fp_mintl+0x2c>
     f3a:	9a 95       	dec	r25
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	da f7       	brpl	.-10     	; 0xf3a <__fp_mintl+0x22>
     f44:	88 0f       	add	r24, r24
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	97 f9       	bld	r25, 7
     f4c:	08 95       	ret

00000f4e <__fp_mpack>:
     f4e:	9f 3f       	cpi	r25, 0xFF	; 255
     f50:	31 f0       	breq	.+12     	; 0xf5e <__fp_mpack_finite+0xc>

00000f52 <__fp_mpack_finite>:
     f52:	91 50       	subi	r25, 0x01	; 1
     f54:	20 f4       	brcc	.+8      	; 0xf5e <__fp_mpack_finite+0xc>
     f56:	87 95       	ror	r24
     f58:	77 95       	ror	r23
     f5a:	67 95       	ror	r22
     f5c:	b7 95       	ror	r27
     f5e:	88 0f       	add	r24, r24
     f60:	91 1d       	adc	r25, r1
     f62:	96 95       	lsr	r25
     f64:	87 95       	ror	r24
     f66:	97 f9       	bld	r25, 7
     f68:	08 95       	ret

00000f6a <__fp_trunc>:
     f6a:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_splitA>
     f6e:	a0 f0       	brcs	.+40     	; 0xf98 <__fp_trunc+0x2e>
     f70:	be e7       	ldi	r27, 0x7E	; 126
     f72:	b9 17       	cp	r27, r25
     f74:	88 f4       	brcc	.+34     	; 0xf98 <__fp_trunc+0x2e>
     f76:	bb 27       	eor	r27, r27
     f78:	9f 38       	cpi	r25, 0x8F	; 143
     f7a:	60 f4       	brcc	.+24     	; 0xf94 <__fp_trunc+0x2a>
     f7c:	16 16       	cp	r1, r22
     f7e:	b1 1d       	adc	r27, r1
     f80:	67 2f       	mov	r22, r23
     f82:	78 2f       	mov	r23, r24
     f84:	88 27       	eor	r24, r24
     f86:	98 5f       	subi	r25, 0xF8	; 248
     f88:	f7 cf       	rjmp	.-18     	; 0xf78 <__fp_trunc+0xe>
     f8a:	86 95       	lsr	r24
     f8c:	77 95       	ror	r23
     f8e:	67 95       	ror	r22
     f90:	b1 1d       	adc	r27, r1
     f92:	93 95       	inc	r25
     f94:	96 39       	cpi	r25, 0x96	; 150
     f96:	c8 f3       	brcs	.-14     	; 0xf8a <__fp_trunc+0x20>
     f98:	08 95       	ret

00000f9a <__udivmodhi4>:
     f9a:	aa 1b       	sub	r26, r26
     f9c:	bb 1b       	sub	r27, r27
     f9e:	51 e1       	ldi	r21, 0x11	; 17
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <__udivmodhi4_ep>

00000fa2 <__udivmodhi4_loop>:
     fa2:	aa 1f       	adc	r26, r26
     fa4:	bb 1f       	adc	r27, r27
     fa6:	a6 17       	cp	r26, r22
     fa8:	b7 07       	cpc	r27, r23
     faa:	10 f0       	brcs	.+4      	; 0xfb0 <__udivmodhi4_ep>
     fac:	a6 1b       	sub	r26, r22
     fae:	b7 0b       	sbc	r27, r23

00000fb0 <__udivmodhi4_ep>:
     fb0:	88 1f       	adc	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	5a 95       	dec	r21
     fb6:	a9 f7       	brne	.-22     	; 0xfa2 <__udivmodhi4_loop>
     fb8:	80 95       	com	r24
     fba:	90 95       	com	r25
     fbc:	bc 01       	movw	r22, r24
     fbe:	cd 01       	movw	r24, r26
     fc0:	08 95       	ret

00000fc2 <__udivmodsi4>:
     fc2:	a1 e2       	ldi	r26, 0x21	; 33
     fc4:	1a 2e       	mov	r1, r26
     fc6:	aa 1b       	sub	r26, r26
     fc8:	bb 1b       	sub	r27, r27
     fca:	fd 01       	movw	r30, r26
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <__udivmodsi4_ep>

00000fce <__udivmodsi4_loop>:
     fce:	aa 1f       	adc	r26, r26
     fd0:	bb 1f       	adc	r27, r27
     fd2:	ee 1f       	adc	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	a2 17       	cp	r26, r18
     fd8:	b3 07       	cpc	r27, r19
     fda:	e4 07       	cpc	r30, r20
     fdc:	f5 07       	cpc	r31, r21
     fde:	20 f0       	brcs	.+8      	; 0xfe8 <__udivmodsi4_ep>
     fe0:	a2 1b       	sub	r26, r18
     fe2:	b3 0b       	sbc	r27, r19
     fe4:	e4 0b       	sbc	r30, r20
     fe6:	f5 0b       	sbc	r31, r21

00000fe8 <__udivmodsi4_ep>:
     fe8:	66 1f       	adc	r22, r22
     fea:	77 1f       	adc	r23, r23
     fec:	88 1f       	adc	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	1a 94       	dec	r1
     ff2:	69 f7       	brne	.-38     	; 0xfce <__udivmodsi4_loop>
     ff4:	60 95       	com	r22
     ff6:	70 95       	com	r23
     ff8:	80 95       	com	r24
     ffa:	90 95       	com	r25
     ffc:	9b 01       	movw	r18, r22
     ffe:	ac 01       	movw	r20, r24
    1000:	bd 01       	movw	r22, r26
    1002:	cf 01       	movw	r24, r30
    1004:	08 95       	ret

00001006 <__umoddi3>:
    1006:	68 94       	set
    1008:	01 c0       	rjmp	.+2      	; 0x100c <__udivdi3_umoddi3>

0000100a <__udivdi3>:
    100a:	e8 94       	clt

0000100c <__udivdi3_umoddi3>:
    100c:	8f 92       	push	r8
    100e:	9f 92       	push	r9
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	0e 94 11 08 	call	0x1022	; 0x1022 <__udivmod64>
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	9f 90       	pop	r9
    101e:	8f 90       	pop	r8
    1020:	08 95       	ret

00001022 <__udivmod64>:
    1022:	88 24       	eor	r8, r8
    1024:	99 24       	eor	r9, r9
    1026:	f4 01       	movw	r30, r8
    1028:	e4 01       	movw	r28, r8
    102a:	b0 e4       	ldi	r27, 0x40	; 64
    102c:	9f 93       	push	r25
    102e:	aa 27       	eor	r26, r26
    1030:	9a 15       	cp	r25, r10
    1032:	8b 04       	cpc	r8, r11
    1034:	9c 04       	cpc	r9, r12
    1036:	ed 05       	cpc	r30, r13
    1038:	fe 05       	cpc	r31, r14
    103a:	cf 05       	cpc	r28, r15
    103c:	d0 07       	cpc	r29, r16
    103e:	a1 07       	cpc	r26, r17
    1040:	98 f4       	brcc	.+38     	; 0x1068 <__udivmod64+0x46>
    1042:	ad 2f       	mov	r26, r29
    1044:	dc 2f       	mov	r29, r28
    1046:	cf 2f       	mov	r28, r31
    1048:	fe 2f       	mov	r31, r30
    104a:	e9 2d       	mov	r30, r9
    104c:	98 2c       	mov	r9, r8
    104e:	89 2e       	mov	r8, r25
    1050:	98 2f       	mov	r25, r24
    1052:	87 2f       	mov	r24, r23
    1054:	76 2f       	mov	r23, r22
    1056:	65 2f       	mov	r22, r21
    1058:	54 2f       	mov	r21, r20
    105a:	43 2f       	mov	r20, r19
    105c:	32 2f       	mov	r19, r18
    105e:	22 27       	eor	r18, r18
    1060:	b8 50       	subi	r27, 0x08	; 8
    1062:	31 f7       	brne	.-52     	; 0x1030 <__udivmod64+0xe>
    1064:	bf 91       	pop	r27
    1066:	27 c0       	rjmp	.+78     	; 0x10b6 <__udivmod64+0x94>
    1068:	1b 2e       	mov	r1, r27
    106a:	bf 91       	pop	r27
    106c:	bb 27       	eor	r27, r27
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	44 1f       	adc	r20, r20
    1074:	55 1f       	adc	r21, r21
    1076:	66 1f       	adc	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	88 1c       	adc	r8, r8
    1080:	99 1c       	adc	r9, r9
    1082:	ee 1f       	adc	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	cc 1f       	adc	r28, r28
    1088:	dd 1f       	adc	r29, r29
    108a:	aa 1f       	adc	r26, r26
    108c:	bb 1f       	adc	r27, r27
    108e:	8a 14       	cp	r8, r10
    1090:	9b 04       	cpc	r9, r11
    1092:	ec 05       	cpc	r30, r12
    1094:	fd 05       	cpc	r31, r13
    1096:	ce 05       	cpc	r28, r14
    1098:	df 05       	cpc	r29, r15
    109a:	a0 07       	cpc	r26, r16
    109c:	b1 07       	cpc	r27, r17
    109e:	48 f0       	brcs	.+18     	; 0x10b2 <__udivmod64+0x90>
    10a0:	8a 18       	sub	r8, r10
    10a2:	9b 08       	sbc	r9, r11
    10a4:	ec 09       	sbc	r30, r12
    10a6:	fd 09       	sbc	r31, r13
    10a8:	ce 09       	sbc	r28, r14
    10aa:	df 09       	sbc	r29, r15
    10ac:	a0 0b       	sbc	r26, r16
    10ae:	b1 0b       	sbc	r27, r17
    10b0:	21 60       	ori	r18, 0x01	; 1
    10b2:	1a 94       	dec	r1
    10b4:	e1 f6       	brne	.-72     	; 0x106e <__udivmod64+0x4c>
    10b6:	2e f4       	brtc	.+10     	; 0x10c2 <__udivmod64+0xa0>
    10b8:	94 01       	movw	r18, r8
    10ba:	af 01       	movw	r20, r30
    10bc:	be 01       	movw	r22, r28
    10be:	cd 01       	movw	r24, r26
    10c0:	00 0c       	add	r0, r0
    10c2:	08 95       	ret

000010c4 <__adddi3>:
    10c4:	2a 0d       	add	r18, r10
    10c6:	3b 1d       	adc	r19, r11
    10c8:	4c 1d       	adc	r20, r12
    10ca:	5d 1d       	adc	r21, r13
    10cc:	6e 1d       	adc	r22, r14
    10ce:	7f 1d       	adc	r23, r15
    10d0:	80 1f       	adc	r24, r16
    10d2:	91 1f       	adc	r25, r17
    10d4:	08 95       	ret

000010d6 <__adddi3_s8>:
    10d6:	00 24       	eor	r0, r0
    10d8:	a7 fd       	sbrc	r26, 7
    10da:	00 94       	com	r0
    10dc:	2a 0f       	add	r18, r26
    10de:	30 1d       	adc	r19, r0
    10e0:	40 1d       	adc	r20, r0
    10e2:	50 1d       	adc	r21, r0
    10e4:	60 1d       	adc	r22, r0
    10e6:	70 1d       	adc	r23, r0
    10e8:	80 1d       	adc	r24, r0
    10ea:	90 1d       	adc	r25, r0
    10ec:	08 95       	ret

000010ee <__itoa_ncheck>:
    10ee:	bb 27       	eor	r27, r27
    10f0:	4a 30       	cpi	r20, 0x0A	; 10
    10f2:	31 f4       	brne	.+12     	; 0x1100 <__itoa_ncheck+0x12>
    10f4:	99 23       	and	r25, r25
    10f6:	22 f4       	brpl	.+8      	; 0x1100 <__itoa_ncheck+0x12>
    10f8:	bd e2       	ldi	r27, 0x2D	; 45
    10fa:	90 95       	com	r25
    10fc:	81 95       	neg	r24
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__utoa_common>

00001104 <__utoa_ncheck>:
    1104:	bb 27       	eor	r27, r27

00001106 <__utoa_common>:
    1106:	fb 01       	movw	r30, r22
    1108:	55 27       	eor	r21, r21
    110a:	aa 27       	eor	r26, r26
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	aa 1f       	adc	r26, r26
    1112:	a4 17       	cp	r26, r20
    1114:	10 f0       	brcs	.+4      	; 0x111a <__utoa_common+0x14>
    1116:	a4 1b       	sub	r26, r20
    1118:	83 95       	inc	r24
    111a:	50 51       	subi	r21, 0x10	; 16
    111c:	b9 f7       	brne	.-18     	; 0x110c <__utoa_common+0x6>
    111e:	a0 5d       	subi	r26, 0xD0	; 208
    1120:	aa 33       	cpi	r26, 0x3A	; 58
    1122:	08 f0       	brcs	.+2      	; 0x1126 <__utoa_common+0x20>
    1124:	a9 5d       	subi	r26, 0xD9	; 217
    1126:	a1 93       	st	Z+, r26
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	79 f7       	brne	.-34     	; 0x110a <__utoa_common+0x4>
    112c:	b1 11       	cpse	r27, r1
    112e:	b1 93       	st	Z+, r27
    1130:	11 92       	st	Z+, r1
    1132:	cb 01       	movw	r24, r22
    1134:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <strrev>

00001138 <sprintf>:
    1138:	ae e0       	ldi	r26, 0x0E	; 14
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e2 ea       	ldi	r30, 0xA2	; 162
    113e:	f8 e0       	ldi	r31, 0x08	; 8
    1140:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__prologue_saves__+0x1c>
    1144:	0d 89       	ldd	r16, Y+21	; 0x15
    1146:	1e 89       	ldd	r17, Y+22	; 0x16
    1148:	86 e0       	ldi	r24, 0x06	; 6
    114a:	8c 83       	std	Y+4, r24	; 0x04
    114c:	09 83       	std	Y+1, r16	; 0x01
    114e:	1a 83       	std	Y+2, r17	; 0x02
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	9f e7       	ldi	r25, 0x7F	; 127
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	ae 01       	movw	r20, r28
    115a:	47 5e       	subi	r20, 0xE7	; 231
    115c:	5f 4f       	sbci	r21, 0xFF	; 255
    115e:	6f 89       	ldd	r22, Y+23	; 0x17
    1160:	78 8d       	ldd	r23, Y+24	; 0x18
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 bf 08 	call	0x117e	; 0x117e <vfprintf>
    116a:	2f 81       	ldd	r18, Y+7	; 0x07
    116c:	38 85       	ldd	r19, Y+8	; 0x08
    116e:	f8 01       	movw	r30, r16
    1170:	e2 0f       	add	r30, r18
    1172:	f3 1f       	adc	r31, r19
    1174:	10 82       	st	Z, r1
    1176:	2e 96       	adiw	r28, 0x0e	; 14
    1178:	e4 e0       	ldi	r30, 0x04	; 4
    117a:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__epilogue_restores__+0x1c>

0000117e <vfprintf>:
    117e:	ac e0       	ldi	r26, 0x0C	; 12
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e5 ec       	ldi	r30, 0xC5	; 197
    1184:	f8 e0       	ldi	r31, 0x08	; 8
    1186:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__prologue_saves__>
    118a:	7c 01       	movw	r14, r24
    118c:	6b 01       	movw	r12, r22
    118e:	8a 01       	movw	r16, r20
    1190:	fc 01       	movw	r30, r24
    1192:	16 82       	std	Z+6, r1	; 0x06
    1194:	17 82       	std	Z+7, r1	; 0x07
    1196:	83 81       	ldd	r24, Z+3	; 0x03
    1198:	81 ff       	sbrs	r24, 1
    119a:	bd c1       	rjmp	.+890    	; 0x1516 <vfprintf+0x398>
    119c:	ce 01       	movw	r24, r28
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	4c 01       	movw	r8, r24
    11a2:	f7 01       	movw	r30, r14
    11a4:	93 81       	ldd	r25, Z+3	; 0x03
    11a6:	f6 01       	movw	r30, r12
    11a8:	93 fd       	sbrc	r25, 3
    11aa:	85 91       	lpm	r24, Z+
    11ac:	93 ff       	sbrs	r25, 3
    11ae:	81 91       	ld	r24, Z+
    11b0:	6f 01       	movw	r12, r30
    11b2:	88 23       	and	r24, r24
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <vfprintf+0x3a>
    11b6:	ab c1       	rjmp	.+854    	; 0x150e <vfprintf+0x390>
    11b8:	85 32       	cpi	r24, 0x25	; 37
    11ba:	39 f4       	brne	.+14     	; 0x11ca <vfprintf+0x4c>
    11bc:	93 fd       	sbrc	r25, 3
    11be:	85 91       	lpm	r24, Z+
    11c0:	93 ff       	sbrs	r25, 3
    11c2:	81 91       	ld	r24, Z+
    11c4:	6f 01       	movw	r12, r30
    11c6:	85 32       	cpi	r24, 0x25	; 37
    11c8:	29 f4       	brne	.+10     	; 0x11d4 <vfprintf+0x56>
    11ca:	b7 01       	movw	r22, r14
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    11d2:	e7 cf       	rjmp	.-50     	; 0x11a2 <vfprintf+0x24>
    11d4:	51 2c       	mov	r5, r1
    11d6:	31 2c       	mov	r3, r1
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	20 32       	cpi	r18, 0x20	; 32
    11dc:	a0 f4       	brcc	.+40     	; 0x1206 <vfprintf+0x88>
    11de:	8b 32       	cpi	r24, 0x2B	; 43
    11e0:	69 f0       	breq	.+26     	; 0x11fc <vfprintf+0x7e>
    11e2:	30 f4       	brcc	.+12     	; 0x11f0 <vfprintf+0x72>
    11e4:	80 32       	cpi	r24, 0x20	; 32
    11e6:	59 f0       	breq	.+22     	; 0x11fe <vfprintf+0x80>
    11e8:	83 32       	cpi	r24, 0x23	; 35
    11ea:	69 f4       	brne	.+26     	; 0x1206 <vfprintf+0x88>
    11ec:	20 61       	ori	r18, 0x10	; 16
    11ee:	2c c0       	rjmp	.+88     	; 0x1248 <vfprintf+0xca>
    11f0:	8d 32       	cpi	r24, 0x2D	; 45
    11f2:	39 f0       	breq	.+14     	; 0x1202 <vfprintf+0x84>
    11f4:	80 33       	cpi	r24, 0x30	; 48
    11f6:	39 f4       	brne	.+14     	; 0x1206 <vfprintf+0x88>
    11f8:	21 60       	ori	r18, 0x01	; 1
    11fa:	26 c0       	rjmp	.+76     	; 0x1248 <vfprintf+0xca>
    11fc:	22 60       	ori	r18, 0x02	; 2
    11fe:	24 60       	ori	r18, 0x04	; 4
    1200:	23 c0       	rjmp	.+70     	; 0x1248 <vfprintf+0xca>
    1202:	28 60       	ori	r18, 0x08	; 8
    1204:	21 c0       	rjmp	.+66     	; 0x1248 <vfprintf+0xca>
    1206:	27 fd       	sbrc	r18, 7
    1208:	27 c0       	rjmp	.+78     	; 0x1258 <vfprintf+0xda>
    120a:	30 ed       	ldi	r19, 0xD0	; 208
    120c:	38 0f       	add	r19, r24
    120e:	3a 30       	cpi	r19, 0x0A	; 10
    1210:	78 f4       	brcc	.+30     	; 0x1230 <vfprintf+0xb2>
    1212:	26 ff       	sbrs	r18, 6
    1214:	06 c0       	rjmp	.+12     	; 0x1222 <vfprintf+0xa4>
    1216:	fa e0       	ldi	r31, 0x0A	; 10
    1218:	5f 9e       	mul	r5, r31
    121a:	30 0d       	add	r19, r0
    121c:	11 24       	eor	r1, r1
    121e:	53 2e       	mov	r5, r19
    1220:	13 c0       	rjmp	.+38     	; 0x1248 <vfprintf+0xca>
    1222:	8a e0       	ldi	r24, 0x0A	; 10
    1224:	38 9e       	mul	r3, r24
    1226:	30 0d       	add	r19, r0
    1228:	11 24       	eor	r1, r1
    122a:	33 2e       	mov	r3, r19
    122c:	20 62       	ori	r18, 0x20	; 32
    122e:	0c c0       	rjmp	.+24     	; 0x1248 <vfprintf+0xca>
    1230:	8e 32       	cpi	r24, 0x2E	; 46
    1232:	21 f4       	brne	.+8      	; 0x123c <vfprintf+0xbe>
    1234:	26 fd       	sbrc	r18, 6
    1236:	6b c1       	rjmp	.+726    	; 0x150e <vfprintf+0x390>
    1238:	20 64       	ori	r18, 0x40	; 64
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <vfprintf+0xca>
    123c:	8c 36       	cpi	r24, 0x6C	; 108
    123e:	11 f4       	brne	.+4      	; 0x1244 <vfprintf+0xc6>
    1240:	20 68       	ori	r18, 0x80	; 128
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <vfprintf+0xca>
    1244:	88 36       	cpi	r24, 0x68	; 104
    1246:	41 f4       	brne	.+16     	; 0x1258 <vfprintf+0xda>
    1248:	f6 01       	movw	r30, r12
    124a:	93 fd       	sbrc	r25, 3
    124c:	85 91       	lpm	r24, Z+
    124e:	93 ff       	sbrs	r25, 3
    1250:	81 91       	ld	r24, Z+
    1252:	6f 01       	movw	r12, r30
    1254:	81 11       	cpse	r24, r1
    1256:	c1 cf       	rjmp	.-126    	; 0x11da <vfprintf+0x5c>
    1258:	98 2f       	mov	r25, r24
    125a:	9f 7d       	andi	r25, 0xDF	; 223
    125c:	95 54       	subi	r25, 0x45	; 69
    125e:	93 30       	cpi	r25, 0x03	; 3
    1260:	28 f4       	brcc	.+10     	; 0x126c <vfprintf+0xee>
    1262:	0c 5f       	subi	r16, 0xFC	; 252
    1264:	1f 4f       	sbci	r17, 0xFF	; 255
    1266:	ff e3       	ldi	r31, 0x3F	; 63
    1268:	f9 83       	std	Y+1, r31	; 0x01
    126a:	0d c0       	rjmp	.+26     	; 0x1286 <vfprintf+0x108>
    126c:	83 36       	cpi	r24, 0x63	; 99
    126e:	31 f0       	breq	.+12     	; 0x127c <vfprintf+0xfe>
    1270:	83 37       	cpi	r24, 0x73	; 115
    1272:	71 f0       	breq	.+28     	; 0x1290 <vfprintf+0x112>
    1274:	83 35       	cpi	r24, 0x53	; 83
    1276:	09 f0       	breq	.+2      	; 0x127a <vfprintf+0xfc>
    1278:	5b c0       	rjmp	.+182    	; 0x1330 <vfprintf+0x1b2>
    127a:	22 c0       	rjmp	.+68     	; 0x12c0 <vfprintf+0x142>
    127c:	f8 01       	movw	r30, r16
    127e:	80 81       	ld	r24, Z
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	0e 5f       	subi	r16, 0xFE	; 254
    1284:	1f 4f       	sbci	r17, 0xFF	; 255
    1286:	44 24       	eor	r4, r4
    1288:	43 94       	inc	r4
    128a:	51 2c       	mov	r5, r1
    128c:	54 01       	movw	r10, r8
    128e:	15 c0       	rjmp	.+42     	; 0x12ba <vfprintf+0x13c>
    1290:	38 01       	movw	r6, r16
    1292:	f2 e0       	ldi	r31, 0x02	; 2
    1294:	6f 0e       	add	r6, r31
    1296:	71 1c       	adc	r7, r1
    1298:	f8 01       	movw	r30, r16
    129a:	a0 80       	ld	r10, Z
    129c:	b1 80       	ldd	r11, Z+1	; 0x01
    129e:	26 ff       	sbrs	r18, 6
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <vfprintf+0x12a>
    12a2:	65 2d       	mov	r22, r5
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <vfprintf+0x12e>
    12a8:	6f ef       	ldi	r22, 0xFF	; 255
    12aa:	7f ef       	ldi	r23, 0xFF	; 255
    12ac:	c5 01       	movw	r24, r10
    12ae:	2c 87       	std	Y+12, r18	; 0x0c
    12b0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <strnlen>
    12b4:	2c 01       	movw	r4, r24
    12b6:	83 01       	movw	r16, r6
    12b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ba:	2f 77       	andi	r18, 0x7F	; 127
    12bc:	22 2e       	mov	r2, r18
    12be:	17 c0       	rjmp	.+46     	; 0x12ee <vfprintf+0x170>
    12c0:	38 01       	movw	r6, r16
    12c2:	f2 e0       	ldi	r31, 0x02	; 2
    12c4:	6f 0e       	add	r6, r31
    12c6:	71 1c       	adc	r7, r1
    12c8:	f8 01       	movw	r30, r16
    12ca:	a0 80       	ld	r10, Z
    12cc:	b1 80       	ldd	r11, Z+1	; 0x01
    12ce:	26 ff       	sbrs	r18, 6
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <vfprintf+0x15a>
    12d2:	65 2d       	mov	r22, r5
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <vfprintf+0x15e>
    12d8:	6f ef       	ldi	r22, 0xFF	; 255
    12da:	7f ef       	ldi	r23, 0xFF	; 255
    12dc:	c5 01       	movw	r24, r10
    12de:	2c 87       	std	Y+12, r18	; 0x0c
    12e0:	0e 94 91 0a 	call	0x1522	; 0x1522 <strnlen_P>
    12e4:	2c 01       	movw	r4, r24
    12e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    12e8:	20 68       	ori	r18, 0x80	; 128
    12ea:	22 2e       	mov	r2, r18
    12ec:	83 01       	movw	r16, r6
    12ee:	23 fc       	sbrc	r2, 3
    12f0:	1b c0       	rjmp	.+54     	; 0x1328 <vfprintf+0x1aa>
    12f2:	83 2d       	mov	r24, r3
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	48 16       	cp	r4, r24
    12f8:	59 06       	cpc	r5, r25
    12fa:	b0 f4       	brcc	.+44     	; 0x1328 <vfprintf+0x1aa>
    12fc:	b7 01       	movw	r22, r14
    12fe:	80 e2       	ldi	r24, 0x20	; 32
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    1306:	3a 94       	dec	r3
    1308:	f4 cf       	rjmp	.-24     	; 0x12f2 <vfprintf+0x174>
    130a:	f5 01       	movw	r30, r10
    130c:	27 fc       	sbrc	r2, 7
    130e:	85 91       	lpm	r24, Z+
    1310:	27 fe       	sbrs	r2, 7
    1312:	81 91       	ld	r24, Z+
    1314:	5f 01       	movw	r10, r30
    1316:	b7 01       	movw	r22, r14
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    131e:	31 10       	cpse	r3, r1
    1320:	3a 94       	dec	r3
    1322:	f1 e0       	ldi	r31, 0x01	; 1
    1324:	4f 1a       	sub	r4, r31
    1326:	51 08       	sbc	r5, r1
    1328:	41 14       	cp	r4, r1
    132a:	51 04       	cpc	r5, r1
    132c:	71 f7       	brne	.-36     	; 0x130a <vfprintf+0x18c>
    132e:	e5 c0       	rjmp	.+458    	; 0x14fa <vfprintf+0x37c>
    1330:	84 36       	cpi	r24, 0x64	; 100
    1332:	11 f0       	breq	.+4      	; 0x1338 <vfprintf+0x1ba>
    1334:	89 36       	cpi	r24, 0x69	; 105
    1336:	39 f5       	brne	.+78     	; 0x1386 <vfprintf+0x208>
    1338:	f8 01       	movw	r30, r16
    133a:	27 ff       	sbrs	r18, 7
    133c:	07 c0       	rjmp	.+14     	; 0x134c <vfprintf+0x1ce>
    133e:	60 81       	ld	r22, Z
    1340:	71 81       	ldd	r23, Z+1	; 0x01
    1342:	82 81       	ldd	r24, Z+2	; 0x02
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	0c 5f       	subi	r16, 0xFC	; 252
    1348:	1f 4f       	sbci	r17, 0xFF	; 255
    134a:	08 c0       	rjmp	.+16     	; 0x135c <vfprintf+0x1de>
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	07 2e       	mov	r0, r23
    1352:	00 0c       	add	r0, r0
    1354:	88 0b       	sbc	r24, r24
    1356:	99 0b       	sbc	r25, r25
    1358:	0e 5f       	subi	r16, 0xFE	; 254
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	2f 76       	andi	r18, 0x6F	; 111
    135e:	72 2e       	mov	r7, r18
    1360:	97 ff       	sbrs	r25, 7
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <vfprintf+0x1f8>
    1364:	90 95       	com	r25
    1366:	80 95       	com	r24
    1368:	70 95       	com	r23
    136a:	61 95       	neg	r22
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	8f 4f       	sbci	r24, 0xFF	; 255
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	20 68       	ori	r18, 0x80	; 128
    1374:	72 2e       	mov	r7, r18
    1376:	2a e0       	ldi	r18, 0x0A	; 10
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	a4 01       	movw	r20, r8
    137c:	0e 94 ef 0a 	call	0x15de	; 0x15de <__ultoa_invert>
    1380:	a8 2e       	mov	r10, r24
    1382:	a8 18       	sub	r10, r8
    1384:	44 c0       	rjmp	.+136    	; 0x140e <vfprintf+0x290>
    1386:	85 37       	cpi	r24, 0x75	; 117
    1388:	29 f4       	brne	.+10     	; 0x1394 <vfprintf+0x216>
    138a:	2f 7e       	andi	r18, 0xEF	; 239
    138c:	b2 2e       	mov	r11, r18
    138e:	2a e0       	ldi	r18, 0x0A	; 10
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	25 c0       	rjmp	.+74     	; 0x13de <vfprintf+0x260>
    1394:	f2 2f       	mov	r31, r18
    1396:	f9 7f       	andi	r31, 0xF9	; 249
    1398:	bf 2e       	mov	r11, r31
    139a:	8f 36       	cpi	r24, 0x6F	; 111
    139c:	c1 f0       	breq	.+48     	; 0x13ce <vfprintf+0x250>
    139e:	18 f4       	brcc	.+6      	; 0x13a6 <vfprintf+0x228>
    13a0:	88 35       	cpi	r24, 0x58	; 88
    13a2:	79 f0       	breq	.+30     	; 0x13c2 <vfprintf+0x244>
    13a4:	b4 c0       	rjmp	.+360    	; 0x150e <vfprintf+0x390>
    13a6:	80 37       	cpi	r24, 0x70	; 112
    13a8:	19 f0       	breq	.+6      	; 0x13b0 <vfprintf+0x232>
    13aa:	88 37       	cpi	r24, 0x78	; 120
    13ac:	21 f0       	breq	.+8      	; 0x13b6 <vfprintf+0x238>
    13ae:	af c0       	rjmp	.+350    	; 0x150e <vfprintf+0x390>
    13b0:	2f 2f       	mov	r18, r31
    13b2:	20 61       	ori	r18, 0x10	; 16
    13b4:	b2 2e       	mov	r11, r18
    13b6:	b4 fe       	sbrs	r11, 4
    13b8:	0d c0       	rjmp	.+26     	; 0x13d4 <vfprintf+0x256>
    13ba:	8b 2d       	mov	r24, r11
    13bc:	84 60       	ori	r24, 0x04	; 4
    13be:	b8 2e       	mov	r11, r24
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <vfprintf+0x256>
    13c2:	24 ff       	sbrs	r18, 4
    13c4:	0a c0       	rjmp	.+20     	; 0x13da <vfprintf+0x25c>
    13c6:	9f 2f       	mov	r25, r31
    13c8:	96 60       	ori	r25, 0x06	; 6
    13ca:	b9 2e       	mov	r11, r25
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <vfprintf+0x25c>
    13ce:	28 e0       	ldi	r18, 0x08	; 8
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <vfprintf+0x260>
    13d4:	20 e1       	ldi	r18, 0x10	; 16
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <vfprintf+0x260>
    13da:	20 e1       	ldi	r18, 0x10	; 16
    13dc:	32 e0       	ldi	r19, 0x02	; 2
    13de:	f8 01       	movw	r30, r16
    13e0:	b7 fe       	sbrs	r11, 7
    13e2:	07 c0       	rjmp	.+14     	; 0x13f2 <vfprintf+0x274>
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	0c 5f       	subi	r16, 0xFC	; 252
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	06 c0       	rjmp	.+12     	; 0x13fe <vfprintf+0x280>
    13f2:	60 81       	ld	r22, Z
    13f4:	71 81       	ldd	r23, Z+1	; 0x01
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 5f       	subi	r16, 0xFE	; 254
    13fc:	1f 4f       	sbci	r17, 0xFF	; 255
    13fe:	a4 01       	movw	r20, r8
    1400:	0e 94 ef 0a 	call	0x15de	; 0x15de <__ultoa_invert>
    1404:	a8 2e       	mov	r10, r24
    1406:	a8 18       	sub	r10, r8
    1408:	fb 2d       	mov	r31, r11
    140a:	ff 77       	andi	r31, 0x7F	; 127
    140c:	7f 2e       	mov	r7, r31
    140e:	76 fe       	sbrs	r7, 6
    1410:	0b c0       	rjmp	.+22     	; 0x1428 <vfprintf+0x2aa>
    1412:	37 2d       	mov	r19, r7
    1414:	3e 7f       	andi	r19, 0xFE	; 254
    1416:	a5 14       	cp	r10, r5
    1418:	50 f4       	brcc	.+20     	; 0x142e <vfprintf+0x2b0>
    141a:	74 fe       	sbrs	r7, 4
    141c:	0a c0       	rjmp	.+20     	; 0x1432 <vfprintf+0x2b4>
    141e:	72 fc       	sbrc	r7, 2
    1420:	08 c0       	rjmp	.+16     	; 0x1432 <vfprintf+0x2b4>
    1422:	37 2d       	mov	r19, r7
    1424:	3e 7e       	andi	r19, 0xEE	; 238
    1426:	05 c0       	rjmp	.+10     	; 0x1432 <vfprintf+0x2b4>
    1428:	ba 2c       	mov	r11, r10
    142a:	37 2d       	mov	r19, r7
    142c:	03 c0       	rjmp	.+6      	; 0x1434 <vfprintf+0x2b6>
    142e:	ba 2c       	mov	r11, r10
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <vfprintf+0x2b6>
    1432:	b5 2c       	mov	r11, r5
    1434:	34 ff       	sbrs	r19, 4
    1436:	0d c0       	rjmp	.+26     	; 0x1452 <vfprintf+0x2d4>
    1438:	fe 01       	movw	r30, r28
    143a:	ea 0d       	add	r30, r10
    143c:	f1 1d       	adc	r31, r1
    143e:	80 81       	ld	r24, Z
    1440:	80 33       	cpi	r24, 0x30	; 48
    1442:	11 f4       	brne	.+4      	; 0x1448 <vfprintf+0x2ca>
    1444:	39 7e       	andi	r19, 0xE9	; 233
    1446:	09 c0       	rjmp	.+18     	; 0x145a <vfprintf+0x2dc>
    1448:	32 ff       	sbrs	r19, 2
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <vfprintf+0x2da>
    144c:	b3 94       	inc	r11
    144e:	b3 94       	inc	r11
    1450:	04 c0       	rjmp	.+8      	; 0x145a <vfprintf+0x2dc>
    1452:	83 2f       	mov	r24, r19
    1454:	86 78       	andi	r24, 0x86	; 134
    1456:	09 f0       	breq	.+2      	; 0x145a <vfprintf+0x2dc>
    1458:	b3 94       	inc	r11
    145a:	33 fd       	sbrc	r19, 3
    145c:	13 c0       	rjmp	.+38     	; 0x1484 <vfprintf+0x306>
    145e:	30 ff       	sbrs	r19, 0
    1460:	06 c0       	rjmp	.+12     	; 0x146e <vfprintf+0x2f0>
    1462:	5a 2c       	mov	r5, r10
    1464:	b3 14       	cp	r11, r3
    1466:	18 f4       	brcc	.+6      	; 0x146e <vfprintf+0x2f0>
    1468:	53 0c       	add	r5, r3
    146a:	5b 18       	sub	r5, r11
    146c:	b3 2c       	mov	r11, r3
    146e:	b3 14       	cp	r11, r3
    1470:	68 f4       	brcc	.+26     	; 0x148c <vfprintf+0x30e>
    1472:	b7 01       	movw	r22, r14
    1474:	80 e2       	ldi	r24, 0x20	; 32
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	3c 87       	std	Y+12, r19	; 0x0c
    147a:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    147e:	b3 94       	inc	r11
    1480:	3c 85       	ldd	r19, Y+12	; 0x0c
    1482:	f5 cf       	rjmp	.-22     	; 0x146e <vfprintf+0x2f0>
    1484:	b3 14       	cp	r11, r3
    1486:	10 f4       	brcc	.+4      	; 0x148c <vfprintf+0x30e>
    1488:	3b 18       	sub	r3, r11
    148a:	01 c0       	rjmp	.+2      	; 0x148e <vfprintf+0x310>
    148c:	31 2c       	mov	r3, r1
    148e:	34 ff       	sbrs	r19, 4
    1490:	12 c0       	rjmp	.+36     	; 0x14b6 <vfprintf+0x338>
    1492:	b7 01       	movw	r22, r14
    1494:	80 e3       	ldi	r24, 0x30	; 48
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	3c 87       	std	Y+12, r19	; 0x0c
    149a:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    149e:	3c 85       	ldd	r19, Y+12	; 0x0c
    14a0:	32 ff       	sbrs	r19, 2
    14a2:	17 c0       	rjmp	.+46     	; 0x14d2 <vfprintf+0x354>
    14a4:	31 fd       	sbrc	r19, 1
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <vfprintf+0x330>
    14a8:	88 e7       	ldi	r24, 0x78	; 120
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <vfprintf+0x334>
    14ae:	88 e5       	ldi	r24, 0x58	; 88
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	b7 01       	movw	r22, r14
    14b4:	0c c0       	rjmp	.+24     	; 0x14ce <vfprintf+0x350>
    14b6:	83 2f       	mov	r24, r19
    14b8:	86 78       	andi	r24, 0x86	; 134
    14ba:	59 f0       	breq	.+22     	; 0x14d2 <vfprintf+0x354>
    14bc:	31 ff       	sbrs	r19, 1
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <vfprintf+0x346>
    14c0:	8b e2       	ldi	r24, 0x2B	; 43
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <vfprintf+0x348>
    14c4:	80 e2       	ldi	r24, 0x20	; 32
    14c6:	37 fd       	sbrc	r19, 7
    14c8:	8d e2       	ldi	r24, 0x2D	; 45
    14ca:	b7 01       	movw	r22, r14
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    14d2:	a5 14       	cp	r10, r5
    14d4:	38 f4       	brcc	.+14     	; 0x14e4 <vfprintf+0x366>
    14d6:	b7 01       	movw	r22, r14
    14d8:	80 e3       	ldi	r24, 0x30	; 48
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    14e0:	5a 94       	dec	r5
    14e2:	f7 cf       	rjmp	.-18     	; 0x14d2 <vfprintf+0x354>
    14e4:	aa 94       	dec	r10
    14e6:	f4 01       	movw	r30, r8
    14e8:	ea 0d       	add	r30, r10
    14ea:	f1 1d       	adc	r31, r1
    14ec:	80 81       	ld	r24, Z
    14ee:	b7 01       	movw	r22, r14
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    14f6:	a1 10       	cpse	r10, r1
    14f8:	f5 cf       	rjmp	.-22     	; 0x14e4 <vfprintf+0x366>
    14fa:	33 20       	and	r3, r3
    14fc:	09 f4       	brne	.+2      	; 0x1500 <vfprintf+0x382>
    14fe:	51 ce       	rjmp	.-862    	; 0x11a2 <vfprintf+0x24>
    1500:	b7 01       	movw	r22, r14
    1502:	80 e2       	ldi	r24, 0x20	; 32
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 b7 0a 	call	0x156e	; 0x156e <fputc>
    150a:	3a 94       	dec	r3
    150c:	f6 cf       	rjmp	.-20     	; 0x14fa <vfprintf+0x37c>
    150e:	f7 01       	movw	r30, r14
    1510:	86 81       	ldd	r24, Z+6	; 0x06
    1512:	97 81       	ldd	r25, Z+7	; 0x07
    1514:	02 c0       	rjmp	.+4      	; 0x151a <vfprintf+0x39c>
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	9f ef       	ldi	r25, 0xFF	; 255
    151a:	2c 96       	adiw	r28, 0x0c	; 12
    151c:	e2 e1       	ldi	r30, 0x12	; 18
    151e:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__epilogue_restores__>

00001522 <strnlen_P>:
    1522:	fc 01       	movw	r30, r24
    1524:	05 90       	lpm	r0, Z+
    1526:	61 50       	subi	r22, 0x01	; 1
    1528:	70 40       	sbci	r23, 0x00	; 0
    152a:	01 10       	cpse	r0, r1
    152c:	d8 f7       	brcc	.-10     	; 0x1524 <strnlen_P+0x2>
    152e:	80 95       	com	r24
    1530:	90 95       	com	r25
    1532:	8e 0f       	add	r24, r30
    1534:	9f 1f       	adc	r25, r31
    1536:	08 95       	ret

00001538 <strnlen>:
    1538:	fc 01       	movw	r30, r24
    153a:	61 50       	subi	r22, 0x01	; 1
    153c:	70 40       	sbci	r23, 0x00	; 0
    153e:	01 90       	ld	r0, Z+
    1540:	01 10       	cpse	r0, r1
    1542:	d8 f7       	brcc	.-10     	; 0x153a <strnlen+0x2>
    1544:	80 95       	com	r24
    1546:	90 95       	com	r25
    1548:	8e 0f       	add	r24, r30
    154a:	9f 1f       	adc	r25, r31
    154c:	08 95       	ret

0000154e <strrev>:
    154e:	dc 01       	movw	r26, r24
    1550:	fc 01       	movw	r30, r24
    1552:	67 2f       	mov	r22, r23
    1554:	71 91       	ld	r23, Z+
    1556:	77 23       	and	r23, r23
    1558:	e1 f7       	brne	.-8      	; 0x1552 <strrev+0x4>
    155a:	32 97       	sbiw	r30, 0x02	; 2
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <strrev+0x18>
    155e:	7c 91       	ld	r23, X
    1560:	6d 93       	st	X+, r22
    1562:	70 83       	st	Z, r23
    1564:	62 91       	ld	r22, -Z
    1566:	ae 17       	cp	r26, r30
    1568:	bf 07       	cpc	r27, r31
    156a:	c8 f3       	brcs	.-14     	; 0x155e <strrev+0x10>
    156c:	08 95       	ret

0000156e <fputc>:
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	fb 01       	movw	r30, r22
    1578:	23 81       	ldd	r18, Z+3	; 0x03
    157a:	21 fd       	sbrc	r18, 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <fputc+0x16>
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	9f ef       	ldi	r25, 0xFF	; 255
    1582:	28 c0       	rjmp	.+80     	; 0x15d4 <fputc+0x66>
    1584:	22 ff       	sbrs	r18, 2
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <fputc+0x46>
    1588:	46 81       	ldd	r20, Z+6	; 0x06
    158a:	57 81       	ldd	r21, Z+7	; 0x07
    158c:	24 81       	ldd	r18, Z+4	; 0x04
    158e:	35 81       	ldd	r19, Z+5	; 0x05
    1590:	42 17       	cp	r20, r18
    1592:	53 07       	cpc	r21, r19
    1594:	44 f4       	brge	.+16     	; 0x15a6 <fputc+0x38>
    1596:	a0 81       	ld	r26, Z
    1598:	b1 81       	ldd	r27, Z+1	; 0x01
    159a:	9d 01       	movw	r18, r26
    159c:	2f 5f       	subi	r18, 0xFF	; 255
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	20 83       	st	Z, r18
    15a2:	31 83       	std	Z+1, r19	; 0x01
    15a4:	8c 93       	st	X, r24
    15a6:	26 81       	ldd	r18, Z+6	; 0x06
    15a8:	37 81       	ldd	r19, Z+7	; 0x07
    15aa:	2f 5f       	subi	r18, 0xFF	; 255
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	26 83       	std	Z+6, r18	; 0x06
    15b0:	37 83       	std	Z+7, r19	; 0x07
    15b2:	10 c0       	rjmp	.+32     	; 0x15d4 <fputc+0x66>
    15b4:	eb 01       	movw	r28, r22
    15b6:	09 2f       	mov	r16, r25
    15b8:	18 2f       	mov	r17, r24
    15ba:	00 84       	ldd	r0, Z+8	; 0x08
    15bc:	f1 85       	ldd	r31, Z+9	; 0x09
    15be:	e0 2d       	mov	r30, r0
    15c0:	09 95       	icall
    15c2:	89 2b       	or	r24, r25
    15c4:	e1 f6       	brne	.-72     	; 0x157e <fputc+0x10>
    15c6:	8e 81       	ldd	r24, Y+6	; 0x06
    15c8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	8e 83       	std	Y+6, r24	; 0x06
    15ce:	9f 83       	std	Y+7, r25	; 0x07
    15d0:	81 2f       	mov	r24, r17
    15d2:	90 2f       	mov	r25, r16
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	08 95       	ret

000015de <__ultoa_invert>:
    15de:	fa 01       	movw	r30, r20
    15e0:	aa 27       	eor	r26, r26
    15e2:	28 30       	cpi	r18, 0x08	; 8
    15e4:	51 f1       	breq	.+84     	; 0x163a <__ultoa_invert+0x5c>
    15e6:	20 31       	cpi	r18, 0x10	; 16
    15e8:	81 f1       	breq	.+96     	; 0x164a <__ultoa_invert+0x6c>
    15ea:	e8 94       	clt
    15ec:	6f 93       	push	r22
    15ee:	6e 7f       	andi	r22, 0xFE	; 254
    15f0:	6e 5f       	subi	r22, 0xFE	; 254
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	8f 4f       	sbci	r24, 0xFF	; 255
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	af 4f       	sbci	r26, 0xFF	; 255
    15fa:	b1 e0       	ldi	r27, 0x01	; 1
    15fc:	3e d0       	rcall	.+124    	; 0x167a <__ultoa_invert+0x9c>
    15fe:	b4 e0       	ldi	r27, 0x04	; 4
    1600:	3c d0       	rcall	.+120    	; 0x167a <__ultoa_invert+0x9c>
    1602:	67 0f       	add	r22, r23
    1604:	78 1f       	adc	r23, r24
    1606:	89 1f       	adc	r24, r25
    1608:	9a 1f       	adc	r25, r26
    160a:	a1 1d       	adc	r26, r1
    160c:	68 0f       	add	r22, r24
    160e:	79 1f       	adc	r23, r25
    1610:	8a 1f       	adc	r24, r26
    1612:	91 1d       	adc	r25, r1
    1614:	a1 1d       	adc	r26, r1
    1616:	6a 0f       	add	r22, r26
    1618:	71 1d       	adc	r23, r1
    161a:	81 1d       	adc	r24, r1
    161c:	91 1d       	adc	r25, r1
    161e:	a1 1d       	adc	r26, r1
    1620:	20 d0       	rcall	.+64     	; 0x1662 <__ultoa_invert+0x84>
    1622:	09 f4       	brne	.+2      	; 0x1626 <__ultoa_invert+0x48>
    1624:	68 94       	set
    1626:	3f 91       	pop	r19
    1628:	2a e0       	ldi	r18, 0x0A	; 10
    162a:	26 9f       	mul	r18, r22
    162c:	11 24       	eor	r1, r1
    162e:	30 19       	sub	r19, r0
    1630:	30 5d       	subi	r19, 0xD0	; 208
    1632:	31 93       	st	Z+, r19
    1634:	de f6       	brtc	.-74     	; 0x15ec <__ultoa_invert+0xe>
    1636:	cf 01       	movw	r24, r30
    1638:	08 95       	ret
    163a:	46 2f       	mov	r20, r22
    163c:	47 70       	andi	r20, 0x07	; 7
    163e:	40 5d       	subi	r20, 0xD0	; 208
    1640:	41 93       	st	Z+, r20
    1642:	b3 e0       	ldi	r27, 0x03	; 3
    1644:	0f d0       	rcall	.+30     	; 0x1664 <__ultoa_invert+0x86>
    1646:	c9 f7       	brne	.-14     	; 0x163a <__ultoa_invert+0x5c>
    1648:	f6 cf       	rjmp	.-20     	; 0x1636 <__ultoa_invert+0x58>
    164a:	46 2f       	mov	r20, r22
    164c:	4f 70       	andi	r20, 0x0F	; 15
    164e:	40 5d       	subi	r20, 0xD0	; 208
    1650:	4a 33       	cpi	r20, 0x3A	; 58
    1652:	18 f0       	brcs	.+6      	; 0x165a <__ultoa_invert+0x7c>
    1654:	49 5d       	subi	r20, 0xD9	; 217
    1656:	31 fd       	sbrc	r19, 1
    1658:	40 52       	subi	r20, 0x20	; 32
    165a:	41 93       	st	Z+, r20
    165c:	02 d0       	rcall	.+4      	; 0x1662 <__ultoa_invert+0x84>
    165e:	a9 f7       	brne	.-22     	; 0x164a <__ultoa_invert+0x6c>
    1660:	ea cf       	rjmp	.-44     	; 0x1636 <__ultoa_invert+0x58>
    1662:	b4 e0       	ldi	r27, 0x04	; 4
    1664:	a6 95       	lsr	r26
    1666:	97 95       	ror	r25
    1668:	87 95       	ror	r24
    166a:	77 95       	ror	r23
    166c:	67 95       	ror	r22
    166e:	ba 95       	dec	r27
    1670:	c9 f7       	brne	.-14     	; 0x1664 <__ultoa_invert+0x86>
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	61 05       	cpc	r22, r1
    1676:	71 05       	cpc	r23, r1
    1678:	08 95       	ret
    167a:	9b 01       	movw	r18, r22
    167c:	ac 01       	movw	r20, r24
    167e:	0a 2e       	mov	r0, r26
    1680:	06 94       	lsr	r0
    1682:	57 95       	ror	r21
    1684:	47 95       	ror	r20
    1686:	37 95       	ror	r19
    1688:	27 95       	ror	r18
    168a:	ba 95       	dec	r27
    168c:	c9 f7       	brne	.-14     	; 0x1680 <__ultoa_invert+0xa2>
    168e:	62 0f       	add	r22, r18
    1690:	73 1f       	adc	r23, r19
    1692:	84 1f       	adc	r24, r20
    1694:	95 1f       	adc	r25, r21
    1696:	a0 1d       	adc	r26, r0
    1698:	08 95       	ret

0000169a <__prologue_saves__>:
    169a:	2f 92       	push	r2
    169c:	3f 92       	push	r3
    169e:	4f 92       	push	r4
    16a0:	5f 92       	push	r5
    16a2:	6f 92       	push	r6
    16a4:	7f 92       	push	r7
    16a6:	8f 92       	push	r8
    16a8:	9f 92       	push	r9
    16aa:	af 92       	push	r10
    16ac:	bf 92       	push	r11
    16ae:	cf 92       	push	r12
    16b0:	df 92       	push	r13
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	ca 1b       	sub	r28, r26
    16c4:	db 0b       	sbc	r29, r27
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	09 94       	ijmp

000016cc <__epilogue_restores__>:
    16cc:	2a 88       	ldd	r2, Y+18	; 0x12
    16ce:	39 88       	ldd	r3, Y+17	; 0x11
    16d0:	48 88       	ldd	r4, Y+16	; 0x10
    16d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    16d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    16d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    16d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    16da:	9b 84       	ldd	r9, Y+11	; 0x0b
    16dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    16de:	b9 84       	ldd	r11, Y+9	; 0x09
    16e0:	c8 84       	ldd	r12, Y+8	; 0x08
    16e2:	df 80       	ldd	r13, Y+7	; 0x07
    16e4:	ee 80       	ldd	r14, Y+6	; 0x06
    16e6:	fd 80       	ldd	r15, Y+5	; 0x05
    16e8:	0c 81       	ldd	r16, Y+4	; 0x04
    16ea:	1b 81       	ldd	r17, Y+3	; 0x03
    16ec:	aa 81       	ldd	r26, Y+2	; 0x02
    16ee:	b9 81       	ldd	r27, Y+1	; 0x01
    16f0:	ce 0f       	add	r28, r30
    16f2:	d1 1d       	adc	r29, r1
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	ed 01       	movw	r28, r26
    16fa:	08 95       	ret

000016fc <_exit>:
    16fc:	f8 94       	cli

000016fe <__stop_program>:
    16fe:	ff cf       	rjmp	.-2      	; 0x16fe <__stop_program>
