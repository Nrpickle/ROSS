
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  000015d2  00001666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008020b2  008020b2  00001718  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040fa  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cc  00000000  00000000  000059ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000740  00000000  00000000  0000629a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  000069dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002236  00000000  00000000  00006d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099d  00000000  00000000  00008fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000996f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_7>
      20:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__vector_8>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_12>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_18>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_30>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_35>
      90:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_36>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_38>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	cd bf       	out	0x3d, r28	; 61
      b4:	df e2       	ldi	r29, 0x2F	; 47
      b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
      b8:	10 e2       	ldi	r17, 0x20	; 32
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b0 e2       	ldi	r27, 0x20	; 32
      be:	e2 ed       	ldi	r30, 0xD2	; 210
      c0:	f5 e1       	ldi	r31, 0x15	; 21
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a2 3b       	cpi	r26, 0xB2	; 178
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	20 e2       	ldi	r18, 0x20	; 32
      d0:	a2 eb       	ldi	r26, 0xB2	; 178
      d2:	b0 e2       	ldi	r27, 0x20	; 32
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a7 3c       	cpi	r26, 0xC7	; 199
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 85 03 	call	0x70a	; 0x70a <main>
      e2:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
      ea:	e0 e5       	ldi	r30, 0x50	; 80
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	8b e4       	ldi	r24, 0x4B	; 75
      f0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
      f2:	80 81       	ld	r24, Z
      f4:	88 60       	ori	r24, 0x08	; 8
      f6:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
      f8:	81 81       	ldd	r24, Z+1	; 0x01
      fa:	83 fd       	sbrc	r24, 3
      fc:	09 c0       	rjmp	.+18     	; 0x110 <_Z27configureExternalOscillatorv+0x26>
      fe:	a0 e4       	ldi	r26, 0x40	; 64
     100:	b6 e0       	ldi	r27, 0x06	; 6
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	15 96       	adiw	r26, 0x05	; 5
     106:	9c 93       	st	X, r25
     108:	15 97       	sbiw	r26, 0x05	; 5
     10a:	81 81       	ldd	r24, Z+1	; 0x01
     10c:	83 ff       	sbrs	r24, 3
     10e:	fa cf       	rjmp	.-12     	; 0x104 <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
     116:	88 ed       	ldi	r24, 0xD8	; 216
     118:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
     11a:	e0 e5       	ldi	r30, 0x50	; 80
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	88 ec       	ldi	r24, 0xC8	; 200
     120:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
     122:	80 81       	ld	r24, Z
     124:	80 61       	ori	r24, 0x10	; 16
     126:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	84 fd       	sbrc	r24, 4
     12c:	09 c0       	rjmp	.+18     	; 0x140 <_Z27configureExternalOscillatorv+0x56>
     12e:	a0 e4       	ldi	r26, 0x40	; 64
     130:	b6 e0       	ldi	r27, 0x06	; 6
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	15 96       	adiw	r26, 0x05	; 5
     136:	9c 93       	st	X, r25
     138:	15 97       	sbiw	r26, 0x05	; 5
     13a:	81 81       	ldd	r24, Z+1	; 0x01
     13c:	84 ff       	sbrs	r24, 4
     13e:	fa cf       	rjmp	.-12     	; 0x134 <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
     146:	88 ed       	ldi	r24, 0xD8	; 216
     148:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
     14a:	e0 e4       	ldi	r30, 0x40	; 64
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
     150:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	80 83       	st	Z, r24
     156:	08 95       	ret

00000158 <_Z11configureIOv>:
	
	
}

void configureIO(void){
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
     15c:	e0 e4       	ldi	r30, 0x40	; 64
     15e:	f6 e0       	ldi	r31, 0x06	; 6
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = PIN0_bm;
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	91 83       	std	Z+1, r25	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
     168:	20 e2       	ldi	r18, 0x20	; 32
     16a:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
     16c:	34 e0       	ldi	r19, 0x04	; 4
     16e:	32 83       	std	Z+2, r19	; 0x02
	PORTC.DIRCLR = PIN3_bm;
     170:	48 e0       	ldi	r20, 0x08	; 8
     172:	42 83       	std	Z+2, r20	; 0x02
	
	//Set pullups on the switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
     174:	48 e1       	ldi	r20, 0x18	; 24
     176:	42 8b       	std	Z+18, r20	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
     178:	43 8b       	std	Z+19, r20	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
     17a:	c0 e0       	ldi	r28, 0x00	; 0
     17c:	d6 e0       	ldi	r29, 0x06	; 6
     17e:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
     180:	8a 83       	std	Y+2, r24	; 0x02
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
     182:	a0 e6       	ldi	r26, 0x60	; 96
     184:	b6 e0       	ldi	r27, 0x06	; 6
     186:	12 96       	adiw	r26, 0x02	; 2
     188:	9c 93       	st	X, r25
     18a:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN1_bm;  //Voltage Sense - Electronics Battery
     18c:	12 96       	adiw	r26, 0x02	; 2
     18e:	8c 93       	st	X, r24
     190:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN2_bm;  //Voltage Sense - Rear Battery
     192:	12 96       	adiw	r26, 0x02	; 2
     194:	3c 93       	st	X, r19
     196:	12 97       	sbiw	r26, 0x02	; 2
	
	//Setup the RSSI input
	PORTA.DIRCLR = PIN2_bm;				//Set the RSSI pin to be an input
     198:	3a 83       	std	Y+2, r19	; 0x02
	//PORTA.INTCTRL = PMIC_MEDLVLEN_bm;	//Set PORTA's interrupt to be medium level
	//PORTA.INTMASK = PIN2_bm;			//Configure the RSSI pin to be an interrupt
	//PORTA.PIN2CTRL |=  PORT_ISC_BOTHEDGES_gc;	//Configure the interrupt to trigger on both edges
	
	//Setup the steering signal I/O
	PORTD.DIRCLR = PIN4_bm;  //Set the STEER_SIG_3v3 pin as an input
     19a:	30 e1       	ldi	r19, 0x10	; 16
     19c:	12 96       	adiw	r26, 0x02	; 2
     19e:	3c 93       	st	X, r19
     1a0:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRSET = PIN5_bm;	 //Set the STEER_SIG_3v3_PROCESSED pin to be an output
     1a2:	11 96       	adiw	r26, 0x01	; 1
     1a4:	2c 93       	st	X, r18
     1a6:	11 97       	sbiw	r26, 0x01	; 1

	//Setup steering control PWM interrupts
	PORTD.INTCTRL  = PMIC_MEDLVLEN_bm;	//Set PORTC's interrupt to be medium level
     1a8:	19 96       	adiw	r26, 0x09	; 9
     1aa:	8c 93       	st	X, r24
     1ac:	19 97       	sbiw	r26, 0x09	; 9
	PORTD.INTMASK  = PIN4_bm;			//Configure the PWM input pin as an interrupt
     1ae:	1a 96       	adiw	r26, 0x0a	; 10
     1b0:	3c 93       	st	X, r19
     1b2:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;  //Init the pin as a rising edge interrupt only
     1b4:	54 96       	adiw	r26, 0x14	; 20
     1b6:	9c 93       	st	X, r25
     1b8:	54 97       	sbiw	r26, 0x14	; 20
	
	//DONT FORGET TO CLEAR THE FLAG IN INTFLAGS	
	
	//Initialize output values
	STATUS_CLR();
     1ba:	96 83       	std	Z+6, r25	; 0x06
	ERROR_CLR();
     1bc:	86 83       	std	Z+6, r24	; 0x06
	
	REAR_RELAY_CLR();
     1be:	26 83       	std	Z+6, r18	; 0x06
	
	STEER_SIG_CLR();	
     1c0:	16 96       	adiw	r26, 0x06	; 6
     1c2:	2c 93       	st	X, r18
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <__vector_35>:
*/
/*
If measuring ______/----- just happened

*/
ISR(PORTD_INT_vect){
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	11 24       	eor	r1, r1
     1d4:	8f 93       	push	r24
     1d6:	9f 93       	push	r25
	ERROR_TOGGLE();
     1d8:	80 91 44 06 	lds	r24, 0x0644
     1dc:	81 fd       	sbrc	r24, 1
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <__vector_35+0x1e>
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	80 93 45 06 	sts	0x0645, r24
     1e6:	03 c0       	rjmp	.+6      	; 0x1ee <__vector_35+0x24>
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	80 93 46 06 	sts	0x0646, r24
	PORTD.INTFLAGS = PIN4_bm;
     1ee:	80 e1       	ldi	r24, 0x10	; 16
     1f0:	80 93 6c 06 	sts	0x066C, r24

	
	if(PWMMeasuringStatus == NOT_MEASURING){  //We encountered the first part of the wave
     1f4:	80 91 00 20 	lds	r24, 0x2000
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	81 f4       	brne	.+32     	; 0x21c <__vector_35+0x52>
		TCC5.CNT = 0;	//Start counting
     1fc:	10 92 60 08 	sts	0x0860, r1
     200:	10 92 61 08 	sts	0x0861, r1
		PWMMeasuringStatus = MEASURING;
     204:	10 92 00 20 	sts	0x2000, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     208:	87 ec       	ldi	r24, 0xC7	; 199
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <__vector_35+0x42>
     210:	00 c0       	rjmp	.+0      	; 0x212 <__vector_35+0x48>
     212:	00 00       	nop
		
		_delay_us(25);  //Delay ~6-7 clock cycles
		
		PORTD.PIN4CTRL = PORT_ISC_FALLING_gc; //Set the interrupt to wait for a falling wave (end of signal)
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	80 93 74 06 	sts	0x0674, r24
     21a:	0f c0       	rjmp	.+30     	; 0x23a <__vector_35+0x70>
	}
	else { //We finished encountering the wave (process the data)
		steeringPWMPeriod = TCC5.CNT * 2;
     21c:	80 91 60 08 	lds	r24, 0x0860
     220:	90 91 61 08 	lds	r25, 0x0861
     224:	88 0f       	add	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	80 93 b2 20 	sts	0x20B2, r24
     22c:	90 93 b3 20 	sts	0x20B3, r25
		PWMMeasuringStatus = NOT_MEASURING;
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	80 93 00 20 	sts	0x2000, r24
		
		PORTD.PIN4CTRL = PORT_ISC_RISING_gc; 
     236:	80 93 74 06 	sts	0x0674, r24
	}
	
}
     23a:	9f 91       	pop	r25
     23c:	8f 91       	pop	r24
     23e:	0f 90       	pop	r0
     240:	0f be       	out	0x3f, r0	; 63
     242:	0f 90       	pop	r0
     244:	1f 90       	pop	r1
     246:	18 95       	reti

00000248 <__vector_30>:

//This function will be called on the edges of the RSSI signal 
//*CURRENTLY DISABLED*
ISR(PORTA_INT_vect){
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	8f 93       	push	r24
     254:	9f 93       	push	r25
     256:	ef 93       	push	r30
     258:	ff 93       	push	r31
	cli();
     25a:	f8 94       	cli
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
     25c:	84 e0       	ldi	r24, 0x04	; 4
     25e:	80 93 0c 06 	sts	0x060C, r24
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
     262:	80 91 be 20 	lds	r24, 0x20BE
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	61 f4       	brne	.+24     	; 0x282 <__vector_30+0x3a>
     26a:	80 91 08 06 	lds	r24, 0x0608
     26e:	82 fd       	sbrc	r24, 2
     270:	0b c0       	rjmp	.+22     	; 0x288 <__vector_30+0x40>
     272:	1f c0       	rjmp	.+62     	; 0x2b2 <__vector_30+0x6a>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     274:	80 91 08 06 	lds	r24, 0x0608
     278:	82 ff       	sbrs	r24, 2
     27a:	0d c0       	rjmp	.+26     	; 0x296 <__vector_30+0x4e>
     27c:	1a c0       	rjmp	.+52     	; 0x2b2 <__vector_30+0x6a>
		ERROR_SET();
	}
	
	
	//_delay_us(200);
	sei();
     27e:	78 94       	sei
     280:	1c c0       	rjmp	.+56     	; 0x2ba <__vector_30+0x72>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     282:	88 23       	and	r24, r24
     284:	b9 f3       	breq	.-18     	; 0x274 <__vector_30+0x2c>
     286:	15 c0       	rjmp	.+42     	; 0x2b2 <__vector_30+0x6a>
	cli();
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
		RTC.CNT = 0;		//We want to start counting the counter now
     288:	10 92 08 04 	sts	0x0408, r1
     28c:	10 92 09 04 	sts	0x0409, r1
		RSSI.measuring = MEASURING;
     290:	10 92 be 20 	sts	0x20BE, r1
     294:	f4 cf       	rjmp	.-24     	; 0x27e <__vector_30+0x36>
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
		RSSI.countDifference = RTC.CNT;
     296:	80 91 08 04 	lds	r24, 0x0408
     29a:	90 91 09 04 	lds	r25, 0x0409
     29e:	ed eb       	ldi	r30, 0xBD	; 189
     2a0:	f0 e2       	ldi	r31, 0x20	; 32
     2a2:	84 83       	std	Z+4, r24	; 0x04
     2a4:	95 83       	std	Z+5, r25	; 0x05
		
		RSSI.sampleCount++;
     2a6:	86 81       	ldd	r24, Z+6	; 0x06
     2a8:	97 81       	ldd	r25, Z+7	; 0x07
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	86 83       	std	Z+6, r24	; 0x06
     2ae:	97 83       	std	Z+7, r25	; 0x07
     2b0:	e6 cf       	rjmp	.-52     	; 0x27e <__vector_30+0x36>
	}
	else {
		ERROR_SET();
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	80 93 45 06 	sts	0x0645, r24
     2b8:	e2 cf       	rjmp	.-60     	; 0x27e <__vector_30+0x36>
	}
	
	
	//_delay_us(200);
	sei();
}
     2ba:	ff 91       	pop	r31
     2bc:	ef 91       	pop	r30
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	0f 90       	pop	r0
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	0f 90       	pop	r0
     2c8:	1f 90       	pop	r1
     2ca:	18 95       	reti

000002cc <_Z21configureTimerCounterv>:
1S    = 0x7A12

*/
void configureTimerCounter(){
	//Configure the accurate reporting timer
	TCC4.CTRLA = TC45_CLKSEL_DIV1024_gc;	//Configure a 1024 prescaler (we want very broad timing here, exact precision isn't required)
     2cc:	e0 e0       	ldi	r30, 0x00	; 0
     2ce:	f8 e0       	ldi	r31, 0x08	; 8
     2d0:	87 e0       	ldi	r24, 0x07	; 7
     2d2:	80 83       	st	Z, r24
	TCC4.PER = TC_1024_500MS;               //500mS delay
     2d4:	89 e0       	ldi	r24, 0x09	; 9
     2d6:	9d e3       	ldi	r25, 0x3D	; 61
     2d8:	86 a3       	std	Z+38, r24	; 0x26
     2da:	97 a3       	std	Z+39, r25	; 0x27
											//Default delay value. Reference pre-calculated table up above for more information
	TCC4.CTRLB = TC45_WGMODE_NORMAL_gc;		//Configure the timer for Normal mode operation
     2dc:	11 82       	std	Z+1, r1	; 0x01
	TCC4.INTCTRLA = TC45_OVFINTLVL_LO_gc;	//Set a low priority overflow interrupt
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	86 83       	std	Z+6, r24	; 0x06

	//Configure the PWM sense module
	//Input capture described on (168)
	TCC5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     2e2:	e0 e4       	ldi	r30, 0x40	; 64
     2e4:	f8 e0       	ldi	r31, 0x08	; 8
     2e6:	85 e0       	ldi	r24, 0x05	; 5
     2e8:	80 83       	st	Z, r24
	TCC5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     2ea:	11 82       	std	Z+1, r1	; 0x01
	TCC5.PER   = 12000;						//This is set to be 20% longer than the 20mS cycle should be
     2ec:	20 ee       	ldi	r18, 0xE0	; 224
     2ee:	3e e2       	ldi	r19, 0x2E	; 46
     2f0:	26 a3       	std	Z+38, r18	; 0x26
     2f2:	37 a3       	std	Z+39, r19	; 0x27
	
	//Is the following necessary?
	TCC5.INTCTRLA = TC45_OVFINTLVL_MED_gc;	//Set a medium priority overflow interrupt (we want the PWM generation to remain stable)
     2f4:	92 e0       	ldi	r25, 0x02	; 2
     2f6:	96 83       	std	Z+6, r25	; 0x06
											//as it will only take a few clock cycles compared to this interrupt
	
	//Configure the PWM generation module
	TCD5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     2f8:	e0 e4       	ldi	r30, 0x40	; 64
     2fa:	f9 e0       	ldi	r31, 0x09	; 9
     2fc:	80 83       	st	Z, r24
	TCD5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     2fe:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PER   = 10000;						//We want to establish a 50Hz control loop here (20ms period)
     300:	80 e1       	ldi	r24, 0x10	; 16
     302:	97 e2       	ldi	r25, 0x27	; 39
     304:	86 a3       	std	Z+38, r24	; 0x26
     306:	97 a3       	std	Z+39, r25	; 0x27
	TCD5.INTCTRLA = TC45_OVFINTLVL_HI_gc;	//Set a high priority overflow interrupt
     308:	83 e0       	ldi	r24, 0x03	; 3
     30a:	86 83       	std	Z+6, r24	; 0x06
	TCD5.INTCTRLB = TC45_CCAINTLVL_HI_gc;   
     30c:	87 83       	std	Z+7, r24	; 0x07
	
	TCD5.CCA = 950;		//Initial value for compare
     30e:	86 eb       	ldi	r24, 0xB6	; 182
     310:	93 e0       	ldi	r25, 0x03	; 3
     312:	80 a7       	std	Z+40, r24	; 0x28
     314:	91 a7       	std	Z+41, r25	; 0x29
     316:	08 95       	ret

00000318 <__vector_18>:
}

//This triggers when a PWM signal hasn't been detected for the past ~24mS
ISR (TCC5_OVF_vect){
     318:	1f 92       	push	r1
     31a:	0f 92       	push	r0
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	0f 92       	push	r0
     320:	11 24       	eor	r1, r1
     322:	8f 93       	push	r24
     324:	9f 93       	push	r25
     326:	ef 93       	push	r30
     328:	ff 93       	push	r31
	TCC5.INTFLAGS |= 0b1;  //Reset interrupt flag
     32a:	e0 e4       	ldi	r30, 0x40	; 64
     32c:	f8 e0       	ldi	r31, 0x08	; 8
     32e:	84 85       	ldd	r24, Z+12	; 0x0c
     330:	81 60       	ori	r24, 0x01	; 1
     332:	84 87       	std	Z+12, r24	; 0x0c
	
	PWMMeasuringStatus = NOT_MEASURING;		//Reset the "NOT MEASURING" flag
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	80 93 00 20 	sts	0x2000, r24
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;	//Reconfigure the port to wait for a high pulse
     33a:	80 93 74 06 	sts	0x0674, r24
	
	steeringPWMPeriod = 1500;				//Set the steering PWM period to a stable "standby position"
     33e:	8c ed       	ldi	r24, 0xDC	; 220
     340:	95 e0       	ldi	r25, 0x05	; 5
     342:	80 93 b2 20 	sts	0x20B2, r24
     346:	90 93 b3 20 	sts	0x20B3, r25
}
     34a:	ff 91       	pop	r31
     34c:	ef 91       	pop	r30
     34e:	9f 91       	pop	r25
     350:	8f 91       	pop	r24
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <__vector_38>:
/*
Compare vector A for the PWM generation module
This situation ------\______

*/
ISR (TCD5_CCA_vect){
     35c:	1f 92       	push	r1
     35e:	0f 92       	push	r0
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	0f 92       	push	r0
     364:	11 24       	eor	r1, r1
     366:	8f 93       	push	r24
	STEER_SIG_CLR();
     368:	80 e2       	ldi	r24, 0x20	; 32
     36a:	80 93 66 06 	sts	0x0666, r24
	//STATUS_SET();
}
     36e:	8f 91       	pop	r24
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <__vector_36>:
This situation: _____/-----

*/


ISR (TCD5_OVF_vect){
     37a:	1f 92       	push	r1
     37c:	0f 92       	push	r0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	8f 93       	push	r24
     386:	ef 93       	push	r30
     388:	ff 93       	push	r31
	STEER_SIG_SET();
     38a:	80 e2       	ldi	r24, 0x20	; 32
     38c:	80 93 65 06 	sts	0x0665, r24
	
	TCD5.INTFLAGS |= 0b1;
     390:	e0 e4       	ldi	r30, 0x40	; 64
     392:	f9 e0       	ldi	r31, 0x09	; 9
     394:	84 85       	ldd	r24, Z+12	; 0x0c
     396:	81 60       	ori	r24, 0x01	; 1
     398:	84 87       	std	Z+12, r24	; 0x0c
	
	TCD5.CNT = 0;
     39a:	10 a2       	std	Z+32, r1	; 0x20
     39c:	11 a2       	std	Z+33, r1	; 0x21
}
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	8f 91       	pop	r24
     3a4:	0f 90       	pop	r0
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	0f 90       	pop	r0
     3aa:	1f 90       	pop	r1
     3ac:	18 95       	reti

000003ae <__vector_12>:

//Handles compare vector for T/C 4
ISR (TCC4_OVF_vect){
     3ae:	1f 92       	push	r1
     3b0:	0f 92       	push	r0
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	0f 92       	push	r0
     3b6:	11 24       	eor	r1, r1
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	ef 93       	push	r30
     3cc:	ff 93       	push	r31
	++longCounter;
     3ce:	20 91 b4 20 	lds	r18, 0x20B4
     3d2:	30 91 b5 20 	lds	r19, 0x20B5
     3d6:	40 91 b6 20 	lds	r20, 0x20B6
     3da:	50 91 b7 20 	lds	r21, 0x20B7
     3de:	60 91 b8 20 	lds	r22, 0x20B8
     3e2:	70 91 b9 20 	lds	r23, 0x20B9
     3e6:	80 91 ba 20 	lds	r24, 0x20BA
     3ea:	90 91 bb 20 	lds	r25, 0x20BB
     3ee:	a1 e0       	ldi	r26, 0x01	; 1
     3f0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__adddi3_s8>
     3f4:	20 93 b4 20 	sts	0x20B4, r18
     3f8:	30 93 b5 20 	sts	0x20B5, r19
     3fc:	40 93 b6 20 	sts	0x20B6, r20
     400:	50 93 b7 20 	sts	0x20B7, r21
     404:	60 93 b8 20 	sts	0x20B8, r22
     408:	70 93 b9 20 	sts	0x20B9, r23
     40c:	80 93 ba 20 	sts	0x20BA, r24
     410:	90 93 bb 20 	sts	0x20BB, r25
	
	TCC4.INTFLAGS |= 0b1;  //Reset overflow interrupt
     414:	e0 e0       	ldi	r30, 0x00	; 0
     416:	f8 e0       	ldi	r31, 0x08	; 8
     418:	84 85       	ldd	r24, Z+12	; 0x0c
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	84 87       	std	Z+12, r24	; 0x0c
	
	broadcastStatus = 1;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	80 93 bc 20 	sts	0x20BC, r24
}
     424:	ff 91       	pop	r31
     426:	ef 91       	pop	r30
     428:	af 91       	pop	r26
     42a:	9f 91       	pop	r25
     42c:	8f 91       	pop	r24
     42e:	7f 91       	pop	r23
     430:	6f 91       	pop	r22
     432:	5f 91       	pop	r21
     434:	4f 91       	pop	r20
     436:	3f 91       	pop	r19
     438:	2f 91       	pop	r18
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <_Z12configureRTCv>:

/*
The real time clock is configured to handle XTend RSSI Interpret
*/
void configureRTC(){
	RTC.CTRL = RTC_CORREN_bm | RTC_PRESCALER_DIV1_gc;		//Enable the RTC correction process, and the RTC itself with no prescaler
     444:	e0 e0       	ldi	r30, 0x00	; 0
     446:	f4 e0       	ldi	r31, 0x04	; 4
     448:	89 e0       	ldi	r24, 0x09	; 9
     44a:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_COMPINTLVL_LO_gc | RTC_OVFINTLVL_LO_gc; //Enable the overflow and 
     44c:	85 e0       	ldi	r24, 0x05	; 5
     44e:	82 83       	std	Z+2, r24	; 0x02
	
    OSC.CTRL |= OSC_RC32KEN_bm;								//Enable the 32.768kHz internal oscillator
     450:	a0 e5       	ldi	r26, 0x50	; 80
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	8c 91       	ld	r24, X
     456:	84 60       	ori	r24, 0x04	; 4
     458:	8c 93       	st	X, r24
     45a:	8f e7       	ldi	r24, 0x7F	; 127
     45c:	9c e0       	ldi	r25, 0x0C	; 12
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <_Z12configureRTCv+0x1a>
     462:	00 c0       	rjmp	.+0      	; 0x464 <_Z12configureRTCv+0x20>
     464:	00 00       	nop
	
	_delay_us(400);											//Wait for the oscillator to stabalize.
	
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC32_gc;					//Set the RTC input as the 32.768kHz internal oscillator
     466:	a0 e4       	ldi	r26, 0x40	; 64
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	8c e0       	ldi	r24, 0x0C	; 12
     46c:	13 96       	adiw	r26, 0x03	; 3
     46e:	8c 93       	st	X, r24
     470:	13 97       	sbiw	r26, 0x03	; 3
	CLK.RTCCTRL |= CLK_RTCEN_bm;							//Enable the clock input
     472:	13 96       	adiw	r26, 0x03	; 3
     474:	8c 91       	ld	r24, X
     476:	13 97       	sbiw	r26, 0x03	; 3
     478:	81 60       	ori	r24, 0x01	; 1
     47a:	13 96       	adiw	r26, 0x03	; 3
     47c:	8c 93       	st	X, r24
	
	//Testing setup code
	RTC.COMP = 16384; //~1 second? Assuming 32.768 KHz
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e4       	ldi	r25, 0x40	; 64
     482:	84 87       	std	Z+12, r24	; 0x0c
     484:	95 87       	std	Z+13, r25	; 0x0d
	RTC.PER = 0xFF00;  //No tengo nuguien idea
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	9f ef       	ldi	r25, 0xFF	; 255
     48a:	82 87       	std	Z+10, r24	; 0x0a
     48c:	93 87       	std	Z+11, r25	; 0x0b
     48e:	08 95       	ret

00000490 <__vector_7>:

}

ISR(RTC_OVF_vect){
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
	
}
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti

000004a4 <__vector_8>:

ISR(RTC_COMP_vect){
     4a4:	1f 92       	push	r1
     4a6:	0f 92       	push	r0
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	0f 92       	push	r0
     4ac:	11 24       	eor	r1, r1
     4ae:	8f 93       	push	r24
     4b0:	ef 93       	push	r30
     4b2:	ff 93       	push	r31
	
	RTC.CNT = 0;
     4b4:	e0 e0       	ldi	r30, 0x00	; 0
     4b6:	f4 e0       	ldi	r31, 0x04	; 4
     4b8:	10 86       	std	Z+8, r1	; 0x08
     4ba:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTFLAGS = 0x02;
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	83 83       	std	Z+3, r24	; 0x03
	
	RSSI.countDifference = 0;
     4c0:	10 92 c1 20 	sts	0x20C1, r1
     4c4:	10 92 c2 20 	sts	0x20C2, r1
}
     4c8:	ff 91       	pop	r31
     4ca:	ef 91       	pop	r30
     4cc:	8f 91       	pop	r24
     4ce:	0f 90       	pop	r0
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	0f 90       	pop	r0
     4d4:	1f 90       	pop	r1
     4d6:	18 95       	reti

000004d8 <_Z12configureXCLv>:

void configureXCL(){
     4d8:	08 95       	ret

000004da <_Z19ReadCalibrationByteh>:
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     4da:	aa ec       	ldi	r26, 0xCA	; 202
     4dc:	b1 e0       	ldi	r27, 0x01	; 1
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     4e2:	e8 2f       	mov	r30, r24
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     4e8:	1c 92       	st	X, r1

	return( result );
}
     4ea:	08 95       	ret

000004ec <_Z13configureADCsv>:

#include "config.h"

extern RSSI_type RSSI;

void configureADCs(){
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
	// Batt Input Voltage
	// Halve Input
	//Set to single ended input
	//Set to 12-bit mode
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
     4f2:	d2 e0       	ldi	r29, 0x02	; 2
     4f4:	82 e1       	ldi	r24, 0x12	; 18
     4f6:	89 83       	std	Y+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
     4f8:	80 e2       	ldi	r24, 0x20	; 32
     4fa:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; //Disable events
     4fc:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
     4fe:	87 e0       	ldi	r24, 0x07	; 7
     500:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
     502:	80 e2       	ldi	r24, 0x20	; 32
     504:	0e 94 6d 02 	call	0x4da	; 0x4da <_Z19ReadCalibrationByteh>
     508:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
     50a:	81 e2       	ldi	r24, 0x21	; 33
     50c:	0e 94 6d 02 	call	0x4da	; 0x4da <_Z19ReadCalibrationByteh>
     510:	8d 87       	std	Y+13, r24	; 0x0d
     512:	8f e7       	ldi	r24, 0x7F	; 127
     514:	9c e0       	ldi	r25, 0x0C	; 12
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <_Z13configureADCsv+0x2a>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <_Z13configureADCsv+0x30>
     51c:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	88 a3       	std	Y+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
     522:	81 e4       	ldi	r24, 0x41	; 65
     524:	89 a3       	std	Y+33, r24	; 0x21
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
     526:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	88 83       	st	Y, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
	//ADCA.CTRLA |= ADC_CH8START_bm;
	*/	
}	
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <_Z23sampleTempSensorVoltagev>:




int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);//ADC_CH_MUXNEG0_bm);
     532:	e0 e0       	ldi	r30, 0x00	; 0
     534:	f2 e0       	ldi	r31, 0x02	; 2
     536:	81 e4       	ldi	r24, 0x41	; 65
     538:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     53a:	80 a1       	ldd	r24, Z+32	; 0x20
     53c:	80 68       	ori	r24, 0x80	; 128
     53e:	80 a3       	std	Z+32, r24	; 0x20
     540:	8f e7       	ldi	r24, 0x7F	; 127
     542:	9c e0       	ldi	r25, 0x0C	; 12
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <_Z23sampleTempSensorVoltagev+0x12>
     548:	00 c0       	rjmp	.+0      	; 0x54a <_Z23sampleTempSensorVoltagev+0x18>
     54a:	00 00       	nop
	
	_delay_us(400);
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 8)) != (1U << 8)); // (1U << n) where n is the adc channel, so zero for this one
	
	while(!(ADCA.INTFLAGS & (1 << 0)));
     54c:	86 81       	ldd	r24, Z+6	; 0x06
     54e:	80 ff       	sbrs	r24, 0
     550:	fd cf       	rjmp	.-6      	; 0x54c <_Z23sampleTempSensorVoltagev+0x1a>
	ADCA.INTFLAGS = (1 << 0);
     552:	e0 e0       	ldi	r30, 0x00	; 0
     554:	f2 e0       	ldi	r31, 0x02	; 2
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     55a:	84 a1       	ldd	r24, Z+36	; 0x24
     55c:	95 a1       	ldd	r25, Z+37	; 0x25
}
     55e:	08 95       	ret

00000560 <_Z20sampleBatteryVoltagev>:

int16_t sampleBatteryVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN9_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for batt voltage sense
     560:	e0 e0       	ldi	r30, 0x00	; 0
     562:	f2 e0       	ldi	r31, 0x02	; 2
     564:	89 e4       	ldi	r24, 0x49	; 73
     566:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     568:	80 a1       	ldd	r24, Z+32	; 0x20
     56a:	80 68       	ori	r24, 0x80	; 128
     56c:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
	//ADCA.INTFLAGS = ((1U << 0) << ADC_CH0IF_bp);
	while(!(ADCA.INTFLAGS & (1 << 0)));
     56e:	86 81       	ldd	r24, Z+6	; 0x06
     570:	80 ff       	sbrs	r24, 0
     572:	fd cf       	rjmp	.-6      	; 0x56e <_Z20sampleBatteryVoltagev+0xe>
	ADCA.INTFLAGS = (1 << 0);
     574:	e0 e0       	ldi	r30, 0x00	; 0
     576:	f2 e0       	ldi	r31, 0x02	; 2
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     57c:	84 a1       	ldd	r24, Z+36	; 0x24
     57e:	95 a1       	ldd	r25, Z+37	; 0x25
}
     580:	08 95       	ret

00000582 <_Z18getEBoxTemperaturev>:

double getEBoxTemperature(){
     582:	2f 92       	push	r2
     584:	3f 92       	push	r3
     586:	4f 92       	push	r4
     588:	5f 92       	push	r5
     58a:	6f 92       	push	r6
     58c:	7f 92       	push	r7
     58e:	8f 92       	push	r8
     590:	9f 92       	push	r9
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	0f 2e       	mov	r0, r31
     5a8:	f4 e6       	ldi	r31, 0x64	; 100
     5aa:	6f 2e       	mov	r6, r31
     5ac:	71 2c       	mov	r7, r1
     5ae:	f0 2d       	mov	r31, r0
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
     5b0:	41 2c       	mov	r4, r1
     5b2:	51 2c       	mov	r5, r1
     5b4:	81 2c       	mov	r8, r1
     5b6:	91 2c       	mov	r9, r1
     5b8:	d0 e0       	ldi	r29, 0x00	; 0
     5ba:	c0 e0       	ldi	r28, 0x00	; 0
     5bc:	21 2c       	mov	r2, r1
     5be:	31 2c       	mov	r3, r1
	for(int i = 0; i < avgVal; ++i){
		sum += sampleTempSensorVoltage();
     5c0:	0e 94 99 02 	call	0x532	; 0x532 <_Z23sampleTempSensorVoltagev>
     5c4:	b9 2e       	mov	r11, r25
     5c6:	a8 2e       	mov	r10, r24
     5c8:	19 2f       	mov	r17, r25
     5ca:	11 0f       	add	r17, r17
     5cc:	11 0b       	sbc	r17, r17
     5ce:	24 2d       	mov	r18, r4
     5d0:	35 2d       	mov	r19, r5
     5d2:	48 2d       	mov	r20, r8
     5d4:	59 2d       	mov	r21, r9
     5d6:	6d 2f       	mov	r22, r29
     5d8:	7c 2f       	mov	r23, r28
     5da:	82 2d       	mov	r24, r2
     5dc:	93 2d       	mov	r25, r3
     5de:	c1 2e       	mov	r12, r17
     5e0:	d1 2e       	mov	r13, r17
     5e2:	e1 2e       	mov	r14, r17
     5e4:	f1 2e       	mov	r15, r17
     5e6:	01 2f       	mov	r16, r17
     5e8:	0e 94 cb 07 	call	0xf96	; 0xf96 <__adddi3>
     5ec:	42 2e       	mov	r4, r18
     5ee:	53 2e       	mov	r5, r19
     5f0:	84 2e       	mov	r8, r20
     5f2:	95 2e       	mov	r9, r21
     5f4:	d6 2f       	mov	r29, r22
     5f6:	c7 2f       	mov	r28, r23
     5f8:	28 2e       	mov	r2, r24
     5fa:	39 2e       	mov	r3, r25
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	68 1a       	sub	r6, r24
     600:	71 08       	sbc	r7, r1
double getEBoxTemperature(){
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
	for(int i = 0; i < avgVal; ++i){
     602:	f1 f6       	brne	.-68     	; 0x5c0 <_Z18getEBoxTemperaturev+0x3e>
		sum += sampleTempSensorVoltage();
	}
	temperature = sum / avgVal;
     604:	0f 2e       	mov	r0, r31
     606:	f4 e6       	ldi	r31, 0x64	; 100
     608:	af 2e       	mov	r10, r31
     60a:	f0 2d       	mov	r31, r0
     60c:	b1 2c       	mov	r11, r1
     60e:	c1 2c       	mov	r12, r1
     610:	d1 2c       	mov	r13, r1
     612:	e1 2c       	mov	r14, r1
     614:	f1 2c       	mov	r15, r1
     616:	00 e0       	ldi	r16, 0x00	; 0
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	24 2d       	mov	r18, r4
     61c:	35 2d       	mov	r19, r5
     61e:	48 2d       	mov	r20, r8
     620:	59 2d       	mov	r21, r9
     622:	6d 2f       	mov	r22, r29
     624:	7c 2f       	mov	r23, r28
     626:	82 2d       	mov	r24, r2
     628:	93 2d       	mov	r25, r3
     62a:	0e 94 6e 07 	call	0xedc	; 0xedc <__udivdi3>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     62e:	62 2f       	mov	r22, r18
     630:	73 2f       	mov	r23, r19
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 03 06 	call	0xc06	; 0xc06 <__floatunsisf>
     63a:	29 e8       	ldi	r18, 0x89	; 137
     63c:	3d e0       	ldi	r19, 0x0D	; 13
     63e:	4d e9       	ldi	r20, 0x9D	; 157
     640:	5a e3       	ldi	r21, 0x3A	; 58
     642:	0e 94 91 06 	call	0xd22	; 0xd22 <__mulsf3>
     646:	24 e6       	ldi	r18, 0x64	; 100
     648:	37 e6       	ldi	r19, 0x67	; 103
     64a:	49 e1       	ldi	r20, 0x19	; 25
     64c:	5b e3       	ldi	r21, 0x3B	; 59
     64e:	0e 94 ef 04 	call	0x9de	; 0x9de <__addsf3>
	
	#ifdef TMP36
		temperatureFloat = 100.0 * temperatureVoltage - 50.0;
	#endif
	#ifdef TMP37
		temperatureFloat = 50.0 * temperatureVoltage;
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	48 e4       	ldi	r20, 0x48	; 72
     658:	52 e4       	ldi	r21, 0x42	; 66
     65a:	0e 94 91 06 	call	0xd22	; 0xd22 <__mulsf3>
	#endif
	
	return temperatureFloat;
}
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	df 90       	pop	r13
     66c:	cf 90       	pop	r12
     66e:	bf 90       	pop	r11
     670:	af 90       	pop	r10
     672:	9f 90       	pop	r9
     674:	8f 90       	pop	r8
     676:	7f 90       	pop	r7
     678:	6f 90       	pop	r6
     67a:	5f 90       	pop	r5
     67c:	4f 90       	pop	r4
     67e:	3f 90       	pop	r3
     680:	2f 90       	pop	r2
     682:	08 95       	ret

00000684 <_Z28getElectronicsBatteryVoltagev>:

double getElectronicsBatteryVoltage(){
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	c2 e3       	ldi	r28, 0x32	; 50
     692:	d0 e0       	ldi	r29, 0x00	; 0

	int avgVal = 50;
	uint32_t sum = 0;
     694:	c1 2c       	mov	r12, r1
     696:	d1 2c       	mov	r13, r1
     698:	76 01       	movw	r14, r12
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
     69a:	0e 94 b0 02 	call	0x560	; 0x560 <_Z20sampleBatteryVoltagev>
     69e:	09 2e       	mov	r0, r25
     6a0:	00 0c       	add	r0, r0
     6a2:	aa 0b       	sbc	r26, r26
     6a4:	bb 0b       	sbc	r27, r27
     6a6:	c8 0e       	add	r12, r24
     6a8:	d9 1e       	adc	r13, r25
     6aa:	ea 1e       	adc	r14, r26
     6ac:	fb 1e       	adc	r15, r27
     6ae:	21 97       	sbiw	r28, 0x01	; 1
double getElectronicsBatteryVoltage(){

	int avgVal = 50;
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
     6b0:	a1 f7       	brne	.-24     	; 0x69a <_Z28getElectronicsBatteryVoltagev+0x16>
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
     6b2:	c7 01       	movw	r24, r14
     6b4:	b6 01       	movw	r22, r12
     6b6:	22 e3       	ldi	r18, 0x32	; 50
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	0e 94 4a 07 	call	0xe94	; 0xe94 <__udivmodsi4>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     6c2:	b9 01       	movw	r22, r18
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 03 06 	call	0xc06	; 0xc06 <__floatunsisf>
     6cc:	29 e8       	ldi	r18, 0x89	; 137
     6ce:	3d e0       	ldi	r19, 0x0D	; 13
     6d0:	4d e9       	ldi	r20, 0x9D	; 157
     6d2:	5a e3       	ldi	r21, 0x3A	; 58
     6d4:	0e 94 91 06 	call	0xd22	; 0xd22 <__mulsf3>
     6d8:	24 e6       	ldi	r18, 0x64	; 100
     6da:	37 e6       	ldi	r19, 0x67	; 103
     6dc:	49 e1       	ldi	r20, 0x19	; 25
     6de:	5b e3       	ldi	r21, 0x3B	; 59
     6e0:	0e 94 ef 04 	call	0x9de	; 0x9de <__addsf3>
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
	double electronicsVoltage = ADCCountToVoltage(electronicsVoltageCount);
	double calculatedElectronicsVoltage =  (electronicsVoltage / .56) + (10.0 - .05);
     6e4:	29 e2       	ldi	r18, 0x29	; 41
     6e6:	3c e5       	ldi	r19, 0x5C	; 92
     6e8:	4f e0       	ldi	r20, 0x0F	; 15
     6ea:	5f e3       	ldi	r21, 0x3F	; 63
     6ec:	0e 94 5b 05 	call	0xab6	; 0xab6 <__divsf3>
     6f0:	23 e3       	ldi	r18, 0x33	; 51
     6f2:	33 e3       	ldi	r19, 0x33	; 51
     6f4:	4f e1       	ldi	r20, 0x1F	; 31
     6f6:	51 e4       	ldi	r21, 0x41	; 65
     6f8:	0e 94 ef 04 	call	0x9de	; 0x9de <__addsf3>

	return calculatedElectronicsVoltage;
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	df 90       	pop	r13
     706:	cf 90       	pop	r12
     708:	08 95       	ret

0000070a <main>:
volatile int toggle = 0;
volatile int temp = 1000;

int main(void)
{
	configureIO();
     70a:	0e 94 ac 00 	call	0x158	; 0x158 <_Z11configureIOv>
	configureExternalOscillator();
     70e:	0e 94 75 00 	call	0xea	; 0xea <_Z27configureExternalOscillatorv>
	configureUSART();					//Set up for 57600 Baud
     712:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_Z14configureUSARTv>
	configureTimerCounter();
     716:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z21configureTimerCounterv>
	configureADCs();
     71a:	0e 94 76 02 	call	0x4ec	; 0x4ec <_Z13configureADCsv>
	configureRTC();
     71e:	0e 94 22 02 	call	0x444	; 0x444 <_Z12configureRTCv>
	configureXCL();
     722:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12configureXCLv>
	
	LOW_LEVEL_INTERRUPTS_ENABLE();
     726:	e0 ea       	ldi	r30, 0xA0	; 160
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	82 81       	ldd	r24, Z+2	; 0x02
     72c:	81 60       	ori	r24, 0x01	; 1
     72e:	82 83       	std	Z+2, r24	; 0x02
	MED_LEVEL_INTERRUPTS_ENABLE();
     730:	82 81       	ldd	r24, Z+2	; 0x02
     732:	82 60       	ori	r24, 0x02	; 2
     734:	82 83       	std	Z+2, r24	; 0x02
	HIGH_LEVEL_INTERRUPTS_ENABLE();
     736:	82 81       	ldd	r24, Z+2	; 0x02
     738:	84 60       	ori	r24, 0x04	; 4
     73a:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable global interrupts
     73c:	78 94       	sei
	
	uint8_t receivedUSARTData;
	
	RSSI.measuring = NOT_MEASURING;
     73e:	ed eb       	ldi	r30, 0xBD	; 189
     740:	f0 e2       	ldi	r31, 0x20	; 32
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	81 83       	std	Z+1, r24	; 0x01
	RSSI.timeDifference = 0;
     746:	12 82       	std	Z+2, r1	; 0x02
     748:	13 82       	std	Z+3, r1	; 0x03
	RSSI.sampleCount = 0;
     74a:	16 82       	std	Z+6, r1	; 0x06
     74c:	17 82       	std	Z+7, r1	; 0x07

	//Init string with basic documentation
	SendStringPC((char *)"#[INIT ROSS PDB]\n\r");
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e2       	ldi	r25, 0x20	; 32
     752:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
	SendStringPC((char *)"#Firmware version ");
     756:	84 e1       	ldi	r24, 0x14	; 20
     758:	90 e2       	ldi	r25, 0x20	; 32
     75a:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
	SendStringPC((char *)FIRMWARE_VERSION_STR);
     75e:	87 e2       	ldi	r24, 0x27	; 39
     760:	90 e2       	ldi	r25, 0x20	; 32
     762:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
	SendStringPC((char *)"\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr \n\r");
     766:	8a e2       	ldi	r24, 0x2A	; 42
     768:	90 e2       	ldi	r25, 0x20	; 32
     76a:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     76e:	c0 ec       	ldi	r28, 0xC0	; 192
     770:	d8 e0       	ldi	r29, 0x08	; 8
			receivedUSARTData = USART_GetChar(&COMP_USART);
			if(receivedUSARTData == 'y')
				REAR_RELAY_SET();
			else if(receivedUSARTData == 'n')
				REAR_RELAY_CLR();
     772:	0f 2e       	mov	r0, r31
     774:	f0 e4       	ldi	r31, 0x40	; 64
     776:	ef 2e       	mov	r14, r31
     778:	f6 e0       	ldi	r31, 0x06	; 6
     77a:	ff 2e       	mov	r15, r31
     77c:	f0 2d       	mov	r31, r0
     77e:	68 94       	set
     780:	33 24       	eor	r3, r3
     782:	35 f8       	bld	r3, 5
		}		
		
		TC_PWM_SET(steeringPWMPeriod);
     784:	00 e4       	ldi	r16, 0x40	; 64
     786:	19 e0       	ldi	r17, 0x09	; 9
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
			broadcastStatus = 0;
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     788:	c1 2c       	mov	r12, r1
     78a:	68 94       	set
     78c:	dd 24       	eor	r13, r13
     78e:	d3 f8       	bld	r13, 3
			//Calculated desired output values
			double EBoxTemp = getEBoxTemperature();
			double electronicsBatteryVoltage = getElectronicsBatteryVoltage();
			double zero = 0.0;
			
			STATUS_TOGGLE();
     790:	22 24       	eor	r2, r2
     792:	23 94       	inc	r2
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
				TCC4.PER = TC_1024_100MS;  //100mS delay
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
     794:	0f 2e       	mov	r0, r31
     796:	f9 e0       	ldi	r31, 0x09	; 9
     798:	6f 2e       	mov	r6, r31
     79a:	fd e3       	ldi	r31, 0x3D	; 61
     79c:	7f 2e       	mov	r7, r31
     79e:	f0 2d       	mov	r31, r0
			//Newline
			SendStringPC((char *)"\n\r");
	
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
				TCC4.PER = TC_1024_100MS;  //100mS delay
     7a0:	0f 2e       	mov	r0, r31
     7a2:	f5 e3       	ldi	r31, 0x35	; 53
     7a4:	4f 2e       	mov	r4, r31
     7a6:	fc e0       	ldi	r31, 0x0C	; 12
     7a8:	5f 2e       	mov	r5, r31
     7aa:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ac:	8f e3       	ldi	r24, 0x3F	; 63
     7ae:	9f e1       	ldi	r25, 0x1F	; 31
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <main+0xa6>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <main+0xac>
     7b6:	00 00       	nop
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	88 23       	and	r24, r24
     7bc:	54 f4       	brge	.+20     	; 0x7d2 <main+0xc8>
			receivedUSARTData = USART_GetChar(&COMP_USART);
     7be:	88 81       	ld	r24, Y
			if(receivedUSARTData == 'y')
     7c0:	89 37       	cpi	r24, 0x79	; 121
     7c2:	19 f4       	brne	.+6      	; 0x7ca <main+0xc0>
				REAR_RELAY_SET();
     7c4:	f7 01       	movw	r30, r14
     7c6:	35 82       	std	Z+5, r3	; 0x05
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <main+0xc8>
			else if(receivedUSARTData == 'n')
     7ca:	8e 36       	cpi	r24, 0x6E	; 110
     7cc:	11 f4       	brne	.+4      	; 0x7d2 <main+0xc8>
				REAR_RELAY_CLR();
     7ce:	f7 01       	movw	r30, r14
     7d0:	36 82       	std	Z+6, r3	; 0x06
		}		
		
		TC_PWM_SET(steeringPWMPeriod);
     7d2:	60 91 b2 20 	lds	r22, 0x20B2
     7d6:	70 91 b3 20 	lds	r23, 0x20B3
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 03 06 	call	0xc06	; 0xc06 <__floatunsisf>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	5f e3       	ldi	r21, 0x3F	; 63
     7ea:	0e 94 91 06 	call	0xd22	; 0xd22 <__mulsf3>
     7ee:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixunssfsi>
     7f2:	f8 01       	movw	r30, r16
     7f4:	60 a7       	std	Z+40, r22	; 0x28
     7f6:	71 a7       	std	Z+41, r23	; 0x29
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
     7f8:	80 91 bc 20 	lds	r24, 0x20BC
     7fc:	88 23       	and	r24, r24
     7fe:	b1 f2       	breq	.-84     	; 0x7ac <main+0xa2>
			broadcastStatus = 0;
     800:	10 92 bc 20 	sts	0x20BC, r1
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     804:	f6 01       	movw	r30, r12
     806:	10 a2       	std	Z+32, r1	; 0x20
     808:	11 a2       	std	Z+33, r1	; 0x21
							//have a consistent report time. (We don't want to throw
							//out the accuracy of the TC)
			
			//Calculated desired output values
			double EBoxTemp = getEBoxTemperature();
     80a:	0e 94 c1 02 	call	0x582	; 0x582 <_Z18getEBoxTemperaturev>
     80e:	4b 01       	movw	r8, r22
     810:	5c 01       	movw	r10, r24
			double electronicsBatteryVoltage = getElectronicsBatteryVoltage();
     812:	0e 94 42 03 	call	0x684	; 0x684 <_Z28getElectronicsBatteryVoltagev>
			double zero = 0.0;
			
			STATUS_TOGGLE();
     816:	f7 01       	movw	r30, r14
     818:	24 81       	ldd	r18, Z+4	; 0x04
     81a:	20 fd       	sbrc	r18, 0
     81c:	02 c0       	rjmp	.+4      	; 0x822 <main+0x118>
     81e:	25 82       	std	Z+5, r2	; 0x05
     820:	02 c0       	rjmp	.+4      	; 0x826 <main+0x11c>
     822:	f7 01       	movw	r30, r14
     824:	26 82       	std	Z+6, r2	; 0x06
			
			//Actually output the desired values
			//Not the most elegant code in the world, but it works...
			
			//Send the battery voltage
			SendFloatPC(electronicsBatteryVoltage);
     826:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     82a:	83 e9       	ldi	r24, 0x93	; 147
     82c:	90 e2       	ldi	r25, 0x20	; 32
     82e:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
			//Send the rear battery voltage
			SendFloatPC(zero);
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	cb 01       	movw	r24, r22
     838:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     83c:	83 e9       	ldi	r24, 0x93	; 147
     83e:	90 e2       	ldi	r25, 0x20	; 32
     840:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
			//Send the EBox Temperature
			SendFloatPC(EBoxTemp);
     844:	c5 01       	movw	r24, r10
     846:	b4 01       	movw	r22, r8
     848:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     84c:	83 e9       	ldi	r24, 0x93	; 147
     84e:	90 e2       	ldi	r25, 0x20	; 32
     850:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
			//Send 5v_SYS Curr
			SendFloatPC(zero);
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	cb 01       	movw	r24, r22
     85a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     85e:	83 e9       	ldi	r24, 0x93	; 147
     860:	90 e2       	ldi	r25, 0x20	; 32
     862:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
			//Send 5v_Comp Curr
			SendFloatPC(zero);
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	cb 01       	movw	r24, r22
     86c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z11SendFloatPCd>
			//SendStringPC((char *)"|");
			
			
			SendStringPC((char *)"[PWM Interpret: ");
     870:	85 e9       	ldi	r24, 0x95	; 149
     872:	90 e2       	ldi	r25, 0x20	; 32
     874:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
			SendNumPC(steeringPWMPeriod);
     878:	80 91 b2 20 	lds	r24, 0x20B2
     87c:	90 91 b3 20 	lds	r25, 0x20B3
     880:	0e 94 66 04 	call	0x8cc	; 0x8cc <_Z9SendNumPCj>
			SendStringPC((char *)"] ");
     884:	86 ea       	ldi	r24, 0xA6	; 166
     886:	90 e2       	ldi	r25, 0x20	; 32
     888:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
			SendNumPC(RSSI.countDifference);
			
			*/
			
			//Newline
			SendStringPC((char *)"\n\r");
     88c:	80 e9       	ldi	r24, 0x90	; 144
     88e:	90 e2       	ldi	r25, 0x20	; 32
     890:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
	
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
     894:	f7 01       	movw	r30, r14
     896:	80 85       	ldd	r24, Z+8	; 0x08
     898:	83 fd       	sbrc	r24, 3
     89a:	04 c0       	rjmp	.+8      	; 0x8a4 <main+0x19a>
				TCC4.PER = TC_1024_100MS;  //100mS delay
     89c:	f6 01       	movw	r30, r12
     89e:	46 a2       	std	Z+38, r4	; 0x26
     8a0:	57 a2       	std	Z+39, r5	; 0x27
     8a2:	84 cf       	rjmp	.-248    	; 0x7ac <main+0xa2>
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
     8a4:	f6 01       	movw	r30, r12
     8a6:	66 a2       	std	Z+38, r6	; 0x26
     8a8:	77 a2       	std	Z+39, r7	; 0x27
     8aa:	80 cf       	rjmp	.-256    	; 0x7ac <main+0xa2>

000008ac <_Z12SendStringPCPc>:
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 81       	ld	r18, Z
     8b0:	22 23       	and	r18, r18
     8b2:	59 f0       	breq	.+22     	; 0x8ca <_Z12SendStringPCPc+0x1e>
     8b4:	dc 01       	movw	r26, r24
     8b6:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
     8b8:	e0 ec       	ldi	r30, 0xC0	; 192
     8ba:	f8 e0       	ldi	r31, 0x08	; 8
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	95 ff       	sbrs	r25, 5
     8c0:	fd cf       	rjmp	.-6      	; 0x8bc <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
     8c2:	20 83       	st	Z, r18
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     8c4:	2d 91       	ld	r18, X+
     8c6:	21 11       	cpse	r18, r1
     8c8:	f9 cf       	rjmp	.-14     	; 0x8bc <_Z12SendStringPCPc+0x10>
     8ca:	08 95       	ret

000008cc <_Z9SendNumPCj>:
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
		USART_PutChar(&COMP_USART, stufftosend[i]);
	}
}

void SendNumPC(uint16_t numToSend){
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	64 97       	sbiw	r28, 0x14	; 20
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8da:	4a e0       	ldi	r20, 0x0A	; 10
     8dc:	be 01       	movw	r22, r28
     8de:	6f 5f       	subi	r22, 0xFF	; 255
     8e0:	7f 4f       	sbci	r23, 0xFF	; 255
     8e2:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
     8e6:	ce 01       	movw	r24, r28
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
}
     8ee:	64 96       	adiw	r28, 0x14	; 20
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <_Z11SendFloatPCd>:

void SendFloatPC(double numToSend){
     8fa:	8f 92       	push	r8
     8fc:	9f 92       	push	r9
     8fe:	af 92       	push	r10
     900:	bf 92       	push	r11
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	c4 56       	subi	r28, 0x64	; 100
     918:	d1 09       	sbc	r29, r1
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	4b 01       	movw	r8, r22
     920:	5c 01       	movw	r10, r24
	char buffer[100];
	
	int d1 = numToSend;
     922:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fixsfsi>
     926:	6b 01       	movw	r12, r22
     928:	7c 01       	movw	r14, r24
	float f2 = numToSend - d1;
     92a:	07 2e       	mov	r0, r23
     92c:	00 0c       	add	r0, r0
     92e:	88 0b       	sbc	r24, r24
     930:	99 0b       	sbc	r25, r25
     932:	0e 94 05 06 	call	0xc0a	; 0xc0a <__floatsisf>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	c5 01       	movw	r24, r10
     93c:	b4 01       	movw	r22, r8
     93e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__subsf3>
	int d2 = trunc(f2 * 10000);
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e4       	ldi	r19, 0x40	; 64
     946:	4c e1       	ldi	r20, 0x1C	; 28
     948:	56 e4       	ldi	r21, 0x46	; 70
     94a:	0e 94 91 06 	call	0xd22	; 0xd22 <__mulsf3>
     94e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <trunc>
     952:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fixsfsi>
	
	sprintf(buffer, "%d.%04d", d1, abs(d2));
     956:	9b 01       	movw	r18, r22
     958:	77 23       	and	r23, r23
     95a:	24 f4       	brge	.+8      	; 0x964 <_Z11SendFloatPCd+0x6a>
     95c:	22 27       	eor	r18, r18
     95e:	33 27       	eor	r19, r19
     960:	26 1b       	sub	r18, r22
     962:	37 0b       	sbc	r19, r23
     964:	3f 93       	push	r19
     966:	2f 93       	push	r18
     968:	df 92       	push	r13
     96a:	cf 92       	push	r12
     96c:	89 ea       	ldi	r24, 0xA9	; 169
     96e:	90 e2       	ldi	r25, 0x20	; 32
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	8e 01       	movw	r16, r28
     976:	0f 5f       	subi	r16, 0xFF	; 255
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	1f 93       	push	r17
     97c:	0f 93       	push	r16
     97e:	0e 94 05 08 	call	0x100a	; 0x100a <sprintf>
	
	//sprintf(buffer, "%f", numToSend);
	SendStringPC(buffer);
     982:	c8 01       	movw	r24, r16
     984:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12SendStringPCPc>
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	de bf       	out	0x3e, r29	; 62
}
     98c:	cc 59       	subi	r28, 0x9C	; 156
     98e:	df 4f       	sbci	r29, 0xFF	; 255
     990:	cd bf       	out	0x3d, r28	; 61
     992:	de bf       	out	0x3e, r29	; 62
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	cf 90       	pop	r12
     9a4:	bf 90       	pop	r11
     9a6:	af 90       	pop	r10
     9a8:	9f 90       	pop	r9
     9aa:	8f 90       	pop	r8
     9ac:	08 95       	ret

000009ae <_Z14configureUSARTv>:

void configureUSART(void){
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
     9ae:	e0 e4       	ldi	r30, 0x40	; 64
     9b0:	f6 e0       	ldi	r31, 0x06	; 6
     9b2:	80 e8       	ldi	r24, 0x80	; 128
     9b4:	81 83       	std	Z+1, r24	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	82 83       	std	Z+2, r24	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
     9ba:	86 85       	ldd	r24, Z+14	; 0x0e
     9bc:	80 61       	ori	r24, 0x10	; 16
     9be:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     9c0:	e0 ec       	ldi	r30, 0xC0	; 192
     9c2:	f8 e0       	ldi	r31, 0x08	; 8
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	84 83       	std	Z+4, r24	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
     9c8:	82 e2       	ldi	r24, 0x22	; 34
     9ca:	86 83       	std	Z+6, r24	; 0x06
     9cc:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
     9ce:	83 81       	ldd	r24, Z+3	; 0x03
     9d0:	80 61       	ori	r24, 0x10	; 16
     9d2:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
     9d4:	83 81       	ldd	r24, Z+3	; 0x03
     9d6:	88 60       	ori	r24, 0x08	; 8
     9d8:	83 83       	std	Z+3, r24	; 0x03
     9da:	08 95       	ret

000009dc <__subsf3>:
     9dc:	50 58       	subi	r21, 0x80	; 128

000009de <__addsf3>:
     9de:	bb 27       	eor	r27, r27
     9e0:	aa 27       	eor	r26, r26
     9e2:	0e 94 06 05 	call	0xa0c	; 0xa0c <__addsf3x>
     9e6:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_round>
     9ea:	0e 94 49 06 	call	0xc92	; 0xc92 <__fp_pscA>
     9ee:	38 f0       	brcs	.+14     	; 0x9fe <__addsf3+0x20>
     9f0:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_pscB>
     9f4:	20 f0       	brcs	.+8      	; 0x9fe <__addsf3+0x20>
     9f6:	39 f4       	brne	.+14     	; 0xa06 <__addsf3+0x28>
     9f8:	9f 3f       	cpi	r25, 0xFF	; 255
     9fa:	19 f4       	brne	.+6      	; 0xa02 <__addsf3+0x24>
     9fc:	26 f4       	brtc	.+8      	; 0xa06 <__addsf3+0x28>
     9fe:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_nan>
     a02:	0e f4       	brtc	.+2      	; 0xa06 <__addsf3+0x28>
     a04:	e0 95       	com	r30
     a06:	e7 fb       	bst	r30, 7
     a08:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_inf>

00000a0c <__addsf3x>:
     a0c:	e9 2f       	mov	r30, r25
     a0e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fp_split3>
     a12:	58 f3       	brcs	.-42     	; 0x9ea <__addsf3+0xc>
     a14:	ba 17       	cp	r27, r26
     a16:	62 07       	cpc	r22, r18
     a18:	73 07       	cpc	r23, r19
     a1a:	84 07       	cpc	r24, r20
     a1c:	95 07       	cpc	r25, r21
     a1e:	20 f0       	brcs	.+8      	; 0xa28 <__addsf3x+0x1c>
     a20:	79 f4       	brne	.+30     	; 0xa40 <__addsf3x+0x34>
     a22:	a6 f5       	brtc	.+104    	; 0xa8c <__addsf3x+0x80>
     a24:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_zero>
     a28:	0e f4       	brtc	.+2      	; 0xa2c <__addsf3x+0x20>
     a2a:	e0 95       	com	r30
     a2c:	0b 2e       	mov	r0, r27
     a2e:	ba 2f       	mov	r27, r26
     a30:	a0 2d       	mov	r26, r0
     a32:	0b 01       	movw	r0, r22
     a34:	b9 01       	movw	r22, r18
     a36:	90 01       	movw	r18, r0
     a38:	0c 01       	movw	r0, r24
     a3a:	ca 01       	movw	r24, r20
     a3c:	a0 01       	movw	r20, r0
     a3e:	11 24       	eor	r1, r1
     a40:	ff 27       	eor	r31, r31
     a42:	59 1b       	sub	r21, r25
     a44:	99 f0       	breq	.+38     	; 0xa6c <__addsf3x+0x60>
     a46:	59 3f       	cpi	r21, 0xF9	; 249
     a48:	50 f4       	brcc	.+20     	; 0xa5e <__addsf3x+0x52>
     a4a:	50 3e       	cpi	r21, 0xE0	; 224
     a4c:	68 f1       	brcs	.+90     	; 0xaa8 <__addsf3x+0x9c>
     a4e:	1a 16       	cp	r1, r26
     a50:	f0 40       	sbci	r31, 0x00	; 0
     a52:	a2 2f       	mov	r26, r18
     a54:	23 2f       	mov	r18, r19
     a56:	34 2f       	mov	r19, r20
     a58:	44 27       	eor	r20, r20
     a5a:	58 5f       	subi	r21, 0xF8	; 248
     a5c:	f3 cf       	rjmp	.-26     	; 0xa44 <__addsf3x+0x38>
     a5e:	46 95       	lsr	r20
     a60:	37 95       	ror	r19
     a62:	27 95       	ror	r18
     a64:	a7 95       	ror	r26
     a66:	f0 40       	sbci	r31, 0x00	; 0
     a68:	53 95       	inc	r21
     a6a:	c9 f7       	brne	.-14     	; 0xa5e <__addsf3x+0x52>
     a6c:	7e f4       	brtc	.+30     	; 0xa8c <__addsf3x+0x80>
     a6e:	1f 16       	cp	r1, r31
     a70:	ba 0b       	sbc	r27, r26
     a72:	62 0b       	sbc	r22, r18
     a74:	73 0b       	sbc	r23, r19
     a76:	84 0b       	sbc	r24, r20
     a78:	ba f0       	brmi	.+46     	; 0xaa8 <__addsf3x+0x9c>
     a7a:	91 50       	subi	r25, 0x01	; 1
     a7c:	a1 f0       	breq	.+40     	; 0xaa6 <__addsf3x+0x9a>
     a7e:	ff 0f       	add	r31, r31
     a80:	bb 1f       	adc	r27, r27
     a82:	66 1f       	adc	r22, r22
     a84:	77 1f       	adc	r23, r23
     a86:	88 1f       	adc	r24, r24
     a88:	c2 f7       	brpl	.-16     	; 0xa7a <__addsf3x+0x6e>
     a8a:	0e c0       	rjmp	.+28     	; 0xaa8 <__addsf3x+0x9c>
     a8c:	ba 0f       	add	r27, r26
     a8e:	62 1f       	adc	r22, r18
     a90:	73 1f       	adc	r23, r19
     a92:	84 1f       	adc	r24, r20
     a94:	48 f4       	brcc	.+18     	; 0xaa8 <__addsf3x+0x9c>
     a96:	87 95       	ror	r24
     a98:	77 95       	ror	r23
     a9a:	67 95       	ror	r22
     a9c:	b7 95       	ror	r27
     a9e:	f7 95       	ror	r31
     aa0:	9e 3f       	cpi	r25, 0xFE	; 254
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <__addsf3x+0x9a>
     aa4:	b0 cf       	rjmp	.-160    	; 0xa06 <__addsf3+0x28>
     aa6:	93 95       	inc	r25
     aa8:	88 0f       	add	r24, r24
     aaa:	08 f0       	brcs	.+2      	; 0xaae <__addsf3x+0xa2>
     aac:	99 27       	eor	r25, r25
     aae:	ee 0f       	add	r30, r30
     ab0:	97 95       	ror	r25
     ab2:	87 95       	ror	r24
     ab4:	08 95       	ret

00000ab6 <__divsf3>:
     ab6:	0e 94 6f 05 	call	0xade	; 0xade <__divsf3x>
     aba:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_round>
     abe:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_pscB>
     ac2:	58 f0       	brcs	.+22     	; 0xada <__divsf3+0x24>
     ac4:	0e 94 49 06 	call	0xc92	; 0xc92 <__fp_pscA>
     ac8:	40 f0       	brcs	.+16     	; 0xada <__divsf3+0x24>
     aca:	29 f4       	brne	.+10     	; 0xad6 <__divsf3+0x20>
     acc:	5f 3f       	cpi	r21, 0xFF	; 255
     ace:	29 f0       	breq	.+10     	; 0xada <__divsf3+0x24>
     ad0:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_inf>
     ad4:	51 11       	cpse	r21, r1
     ad6:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_szero>
     ada:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_nan>

00000ade <__divsf3x>:
     ade:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fp_split3>
     ae2:	68 f3       	brcs	.-38     	; 0xabe <__divsf3+0x8>

00000ae4 <__divsf3_pse>:
     ae4:	99 23       	and	r25, r25
     ae6:	b1 f3       	breq	.-20     	; 0xad4 <__divsf3+0x1e>
     ae8:	55 23       	and	r21, r21
     aea:	91 f3       	breq	.-28     	; 0xad0 <__divsf3+0x1a>
     aec:	95 1b       	sub	r25, r21
     aee:	55 0b       	sbc	r21, r21
     af0:	bb 27       	eor	r27, r27
     af2:	aa 27       	eor	r26, r26
     af4:	62 17       	cp	r22, r18
     af6:	73 07       	cpc	r23, r19
     af8:	84 07       	cpc	r24, r20
     afa:	38 f0       	brcs	.+14     	; 0xb0a <__divsf3_pse+0x26>
     afc:	9f 5f       	subi	r25, 0xFF	; 255
     afe:	5f 4f       	sbci	r21, 0xFF	; 255
     b00:	22 0f       	add	r18, r18
     b02:	33 1f       	adc	r19, r19
     b04:	44 1f       	adc	r20, r20
     b06:	aa 1f       	adc	r26, r26
     b08:	a9 f3       	breq	.-22     	; 0xaf4 <__divsf3_pse+0x10>
     b0a:	35 d0       	rcall	.+106    	; 0xb76 <__divsf3_pse+0x92>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	3a f0       	brmi	.+14     	; 0xb1e <__divsf3_pse+0x3a>
     b10:	e0 e8       	ldi	r30, 0x80	; 128
     b12:	32 d0       	rcall	.+100    	; 0xb78 <__divsf3_pse+0x94>
     b14:	91 50       	subi	r25, 0x01	; 1
     b16:	50 40       	sbci	r21, 0x00	; 0
     b18:	e6 95       	lsr	r30
     b1a:	00 1c       	adc	r0, r0
     b1c:	ca f7       	brpl	.-14     	; 0xb10 <__divsf3_pse+0x2c>
     b1e:	2b d0       	rcall	.+86     	; 0xb76 <__divsf3_pse+0x92>
     b20:	fe 2f       	mov	r31, r30
     b22:	29 d0       	rcall	.+82     	; 0xb76 <__divsf3_pse+0x92>
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	88 1f       	adc	r24, r24
     b2a:	bb 1f       	adc	r27, r27
     b2c:	26 17       	cp	r18, r22
     b2e:	37 07       	cpc	r19, r23
     b30:	48 07       	cpc	r20, r24
     b32:	ab 07       	cpc	r26, r27
     b34:	b0 e8       	ldi	r27, 0x80	; 128
     b36:	09 f0       	breq	.+2      	; 0xb3a <__divsf3_pse+0x56>
     b38:	bb 0b       	sbc	r27, r27
     b3a:	80 2d       	mov	r24, r0
     b3c:	bf 01       	movw	r22, r30
     b3e:	ff 27       	eor	r31, r31
     b40:	93 58       	subi	r25, 0x83	; 131
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	3a f0       	brmi	.+14     	; 0xb54 <__divsf3_pse+0x70>
     b46:	9e 3f       	cpi	r25, 0xFE	; 254
     b48:	51 05       	cpc	r21, r1
     b4a:	78 f0       	brcs	.+30     	; 0xb6a <__divsf3_pse+0x86>
     b4c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_inf>
     b50:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_szero>
     b54:	5f 3f       	cpi	r21, 0xFF	; 255
     b56:	e4 f3       	brlt	.-8      	; 0xb50 <__divsf3_pse+0x6c>
     b58:	98 3e       	cpi	r25, 0xE8	; 232
     b5a:	d4 f3       	brlt	.-12     	; 0xb50 <__divsf3_pse+0x6c>
     b5c:	86 95       	lsr	r24
     b5e:	77 95       	ror	r23
     b60:	67 95       	ror	r22
     b62:	b7 95       	ror	r27
     b64:	f7 95       	ror	r31
     b66:	9f 5f       	subi	r25, 0xFF	; 255
     b68:	c9 f7       	brne	.-14     	; 0xb5c <__divsf3_pse+0x78>
     b6a:	88 0f       	add	r24, r24
     b6c:	91 1d       	adc	r25, r1
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	97 f9       	bld	r25, 7
     b74:	08 95       	ret
     b76:	e1 e0       	ldi	r30, 0x01	; 1
     b78:	66 0f       	add	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	88 1f       	adc	r24, r24
     b7e:	bb 1f       	adc	r27, r27
     b80:	62 17       	cp	r22, r18
     b82:	73 07       	cpc	r23, r19
     b84:	84 07       	cpc	r24, r20
     b86:	ba 07       	cpc	r27, r26
     b88:	20 f0       	brcs	.+8      	; 0xb92 <__divsf3_pse+0xae>
     b8a:	62 1b       	sub	r22, r18
     b8c:	73 0b       	sbc	r23, r19
     b8e:	84 0b       	sbc	r24, r20
     b90:	ba 0b       	sbc	r27, r26
     b92:	ee 1f       	adc	r30, r30
     b94:	88 f7       	brcc	.-30     	; 0xb78 <__divsf3_pse+0x94>
     b96:	e0 95       	com	r30
     b98:	08 95       	ret

00000b9a <__fixsfsi>:
     b9a:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixunssfsi>
     b9e:	68 94       	set
     ba0:	b1 11       	cpse	r27, r1
     ba2:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_szero>
     ba6:	08 95       	ret

00000ba8 <__fixunssfsi>:
     ba8:	0e 94 70 06 	call	0xce0	; 0xce0 <__fp_splitA>
     bac:	88 f0       	brcs	.+34     	; 0xbd0 <__fixunssfsi+0x28>
     bae:	9f 57       	subi	r25, 0x7F	; 127
     bb0:	98 f0       	brcs	.+38     	; 0xbd8 <__fixunssfsi+0x30>
     bb2:	b9 2f       	mov	r27, r25
     bb4:	99 27       	eor	r25, r25
     bb6:	b7 51       	subi	r27, 0x17	; 23
     bb8:	b0 f0       	brcs	.+44     	; 0xbe6 <__fixunssfsi+0x3e>
     bba:	e1 f0       	breq	.+56     	; 0xbf4 <__fixunssfsi+0x4c>
     bbc:	66 0f       	add	r22, r22
     bbe:	77 1f       	adc	r23, r23
     bc0:	88 1f       	adc	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	1a f0       	brmi	.+6      	; 0xbcc <__fixunssfsi+0x24>
     bc6:	ba 95       	dec	r27
     bc8:	c9 f7       	brne	.-14     	; 0xbbc <__fixunssfsi+0x14>
     bca:	14 c0       	rjmp	.+40     	; 0xbf4 <__fixunssfsi+0x4c>
     bcc:	b1 30       	cpi	r27, 0x01	; 1
     bce:	91 f0       	breq	.+36     	; 0xbf4 <__fixunssfsi+0x4c>
     bd0:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_zero>
     bd4:	b1 e0       	ldi	r27, 0x01	; 1
     bd6:	08 95       	ret
     bd8:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_zero>
     bdc:	67 2f       	mov	r22, r23
     bde:	78 2f       	mov	r23, r24
     be0:	88 27       	eor	r24, r24
     be2:	b8 5f       	subi	r27, 0xF8	; 248
     be4:	39 f0       	breq	.+14     	; 0xbf4 <__fixunssfsi+0x4c>
     be6:	b9 3f       	cpi	r27, 0xF9	; 249
     be8:	cc f3       	brlt	.-14     	; 0xbdc <__fixunssfsi+0x34>
     bea:	86 95       	lsr	r24
     bec:	77 95       	ror	r23
     bee:	67 95       	ror	r22
     bf0:	b3 95       	inc	r27
     bf2:	d9 f7       	brne	.-10     	; 0xbea <__fixunssfsi+0x42>
     bf4:	3e f4       	brtc	.+14     	; 0xc04 <__fixunssfsi+0x5c>
     bf6:	90 95       	com	r25
     bf8:	80 95       	com	r24
     bfa:	70 95       	com	r23
     bfc:	61 95       	neg	r22
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	8f 4f       	sbci	r24, 0xFF	; 255
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	08 95       	ret

00000c06 <__floatunsisf>:
     c06:	e8 94       	clt
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <__floatsisf+0x12>

00000c0a <__floatsisf>:
     c0a:	97 fb       	bst	r25, 7
     c0c:	3e f4       	brtc	.+14     	; 0xc1c <__floatsisf+0x12>
     c0e:	90 95       	com	r25
     c10:	80 95       	com	r24
     c12:	70 95       	com	r23
     c14:	61 95       	neg	r22
     c16:	7f 4f       	sbci	r23, 0xFF	; 255
     c18:	8f 4f       	sbci	r24, 0xFF	; 255
     c1a:	9f 4f       	sbci	r25, 0xFF	; 255
     c1c:	99 23       	and	r25, r25
     c1e:	a9 f0       	breq	.+42     	; 0xc4a <__floatsisf+0x40>
     c20:	f9 2f       	mov	r31, r25
     c22:	96 e9       	ldi	r25, 0x96	; 150
     c24:	bb 27       	eor	r27, r27
     c26:	93 95       	inc	r25
     c28:	f6 95       	lsr	r31
     c2a:	87 95       	ror	r24
     c2c:	77 95       	ror	r23
     c2e:	67 95       	ror	r22
     c30:	b7 95       	ror	r27
     c32:	f1 11       	cpse	r31, r1
     c34:	f8 cf       	rjmp	.-16     	; 0xc26 <__floatsisf+0x1c>
     c36:	fa f4       	brpl	.+62     	; 0xc76 <__floatsisf+0x6c>
     c38:	bb 0f       	add	r27, r27
     c3a:	11 f4       	brne	.+4      	; 0xc40 <__floatsisf+0x36>
     c3c:	60 ff       	sbrs	r22, 0
     c3e:	1b c0       	rjmp	.+54     	; 0xc76 <__floatsisf+0x6c>
     c40:	6f 5f       	subi	r22, 0xFF	; 255
     c42:	7f 4f       	sbci	r23, 0xFF	; 255
     c44:	8f 4f       	sbci	r24, 0xFF	; 255
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
     c48:	16 c0       	rjmp	.+44     	; 0xc76 <__floatsisf+0x6c>
     c4a:	88 23       	and	r24, r24
     c4c:	11 f0       	breq	.+4      	; 0xc52 <__floatsisf+0x48>
     c4e:	96 e9       	ldi	r25, 0x96	; 150
     c50:	11 c0       	rjmp	.+34     	; 0xc74 <__floatsisf+0x6a>
     c52:	77 23       	and	r23, r23
     c54:	21 f0       	breq	.+8      	; 0xc5e <__floatsisf+0x54>
     c56:	9e e8       	ldi	r25, 0x8E	; 142
     c58:	87 2f       	mov	r24, r23
     c5a:	76 2f       	mov	r23, r22
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <__floatsisf+0x5e>
     c5e:	66 23       	and	r22, r22
     c60:	71 f0       	breq	.+28     	; 0xc7e <__floatsisf+0x74>
     c62:	96 e8       	ldi	r25, 0x86	; 134
     c64:	86 2f       	mov	r24, r22
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	2a f0       	brmi	.+10     	; 0xc76 <__floatsisf+0x6c>
     c6c:	9a 95       	dec	r25
     c6e:	66 0f       	add	r22, r22
     c70:	77 1f       	adc	r23, r23
     c72:	88 1f       	adc	r24, r24
     c74:	da f7       	brpl	.-10     	; 0xc6c <__floatsisf+0x62>
     c76:	88 0f       	add	r24, r24
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	97 f9       	bld	r25, 7
     c7e:	08 95       	ret

00000c80 <__fp_inf>:
     c80:	97 f9       	bld	r25, 7
     c82:	9f 67       	ori	r25, 0x7F	; 127
     c84:	80 e8       	ldi	r24, 0x80	; 128
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	08 95       	ret

00000c8c <__fp_nan>:
     c8c:	9f ef       	ldi	r25, 0xFF	; 255
     c8e:	80 ec       	ldi	r24, 0xC0	; 192
     c90:	08 95       	ret

00000c92 <__fp_pscA>:
     c92:	00 24       	eor	r0, r0
     c94:	0a 94       	dec	r0
     c96:	16 16       	cp	r1, r22
     c98:	17 06       	cpc	r1, r23
     c9a:	18 06       	cpc	r1, r24
     c9c:	09 06       	cpc	r0, r25
     c9e:	08 95       	ret

00000ca0 <__fp_pscB>:
     ca0:	00 24       	eor	r0, r0
     ca2:	0a 94       	dec	r0
     ca4:	12 16       	cp	r1, r18
     ca6:	13 06       	cpc	r1, r19
     ca8:	14 06       	cpc	r1, r20
     caa:	05 06       	cpc	r0, r21
     cac:	08 95       	ret

00000cae <__fp_round>:
     cae:	09 2e       	mov	r0, r25
     cb0:	03 94       	inc	r0
     cb2:	00 0c       	add	r0, r0
     cb4:	11 f4       	brne	.+4      	; 0xcba <__fp_round+0xc>
     cb6:	88 23       	and	r24, r24
     cb8:	52 f0       	brmi	.+20     	; 0xcce <__fp_round+0x20>
     cba:	bb 0f       	add	r27, r27
     cbc:	40 f4       	brcc	.+16     	; 0xcce <__fp_round+0x20>
     cbe:	bf 2b       	or	r27, r31
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <__fp_round+0x18>
     cc2:	60 ff       	sbrs	r22, 0
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <__fp_round+0x20>
     cc6:	6f 5f       	subi	r22, 0xFF	; 255
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255
     cca:	8f 4f       	sbci	r24, 0xFF	; 255
     ccc:	9f 4f       	sbci	r25, 0xFF	; 255
     cce:	08 95       	ret

00000cd0 <__fp_split3>:
     cd0:	57 fd       	sbrc	r21, 7
     cd2:	90 58       	subi	r25, 0x80	; 128
     cd4:	44 0f       	add	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	59 f0       	breq	.+22     	; 0xcf0 <__fp_splitA+0x10>
     cda:	5f 3f       	cpi	r21, 0xFF	; 255
     cdc:	71 f0       	breq	.+28     	; 0xcfa <__fp_splitA+0x1a>
     cde:	47 95       	ror	r20

00000ce0 <__fp_splitA>:
     ce0:	88 0f       	add	r24, r24
     ce2:	97 fb       	bst	r25, 7
     ce4:	99 1f       	adc	r25, r25
     ce6:	61 f0       	breq	.+24     	; 0xd00 <__fp_splitA+0x20>
     ce8:	9f 3f       	cpi	r25, 0xFF	; 255
     cea:	79 f0       	breq	.+30     	; 0xd0a <__fp_splitA+0x2a>
     cec:	87 95       	ror	r24
     cee:	08 95       	ret
     cf0:	12 16       	cp	r1, r18
     cf2:	13 06       	cpc	r1, r19
     cf4:	14 06       	cpc	r1, r20
     cf6:	55 1f       	adc	r21, r21
     cf8:	f2 cf       	rjmp	.-28     	; 0xcde <__fp_split3+0xe>
     cfa:	46 95       	lsr	r20
     cfc:	f1 df       	rcall	.-30     	; 0xce0 <__fp_splitA>
     cfe:	08 c0       	rjmp	.+16     	; 0xd10 <__fp_splitA+0x30>
     d00:	16 16       	cp	r1, r22
     d02:	17 06       	cpc	r1, r23
     d04:	18 06       	cpc	r1, r24
     d06:	99 1f       	adc	r25, r25
     d08:	f1 cf       	rjmp	.-30     	; 0xcec <__fp_splitA+0xc>
     d0a:	86 95       	lsr	r24
     d0c:	71 05       	cpc	r23, r1
     d0e:	61 05       	cpc	r22, r1
     d10:	08 94       	sec
     d12:	08 95       	ret

00000d14 <__fp_zero>:
     d14:	e8 94       	clt

00000d16 <__fp_szero>:
     d16:	bb 27       	eor	r27, r27
     d18:	66 27       	eor	r22, r22
     d1a:	77 27       	eor	r23, r23
     d1c:	cb 01       	movw	r24, r22
     d1e:	97 f9       	bld	r25, 7
     d20:	08 95       	ret

00000d22 <__mulsf3>:
     d22:	0e 94 a4 06 	call	0xd48	; 0xd48 <__mulsf3x>
     d26:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_round>
     d2a:	0e 94 49 06 	call	0xc92	; 0xc92 <__fp_pscA>
     d2e:	38 f0       	brcs	.+14     	; 0xd3e <__mulsf3+0x1c>
     d30:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_pscB>
     d34:	20 f0       	brcs	.+8      	; 0xd3e <__mulsf3+0x1c>
     d36:	95 23       	and	r25, r21
     d38:	11 f0       	breq	.+4      	; 0xd3e <__mulsf3+0x1c>
     d3a:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_inf>
     d3e:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_nan>
     d42:	11 24       	eor	r1, r1
     d44:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_szero>

00000d48 <__mulsf3x>:
     d48:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fp_split3>
     d4c:	70 f3       	brcs	.-36     	; 0xd2a <__mulsf3+0x8>

00000d4e <__mulsf3_pse>:
     d4e:	95 9f       	mul	r25, r21
     d50:	c1 f3       	breq	.-16     	; 0xd42 <__mulsf3+0x20>
     d52:	95 0f       	add	r25, r21
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	55 1f       	adc	r21, r21
     d58:	62 9f       	mul	r22, r18
     d5a:	f0 01       	movw	r30, r0
     d5c:	72 9f       	mul	r23, r18
     d5e:	bb 27       	eor	r27, r27
     d60:	f0 0d       	add	r31, r0
     d62:	b1 1d       	adc	r27, r1
     d64:	63 9f       	mul	r22, r19
     d66:	aa 27       	eor	r26, r26
     d68:	f0 0d       	add	r31, r0
     d6a:	b1 1d       	adc	r27, r1
     d6c:	aa 1f       	adc	r26, r26
     d6e:	64 9f       	mul	r22, r20
     d70:	66 27       	eor	r22, r22
     d72:	b0 0d       	add	r27, r0
     d74:	a1 1d       	adc	r26, r1
     d76:	66 1f       	adc	r22, r22
     d78:	82 9f       	mul	r24, r18
     d7a:	22 27       	eor	r18, r18
     d7c:	b0 0d       	add	r27, r0
     d7e:	a1 1d       	adc	r26, r1
     d80:	62 1f       	adc	r22, r18
     d82:	73 9f       	mul	r23, r19
     d84:	b0 0d       	add	r27, r0
     d86:	a1 1d       	adc	r26, r1
     d88:	62 1f       	adc	r22, r18
     d8a:	83 9f       	mul	r24, r19
     d8c:	a0 0d       	add	r26, r0
     d8e:	61 1d       	adc	r22, r1
     d90:	22 1f       	adc	r18, r18
     d92:	74 9f       	mul	r23, r20
     d94:	33 27       	eor	r19, r19
     d96:	a0 0d       	add	r26, r0
     d98:	61 1d       	adc	r22, r1
     d9a:	23 1f       	adc	r18, r19
     d9c:	84 9f       	mul	r24, r20
     d9e:	60 0d       	add	r22, r0
     da0:	21 1d       	adc	r18, r1
     da2:	82 2f       	mov	r24, r18
     da4:	76 2f       	mov	r23, r22
     da6:	6a 2f       	mov	r22, r26
     da8:	11 24       	eor	r1, r1
     daa:	9f 57       	subi	r25, 0x7F	; 127
     dac:	50 40       	sbci	r21, 0x00	; 0
     dae:	9a f0       	brmi	.+38     	; 0xdd6 <__mulsf3_pse+0x88>
     db0:	f1 f0       	breq	.+60     	; 0xdee <__mulsf3_pse+0xa0>
     db2:	88 23       	and	r24, r24
     db4:	4a f0       	brmi	.+18     	; 0xdc8 <__mulsf3_pse+0x7a>
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	bb 1f       	adc	r27, r27
     dbc:	66 1f       	adc	r22, r22
     dbe:	77 1f       	adc	r23, r23
     dc0:	88 1f       	adc	r24, r24
     dc2:	91 50       	subi	r25, 0x01	; 1
     dc4:	50 40       	sbci	r21, 0x00	; 0
     dc6:	a9 f7       	brne	.-22     	; 0xdb2 <__mulsf3_pse+0x64>
     dc8:	9e 3f       	cpi	r25, 0xFE	; 254
     dca:	51 05       	cpc	r21, r1
     dcc:	80 f0       	brcs	.+32     	; 0xdee <__mulsf3_pse+0xa0>
     dce:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_inf>
     dd2:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_szero>
     dd6:	5f 3f       	cpi	r21, 0xFF	; 255
     dd8:	e4 f3       	brlt	.-8      	; 0xdd2 <__mulsf3_pse+0x84>
     dda:	98 3e       	cpi	r25, 0xE8	; 232
     ddc:	d4 f3       	brlt	.-12     	; 0xdd2 <__mulsf3_pse+0x84>
     dde:	86 95       	lsr	r24
     de0:	77 95       	ror	r23
     de2:	67 95       	ror	r22
     de4:	b7 95       	ror	r27
     de6:	f7 95       	ror	r31
     de8:	e7 95       	ror	r30
     dea:	9f 5f       	subi	r25, 0xFF	; 255
     dec:	c1 f7       	brne	.-16     	; 0xdde <__mulsf3_pse+0x90>
     dee:	fe 2b       	or	r31, r30
     df0:	88 0f       	add	r24, r24
     df2:	91 1d       	adc	r25, r1
     df4:	96 95       	lsr	r25
     df6:	87 95       	ror	r24
     df8:	97 f9       	bld	r25, 7
     dfa:	08 95       	ret

00000dfc <trunc>:
     dfc:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_trunc>
     e00:	30 f0       	brcs	.+12     	; 0xe0e <trunc+0x12>
     e02:	9f 37       	cpi	r25, 0x7F	; 127
     e04:	10 f4       	brcc	.+4      	; 0xe0a <trunc+0xe>
     e06:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_szero>
     e0a:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__fp_mintl>
     e0e:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_mpack>

00000e12 <__fp_mintl>:
     e12:	88 23       	and	r24, r24
     e14:	71 f4       	brne	.+28     	; 0xe32 <__fp_mintl+0x20>
     e16:	77 23       	and	r23, r23
     e18:	21 f0       	breq	.+8      	; 0xe22 <__fp_mintl+0x10>
     e1a:	98 50       	subi	r25, 0x08	; 8
     e1c:	87 2b       	or	r24, r23
     e1e:	76 2f       	mov	r23, r22
     e20:	07 c0       	rjmp	.+14     	; 0xe30 <__fp_mintl+0x1e>
     e22:	66 23       	and	r22, r22
     e24:	11 f4       	brne	.+4      	; 0xe2a <__fp_mintl+0x18>
     e26:	99 27       	eor	r25, r25
     e28:	0d c0       	rjmp	.+26     	; 0xe44 <__fp_mintl+0x32>
     e2a:	90 51       	subi	r25, 0x10	; 16
     e2c:	86 2b       	or	r24, r22
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	2a f0       	brmi	.+10     	; 0xe3e <__fp_mintl+0x2c>
     e34:	9a 95       	dec	r25
     e36:	66 0f       	add	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	da f7       	brpl	.-10     	; 0xe34 <__fp_mintl+0x22>
     e3e:	88 0f       	add	r24, r24
     e40:	96 95       	lsr	r25
     e42:	87 95       	ror	r24
     e44:	97 f9       	bld	r25, 7
     e46:	08 95       	ret

00000e48 <__fp_mpack>:
     e48:	9f 3f       	cpi	r25, 0xFF	; 255
     e4a:	31 f0       	breq	.+12     	; 0xe58 <__fp_mpack_finite+0xc>

00000e4c <__fp_mpack_finite>:
     e4c:	91 50       	subi	r25, 0x01	; 1
     e4e:	20 f4       	brcc	.+8      	; 0xe58 <__fp_mpack_finite+0xc>
     e50:	87 95       	ror	r24
     e52:	77 95       	ror	r23
     e54:	67 95       	ror	r22
     e56:	b7 95       	ror	r27
     e58:	88 0f       	add	r24, r24
     e5a:	91 1d       	adc	r25, r1
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	97 f9       	bld	r25, 7
     e62:	08 95       	ret

00000e64 <__fp_trunc>:
     e64:	0e 94 70 06 	call	0xce0	; 0xce0 <__fp_splitA>
     e68:	a0 f0       	brcs	.+40     	; 0xe92 <__fp_trunc+0x2e>
     e6a:	be e7       	ldi	r27, 0x7E	; 126
     e6c:	b9 17       	cp	r27, r25
     e6e:	88 f4       	brcc	.+34     	; 0xe92 <__fp_trunc+0x2e>
     e70:	bb 27       	eor	r27, r27
     e72:	9f 38       	cpi	r25, 0x8F	; 143
     e74:	60 f4       	brcc	.+24     	; 0xe8e <__fp_trunc+0x2a>
     e76:	16 16       	cp	r1, r22
     e78:	b1 1d       	adc	r27, r1
     e7a:	67 2f       	mov	r22, r23
     e7c:	78 2f       	mov	r23, r24
     e7e:	88 27       	eor	r24, r24
     e80:	98 5f       	subi	r25, 0xF8	; 248
     e82:	f7 cf       	rjmp	.-18     	; 0xe72 <__fp_trunc+0xe>
     e84:	86 95       	lsr	r24
     e86:	77 95       	ror	r23
     e88:	67 95       	ror	r22
     e8a:	b1 1d       	adc	r27, r1
     e8c:	93 95       	inc	r25
     e8e:	96 39       	cpi	r25, 0x96	; 150
     e90:	c8 f3       	brcs	.-14     	; 0xe84 <__fp_trunc+0x20>
     e92:	08 95       	ret

00000e94 <__udivmodsi4>:
     e94:	a1 e2       	ldi	r26, 0x21	; 33
     e96:	1a 2e       	mov	r1, r26
     e98:	aa 1b       	sub	r26, r26
     e9a:	bb 1b       	sub	r27, r27
     e9c:	fd 01       	movw	r30, r26
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <__udivmodsi4_ep>

00000ea0 <__udivmodsi4_loop>:
     ea0:	aa 1f       	adc	r26, r26
     ea2:	bb 1f       	adc	r27, r27
     ea4:	ee 1f       	adc	r30, r30
     ea6:	ff 1f       	adc	r31, r31
     ea8:	a2 17       	cp	r26, r18
     eaa:	b3 07       	cpc	r27, r19
     eac:	e4 07       	cpc	r30, r20
     eae:	f5 07       	cpc	r31, r21
     eb0:	20 f0       	brcs	.+8      	; 0xeba <__udivmodsi4_ep>
     eb2:	a2 1b       	sub	r26, r18
     eb4:	b3 0b       	sbc	r27, r19
     eb6:	e4 0b       	sbc	r30, r20
     eb8:	f5 0b       	sbc	r31, r21

00000eba <__udivmodsi4_ep>:
     eba:	66 1f       	adc	r22, r22
     ebc:	77 1f       	adc	r23, r23
     ebe:	88 1f       	adc	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	1a 94       	dec	r1
     ec4:	69 f7       	brne	.-38     	; 0xea0 <__udivmodsi4_loop>
     ec6:	60 95       	com	r22
     ec8:	70 95       	com	r23
     eca:	80 95       	com	r24
     ecc:	90 95       	com	r25
     ece:	9b 01       	movw	r18, r22
     ed0:	ac 01       	movw	r20, r24
     ed2:	bd 01       	movw	r22, r26
     ed4:	cf 01       	movw	r24, r30
     ed6:	08 95       	ret

00000ed8 <__umoddi3>:
     ed8:	68 94       	set
     eda:	01 c0       	rjmp	.+2      	; 0xede <__udivdi3_umoddi3>

00000edc <__udivdi3>:
     edc:	e8 94       	clt

00000ede <__udivdi3_umoddi3>:
     ede:	8f 92       	push	r8
     ee0:	9f 92       	push	r9
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	0e 94 7a 07 	call	0xef4	; 0xef4 <__udivmod64>
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	08 95       	ret

00000ef4 <__udivmod64>:
     ef4:	88 24       	eor	r8, r8
     ef6:	99 24       	eor	r9, r9
     ef8:	f4 01       	movw	r30, r8
     efa:	e4 01       	movw	r28, r8
     efc:	b0 e4       	ldi	r27, 0x40	; 64
     efe:	9f 93       	push	r25
     f00:	aa 27       	eor	r26, r26
     f02:	9a 15       	cp	r25, r10
     f04:	8b 04       	cpc	r8, r11
     f06:	9c 04       	cpc	r9, r12
     f08:	ed 05       	cpc	r30, r13
     f0a:	fe 05       	cpc	r31, r14
     f0c:	cf 05       	cpc	r28, r15
     f0e:	d0 07       	cpc	r29, r16
     f10:	a1 07       	cpc	r26, r17
     f12:	98 f4       	brcc	.+38     	; 0xf3a <__udivmod64+0x46>
     f14:	ad 2f       	mov	r26, r29
     f16:	dc 2f       	mov	r29, r28
     f18:	cf 2f       	mov	r28, r31
     f1a:	fe 2f       	mov	r31, r30
     f1c:	e9 2d       	mov	r30, r9
     f1e:	98 2c       	mov	r9, r8
     f20:	89 2e       	mov	r8, r25
     f22:	98 2f       	mov	r25, r24
     f24:	87 2f       	mov	r24, r23
     f26:	76 2f       	mov	r23, r22
     f28:	65 2f       	mov	r22, r21
     f2a:	54 2f       	mov	r21, r20
     f2c:	43 2f       	mov	r20, r19
     f2e:	32 2f       	mov	r19, r18
     f30:	22 27       	eor	r18, r18
     f32:	b8 50       	subi	r27, 0x08	; 8
     f34:	31 f7       	brne	.-52     	; 0xf02 <__udivmod64+0xe>
     f36:	bf 91       	pop	r27
     f38:	27 c0       	rjmp	.+78     	; 0xf88 <__udivmod64+0x94>
     f3a:	1b 2e       	mov	r1, r27
     f3c:	bf 91       	pop	r27
     f3e:	bb 27       	eor	r27, r27
     f40:	22 0f       	add	r18, r18
     f42:	33 1f       	adc	r19, r19
     f44:	44 1f       	adc	r20, r20
     f46:	55 1f       	adc	r21, r21
     f48:	66 1f       	adc	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	88 1f       	adc	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	88 1c       	adc	r8, r8
     f52:	99 1c       	adc	r9, r9
     f54:	ee 1f       	adc	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	cc 1f       	adc	r28, r28
     f5a:	dd 1f       	adc	r29, r29
     f5c:	aa 1f       	adc	r26, r26
     f5e:	bb 1f       	adc	r27, r27
     f60:	8a 14       	cp	r8, r10
     f62:	9b 04       	cpc	r9, r11
     f64:	ec 05       	cpc	r30, r12
     f66:	fd 05       	cpc	r31, r13
     f68:	ce 05       	cpc	r28, r14
     f6a:	df 05       	cpc	r29, r15
     f6c:	a0 07       	cpc	r26, r16
     f6e:	b1 07       	cpc	r27, r17
     f70:	48 f0       	brcs	.+18     	; 0xf84 <__udivmod64+0x90>
     f72:	8a 18       	sub	r8, r10
     f74:	9b 08       	sbc	r9, r11
     f76:	ec 09       	sbc	r30, r12
     f78:	fd 09       	sbc	r31, r13
     f7a:	ce 09       	sbc	r28, r14
     f7c:	df 09       	sbc	r29, r15
     f7e:	a0 0b       	sbc	r26, r16
     f80:	b1 0b       	sbc	r27, r17
     f82:	21 60       	ori	r18, 0x01	; 1
     f84:	1a 94       	dec	r1
     f86:	e1 f6       	brne	.-72     	; 0xf40 <__udivmod64+0x4c>
     f88:	2e f4       	brtc	.+10     	; 0xf94 <__udivmod64+0xa0>
     f8a:	94 01       	movw	r18, r8
     f8c:	af 01       	movw	r20, r30
     f8e:	be 01       	movw	r22, r28
     f90:	cd 01       	movw	r24, r26
     f92:	00 0c       	add	r0, r0
     f94:	08 95       	ret

00000f96 <__adddi3>:
     f96:	2a 0d       	add	r18, r10
     f98:	3b 1d       	adc	r19, r11
     f9a:	4c 1d       	adc	r20, r12
     f9c:	5d 1d       	adc	r21, r13
     f9e:	6e 1d       	adc	r22, r14
     fa0:	7f 1d       	adc	r23, r15
     fa2:	80 1f       	adc	r24, r16
     fa4:	91 1f       	adc	r25, r17
     fa6:	08 95       	ret

00000fa8 <__adddi3_s8>:
     fa8:	00 24       	eor	r0, r0
     faa:	a7 fd       	sbrc	r26, 7
     fac:	00 94       	com	r0
     fae:	2a 0f       	add	r18, r26
     fb0:	30 1d       	adc	r19, r0
     fb2:	40 1d       	adc	r20, r0
     fb4:	50 1d       	adc	r21, r0
     fb6:	60 1d       	adc	r22, r0
     fb8:	70 1d       	adc	r23, r0
     fba:	80 1d       	adc	r24, r0
     fbc:	90 1d       	adc	r25, r0
     fbe:	08 95       	ret

00000fc0 <__itoa_ncheck>:
     fc0:	bb 27       	eor	r27, r27
     fc2:	4a 30       	cpi	r20, 0x0A	; 10
     fc4:	31 f4       	brne	.+12     	; 0xfd2 <__itoa_ncheck+0x12>
     fc6:	99 23       	and	r25, r25
     fc8:	22 f4       	brpl	.+8      	; 0xfd2 <__itoa_ncheck+0x12>
     fca:	bd e2       	ldi	r27, 0x2D	; 45
     fcc:	90 95       	com	r25
     fce:	81 95       	neg	r24
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__utoa_common>

00000fd6 <__utoa_ncheck>:
     fd6:	bb 27       	eor	r27, r27

00000fd8 <__utoa_common>:
     fd8:	fb 01       	movw	r30, r22
     fda:	55 27       	eor	r21, r21
     fdc:	aa 27       	eor	r26, r26
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	aa 1f       	adc	r26, r26
     fe4:	a4 17       	cp	r26, r20
     fe6:	10 f0       	brcs	.+4      	; 0xfec <__utoa_common+0x14>
     fe8:	a4 1b       	sub	r26, r20
     fea:	83 95       	inc	r24
     fec:	50 51       	subi	r21, 0x10	; 16
     fee:	b9 f7       	brne	.-18     	; 0xfde <__utoa_common+0x6>
     ff0:	a0 5d       	subi	r26, 0xD0	; 208
     ff2:	aa 33       	cpi	r26, 0x3A	; 58
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <__utoa_common+0x20>
     ff6:	a9 5d       	subi	r26, 0xD9	; 217
     ff8:	a1 93       	st	Z+, r26
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	79 f7       	brne	.-34     	; 0xfdc <__utoa_common+0x4>
     ffe:	b1 11       	cpse	r27, r1
    1000:	b1 93       	st	Z+, r27
    1002:	11 92       	st	Z+, r1
    1004:	cb 01       	movw	r24, r22
    1006:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <strrev>

0000100a <sprintf>:
    100a:	ae e0       	ldi	r26, 0x0E	; 14
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	eb e0       	ldi	r30, 0x0B	; 11
    1010:	f8 e0       	ldi	r31, 0x08	; 8
    1012:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__prologue_saves__+0x1c>
    1016:	0d 89       	ldd	r16, Y+21	; 0x15
    1018:	1e 89       	ldd	r17, Y+22	; 0x16
    101a:	86 e0       	ldi	r24, 0x06	; 6
    101c:	8c 83       	std	Y+4, r24	; 0x04
    101e:	09 83       	std	Y+1, r16	; 0x01
    1020:	1a 83       	std	Y+2, r17	; 0x02
    1022:	8f ef       	ldi	r24, 0xFF	; 255
    1024:	9f e7       	ldi	r25, 0x7F	; 127
    1026:	8d 83       	std	Y+5, r24	; 0x05
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	ae 01       	movw	r20, r28
    102c:	47 5e       	subi	r20, 0xE7	; 231
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	6f 89       	ldd	r22, Y+23	; 0x17
    1032:	78 8d       	ldd	r23, Y+24	; 0x18
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	0e 94 28 08 	call	0x1050	; 0x1050 <vfprintf>
    103c:	2f 81       	ldd	r18, Y+7	; 0x07
    103e:	38 85       	ldd	r19, Y+8	; 0x08
    1040:	f8 01       	movw	r30, r16
    1042:	e2 0f       	add	r30, r18
    1044:	f3 1f       	adc	r31, r19
    1046:	10 82       	st	Z, r1
    1048:	2e 96       	adiw	r28, 0x0e	; 14
    104a:	e4 e0       	ldi	r30, 0x04	; 4
    104c:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__epilogue_restores__+0x1c>

00001050 <vfprintf>:
    1050:	ac e0       	ldi	r26, 0x0C	; 12
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e2       	ldi	r30, 0x2E	; 46
    1056:	f8 e0       	ldi	r31, 0x08	; 8
    1058:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__prologue_saves__>
    105c:	7c 01       	movw	r14, r24
    105e:	6b 01       	movw	r12, r22
    1060:	8a 01       	movw	r16, r20
    1062:	fc 01       	movw	r30, r24
    1064:	16 82       	std	Z+6, r1	; 0x06
    1066:	17 82       	std	Z+7, r1	; 0x07
    1068:	83 81       	ldd	r24, Z+3	; 0x03
    106a:	81 ff       	sbrs	r24, 1
    106c:	bd c1       	rjmp	.+890    	; 0x13e8 <vfprintf+0x398>
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	4c 01       	movw	r8, r24
    1074:	f7 01       	movw	r30, r14
    1076:	93 81       	ldd	r25, Z+3	; 0x03
    1078:	f6 01       	movw	r30, r12
    107a:	93 fd       	sbrc	r25, 3
    107c:	85 91       	lpm	r24, Z+
    107e:	93 ff       	sbrs	r25, 3
    1080:	81 91       	ld	r24, Z+
    1082:	6f 01       	movw	r12, r30
    1084:	88 23       	and	r24, r24
    1086:	09 f4       	brne	.+2      	; 0x108a <vfprintf+0x3a>
    1088:	ab c1       	rjmp	.+854    	; 0x13e0 <vfprintf+0x390>
    108a:	85 32       	cpi	r24, 0x25	; 37
    108c:	39 f4       	brne	.+14     	; 0x109c <vfprintf+0x4c>
    108e:	93 fd       	sbrc	r25, 3
    1090:	85 91       	lpm	r24, Z+
    1092:	93 ff       	sbrs	r25, 3
    1094:	81 91       	ld	r24, Z+
    1096:	6f 01       	movw	r12, r30
    1098:	85 32       	cpi	r24, 0x25	; 37
    109a:	29 f4       	brne	.+10     	; 0x10a6 <vfprintf+0x56>
    109c:	b7 01       	movw	r22, r14
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 20 0a 	call	0x1440	; 0x1440 <fputc>
    10a4:	e7 cf       	rjmp	.-50     	; 0x1074 <vfprintf+0x24>
    10a6:	51 2c       	mov	r5, r1
    10a8:	31 2c       	mov	r3, r1
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	20 32       	cpi	r18, 0x20	; 32
    10ae:	a0 f4       	brcc	.+40     	; 0x10d8 <vfprintf+0x88>
    10b0:	8b 32       	cpi	r24, 0x2B	; 43
    10b2:	69 f0       	breq	.+26     	; 0x10ce <vfprintf+0x7e>
    10b4:	30 f4       	brcc	.+12     	; 0x10c2 <vfprintf+0x72>
    10b6:	80 32       	cpi	r24, 0x20	; 32
    10b8:	59 f0       	breq	.+22     	; 0x10d0 <vfprintf+0x80>
    10ba:	83 32       	cpi	r24, 0x23	; 35
    10bc:	69 f4       	brne	.+26     	; 0x10d8 <vfprintf+0x88>
    10be:	20 61       	ori	r18, 0x10	; 16
    10c0:	2c c0       	rjmp	.+88     	; 0x111a <vfprintf+0xca>
    10c2:	8d 32       	cpi	r24, 0x2D	; 45
    10c4:	39 f0       	breq	.+14     	; 0x10d4 <vfprintf+0x84>
    10c6:	80 33       	cpi	r24, 0x30	; 48
    10c8:	39 f4       	brne	.+14     	; 0x10d8 <vfprintf+0x88>
    10ca:	21 60       	ori	r18, 0x01	; 1
    10cc:	26 c0       	rjmp	.+76     	; 0x111a <vfprintf+0xca>
    10ce:	22 60       	ori	r18, 0x02	; 2
    10d0:	24 60       	ori	r18, 0x04	; 4
    10d2:	23 c0       	rjmp	.+70     	; 0x111a <vfprintf+0xca>
    10d4:	28 60       	ori	r18, 0x08	; 8
    10d6:	21 c0       	rjmp	.+66     	; 0x111a <vfprintf+0xca>
    10d8:	27 fd       	sbrc	r18, 7
    10da:	27 c0       	rjmp	.+78     	; 0x112a <vfprintf+0xda>
    10dc:	30 ed       	ldi	r19, 0xD0	; 208
    10de:	38 0f       	add	r19, r24
    10e0:	3a 30       	cpi	r19, 0x0A	; 10
    10e2:	78 f4       	brcc	.+30     	; 0x1102 <vfprintf+0xb2>
    10e4:	26 ff       	sbrs	r18, 6
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <vfprintf+0xa4>
    10e8:	fa e0       	ldi	r31, 0x0A	; 10
    10ea:	5f 9e       	mul	r5, r31
    10ec:	30 0d       	add	r19, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	53 2e       	mov	r5, r19
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <vfprintf+0xca>
    10f4:	8a e0       	ldi	r24, 0x0A	; 10
    10f6:	38 9e       	mul	r3, r24
    10f8:	30 0d       	add	r19, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	33 2e       	mov	r3, r19
    10fe:	20 62       	ori	r18, 0x20	; 32
    1100:	0c c0       	rjmp	.+24     	; 0x111a <vfprintf+0xca>
    1102:	8e 32       	cpi	r24, 0x2E	; 46
    1104:	21 f4       	brne	.+8      	; 0x110e <vfprintf+0xbe>
    1106:	26 fd       	sbrc	r18, 6
    1108:	6b c1       	rjmp	.+726    	; 0x13e0 <vfprintf+0x390>
    110a:	20 64       	ori	r18, 0x40	; 64
    110c:	06 c0       	rjmp	.+12     	; 0x111a <vfprintf+0xca>
    110e:	8c 36       	cpi	r24, 0x6C	; 108
    1110:	11 f4       	brne	.+4      	; 0x1116 <vfprintf+0xc6>
    1112:	20 68       	ori	r18, 0x80	; 128
    1114:	02 c0       	rjmp	.+4      	; 0x111a <vfprintf+0xca>
    1116:	88 36       	cpi	r24, 0x68	; 104
    1118:	41 f4       	brne	.+16     	; 0x112a <vfprintf+0xda>
    111a:	f6 01       	movw	r30, r12
    111c:	93 fd       	sbrc	r25, 3
    111e:	85 91       	lpm	r24, Z+
    1120:	93 ff       	sbrs	r25, 3
    1122:	81 91       	ld	r24, Z+
    1124:	6f 01       	movw	r12, r30
    1126:	81 11       	cpse	r24, r1
    1128:	c1 cf       	rjmp	.-126    	; 0x10ac <vfprintf+0x5c>
    112a:	98 2f       	mov	r25, r24
    112c:	9f 7d       	andi	r25, 0xDF	; 223
    112e:	95 54       	subi	r25, 0x45	; 69
    1130:	93 30       	cpi	r25, 0x03	; 3
    1132:	28 f4       	brcc	.+10     	; 0x113e <vfprintf+0xee>
    1134:	0c 5f       	subi	r16, 0xFC	; 252
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	ff e3       	ldi	r31, 0x3F	; 63
    113a:	f9 83       	std	Y+1, r31	; 0x01
    113c:	0d c0       	rjmp	.+26     	; 0x1158 <vfprintf+0x108>
    113e:	83 36       	cpi	r24, 0x63	; 99
    1140:	31 f0       	breq	.+12     	; 0x114e <vfprintf+0xfe>
    1142:	83 37       	cpi	r24, 0x73	; 115
    1144:	71 f0       	breq	.+28     	; 0x1162 <vfprintf+0x112>
    1146:	83 35       	cpi	r24, 0x53	; 83
    1148:	09 f0       	breq	.+2      	; 0x114c <vfprintf+0xfc>
    114a:	5b c0       	rjmp	.+182    	; 0x1202 <vfprintf+0x1b2>
    114c:	22 c0       	rjmp	.+68     	; 0x1192 <vfprintf+0x142>
    114e:	f8 01       	movw	r30, r16
    1150:	80 81       	ld	r24, Z
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	0e 5f       	subi	r16, 0xFE	; 254
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	44 24       	eor	r4, r4
    115a:	43 94       	inc	r4
    115c:	51 2c       	mov	r5, r1
    115e:	54 01       	movw	r10, r8
    1160:	15 c0       	rjmp	.+42     	; 0x118c <vfprintf+0x13c>
    1162:	38 01       	movw	r6, r16
    1164:	f2 e0       	ldi	r31, 0x02	; 2
    1166:	6f 0e       	add	r6, r31
    1168:	71 1c       	adc	r7, r1
    116a:	f8 01       	movw	r30, r16
    116c:	a0 80       	ld	r10, Z
    116e:	b1 80       	ldd	r11, Z+1	; 0x01
    1170:	26 ff       	sbrs	r18, 6
    1172:	03 c0       	rjmp	.+6      	; 0x117a <vfprintf+0x12a>
    1174:	65 2d       	mov	r22, r5
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <vfprintf+0x12e>
    117a:	6f ef       	ldi	r22, 0xFF	; 255
    117c:	7f ef       	ldi	r23, 0xFF	; 255
    117e:	c5 01       	movw	r24, r10
    1180:	2c 87       	std	Y+12, r18	; 0x0c
    1182:	0e 94 05 0a 	call	0x140a	; 0x140a <strnlen>
    1186:	2c 01       	movw	r4, r24
    1188:	83 01       	movw	r16, r6
    118a:	2c 85       	ldd	r18, Y+12	; 0x0c
    118c:	2f 77       	andi	r18, 0x7F	; 127
    118e:	22 2e       	mov	r2, r18
    1190:	17 c0       	rjmp	.+46     	; 0x11c0 <vfprintf+0x170>
    1192:	38 01       	movw	r6, r16
    1194:	f2 e0       	ldi	r31, 0x02	; 2
    1196:	6f 0e       	add	r6, r31
    1198:	71 1c       	adc	r7, r1
    119a:	f8 01       	movw	r30, r16
    119c:	a0 80       	ld	r10, Z
    119e:	b1 80       	ldd	r11, Z+1	; 0x01
    11a0:	26 ff       	sbrs	r18, 6
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <vfprintf+0x15a>
    11a4:	65 2d       	mov	r22, r5
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <vfprintf+0x15e>
    11aa:	6f ef       	ldi	r22, 0xFF	; 255
    11ac:	7f ef       	ldi	r23, 0xFF	; 255
    11ae:	c5 01       	movw	r24, r10
    11b0:	2c 87       	std	Y+12, r18	; 0x0c
    11b2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <strnlen_P>
    11b6:	2c 01       	movw	r4, r24
    11b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11ba:	20 68       	ori	r18, 0x80	; 128
    11bc:	22 2e       	mov	r2, r18
    11be:	83 01       	movw	r16, r6
    11c0:	23 fc       	sbrc	r2, 3
    11c2:	1b c0       	rjmp	.+54     	; 0x11fa <vfprintf+0x1aa>
    11c4:	83 2d       	mov	r24, r3
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	48 16       	cp	r4, r24
    11ca:	59 06       	cpc	r5, r25
    11cc:	b0 f4       	brcc	.+44     	; 0x11fa <vfprintf+0x1aa>
    11ce:	b7 01       	movw	r22, r14
    11d0:	80 e2       	ldi	r24, 0x20	; 32
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 20 0a 	call	0x1440	; 0x1440 <fputc>
    11d8:	3a 94       	dec	r3
    11da:	f4 cf       	rjmp	.-24     	; 0x11c4 <vfprintf+0x174>
    11dc:	f5 01       	movw	r30, r10
    11de:	27 fc       	sbrc	r2, 7
    11e0:	85 91       	lpm	r24, Z+
    11e2:	27 fe       	sbrs	r2, 7
    11e4:	81 91       	ld	r24, Z+
    11e6:	5f 01       	movw	r10, r30
    11e8:	b7 01       	movw	r22, r14
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 20 0a 	call	0x1440	; 0x1440 <fputc>
    11f0:	31 10       	cpse	r3, r1
    11f2:	3a 94       	dec	r3
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	4f 1a       	sub	r4, r31
    11f8:	51 08       	sbc	r5, r1
    11fa:	41 14       	cp	r4, r1
    11fc:	51 04       	cpc	r5, r1
    11fe:	71 f7       	brne	.-36     	; 0x11dc <vfprintf+0x18c>
    1200:	e5 c0       	rjmp	.+458    	; 0x13cc <vfprintf+0x37c>
    1202:	84 36       	cpi	r24, 0x64	; 100
    1204:	11 f0       	breq	.+4      	; 0x120a <vfprintf+0x1ba>
    1206:	89 36       	cpi	r24, 0x69	; 105
    1208:	39 f5       	brne	.+78     	; 0x1258 <vfprintf+0x208>
    120a:	f8 01       	movw	r30, r16
    120c:	27 ff       	sbrs	r18, 7
    120e:	07 c0       	rjmp	.+14     	; 0x121e <vfprintf+0x1ce>
    1210:	60 81       	ld	r22, Z
    1212:	71 81       	ldd	r23, Z+1	; 0x01
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	0c 5f       	subi	r16, 0xFC	; 252
    121a:	1f 4f       	sbci	r17, 0xFF	; 255
    121c:	08 c0       	rjmp	.+16     	; 0x122e <vfprintf+0x1de>
    121e:	60 81       	ld	r22, Z
    1220:	71 81       	ldd	r23, Z+1	; 0x01
    1222:	07 2e       	mov	r0, r23
    1224:	00 0c       	add	r0, r0
    1226:	88 0b       	sbc	r24, r24
    1228:	99 0b       	sbc	r25, r25
    122a:	0e 5f       	subi	r16, 0xFE	; 254
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	2f 76       	andi	r18, 0x6F	; 111
    1230:	72 2e       	mov	r7, r18
    1232:	97 ff       	sbrs	r25, 7
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <vfprintf+0x1f8>
    1236:	90 95       	com	r25
    1238:	80 95       	com	r24
    123a:	70 95       	com	r23
    123c:	61 95       	neg	r22
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	8f 4f       	sbci	r24, 0xFF	; 255
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	20 68       	ori	r18, 0x80	; 128
    1246:	72 2e       	mov	r7, r18
    1248:	2a e0       	ldi	r18, 0x0A	; 10
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	a4 01       	movw	r20, r8
    124e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__ultoa_invert>
    1252:	a8 2e       	mov	r10, r24
    1254:	a8 18       	sub	r10, r8
    1256:	44 c0       	rjmp	.+136    	; 0x12e0 <vfprintf+0x290>
    1258:	85 37       	cpi	r24, 0x75	; 117
    125a:	29 f4       	brne	.+10     	; 0x1266 <vfprintf+0x216>
    125c:	2f 7e       	andi	r18, 0xEF	; 239
    125e:	b2 2e       	mov	r11, r18
    1260:	2a e0       	ldi	r18, 0x0A	; 10
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	25 c0       	rjmp	.+74     	; 0x12b0 <vfprintf+0x260>
    1266:	f2 2f       	mov	r31, r18
    1268:	f9 7f       	andi	r31, 0xF9	; 249
    126a:	bf 2e       	mov	r11, r31
    126c:	8f 36       	cpi	r24, 0x6F	; 111
    126e:	c1 f0       	breq	.+48     	; 0x12a0 <vfprintf+0x250>
    1270:	18 f4       	brcc	.+6      	; 0x1278 <vfprintf+0x228>
    1272:	88 35       	cpi	r24, 0x58	; 88
    1274:	79 f0       	breq	.+30     	; 0x1294 <vfprintf+0x244>
    1276:	b4 c0       	rjmp	.+360    	; 0x13e0 <vfprintf+0x390>
    1278:	80 37       	cpi	r24, 0x70	; 112
    127a:	19 f0       	breq	.+6      	; 0x1282 <vfprintf+0x232>
    127c:	88 37       	cpi	r24, 0x78	; 120
    127e:	21 f0       	breq	.+8      	; 0x1288 <vfprintf+0x238>
    1280:	af c0       	rjmp	.+350    	; 0x13e0 <vfprintf+0x390>
    1282:	2f 2f       	mov	r18, r31
    1284:	20 61       	ori	r18, 0x10	; 16
    1286:	b2 2e       	mov	r11, r18
    1288:	b4 fe       	sbrs	r11, 4
    128a:	0d c0       	rjmp	.+26     	; 0x12a6 <vfprintf+0x256>
    128c:	8b 2d       	mov	r24, r11
    128e:	84 60       	ori	r24, 0x04	; 4
    1290:	b8 2e       	mov	r11, r24
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <vfprintf+0x256>
    1294:	24 ff       	sbrs	r18, 4
    1296:	0a c0       	rjmp	.+20     	; 0x12ac <vfprintf+0x25c>
    1298:	9f 2f       	mov	r25, r31
    129a:	96 60       	ori	r25, 0x06	; 6
    129c:	b9 2e       	mov	r11, r25
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <vfprintf+0x25c>
    12a0:	28 e0       	ldi	r18, 0x08	; 8
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <vfprintf+0x260>
    12a6:	20 e1       	ldi	r18, 0x10	; 16
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <vfprintf+0x260>
    12ac:	20 e1       	ldi	r18, 0x10	; 16
    12ae:	32 e0       	ldi	r19, 0x02	; 2
    12b0:	f8 01       	movw	r30, r16
    12b2:	b7 fe       	sbrs	r11, 7
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <vfprintf+0x274>
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	0c 5f       	subi	r16, 0xFC	; 252
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	06 c0       	rjmp	.+12     	; 0x12d0 <vfprintf+0x280>
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 5f       	subi	r16, 0xFE	; 254
    12ce:	1f 4f       	sbci	r17, 0xFF	; 255
    12d0:	a4 01       	movw	r20, r8
    12d2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__ultoa_invert>
    12d6:	a8 2e       	mov	r10, r24
    12d8:	a8 18       	sub	r10, r8
    12da:	fb 2d       	mov	r31, r11
    12dc:	ff 77       	andi	r31, 0x7F	; 127
    12de:	7f 2e       	mov	r7, r31
    12e0:	76 fe       	sbrs	r7, 6
    12e2:	0b c0       	rjmp	.+22     	; 0x12fa <vfprintf+0x2aa>
    12e4:	37 2d       	mov	r19, r7
    12e6:	3e 7f       	andi	r19, 0xFE	; 254
    12e8:	a5 14       	cp	r10, r5
    12ea:	50 f4       	brcc	.+20     	; 0x1300 <vfprintf+0x2b0>
    12ec:	74 fe       	sbrs	r7, 4
    12ee:	0a c0       	rjmp	.+20     	; 0x1304 <vfprintf+0x2b4>
    12f0:	72 fc       	sbrc	r7, 2
    12f2:	08 c0       	rjmp	.+16     	; 0x1304 <vfprintf+0x2b4>
    12f4:	37 2d       	mov	r19, r7
    12f6:	3e 7e       	andi	r19, 0xEE	; 238
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <vfprintf+0x2b4>
    12fa:	ba 2c       	mov	r11, r10
    12fc:	37 2d       	mov	r19, r7
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <vfprintf+0x2b6>
    1300:	ba 2c       	mov	r11, r10
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <vfprintf+0x2b6>
    1304:	b5 2c       	mov	r11, r5
    1306:	34 ff       	sbrs	r19, 4
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <vfprintf+0x2d4>
    130a:	fe 01       	movw	r30, r28
    130c:	ea 0d       	add	r30, r10
    130e:	f1 1d       	adc	r31, r1
    1310:	80 81       	ld	r24, Z
    1312:	80 33       	cpi	r24, 0x30	; 48
    1314:	11 f4       	brne	.+4      	; 0x131a <vfprintf+0x2ca>
    1316:	39 7e       	andi	r19, 0xE9	; 233
    1318:	09 c0       	rjmp	.+18     	; 0x132c <vfprintf+0x2dc>
    131a:	32 ff       	sbrs	r19, 2
    131c:	06 c0       	rjmp	.+12     	; 0x132a <vfprintf+0x2da>
    131e:	b3 94       	inc	r11
    1320:	b3 94       	inc	r11
    1322:	04 c0       	rjmp	.+8      	; 0x132c <vfprintf+0x2dc>
    1324:	83 2f       	mov	r24, r19
    1326:	86 78       	andi	r24, 0x86	; 134
    1328:	09 f0       	breq	.+2      	; 0x132c <vfprintf+0x2dc>
    132a:	b3 94       	inc	r11
    132c:	33 fd       	sbrc	r19, 3
    132e:	13 c0       	rjmp	.+38     	; 0x1356 <vfprintf+0x306>
    1330:	30 ff       	sbrs	r19, 0
    1332:	06 c0       	rjmp	.+12     	; 0x1340 <vfprintf+0x2f0>
    1334:	5a 2c       	mov	r5, r10
    1336:	b3 14       	cp	r11, r3
    1338:	18 f4       	brcc	.+6      	; 0x1340 <vfprintf+0x2f0>
    133a:	53 0c       	add	r5, r3
    133c:	5b 18       	sub	r5, r11
    133e:	b3 2c       	mov	r11, r3
    1340:	b3 14       	cp	r11, r3
    1342:	68 f4       	brcc	.+26     	; 0x135e <vfprintf+0x30e>
    1344:	b7 01       	movw	r22, r14
    1346:	80 e2       	ldi	r24, 0x20	; 32
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	3c 87       	std	Y+12, r19	; 0x0c
    134c:	0e 94 20 0a 	call	0x1440	; 0x1440 <fputc>
    1350:	b3 94       	inc	r11
    1352:	3c 85       	ldd	r19, Y+12	; 0x0c
    1354:	f5 cf       	rjmp	.-22     	; 0x1340 <vfprintf+0x2f0>
    1356:	b3 14       	cp	r11, r3
    1358:	10 f4       	brcc	.+4      	; 0x135e <vfprintf+0x30e>
    135a:	3b 18       	sub	r3, r11
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <vfprintf+0x310>
    135e:	31 2c       	mov	r3, r1
    1360:	34 ff       	sbrs	r19, 4
    1362:	12 c0       	rjmp	.+36     	; 0x1388 <vfprintf+0x338>
    1364:	b7 01       	movw	r22, r14
    1366:	80 e3       	ldi	r24, 0x30	; 48
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	3c 87       	std	Y+12, r19	; 0x0c
    136c:	0e 94 20 0a 	call	0x1440	; 0x1440 <fputc>
    1370:	3c 85       	ldd	r19, Y+12	; 0x0c
    1372:	32 ff       	sbrs	r19, 2
    1374:	17 c0       	rjmp	.+46     	; 0x13a4 <vfprintf+0x354>
    1376:	31 fd       	sbrc	r19, 1
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <vfprintf+0x330>
    137a:	88 e7       	ldi	r24, 0x78	; 120
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <vfprintf+0x334>
    1380:	88 e5       	ldi	r24, 0x58	; 88
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	b7 01       	movw	r22, r14
    1386:	0c c0       	rjmp	.+24     	; 0x13a0 <vfprintf+0x350>
    1388:	83 2f       	mov	r24, r19
    138a:	86 78       	andi	r24, 0x86	; 134
    138c:	59 f0       	breq	.+22     	; 0x13a4 <vfprintf+0x354>
    138e:	31 ff       	sbrs	r19, 1
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <vfprintf+0x346>
    1392:	8b e2       	ldi	r24, 0x2B	; 43
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <vfprintf+0x348>
    1396:	80 e2       	ldi	r24, 0x20	; 32
    1398:	37 fd       	sbrc	r19, 7
    139a:	8d e2       	ldi	r24, 0x2D	; 45
    139c:	b7 01       	movw	r22, r14
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 20 0a 	call	0x1440	; 0x1440 <fputc>
    13a4:	a5 14       	cp	r10, r5
    13a6:	38 f4       	brcc	.+14     	; 0x13b6 <vfprintf+0x366>
    13a8:	b7 01       	movw	r22, r14
    13aa:	80 e3       	ldi	r24, 0x30	; 48
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 20 0a 	call	0x1440	; 0x1440 <fputc>
    13b2:	5a 94       	dec	r5
    13b4:	f7 cf       	rjmp	.-18     	; 0x13a4 <vfprintf+0x354>
    13b6:	aa 94       	dec	r10
    13b8:	f4 01       	movw	r30, r8
    13ba:	ea 0d       	add	r30, r10
    13bc:	f1 1d       	adc	r31, r1
    13be:	80 81       	ld	r24, Z
    13c0:	b7 01       	movw	r22, r14
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 20 0a 	call	0x1440	; 0x1440 <fputc>
    13c8:	a1 10       	cpse	r10, r1
    13ca:	f5 cf       	rjmp	.-22     	; 0x13b6 <vfprintf+0x366>
    13cc:	33 20       	and	r3, r3
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <vfprintf+0x382>
    13d0:	51 ce       	rjmp	.-862    	; 0x1074 <vfprintf+0x24>
    13d2:	b7 01       	movw	r22, r14
    13d4:	80 e2       	ldi	r24, 0x20	; 32
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 20 0a 	call	0x1440	; 0x1440 <fputc>
    13dc:	3a 94       	dec	r3
    13de:	f6 cf       	rjmp	.-20     	; 0x13cc <vfprintf+0x37c>
    13e0:	f7 01       	movw	r30, r14
    13e2:	86 81       	ldd	r24, Z+6	; 0x06
    13e4:	97 81       	ldd	r25, Z+7	; 0x07
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <vfprintf+0x39c>
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	9f ef       	ldi	r25, 0xFF	; 255
    13ec:	2c 96       	adiw	r28, 0x0c	; 12
    13ee:	e2 e1       	ldi	r30, 0x12	; 18
    13f0:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__epilogue_restores__>

000013f4 <strnlen_P>:
    13f4:	fc 01       	movw	r30, r24
    13f6:	05 90       	lpm	r0, Z+
    13f8:	61 50       	subi	r22, 0x01	; 1
    13fa:	70 40       	sbci	r23, 0x00	; 0
    13fc:	01 10       	cpse	r0, r1
    13fe:	d8 f7       	brcc	.-10     	; 0x13f6 <strnlen_P+0x2>
    1400:	80 95       	com	r24
    1402:	90 95       	com	r25
    1404:	8e 0f       	add	r24, r30
    1406:	9f 1f       	adc	r25, r31
    1408:	08 95       	ret

0000140a <strnlen>:
    140a:	fc 01       	movw	r30, r24
    140c:	61 50       	subi	r22, 0x01	; 1
    140e:	70 40       	sbci	r23, 0x00	; 0
    1410:	01 90       	ld	r0, Z+
    1412:	01 10       	cpse	r0, r1
    1414:	d8 f7       	brcc	.-10     	; 0x140c <strnlen+0x2>
    1416:	80 95       	com	r24
    1418:	90 95       	com	r25
    141a:	8e 0f       	add	r24, r30
    141c:	9f 1f       	adc	r25, r31
    141e:	08 95       	ret

00001420 <strrev>:
    1420:	dc 01       	movw	r26, r24
    1422:	fc 01       	movw	r30, r24
    1424:	67 2f       	mov	r22, r23
    1426:	71 91       	ld	r23, Z+
    1428:	77 23       	and	r23, r23
    142a:	e1 f7       	brne	.-8      	; 0x1424 <strrev+0x4>
    142c:	32 97       	sbiw	r30, 0x02	; 2
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <strrev+0x18>
    1430:	7c 91       	ld	r23, X
    1432:	6d 93       	st	X+, r22
    1434:	70 83       	st	Z, r23
    1436:	62 91       	ld	r22, -Z
    1438:	ae 17       	cp	r26, r30
    143a:	bf 07       	cpc	r27, r31
    143c:	c8 f3       	brcs	.-14     	; 0x1430 <strrev+0x10>
    143e:	08 95       	ret

00001440 <fputc>:
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	fb 01       	movw	r30, r22
    144a:	23 81       	ldd	r18, Z+3	; 0x03
    144c:	21 fd       	sbrc	r18, 1
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <fputc+0x16>
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	9f ef       	ldi	r25, 0xFF	; 255
    1454:	28 c0       	rjmp	.+80     	; 0x14a6 <fputc+0x66>
    1456:	22 ff       	sbrs	r18, 2
    1458:	16 c0       	rjmp	.+44     	; 0x1486 <fputc+0x46>
    145a:	46 81       	ldd	r20, Z+6	; 0x06
    145c:	57 81       	ldd	r21, Z+7	; 0x07
    145e:	24 81       	ldd	r18, Z+4	; 0x04
    1460:	35 81       	ldd	r19, Z+5	; 0x05
    1462:	42 17       	cp	r20, r18
    1464:	53 07       	cpc	r21, r19
    1466:	44 f4       	brge	.+16     	; 0x1478 <fputc+0x38>
    1468:	a0 81       	ld	r26, Z
    146a:	b1 81       	ldd	r27, Z+1	; 0x01
    146c:	9d 01       	movw	r18, r26
    146e:	2f 5f       	subi	r18, 0xFF	; 255
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	20 83       	st	Z, r18
    1474:	31 83       	std	Z+1, r19	; 0x01
    1476:	8c 93       	st	X, r24
    1478:	26 81       	ldd	r18, Z+6	; 0x06
    147a:	37 81       	ldd	r19, Z+7	; 0x07
    147c:	2f 5f       	subi	r18, 0xFF	; 255
    147e:	3f 4f       	sbci	r19, 0xFF	; 255
    1480:	26 83       	std	Z+6, r18	; 0x06
    1482:	37 83       	std	Z+7, r19	; 0x07
    1484:	10 c0       	rjmp	.+32     	; 0x14a6 <fputc+0x66>
    1486:	eb 01       	movw	r28, r22
    1488:	09 2f       	mov	r16, r25
    148a:	18 2f       	mov	r17, r24
    148c:	00 84       	ldd	r0, Z+8	; 0x08
    148e:	f1 85       	ldd	r31, Z+9	; 0x09
    1490:	e0 2d       	mov	r30, r0
    1492:	09 95       	icall
    1494:	89 2b       	or	r24, r25
    1496:	e1 f6       	brne	.-72     	; 0x1450 <fputc+0x10>
    1498:	8e 81       	ldd	r24, Y+6	; 0x06
    149a:	9f 81       	ldd	r25, Y+7	; 0x07
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	8e 83       	std	Y+6, r24	; 0x06
    14a0:	9f 83       	std	Y+7, r25	; 0x07
    14a2:	81 2f       	mov	r24, r17
    14a4:	90 2f       	mov	r25, r16
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	08 95       	ret

000014b0 <__ultoa_invert>:
    14b0:	fa 01       	movw	r30, r20
    14b2:	aa 27       	eor	r26, r26
    14b4:	28 30       	cpi	r18, 0x08	; 8
    14b6:	51 f1       	breq	.+84     	; 0x150c <__ultoa_invert+0x5c>
    14b8:	20 31       	cpi	r18, 0x10	; 16
    14ba:	81 f1       	breq	.+96     	; 0x151c <__ultoa_invert+0x6c>
    14bc:	e8 94       	clt
    14be:	6f 93       	push	r22
    14c0:	6e 7f       	andi	r22, 0xFE	; 254
    14c2:	6e 5f       	subi	r22, 0xFE	; 254
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	8f 4f       	sbci	r24, 0xFF	; 255
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	af 4f       	sbci	r26, 0xFF	; 255
    14cc:	b1 e0       	ldi	r27, 0x01	; 1
    14ce:	3e d0       	rcall	.+124    	; 0x154c <__ultoa_invert+0x9c>
    14d0:	b4 e0       	ldi	r27, 0x04	; 4
    14d2:	3c d0       	rcall	.+120    	; 0x154c <__ultoa_invert+0x9c>
    14d4:	67 0f       	add	r22, r23
    14d6:	78 1f       	adc	r23, r24
    14d8:	89 1f       	adc	r24, r25
    14da:	9a 1f       	adc	r25, r26
    14dc:	a1 1d       	adc	r26, r1
    14de:	68 0f       	add	r22, r24
    14e0:	79 1f       	adc	r23, r25
    14e2:	8a 1f       	adc	r24, r26
    14e4:	91 1d       	adc	r25, r1
    14e6:	a1 1d       	adc	r26, r1
    14e8:	6a 0f       	add	r22, r26
    14ea:	71 1d       	adc	r23, r1
    14ec:	81 1d       	adc	r24, r1
    14ee:	91 1d       	adc	r25, r1
    14f0:	a1 1d       	adc	r26, r1
    14f2:	20 d0       	rcall	.+64     	; 0x1534 <__ultoa_invert+0x84>
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <__ultoa_invert+0x48>
    14f6:	68 94       	set
    14f8:	3f 91       	pop	r19
    14fa:	2a e0       	ldi	r18, 0x0A	; 10
    14fc:	26 9f       	mul	r18, r22
    14fe:	11 24       	eor	r1, r1
    1500:	30 19       	sub	r19, r0
    1502:	30 5d       	subi	r19, 0xD0	; 208
    1504:	31 93       	st	Z+, r19
    1506:	de f6       	brtc	.-74     	; 0x14be <__ultoa_invert+0xe>
    1508:	cf 01       	movw	r24, r30
    150a:	08 95       	ret
    150c:	46 2f       	mov	r20, r22
    150e:	47 70       	andi	r20, 0x07	; 7
    1510:	40 5d       	subi	r20, 0xD0	; 208
    1512:	41 93       	st	Z+, r20
    1514:	b3 e0       	ldi	r27, 0x03	; 3
    1516:	0f d0       	rcall	.+30     	; 0x1536 <__ultoa_invert+0x86>
    1518:	c9 f7       	brne	.-14     	; 0x150c <__ultoa_invert+0x5c>
    151a:	f6 cf       	rjmp	.-20     	; 0x1508 <__ultoa_invert+0x58>
    151c:	46 2f       	mov	r20, r22
    151e:	4f 70       	andi	r20, 0x0F	; 15
    1520:	40 5d       	subi	r20, 0xD0	; 208
    1522:	4a 33       	cpi	r20, 0x3A	; 58
    1524:	18 f0       	brcs	.+6      	; 0x152c <__ultoa_invert+0x7c>
    1526:	49 5d       	subi	r20, 0xD9	; 217
    1528:	31 fd       	sbrc	r19, 1
    152a:	40 52       	subi	r20, 0x20	; 32
    152c:	41 93       	st	Z+, r20
    152e:	02 d0       	rcall	.+4      	; 0x1534 <__ultoa_invert+0x84>
    1530:	a9 f7       	brne	.-22     	; 0x151c <__ultoa_invert+0x6c>
    1532:	ea cf       	rjmp	.-44     	; 0x1508 <__ultoa_invert+0x58>
    1534:	b4 e0       	ldi	r27, 0x04	; 4
    1536:	a6 95       	lsr	r26
    1538:	97 95       	ror	r25
    153a:	87 95       	ror	r24
    153c:	77 95       	ror	r23
    153e:	67 95       	ror	r22
    1540:	ba 95       	dec	r27
    1542:	c9 f7       	brne	.-14     	; 0x1536 <__ultoa_invert+0x86>
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	61 05       	cpc	r22, r1
    1548:	71 05       	cpc	r23, r1
    154a:	08 95       	ret
    154c:	9b 01       	movw	r18, r22
    154e:	ac 01       	movw	r20, r24
    1550:	0a 2e       	mov	r0, r26
    1552:	06 94       	lsr	r0
    1554:	57 95       	ror	r21
    1556:	47 95       	ror	r20
    1558:	37 95       	ror	r19
    155a:	27 95       	ror	r18
    155c:	ba 95       	dec	r27
    155e:	c9 f7       	brne	.-14     	; 0x1552 <__ultoa_invert+0xa2>
    1560:	62 0f       	add	r22, r18
    1562:	73 1f       	adc	r23, r19
    1564:	84 1f       	adc	r24, r20
    1566:	95 1f       	adc	r25, r21
    1568:	a0 1d       	adc	r26, r0
    156a:	08 95       	ret

0000156c <__prologue_saves__>:
    156c:	2f 92       	push	r2
    156e:	3f 92       	push	r3
    1570:	4f 92       	push	r4
    1572:	5f 92       	push	r5
    1574:	6f 92       	push	r6
    1576:	7f 92       	push	r7
    1578:	8f 92       	push	r8
    157a:	9f 92       	push	r9
    157c:	af 92       	push	r10
    157e:	bf 92       	push	r11
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	ca 1b       	sub	r28, r26
    1596:	db 0b       	sbc	r29, r27
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	09 94       	ijmp

0000159e <__epilogue_restores__>:
    159e:	2a 88       	ldd	r2, Y+18	; 0x12
    15a0:	39 88       	ldd	r3, Y+17	; 0x11
    15a2:	48 88       	ldd	r4, Y+16	; 0x10
    15a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    15a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    15a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    15aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    15ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    15ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    15b0:	b9 84       	ldd	r11, Y+9	; 0x09
    15b2:	c8 84       	ldd	r12, Y+8	; 0x08
    15b4:	df 80       	ldd	r13, Y+7	; 0x07
    15b6:	ee 80       	ldd	r14, Y+6	; 0x06
    15b8:	fd 80       	ldd	r15, Y+5	; 0x05
    15ba:	0c 81       	ldd	r16, Y+4	; 0x04
    15bc:	1b 81       	ldd	r17, Y+3	; 0x03
    15be:	aa 81       	ldd	r26, Y+2	; 0x02
    15c0:	b9 81       	ldd	r27, Y+1	; 0x01
    15c2:	ce 0f       	add	r28, r30
    15c4:	d1 1d       	adc	r29, r1
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	ed 01       	movw	r28, r26
    15cc:	08 95       	ret

000015ce <_exit>:
    15ce:	f8 94       	cli

000015d0 <__stop_program>:
    15d0:	ff cf       	rjmp	.-2      	; 0x15d0 <__stop_program>
