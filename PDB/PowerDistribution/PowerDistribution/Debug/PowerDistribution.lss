
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00802000  00000bea  00000c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008020ae  008020ae  00000d2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002690  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062b  00000000  00000000  00003504  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000511  00000000  00000000  00003b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00004040  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020ae  00000000  00000000  0000431c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c0  00000000  00000000  000063ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00006b8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_7>
  20:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_8>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_12>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_30>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	ea ee       	ldi	r30, 0xEA	; 234
  c0:	fb e0       	ldi	r31, 0x0B	; 11
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ae 3a       	cpi	r26, 0xAE	; 174
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	20 e2       	ldi	r18, 0x20	; 32
  d0:	ae ea       	ldi	r26, 0xAE	; 174
  d2:	b0 e2       	ldi	r27, 0x20	; 32
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ad 3b       	cpi	r26, 0xBD	; 189
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 cd 02 	call	0x59a	; 0x59a <main>
  e2:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z13configureADCsv>:
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
	
}

void configureADCs(){
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
	// Batt Input Voltage
	// Halve Input
	//Set to single ended input
	//Set to 12-bit mode
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b2 e0       	ldi	r27, 0x02	; 2
  f2:	82 e1       	ldi	r24, 0x12	; 18
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	8c 93       	st	X, r24
  f8:	11 97       	sbiw	r26, 0x01	; 1
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
  fa:	80 e2       	ldi	r24, 0x20	; 32
  fc:	12 96       	adiw	r26, 0x02	; 2
  fe:	8c 93       	st	X, r24
 100:	12 97       	sbiw	r26, 0x02	; 2
	ADCA.EVCTRL = 0; //Disable events
 102:	13 96       	adiw	r26, 0x03	; 3
 104:	1c 92       	st	X, r1
 106:	13 97       	sbiw	r26, 0x03	; 3
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 108:	87 e0       	ldi	r24, 0x07	; 7
 10a:	14 96       	adiw	r26, 0x04	; 4
 10c:	8c 93       	st	X, r24
 10e:	14 97       	sbiw	r26, 0x04	; 4
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
static uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 110:	ca ec       	ldi	r28, 0xCA	; 202
 112:	d1 e0       	ldi	r29, 0x01	; 1
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	88 83       	st	Y, r24
	result = pgm_read_byte(index);
 118:	e0 e2       	ldi	r30, 0x20	; 32
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	e4 91       	lpm	r30, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 11e:	18 82       	st	Y, r1
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
	ADCA.EVCTRL = 0; //Disable events
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
 120:	1c 96       	adiw	r26, 0x0c	; 12
 122:	ec 93       	st	X, r30
 124:	1c 97       	sbiw	r26, 0x0c	; 12
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
static uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 126:	88 83       	st	Y, r24
	result = pgm_read_byte(index);
 128:	e1 e2       	ldi	r30, 0x21	; 33
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e4 91       	lpm	r30, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 12e:	18 82       	st	Y, r1
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
	ADCA.EVCTRL = 0; //Disable events
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
 130:	1d 96       	adiw	r26, 0x0d	; 13
 132:	ec 93       	st	X, r30
 134:	1d 97       	sbiw	r26, 0x0d	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	ef e7       	ldi	r30, 0x7F	; 127
 138:	fc e0       	ldi	r31, 0x0C	; 12
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <_Z13configureADCsv+0x50>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_Z13configureADCsv+0x56>
 140:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
 142:	90 96       	adiw	r26, 0x20	; 32
 144:	8c 93       	st	X, r24
 146:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	91 96       	adiw	r26, 0x21	; 33
 14c:	8c 93       	st	X, r24
 14e:	91 97       	sbiw	r26, 0x21	; 33
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
 150:	92 96       	adiw	r26, 0x22	; 34
 152:	1c 92       	st	X, r1
 154:	92 97       	sbiw	r26, 0x22	; 34
	ADCA.CTRLA = ADC_ENABLE_bm;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	8c 93       	st	X, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
	//ADCA.CTRLA |= ADC_CH8START_bm;
	*/	
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
 160:	e0 e5       	ldi	r30, 0x50	; 80
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	8b e4       	ldi	r24, 0x4B	; 75
 166:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
 168:	80 81       	ld	r24, Z
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
 16e:	81 81       	ldd	r24, Z+1	; 0x01
 170:	83 fd       	sbrc	r24, 3
 172:	09 c0       	rjmp	.+18     	; 0x186 <_Z27configureExternalOscillatorv+0x26>
 174:	a0 e4       	ldi	r26, 0x40	; 64
 176:	b6 e0       	ldi	r27, 0x06	; 6
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	15 96       	adiw	r26, 0x05	; 5
 17c:	9c 93       	st	X, r25
 17e:	15 97       	sbiw	r26, 0x05	; 5
 180:	81 81       	ldd	r24, Z+1	; 0x01
 182:	83 ff       	sbrs	r24, 3
 184:	fa cf       	rjmp	.-12     	; 0x17a <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
 18c:	88 ed       	ldi	r24, 0xD8	; 216
 18e:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
 190:	e0 e5       	ldi	r30, 0x50	; 80
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	88 ec       	ldi	r24, 0xC8	; 200
 196:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
 198:	80 81       	ld	r24, Z
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
 19e:	81 81       	ldd	r24, Z+1	; 0x01
 1a0:	84 fd       	sbrc	r24, 4
 1a2:	09 c0       	rjmp	.+18     	; 0x1b6 <_Z27configureExternalOscillatorv+0x56>
 1a4:	a0 e4       	ldi	r26, 0x40	; 64
 1a6:	b6 e0       	ldi	r27, 0x06	; 6
 1a8:	92 e0       	ldi	r25, 0x02	; 2
 1aa:	15 96       	adiw	r26, 0x05	; 5
 1ac:	9c 93       	st	X, r25
 1ae:	15 97       	sbiw	r26, 0x05	; 5
 1b0:	81 81       	ldd	r24, Z+1	; 0x01
 1b2:	84 ff       	sbrs	r24, 4
 1b4:	fa cf       	rjmp	.-12     	; 0x1aa <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
 1bc:	88 ed       	ldi	r24, 0xD8	; 216
 1be:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
 1c0:	e0 e4       	ldi	r30, 0x40	; 64
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
 1c6:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	80 83       	st	Z, r24
 1cc:	08 95       	ret

000001ce <_Z11configureIOv>:
	
	
}

void configureIO(void){
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
 1d2:	e0 e4       	ldi	r30, 0x40	; 64
 1d4:	f6 e0       	ldi	r31, 0x06	; 6
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = PIN0_bm;
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	91 83       	std	Z+1, r25	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
 1de:	30 e2       	ldi	r19, 0x20	; 32
 1e0:	31 83       	std	Z+1, r19	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
 1e2:	24 e0       	ldi	r18, 0x04	; 4
 1e4:	22 83       	std	Z+2, r18	; 0x02
	PORTC.DIRCLR = PIN3_bm;
 1e6:	48 e0       	ldi	r20, 0x08	; 8
 1e8:	42 83       	std	Z+2, r20	; 0x02
	
	//Set pullups on the switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
 1ea:	48 e1       	ldi	r20, 0x18	; 24
 1ec:	42 8b       	std	Z+18, r20	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
 1ee:	43 8b       	std	Z+19, r20	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
 1f0:	a0 e0       	ldi	r26, 0x00	; 0
 1f2:	b6 e0       	ldi	r27, 0x06	; 6
 1f4:	12 96       	adiw	r26, 0x02	; 2
 1f6:	9c 93       	st	X, r25
 1f8:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
 1fa:	12 96       	adiw	r26, 0x02	; 2
 1fc:	8c 93       	st	X, r24
 1fe:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
 200:	c0 e6       	ldi	r28, 0x60	; 96
 202:	d6 e0       	ldi	r29, 0x06	; 6
 204:	9a 83       	std	Y+2, r25	; 0x02
	PORTD.DIRCLR = PIN1_bm;  //Voltage Sense - Electronics Battery
 206:	8a 83       	std	Y+2, r24	; 0x02
	PORTD.DIRCLR = PIN2_bm;  //Voltage Sense - Rear Battery
 208:	2a 83       	std	Y+2, r18	; 0x02
	
	//Setup the RSSI input
	PORTA.DIRCLR = PIN2_bm;				//Set the RSSI pin to be an input
 20a:	12 96       	adiw	r26, 0x02	; 2
 20c:	2c 93       	st	X, r18
 20e:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.INTCTRL = PMIC_MEDLVLEN_bm;	//Set PORTA's interrupt to be medium level
 210:	19 96       	adiw	r26, 0x09	; 9
 212:	8c 93       	st	X, r24
 214:	19 97       	sbiw	r26, 0x09	; 9
	PORTA.INTMASK = PIN2_bm;			//Configure the RSSI pin to be an interrupt
 216:	1a 96       	adiw	r26, 0x0a	; 10
 218:	2c 93       	st	X, r18
 21a:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTA.PIN2CTRL |=  PORT_ISC_BOTHEDGES_gc;	//Configure the interrupt to trigger on both edges
 21c:	52 96       	adiw	r26, 0x12	; 18
 21e:	2c 91       	ld	r18, X
 220:	52 97       	sbiw	r26, 0x12	; 18
 222:	52 96       	adiw	r26, 0x12	; 18
 224:	2c 93       	st	X, r18
	
	
	//DONT FORGET TO CLEAR THE FLAG IN INTFLAGS	
	
	//Initialize output values
	STATUS_CLR();
 226:	96 83       	std	Z+6, r25	; 0x06
	ERROR_CLR();
 228:	86 83       	std	Z+6, r24	; 0x06
	
	REAR_RELAY_CLR();
 22a:	36 83       	std	Z+6, r19	; 0x06
		
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <__vector_30>:

//This function will be called on the edges of the RSSI signal
ISR(PORTA_INT_vect){
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	8f 93       	push	r24
	ERROR_SET();
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	80 93 45 06 	sts	0x0645, r24
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
 244:	84 e0       	ldi	r24, 0x04	; 4
 246:	80 93 0c 06 	sts	0x060C, r24
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/???
 24a:	80 91 af 20 	lds	r24, 0x20AF
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	41 f4       	brne	.+16     	; 0x262 <__vector_30+0x30>
 252:	80 91 08 06 	lds	r24, 0x0608
 256:	82 fd       	sbrc	r24, 2
 258:	07 c0       	rjmp	.+14     	; 0x268 <__vector_30+0x36>
 25a:	0a c0       	rjmp	.+20     	; 0x270 <__vector_30+0x3e>
		RTC.CNT = 0;		//We want to start counting the counter
	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ???\____
 25c:	80 91 08 06 	lds	r24, 0x0608
 260:	07 c0       	rjmp	.+14     	; 0x270 <__vector_30+0x3e>
 262:	88 23       	and	r24, r24
 264:	d9 f3       	breq	.-10     	; 0x25c <__vector_30+0x2a>
 266:	04 c0       	rjmp	.+8      	; 0x270 <__vector_30+0x3e>
	ERROR_SET();
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/???
		RTC.CNT = 0;		//We want to start counting the counter
 268:	10 92 08 04 	sts	0x0408, r1
 26c:	10 92 09 04 	sts	0x0409, r1
	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ???\____
		
	}
	
}
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <_Z21configureTimerCounterv>:
1S    = 0x7A12

*/
void configureTimerCounter(){
	//Set the timer to run (with a prescaler)	
	TCC4.CTRLA = TC45_CLKSEL_DIV1024_gc;	//Configure a 1024 prescaler (we want very broad timing here, exact precision isn't required)
 27c:	e0 e0       	ldi	r30, 0x00	; 0
 27e:	f8 e0       	ldi	r31, 0x08	; 8
 280:	87 e0       	ldi	r24, 0x07	; 7
 282:	80 83       	st	Z, r24
	TCC4.PER = TC_1024_500MS;               //500mS delay
 284:	89 e0       	ldi	r24, 0x09	; 9
 286:	9d e3       	ldi	r25, 0x3D	; 61
 288:	86 a3       	std	Z+38, r24	; 0x26
 28a:	97 a3       	std	Z+39, r25	; 0x27
											//Default delay value. Reference pre-calculated table up above for more information
	
	TCC4.CTRLB = TC45_WGMODE_NORMAL_gc;		//Configure the timer for Normal mode operation
 28c:	11 82       	std	Z+1, r1	; 0x01
	
	TCC4.INTCTRLA = TC45_OVFINTLVL_LO_gc;	//Set a low priority overflow interrupt
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	86 83       	std	Z+6, r24	; 0x06
 292:	08 95       	ret

00000294 <__vector_12>:
}

//Handles compare vector for T/C 4
ISR (TCC4_OVF_vect){
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	++longCounter;
 2b4:	20 91 b3 20 	lds	r18, 0x20B3
 2b8:	30 91 b4 20 	lds	r19, 0x20B4
 2bc:	40 91 b5 20 	lds	r20, 0x20B5
 2c0:	50 91 b6 20 	lds	r21, 0x20B6
 2c4:	60 91 b7 20 	lds	r22, 0x20B7
 2c8:	70 91 b8 20 	lds	r23, 0x20B8
 2cc:	80 91 b9 20 	lds	r24, 0x20B9
 2d0:	90 91 ba 20 	lds	r25, 0x20BA
 2d4:	a1 e0       	ldi	r26, 0x01	; 1
 2d6:	0e 94 e7 05 	call	0xbce	; 0xbce <__adddi3_s8>
 2da:	20 93 b3 20 	sts	0x20B3, r18
 2de:	30 93 b4 20 	sts	0x20B4, r19
 2e2:	40 93 b5 20 	sts	0x20B5, r20
 2e6:	50 93 b6 20 	sts	0x20B6, r21
 2ea:	60 93 b7 20 	sts	0x20B7, r22
 2ee:	70 93 b8 20 	sts	0x20B8, r23
 2f2:	80 93 b9 20 	sts	0x20B9, r24
 2f6:	90 93 ba 20 	sts	0x20BA, r25
	
	TCC4.INTFLAGS |= 0b1;  //Reset overflow interrupt
 2fa:	e0 e0       	ldi	r30, 0x00	; 0
 2fc:	f8 e0       	ldi	r31, 0x08	; 8
 2fe:	84 85       	ldd	r24, Z+12	; 0x0c
 300:	81 60       	ori	r24, 0x01	; 1
 302:	84 87       	std	Z+12, r24	; 0x0c
	
	broadcastStatus = 1;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 b2 20 	sts	0x20B2, r24
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <_Z12configureRTCv>:

void configureRTC(){
	RTC.CTRL = RTC_CORREN_bm | RTC_PRESCALER_DIV1_gc;		//Enable the RTC correction process, and the RTC itself with no prescaler
 32a:	e0 e0       	ldi	r30, 0x00	; 0
 32c:	f4 e0       	ldi	r31, 0x04	; 4
 32e:	89 e0       	ldi	r24, 0x09	; 9
 330:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_COMPINTLVL_LO_gc | RTC_OVFINTLVL_LO_gc; //Enable the overflow and 
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	82 83       	std	Z+2, r24	; 0x02
	
    OSC.CTRL |= OSC_RC32KEN_bm;								//Enable the 32.768kHz internal oscillator
 336:	a0 e5       	ldi	r26, 0x50	; 80
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	8c 91       	ld	r24, X
 33c:	84 60       	ori	r24, 0x04	; 4
 33e:	8c 93       	st	X, r24
 340:	8f e7       	ldi	r24, 0x7F	; 127
 342:	9c e0       	ldi	r25, 0x0C	; 12
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <_Z12configureRTCv+0x1a>
 348:	00 c0       	rjmp	.+0      	; 0x34a <_Z12configureRTCv+0x20>
 34a:	00 00       	nop
	
	_delay_us(400);											//Wait for the oscillator to stabalize.
	
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC32_gc;					//Set the RTC input as the 32.768kHz internal oscillator
 34c:	a0 e4       	ldi	r26, 0x40	; 64
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	13 96       	adiw	r26, 0x03	; 3
 354:	8c 93       	st	X, r24
 356:	13 97       	sbiw	r26, 0x03	; 3
	CLK.RTCCTRL |= CLK_RTCEN_bm;							//Enable the clock input
 358:	13 96       	adiw	r26, 0x03	; 3
 35a:	8c 91       	ld	r24, X
 35c:	13 97       	sbiw	r26, 0x03	; 3
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	13 96       	adiw	r26, 0x03	; 3
 362:	8c 93       	st	X, r24
	
	//Testing setup code
	RTC.COMP = 16384; //~1 second? Assuming 32.768 KHz
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e4       	ldi	r25, 0x40	; 64
 368:	84 87       	std	Z+12, r24	; 0x0c
 36a:	95 87       	std	Z+13, r25	; 0x0d
	RTC.PER = 0xFF00;  //No tengo nuguien idea
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	82 87       	std	Z+10, r24	; 0x0a
 372:	93 87       	std	Z+11, r25	; 0x0b
 374:	08 95       	ret

00000376 <__vector_7>:

}

ISR(RTC_OVF_vect){
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1

}
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_8>:

ISR(RTC_COMP_vect){
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	
	RTC.CNT = 0;
 39a:	e0 e0       	ldi	r30, 0x00	; 0
 39c:	f4 e0       	ldi	r31, 0x04	; 4
 39e:	10 86       	std	Z+8, r1	; 0x08
 3a0:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTFLAGS = 0x02;
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	83 83       	std	Z+3, r24	; 0x03
}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	8f 91       	pop	r24
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <_Z23sampleTempSensorVoltagev>:

	return( result );
}

int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);//ADC_CH_MUXNEG0_bm);
 3b6:	e0 e0       	ldi	r30, 0x00	; 0
 3b8:	f2 e0       	ldi	r31, 0x02	; 2
 3ba:	81 e4       	ldi	r24, 0x41	; 65
 3bc:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
 3be:	80 a1       	ldd	r24, Z+32	; 0x20
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	80 a3       	std	Z+32, r24	; 0x20
 3c4:	8f e7       	ldi	r24, 0x7F	; 127
 3c6:	9c e0       	ldi	r25, 0x0C	; 12
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <_Z23sampleTempSensorVoltagev+0x12>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <_Z23sampleTempSensorVoltagev+0x18>
 3ce:	00 00       	nop
	
	_delay_us(400);
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 8)) != (1U << 8)); // (1U << n) where n is the adc channel, so zero for this one
	
	while(!(ADCA.INTFLAGS & (1 << 0)));
 3d0:	86 81       	ldd	r24, Z+6	; 0x06
 3d2:	80 ff       	sbrs	r24, 0
 3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <_Z23sampleTempSensorVoltagev+0x1a>
	ADCA.INTFLAGS = (1 << 0);
 3d6:	e0 e0       	ldi	r30, 0x00	; 0
 3d8:	f2 e0       	ldi	r31, 0x02	; 2
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
 3de:	84 a1       	ldd	r24, Z+36	; 0x24
 3e0:	95 a1       	ldd	r25, Z+37	; 0x25
}
 3e2:	08 95       	ret

000003e4 <_Z20sampleBatteryVoltagev>:

int16_t sampleBatteryVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN9_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for batt voltage sense
 3e4:	e0 e0       	ldi	r30, 0x00	; 0
 3e6:	f2 e0       	ldi	r31, 0x02	; 2
 3e8:	89 e4       	ldi	r24, 0x49	; 73
 3ea:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
 3ec:	80 a1       	ldd	r24, Z+32	; 0x20
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
	//ADCA.INTFLAGS = ((1U << 0) << ADC_CH0IF_bp);
	while(!(ADCA.INTFLAGS & (1 << 0)));
 3f2:	86 81       	ldd	r24, Z+6	; 0x06
 3f4:	80 ff       	sbrs	r24, 0
 3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <_Z20sampleBatteryVoltagev+0xe>
	ADCA.INTFLAGS = (1 << 0);
 3f8:	e0 e0       	ldi	r30, 0x00	; 0
 3fa:	f2 e0       	ldi	r31, 0x02	; 2
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
 400:	84 a1       	ldd	r24, Z+36	; 0x24
 402:	95 a1       	ldd	r25, Z+37	; 0x25
}
 404:	08 95       	ret

00000406 <_Z18getEBoxTemperaturev>:

double getEBoxTemperature(){
 406:	2f 92       	push	r2
 408:	3f 92       	push	r3
 40a:	4f 92       	push	r4
 40c:	5f 92       	push	r5
 40e:	6f 92       	push	r6
 410:	7f 92       	push	r7
 412:	8f 92       	push	r8
 414:	9f 92       	push	r9
 416:	af 92       	push	r10
 418:	bf 92       	push	r11
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	0f 2e       	mov	r0, r31
 42c:	f4 e6       	ldi	r31, 0x64	; 100
 42e:	6f 2e       	mov	r6, r31
 430:	71 2c       	mov	r7, r1
 432:	f0 2d       	mov	r31, r0
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
 434:	41 2c       	mov	r4, r1
 436:	51 2c       	mov	r5, r1
 438:	81 2c       	mov	r8, r1
 43a:	91 2c       	mov	r9, r1
 43c:	d0 e0       	ldi	r29, 0x00	; 0
 43e:	c0 e0       	ldi	r28, 0x00	; 0
 440:	21 2c       	mov	r2, r1
 442:	31 2c       	mov	r3, r1
	for(int i = 0; i < avgVal; ++i){
		sum += sampleTempSensorVoltage();
 444:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z23sampleTempSensorVoltagev>
 448:	b9 2e       	mov	r11, r25
 44a:	a8 2e       	mov	r10, r24
 44c:	19 2f       	mov	r17, r25
 44e:	11 0f       	add	r17, r17
 450:	11 0b       	sbc	r17, r17
 452:	24 2d       	mov	r18, r4
 454:	35 2d       	mov	r19, r5
 456:	48 2d       	mov	r20, r8
 458:	59 2d       	mov	r21, r9
 45a:	6d 2f       	mov	r22, r29
 45c:	7c 2f       	mov	r23, r28
 45e:	82 2d       	mov	r24, r2
 460:	93 2d       	mov	r25, r3
 462:	c1 2e       	mov	r12, r17
 464:	d1 2e       	mov	r13, r17
 466:	e1 2e       	mov	r14, r17
 468:	f1 2e       	mov	r15, r17
 46a:	01 2f       	mov	r16, r17
 46c:	0e 94 de 05 	call	0xbbc	; 0xbbc <__adddi3>
 470:	42 2e       	mov	r4, r18
 472:	53 2e       	mov	r5, r19
 474:	84 2e       	mov	r8, r20
 476:	95 2e       	mov	r9, r21
 478:	d6 2f       	mov	r29, r22
 47a:	c7 2f       	mov	r28, r23
 47c:	28 2e       	mov	r2, r24
 47e:	39 2e       	mov	r3, r25
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	68 1a       	sub	r6, r24
 484:	71 08       	sbc	r7, r1
double getEBoxTemperature(){
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
	for(int i = 0; i < avgVal; ++i){
 486:	f1 f6       	brne	.-68     	; 0x444 <_Z18getEBoxTemperaturev+0x3e>
		sum += sampleTempSensorVoltage();
	}
	temperature = sum / avgVal;
 488:	0f 2e       	mov	r0, r31
 48a:	f4 e6       	ldi	r31, 0x64	; 100
 48c:	af 2e       	mov	r10, r31
 48e:	f0 2d       	mov	r31, r0
 490:	b1 2c       	mov	r11, r1
 492:	c1 2c       	mov	r12, r1
 494:	d1 2c       	mov	r13, r1
 496:	e1 2c       	mov	r14, r1
 498:	f1 2c       	mov	r15, r1
 49a:	00 e0       	ldi	r16, 0x00	; 0
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	24 2d       	mov	r18, r4
 4a0:	35 2d       	mov	r19, r5
 4a2:	48 2d       	mov	r20, r8
 4a4:	59 2d       	mov	r21, r9
 4a6:	6d 2f       	mov	r22, r29
 4a8:	7c 2f       	mov	r23, r28
 4aa:	82 2d       	mov	r24, r2
 4ac:	93 2d       	mov	r25, r3
 4ae:	0e 94 81 05 	call	0xb02	; 0xb02 <__udivdi3>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
 4b2:	62 2f       	mov	r22, r18
 4b4:	73 2f       	mov	r23, r19
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatunsisf>
 4be:	29 e8       	ldi	r18, 0x89	; 137
 4c0:	3d e0       	ldi	r19, 0x0D	; 13
 4c2:	4d e9       	ldi	r20, 0x9D	; 157
 4c4:	5a e3       	ldi	r21, 0x3A	; 58
 4c6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__mulsf3>
 4ca:	24 e6       	ldi	r18, 0x64	; 100
 4cc:	37 e6       	ldi	r19, 0x67	; 103
 4ce:	49 e1       	ldi	r20, 0x19	; 25
 4d0:	5b e3       	ldi	r21, 0x3B	; 59
 4d2:	0e 94 84 03 	call	0x708	; 0x708 <__addsf3>
	//SendStringPC((char *)"[tmpVolt:");
	//SendFloatPC(temperatureVoltage);
	//SendStringPC((char *)"]");
	
	#ifdef TMP36
		double temperatureFloat = 100.0 * temperatureVoltage - 50.0;
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	48 ec       	ldi	r20, 0xC8	; 200
 4dc:	52 e4       	ldi	r21, 0x42	; 66
 4de:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__mulsf3>
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	48 e4       	ldi	r20, 0x48	; 72
 4e8:	52 e4       	ldi	r21, 0x42	; 66
 4ea:	0e 94 83 03 	call	0x706	; 0x706 <__subsf3>
	#endif
	
	return temperatureFloat;
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	df 90       	pop	r13
 4fc:	cf 90       	pop	r12
 4fe:	bf 90       	pop	r11
 500:	af 90       	pop	r10
 502:	9f 90       	pop	r9
 504:	8f 90       	pop	r8
 506:	7f 90       	pop	r7
 508:	6f 90       	pop	r6
 50a:	5f 90       	pop	r5
 50c:	4f 90       	pop	r4
 50e:	3f 90       	pop	r3
 510:	2f 90       	pop	r2
 512:	08 95       	ret

00000514 <_Z28getElectronicsBatteryVoltagev>:

double getElectronicsBatteryVoltage(){
 514:	cf 92       	push	r12
 516:	df 92       	push	r13
 518:	ef 92       	push	r14
 51a:	ff 92       	push	r15
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	c2 e3       	ldi	r28, 0x32	; 50
 522:	d0 e0       	ldi	r29, 0x00	; 0

	int avgVal = 50;
	uint32_t sum = 0;
 524:	c1 2c       	mov	r12, r1
 526:	d1 2c       	mov	r13, r1
 528:	76 01       	movw	r14, r12
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
 52a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z20sampleBatteryVoltagev>
 52e:	09 2e       	mov	r0, r25
 530:	00 0c       	add	r0, r0
 532:	aa 0b       	sbc	r26, r26
 534:	bb 0b       	sbc	r27, r27
 536:	c8 0e       	add	r12, r24
 538:	d9 1e       	adc	r13, r25
 53a:	ea 1e       	adc	r14, r26
 53c:	fb 1e       	adc	r15, r27
 53e:	21 97       	sbiw	r28, 0x01	; 1
double getElectronicsBatteryVoltage(){

	int avgVal = 50;
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
 540:	a1 f7       	brne	.-24     	; 0x52a <_Z28getElectronicsBatteryVoltagev+0x16>
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
 542:	c7 01       	movw	r24, r14
 544:	b6 01       	movw	r22, r12
 546:	22 e3       	ldi	r18, 0x32	; 50
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	0e 94 5d 05 	call	0xaba	; 0xaba <__udivmodsi4>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
 552:	b9 01       	movw	r22, r18
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatunsisf>
 55c:	29 e8       	ldi	r18, 0x89	; 137
 55e:	3d e0       	ldi	r19, 0x0D	; 13
 560:	4d e9       	ldi	r20, 0x9D	; 157
 562:	5a e3       	ldi	r21, 0x3A	; 58
 564:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__mulsf3>
 568:	24 e6       	ldi	r18, 0x64	; 100
 56a:	37 e6       	ldi	r19, 0x67	; 103
 56c:	49 e1       	ldi	r20, 0x19	; 25
 56e:	5b e3       	ldi	r21, 0x3B	; 59
 570:	0e 94 84 03 	call	0x708	; 0x708 <__addsf3>
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
	double electronicsVoltage = ADCCountToVoltage(electronicsVoltageCount);
	double calculatedElectronicsVoltage =  (electronicsVoltage / .56) + (10.0 - .05);
 574:	29 e2       	ldi	r18, 0x29	; 41
 576:	3c e5       	ldi	r19, 0x5C	; 92
 578:	4f e0       	ldi	r20, 0x0F	; 15
 57a:	5f e3       	ldi	r21, 0x3F	; 63
 57c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__divsf3>
 580:	23 e3       	ldi	r18, 0x33	; 51
 582:	33 e3       	ldi	r19, 0x33	; 51
 584:	4f e1       	ldi	r20, 0x1F	; 31
 586:	51 e4       	ldi	r21, 0x41	; 65
 588:	0e 94 84 03 	call	0x708	; 0x708 <__addsf3>

	return calculatedElectronicsVoltage;
}
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	df 90       	pop	r13
 596:	cf 90       	pop	r12
 598:	08 95       	ret

0000059a <main>:

enum measuring {MEASURING, NOT_MEASURING};

int main(void)
{
	configureIO();
 59a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z11configureIOv>
	configureExternalOscillator();
 59e:	0e 94 b0 00 	call	0x160	; 0x160 <_Z27configureExternalOscillatorv>
	configureUSART();					//Set up for 57600 Baud
 5a2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_Z14configureUSARTv>
	configureTimerCounter();
 5a6:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z21configureTimerCounterv>
	configureADCs();
 5aa:	0e 94 75 00 	call	0xea	; 0xea <_Z13configureADCsv>
	configureRTC();
 5ae:	0e 94 95 01 	call	0x32a	; 0x32a <_Z12configureRTCv>

	//PMIC.CTRL |= PMIC_LOLVLEN_bm;
	
	LOW_LEVEL_INTERRUPTS_ENABLE();
 5b2:	e0 ea       	ldi	r30, 0xA0	; 160
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	82 81       	ldd	r24, Z+2	; 0x02
 5b8:	81 60       	ori	r24, 0x01	; 1
 5ba:	82 83       	std	Z+2, r24	; 0x02
	MED_LEVEL_INTERRUPTS_ENABLE();
 5bc:	82 81       	ldd	r24, Z+2	; 0x02
 5be:	82 60       	ori	r24, 0x02	; 2
 5c0:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable global interrupts
 5c2:	78 94       	sei
	
	uint8_t receivedUSARTData;
	
	RSSI.measuring = NOT_MEASURING;
 5c4:	ee ea       	ldi	r30, 0xAE	; 174
 5c6:	f0 e2       	ldi	r31, 0x20	; 32
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	81 83       	std	Z+1, r24	; 0x01
	RSSI.timeDifference = 0;
 5cc:	12 82       	std	Z+2, r1	; 0x02
 5ce:	13 82       	std	Z+3, r1	; 0x03
	
	
	//Init string with basic documentation
	SendStringPC((char *)"#[INIT ROSS PDB]\n\r");
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e2       	ldi	r25, 0x20	; 32
 5d4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z12SendStringPCPc>
	SendStringPC((char *)"#Firmware version ");
 5d8:	83 e1       	ldi	r24, 0x13	; 19
 5da:	90 e2       	ldi	r25, 0x20	; 32
 5dc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z12SendStringPCPc>
	SendStringPC((char *)FIRMWARE_VERSION_STR);
 5e0:	86 e2       	ldi	r24, 0x26	; 38
 5e2:	90 e2       	ldi	r25, 0x20	; 32
 5e4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z12SendStringPCPc>
	SendStringPC((char *)"\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr \n\r");
 5e8:	83 e3       	ldi	r24, 0x33	; 51
 5ea:	90 e2       	ldi	r25, 0x20	; 32
 5ec:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z12SendStringPCPc>
	
	ERROR_CLR();
 5f0:	82 e0       	ldi	r24, 0x02	; 2
 5f2:	80 93 46 06 	sts	0x0646, r24
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
 5f6:	c0 ec       	ldi	r28, 0xC0	; 192
 5f8:	d8 e0       	ldi	r29, 0x08	; 8
			receivedUSARTData = USART_GetChar(&COMP_USART);
			if(receivedUSARTData == 'y')
				REAR_RELAY_SET();
			else if(receivedUSARTData == 'n')
				REAR_RELAY_CLR();
 5fa:	0f 2e       	mov	r0, r31
 5fc:	f0 e4       	ldi	r31, 0x40	; 64
 5fe:	8f 2e       	mov	r8, r31
 600:	f6 e0       	ldi	r31, 0x06	; 6
 602:	9f 2e       	mov	r9, r31
 604:	f0 2d       	mov	r31, r0
 606:	68 94       	set
 608:	77 24       	eor	r7, r7
 60a:	75 f8       	bld	r7, 5
				
		//if (timingCounter++ == timingThreshold) {
		if(broadcastStatus){
			broadcastStatus = 0;
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
 60c:	00 e0       	ldi	r16, 0x00	; 0
 60e:	18 e0       	ldi	r17, 0x08	; 8
			if(toggle){
				STATUS_SET();
				toggle = 0;
			}
			else {
				STATUS_CLR();
 610:	66 24       	eor	r6, r6
 612:	63 94       	inc	r6
				toggle = 1;
 614:	aa 24       	eor	r10, r10
 616:	a3 94       	inc	r10
 618:	b1 2c       	mov	r11, r1
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
				TCC4.PER = TC_1024_100MS;  //100mS delay
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
 61a:	0f 2e       	mov	r0, r31
 61c:	f9 e0       	ldi	r31, 0x09	; 9
 61e:	cf 2e       	mov	r12, r31
 620:	fd e3       	ldi	r31, 0x3D	; 61
 622:	df 2e       	mov	r13, r31
 624:	f0 2d       	mov	r31, r0
			
			*/
	
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
				TCC4.PER = TC_1024_100MS;  //100mS delay
 626:	0f 2e       	mov	r0, r31
 628:	f5 e3       	ldi	r31, 0x35	; 53
 62a:	ef 2e       	mov	r14, r31
 62c:	fc e0       	ldi	r31, 0x0C	; 12
 62e:	ff 2e       	mov	r15, r31
 630:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 632:	8f e3       	ldi	r24, 0x3F	; 63
 634:	9f e1       	ldi	r25, 0x1F	; 31
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	f1 f7       	brne	.-4      	; 0x636 <main+0x9c>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <main+0xa2>
 63c:	00 00       	nop
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	88 23       	and	r24, r24
 642:	54 f4       	brge	.+20     	; 0x658 <main+0xbe>
			receivedUSARTData = USART_GetChar(&COMP_USART);
 644:	88 81       	ld	r24, Y
			if(receivedUSARTData == 'y')
 646:	89 37       	cpi	r24, 0x79	; 121
 648:	19 f4       	brne	.+6      	; 0x650 <main+0xb6>
				REAR_RELAY_SET();
 64a:	f4 01       	movw	r30, r8
 64c:	75 82       	std	Z+5, r7	; 0x05
 64e:	04 c0       	rjmp	.+8      	; 0x658 <main+0xbe>
			else if(receivedUSARTData == 'n')
 650:	8e 36       	cpi	r24, 0x6E	; 110
 652:	11 f4       	brne	.+4      	; 0x658 <main+0xbe>
				REAR_RELAY_CLR();
 654:	f4 01       	movw	r30, r8
 656:	76 82       	std	Z+6, r7	; 0x06
		}		
				
		//if (timingCounter++ == timingThreshold) {
		if(broadcastStatus){
 658:	80 91 b2 20 	lds	r24, 0x20B2
 65c:	88 23       	and	r24, r24
 65e:	49 f3       	breq	.-46     	; 0x632 <main+0x98>
			broadcastStatus = 0;
 660:	10 92 b2 20 	sts	0x20B2, r1
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
 664:	f8 01       	movw	r30, r16
 666:	10 a2       	std	Z+32, r1	; 0x20
 668:	11 a2       	std	Z+33, r1	; 0x21
							//have a consistent report time. (We don't want to throw
							//out the accuracy of the TC)
			
			//Calculated desired output values
			double EBoxTemp = getEBoxTemperature();
 66a:	0e 94 03 02 	call	0x406	; 0x406 <_Z18getEBoxTemperaturev>
			double electronicsBatteryVoltage = getElectronicsBatteryVoltage();
 66e:	0e 94 8a 02 	call	0x514	; 0x514 <_Z28getElectronicsBatteryVoltagev>
			double zero = 0.0;
			
			//Actually output the desired values
			//Not the most elegant code in the world, but it works...
			
			if(toggle){
 672:	80 91 bb 20 	lds	r24, 0x20BB
 676:	90 91 bc 20 	lds	r25, 0x20BC
 67a:	89 2b       	or	r24, r25
 67c:	39 f0       	breq	.+14     	; 0x68c <main+0xf2>
				STATUS_SET();
 67e:	f4 01       	movw	r30, r8
 680:	65 82       	std	Z+5, r6	; 0x05
				toggle = 0;
 682:	10 92 bb 20 	sts	0x20BB, r1
 686:	10 92 bc 20 	sts	0x20BC, r1
 68a:	06 c0       	rjmp	.+12     	; 0x698 <main+0xfe>
			}
			else {
				STATUS_CLR();
 68c:	f4 01       	movw	r30, r8
 68e:	66 82       	std	Z+6, r6	; 0x06
				toggle = 1;
 690:	a0 92 bb 20 	sts	0x20BB, r10
 694:	b0 92 bc 20 	sts	0x20BC, r11
			}
			
			SendStringPC("Hello, world! \n\r");
 698:	8c e9       	ldi	r24, 0x9C	; 156
 69a:	90 e2       	ldi	r25, 0x20	; 32
 69c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z12SendStringPCPc>
			//SendStringPC((char *)"|");
			
			*/
	
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
 6a0:	f4 01       	movw	r30, r8
 6a2:	80 85       	ldd	r24, Z+8	; 0x08
 6a4:	83 fd       	sbrc	r24, 3
 6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <main+0x116>
				TCC4.PER = TC_1024_100MS;  //100mS delay
 6a8:	f8 01       	movw	r30, r16
 6aa:	e6 a2       	std	Z+38, r14	; 0x26
 6ac:	f7 a2       	std	Z+39, r15	; 0x27
 6ae:	c1 cf       	rjmp	.-126    	; 0x632 <main+0x98>
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
 6b0:	f8 01       	movw	r30, r16
 6b2:	c6 a2       	std	Z+38, r12	; 0x26
 6b4:	d7 a2       	std	Z+39, r13	; 0x27
 6b6:	bd cf       	rjmp	.-134    	; 0x632 <main+0x98>

000006b8 <_Z12SendStringPCPc>:
#include "usartROSS.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 6b8:	fc 01       	movw	r30, r24
 6ba:	20 81       	ld	r18, Z
 6bc:	22 23       	and	r18, r18
 6be:	59 f0       	breq	.+22     	; 0x6d6 <_Z12SendStringPCPc+0x1e>
 6c0:	dc 01       	movw	r26, r24
 6c2:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
 6c4:	e0 ec       	ldi	r30, 0xC0	; 192
 6c6:	f8 e0       	ldi	r31, 0x08	; 8
 6c8:	91 81       	ldd	r25, Z+1	; 0x01
 6ca:	95 ff       	sbrs	r25, 5
 6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
 6ce:	20 83       	st	Z, r18
#include "usartROSS.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 6d0:	2d 91       	ld	r18, X+
 6d2:	21 11       	cpse	r18, r1
 6d4:	f9 cf       	rjmp	.-14     	; 0x6c8 <_Z12SendStringPCPc+0x10>
 6d6:	08 95       	ret

000006d8 <_Z14configureUSARTv>:
	SendStringPC(buffer);
}

void configureUSART(void){
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
 6d8:	e0 e4       	ldi	r30, 0x40	; 64
 6da:	f6 e0       	ldi	r31, 0x06	; 6
 6dc:	80 e8       	ldi	r24, 0x80	; 128
 6de:	81 83       	std	Z+1, r24	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
 6e0:	80 e4       	ldi	r24, 0x40	; 64
 6e2:	82 83       	std	Z+2, r24	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
 6e4:	86 85       	ldd	r24, Z+14	; 0x0e
 6e6:	80 61       	ori	r24, 0x10	; 16
 6e8:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 6ea:	e0 ec       	ldi	r30, 0xC0	; 192
 6ec:	f8 e0       	ldi	r31, 0x08	; 8
 6ee:	83 e0       	ldi	r24, 0x03	; 3
 6f0:	84 83       	std	Z+4, r24	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
 6f2:	82 e2       	ldi	r24, 0x22	; 34
 6f4:	86 83       	std	Z+6, r24	; 0x06
 6f6:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
 6f8:	83 81       	ldd	r24, Z+3	; 0x03
 6fa:	80 61       	ori	r24, 0x10	; 16
 6fc:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
 6fe:	83 81       	ldd	r24, Z+3	; 0x03
 700:	88 60       	ori	r24, 0x08	; 8
 702:	83 83       	std	Z+3, r24	; 0x03
 704:	08 95       	ret

00000706 <__subsf3>:
 706:	50 58       	subi	r21, 0x80	; 128

00000708 <__addsf3>:
 708:	bb 27       	eor	r27, r27
 70a:	aa 27       	eor	r26, r26
 70c:	0e 94 9b 03 	call	0x736	; 0x736 <__addsf3x>
 710:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_round>
 714:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscA>
 718:	38 f0       	brcs	.+14     	; 0x728 <__addsf3+0x20>
 71a:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_pscB>
 71e:	20 f0       	brcs	.+8      	; 0x728 <__addsf3+0x20>
 720:	39 f4       	brne	.+14     	; 0x730 <__addsf3+0x28>
 722:	9f 3f       	cpi	r25, 0xFF	; 255
 724:	19 f4       	brne	.+6      	; 0x72c <__addsf3+0x24>
 726:	26 f4       	brtc	.+8      	; 0x730 <__addsf3+0x28>
 728:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_nan>
 72c:	0e f4       	brtc	.+2      	; 0x730 <__addsf3+0x28>
 72e:	e0 95       	com	r30
 730:	e7 fb       	bst	r30, 7
 732:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_inf>

00000736 <__addsf3x>:
 736:	e9 2f       	mov	r30, r25
 738:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_split3>
 73c:	58 f3       	brcs	.-42     	; 0x714 <__addsf3+0xc>
 73e:	ba 17       	cp	r27, r26
 740:	62 07       	cpc	r22, r18
 742:	73 07       	cpc	r23, r19
 744:	84 07       	cpc	r24, r20
 746:	95 07       	cpc	r25, r21
 748:	20 f0       	brcs	.+8      	; 0x752 <__addsf3x+0x1c>
 74a:	79 f4       	brne	.+30     	; 0x76a <__addsf3x+0x34>
 74c:	a6 f5       	brtc	.+104    	; 0x7b6 <__addsf3x+0x80>
 74e:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_zero>
 752:	0e f4       	brtc	.+2      	; 0x756 <__addsf3x+0x20>
 754:	e0 95       	com	r30
 756:	0b 2e       	mov	r0, r27
 758:	ba 2f       	mov	r27, r26
 75a:	a0 2d       	mov	r26, r0
 75c:	0b 01       	movw	r0, r22
 75e:	b9 01       	movw	r22, r18
 760:	90 01       	movw	r18, r0
 762:	0c 01       	movw	r0, r24
 764:	ca 01       	movw	r24, r20
 766:	a0 01       	movw	r20, r0
 768:	11 24       	eor	r1, r1
 76a:	ff 27       	eor	r31, r31
 76c:	59 1b       	sub	r21, r25
 76e:	99 f0       	breq	.+38     	; 0x796 <__addsf3x+0x60>
 770:	59 3f       	cpi	r21, 0xF9	; 249
 772:	50 f4       	brcc	.+20     	; 0x788 <__addsf3x+0x52>
 774:	50 3e       	cpi	r21, 0xE0	; 224
 776:	68 f1       	brcs	.+90     	; 0x7d2 <__addsf3x+0x9c>
 778:	1a 16       	cp	r1, r26
 77a:	f0 40       	sbci	r31, 0x00	; 0
 77c:	a2 2f       	mov	r26, r18
 77e:	23 2f       	mov	r18, r19
 780:	34 2f       	mov	r19, r20
 782:	44 27       	eor	r20, r20
 784:	58 5f       	subi	r21, 0xF8	; 248
 786:	f3 cf       	rjmp	.-26     	; 0x76e <__addsf3x+0x38>
 788:	46 95       	lsr	r20
 78a:	37 95       	ror	r19
 78c:	27 95       	ror	r18
 78e:	a7 95       	ror	r26
 790:	f0 40       	sbci	r31, 0x00	; 0
 792:	53 95       	inc	r21
 794:	c9 f7       	brne	.-14     	; 0x788 <__addsf3x+0x52>
 796:	7e f4       	brtc	.+30     	; 0x7b6 <__addsf3x+0x80>
 798:	1f 16       	cp	r1, r31
 79a:	ba 0b       	sbc	r27, r26
 79c:	62 0b       	sbc	r22, r18
 79e:	73 0b       	sbc	r23, r19
 7a0:	84 0b       	sbc	r24, r20
 7a2:	ba f0       	brmi	.+46     	; 0x7d2 <__addsf3x+0x9c>
 7a4:	91 50       	subi	r25, 0x01	; 1
 7a6:	a1 f0       	breq	.+40     	; 0x7d0 <__addsf3x+0x9a>
 7a8:	ff 0f       	add	r31, r31
 7aa:	bb 1f       	adc	r27, r27
 7ac:	66 1f       	adc	r22, r22
 7ae:	77 1f       	adc	r23, r23
 7b0:	88 1f       	adc	r24, r24
 7b2:	c2 f7       	brpl	.-16     	; 0x7a4 <__addsf3x+0x6e>
 7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <__addsf3x+0x9c>
 7b6:	ba 0f       	add	r27, r26
 7b8:	62 1f       	adc	r22, r18
 7ba:	73 1f       	adc	r23, r19
 7bc:	84 1f       	adc	r24, r20
 7be:	48 f4       	brcc	.+18     	; 0x7d2 <__addsf3x+0x9c>
 7c0:	87 95       	ror	r24
 7c2:	77 95       	ror	r23
 7c4:	67 95       	ror	r22
 7c6:	b7 95       	ror	r27
 7c8:	f7 95       	ror	r31
 7ca:	9e 3f       	cpi	r25, 0xFE	; 254
 7cc:	08 f0       	brcs	.+2      	; 0x7d0 <__addsf3x+0x9a>
 7ce:	b0 cf       	rjmp	.-160    	; 0x730 <__addsf3+0x28>
 7d0:	93 95       	inc	r25
 7d2:	88 0f       	add	r24, r24
 7d4:	08 f0       	brcs	.+2      	; 0x7d8 <__addsf3x+0xa2>
 7d6:	99 27       	eor	r25, r25
 7d8:	ee 0f       	add	r30, r30
 7da:	97 95       	ror	r25
 7dc:	87 95       	ror	r24
 7de:	08 95       	ret

000007e0 <__divsf3>:
 7e0:	0e 94 04 04 	call	0x808	; 0x808 <__divsf3x>
 7e4:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_round>
 7e8:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_pscB>
 7ec:	58 f0       	brcs	.+22     	; 0x804 <__divsf3+0x24>
 7ee:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscA>
 7f2:	40 f0       	brcs	.+16     	; 0x804 <__divsf3+0x24>
 7f4:	29 f4       	brne	.+10     	; 0x800 <__divsf3+0x20>
 7f6:	5f 3f       	cpi	r21, 0xFF	; 255
 7f8:	29 f0       	breq	.+10     	; 0x804 <__divsf3+0x24>
 7fa:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_inf>
 7fe:	51 11       	cpse	r21, r1
 800:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_szero>
 804:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_nan>

00000808 <__divsf3x>:
 808:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_split3>
 80c:	68 f3       	brcs	.-38     	; 0x7e8 <__divsf3+0x8>

0000080e <__divsf3_pse>:
 80e:	99 23       	and	r25, r25
 810:	b1 f3       	breq	.-20     	; 0x7fe <__divsf3+0x1e>
 812:	55 23       	and	r21, r21
 814:	91 f3       	breq	.-28     	; 0x7fa <__divsf3+0x1a>
 816:	95 1b       	sub	r25, r21
 818:	55 0b       	sbc	r21, r21
 81a:	bb 27       	eor	r27, r27
 81c:	aa 27       	eor	r26, r26
 81e:	62 17       	cp	r22, r18
 820:	73 07       	cpc	r23, r19
 822:	84 07       	cpc	r24, r20
 824:	38 f0       	brcs	.+14     	; 0x834 <__divsf3_pse+0x26>
 826:	9f 5f       	subi	r25, 0xFF	; 255
 828:	5f 4f       	sbci	r21, 0xFF	; 255
 82a:	22 0f       	add	r18, r18
 82c:	33 1f       	adc	r19, r19
 82e:	44 1f       	adc	r20, r20
 830:	aa 1f       	adc	r26, r26
 832:	a9 f3       	breq	.-22     	; 0x81e <__divsf3_pse+0x10>
 834:	35 d0       	rcall	.+106    	; 0x8a0 <__divsf3_pse+0x92>
 836:	0e 2e       	mov	r0, r30
 838:	3a f0       	brmi	.+14     	; 0x848 <__divsf3_pse+0x3a>
 83a:	e0 e8       	ldi	r30, 0x80	; 128
 83c:	32 d0       	rcall	.+100    	; 0x8a2 <__divsf3_pse+0x94>
 83e:	91 50       	subi	r25, 0x01	; 1
 840:	50 40       	sbci	r21, 0x00	; 0
 842:	e6 95       	lsr	r30
 844:	00 1c       	adc	r0, r0
 846:	ca f7       	brpl	.-14     	; 0x83a <__divsf3_pse+0x2c>
 848:	2b d0       	rcall	.+86     	; 0x8a0 <__divsf3_pse+0x92>
 84a:	fe 2f       	mov	r31, r30
 84c:	29 d0       	rcall	.+82     	; 0x8a0 <__divsf3_pse+0x92>
 84e:	66 0f       	add	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	88 1f       	adc	r24, r24
 854:	bb 1f       	adc	r27, r27
 856:	26 17       	cp	r18, r22
 858:	37 07       	cpc	r19, r23
 85a:	48 07       	cpc	r20, r24
 85c:	ab 07       	cpc	r26, r27
 85e:	b0 e8       	ldi	r27, 0x80	; 128
 860:	09 f0       	breq	.+2      	; 0x864 <__divsf3_pse+0x56>
 862:	bb 0b       	sbc	r27, r27
 864:	80 2d       	mov	r24, r0
 866:	bf 01       	movw	r22, r30
 868:	ff 27       	eor	r31, r31
 86a:	93 58       	subi	r25, 0x83	; 131
 86c:	5f 4f       	sbci	r21, 0xFF	; 255
 86e:	3a f0       	brmi	.+14     	; 0x87e <__divsf3_pse+0x70>
 870:	9e 3f       	cpi	r25, 0xFE	; 254
 872:	51 05       	cpc	r21, r1
 874:	78 f0       	brcs	.+30     	; 0x894 <__divsf3_pse+0x86>
 876:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_inf>
 87a:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_szero>
 87e:	5f 3f       	cpi	r21, 0xFF	; 255
 880:	e4 f3       	brlt	.-8      	; 0x87a <__divsf3_pse+0x6c>
 882:	98 3e       	cpi	r25, 0xE8	; 232
 884:	d4 f3       	brlt	.-12     	; 0x87a <__divsf3_pse+0x6c>
 886:	86 95       	lsr	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	b7 95       	ror	r27
 88e:	f7 95       	ror	r31
 890:	9f 5f       	subi	r25, 0xFF	; 255
 892:	c9 f7       	brne	.-14     	; 0x886 <__divsf3_pse+0x78>
 894:	88 0f       	add	r24, r24
 896:	91 1d       	adc	r25, r1
 898:	96 95       	lsr	r25
 89a:	87 95       	ror	r24
 89c:	97 f9       	bld	r25, 7
 89e:	08 95       	ret
 8a0:	e1 e0       	ldi	r30, 0x01	; 1
 8a2:	66 0f       	add	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	bb 1f       	adc	r27, r27
 8aa:	62 17       	cp	r22, r18
 8ac:	73 07       	cpc	r23, r19
 8ae:	84 07       	cpc	r24, r20
 8b0:	ba 07       	cpc	r27, r26
 8b2:	20 f0       	brcs	.+8      	; 0x8bc <__divsf3_pse+0xae>
 8b4:	62 1b       	sub	r22, r18
 8b6:	73 0b       	sbc	r23, r19
 8b8:	84 0b       	sbc	r24, r20
 8ba:	ba 0b       	sbc	r27, r26
 8bc:	ee 1f       	adc	r30, r30
 8be:	88 f7       	brcc	.-30     	; 0x8a2 <__divsf3_pse+0x94>
 8c0:	e0 95       	com	r30
 8c2:	08 95       	ret

000008c4 <__floatunsisf>:
 8c4:	e8 94       	clt
 8c6:	09 c0       	rjmp	.+18     	; 0x8da <__floatsisf+0x12>

000008c8 <__floatsisf>:
 8c8:	97 fb       	bst	r25, 7
 8ca:	3e f4       	brtc	.+14     	; 0x8da <__floatsisf+0x12>
 8cc:	90 95       	com	r25
 8ce:	80 95       	com	r24
 8d0:	70 95       	com	r23
 8d2:	61 95       	neg	r22
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	8f 4f       	sbci	r24, 0xFF	; 255
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	99 23       	and	r25, r25
 8dc:	a9 f0       	breq	.+42     	; 0x908 <__floatsisf+0x40>
 8de:	f9 2f       	mov	r31, r25
 8e0:	96 e9       	ldi	r25, 0x96	; 150
 8e2:	bb 27       	eor	r27, r27
 8e4:	93 95       	inc	r25
 8e6:	f6 95       	lsr	r31
 8e8:	87 95       	ror	r24
 8ea:	77 95       	ror	r23
 8ec:	67 95       	ror	r22
 8ee:	b7 95       	ror	r27
 8f0:	f1 11       	cpse	r31, r1
 8f2:	f8 cf       	rjmp	.-16     	; 0x8e4 <__floatsisf+0x1c>
 8f4:	fa f4       	brpl	.+62     	; 0x934 <__floatsisf+0x6c>
 8f6:	bb 0f       	add	r27, r27
 8f8:	11 f4       	brne	.+4      	; 0x8fe <__floatsisf+0x36>
 8fa:	60 ff       	sbrs	r22, 0
 8fc:	1b c0       	rjmp	.+54     	; 0x934 <__floatsisf+0x6c>
 8fe:	6f 5f       	subi	r22, 0xFF	; 255
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	8f 4f       	sbci	r24, 0xFF	; 255
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	16 c0       	rjmp	.+44     	; 0x934 <__floatsisf+0x6c>
 908:	88 23       	and	r24, r24
 90a:	11 f0       	breq	.+4      	; 0x910 <__floatsisf+0x48>
 90c:	96 e9       	ldi	r25, 0x96	; 150
 90e:	11 c0       	rjmp	.+34     	; 0x932 <__floatsisf+0x6a>
 910:	77 23       	and	r23, r23
 912:	21 f0       	breq	.+8      	; 0x91c <__floatsisf+0x54>
 914:	9e e8       	ldi	r25, 0x8E	; 142
 916:	87 2f       	mov	r24, r23
 918:	76 2f       	mov	r23, r22
 91a:	05 c0       	rjmp	.+10     	; 0x926 <__floatsisf+0x5e>
 91c:	66 23       	and	r22, r22
 91e:	71 f0       	breq	.+28     	; 0x93c <__floatsisf+0x74>
 920:	96 e8       	ldi	r25, 0x86	; 134
 922:	86 2f       	mov	r24, r22
 924:	70 e0       	ldi	r23, 0x00	; 0
 926:	60 e0       	ldi	r22, 0x00	; 0
 928:	2a f0       	brmi	.+10     	; 0x934 <__floatsisf+0x6c>
 92a:	9a 95       	dec	r25
 92c:	66 0f       	add	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	88 1f       	adc	r24, r24
 932:	da f7       	brpl	.-10     	; 0x92a <__floatsisf+0x62>
 934:	88 0f       	add	r24, r24
 936:	96 95       	lsr	r25
 938:	87 95       	ror	r24
 93a:	97 f9       	bld	r25, 7
 93c:	08 95       	ret

0000093e <__fp_inf>:
 93e:	97 f9       	bld	r25, 7
 940:	9f 67       	ori	r25, 0x7F	; 127
 942:	80 e8       	ldi	r24, 0x80	; 128
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	08 95       	ret

0000094a <__fp_nan>:
 94a:	9f ef       	ldi	r25, 0xFF	; 255
 94c:	80 ec       	ldi	r24, 0xC0	; 192
 94e:	08 95       	ret

00000950 <__fp_pscA>:
 950:	00 24       	eor	r0, r0
 952:	0a 94       	dec	r0
 954:	16 16       	cp	r1, r22
 956:	17 06       	cpc	r1, r23
 958:	18 06       	cpc	r1, r24
 95a:	09 06       	cpc	r0, r25
 95c:	08 95       	ret

0000095e <__fp_pscB>:
 95e:	00 24       	eor	r0, r0
 960:	0a 94       	dec	r0
 962:	12 16       	cp	r1, r18
 964:	13 06       	cpc	r1, r19
 966:	14 06       	cpc	r1, r20
 968:	05 06       	cpc	r0, r21
 96a:	08 95       	ret

0000096c <__fp_round>:
 96c:	09 2e       	mov	r0, r25
 96e:	03 94       	inc	r0
 970:	00 0c       	add	r0, r0
 972:	11 f4       	brne	.+4      	; 0x978 <__fp_round+0xc>
 974:	88 23       	and	r24, r24
 976:	52 f0       	brmi	.+20     	; 0x98c <__fp_round+0x20>
 978:	bb 0f       	add	r27, r27
 97a:	40 f4       	brcc	.+16     	; 0x98c <__fp_round+0x20>
 97c:	bf 2b       	or	r27, r31
 97e:	11 f4       	brne	.+4      	; 0x984 <__fp_round+0x18>
 980:	60 ff       	sbrs	r22, 0
 982:	04 c0       	rjmp	.+8      	; 0x98c <__fp_round+0x20>
 984:	6f 5f       	subi	r22, 0xFF	; 255
 986:	7f 4f       	sbci	r23, 0xFF	; 255
 988:	8f 4f       	sbci	r24, 0xFF	; 255
 98a:	9f 4f       	sbci	r25, 0xFF	; 255
 98c:	08 95       	ret

0000098e <__fp_split3>:
 98e:	57 fd       	sbrc	r21, 7
 990:	90 58       	subi	r25, 0x80	; 128
 992:	44 0f       	add	r20, r20
 994:	55 1f       	adc	r21, r21
 996:	59 f0       	breq	.+22     	; 0x9ae <__fp_splitA+0x10>
 998:	5f 3f       	cpi	r21, 0xFF	; 255
 99a:	71 f0       	breq	.+28     	; 0x9b8 <__fp_splitA+0x1a>
 99c:	47 95       	ror	r20

0000099e <__fp_splitA>:
 99e:	88 0f       	add	r24, r24
 9a0:	97 fb       	bst	r25, 7
 9a2:	99 1f       	adc	r25, r25
 9a4:	61 f0       	breq	.+24     	; 0x9be <__fp_splitA+0x20>
 9a6:	9f 3f       	cpi	r25, 0xFF	; 255
 9a8:	79 f0       	breq	.+30     	; 0x9c8 <__fp_splitA+0x2a>
 9aa:	87 95       	ror	r24
 9ac:	08 95       	ret
 9ae:	12 16       	cp	r1, r18
 9b0:	13 06       	cpc	r1, r19
 9b2:	14 06       	cpc	r1, r20
 9b4:	55 1f       	adc	r21, r21
 9b6:	f2 cf       	rjmp	.-28     	; 0x99c <__fp_split3+0xe>
 9b8:	46 95       	lsr	r20
 9ba:	f1 df       	rcall	.-30     	; 0x99e <__fp_splitA>
 9bc:	08 c0       	rjmp	.+16     	; 0x9ce <__fp_splitA+0x30>
 9be:	16 16       	cp	r1, r22
 9c0:	17 06       	cpc	r1, r23
 9c2:	18 06       	cpc	r1, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	f1 cf       	rjmp	.-30     	; 0x9aa <__fp_splitA+0xc>
 9c8:	86 95       	lsr	r24
 9ca:	71 05       	cpc	r23, r1
 9cc:	61 05       	cpc	r22, r1
 9ce:	08 94       	sec
 9d0:	08 95       	ret

000009d2 <__fp_zero>:
 9d2:	e8 94       	clt

000009d4 <__fp_szero>:
 9d4:	bb 27       	eor	r27, r27
 9d6:	66 27       	eor	r22, r22
 9d8:	77 27       	eor	r23, r23
 9da:	cb 01       	movw	r24, r22
 9dc:	97 f9       	bld	r25, 7
 9de:	08 95       	ret

000009e0 <__mulsf3>:
 9e0:	0e 94 03 05 	call	0xa06	; 0xa06 <__mulsf3x>
 9e4:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_round>
 9e8:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscA>
 9ec:	38 f0       	brcs	.+14     	; 0x9fc <__mulsf3+0x1c>
 9ee:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_pscB>
 9f2:	20 f0       	brcs	.+8      	; 0x9fc <__mulsf3+0x1c>
 9f4:	95 23       	and	r25, r21
 9f6:	11 f0       	breq	.+4      	; 0x9fc <__mulsf3+0x1c>
 9f8:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_inf>
 9fc:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_nan>
 a00:	11 24       	eor	r1, r1
 a02:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_szero>

00000a06 <__mulsf3x>:
 a06:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_split3>
 a0a:	70 f3       	brcs	.-36     	; 0x9e8 <__mulsf3+0x8>

00000a0c <__mulsf3_pse>:
 a0c:	95 9f       	mul	r25, r21
 a0e:	c1 f3       	breq	.-16     	; 0xa00 <__mulsf3+0x20>
 a10:	95 0f       	add	r25, r21
 a12:	50 e0       	ldi	r21, 0x00	; 0
 a14:	55 1f       	adc	r21, r21
 a16:	62 9f       	mul	r22, r18
 a18:	f0 01       	movw	r30, r0
 a1a:	72 9f       	mul	r23, r18
 a1c:	bb 27       	eor	r27, r27
 a1e:	f0 0d       	add	r31, r0
 a20:	b1 1d       	adc	r27, r1
 a22:	63 9f       	mul	r22, r19
 a24:	aa 27       	eor	r26, r26
 a26:	f0 0d       	add	r31, r0
 a28:	b1 1d       	adc	r27, r1
 a2a:	aa 1f       	adc	r26, r26
 a2c:	64 9f       	mul	r22, r20
 a2e:	66 27       	eor	r22, r22
 a30:	b0 0d       	add	r27, r0
 a32:	a1 1d       	adc	r26, r1
 a34:	66 1f       	adc	r22, r22
 a36:	82 9f       	mul	r24, r18
 a38:	22 27       	eor	r18, r18
 a3a:	b0 0d       	add	r27, r0
 a3c:	a1 1d       	adc	r26, r1
 a3e:	62 1f       	adc	r22, r18
 a40:	73 9f       	mul	r23, r19
 a42:	b0 0d       	add	r27, r0
 a44:	a1 1d       	adc	r26, r1
 a46:	62 1f       	adc	r22, r18
 a48:	83 9f       	mul	r24, r19
 a4a:	a0 0d       	add	r26, r0
 a4c:	61 1d       	adc	r22, r1
 a4e:	22 1f       	adc	r18, r18
 a50:	74 9f       	mul	r23, r20
 a52:	33 27       	eor	r19, r19
 a54:	a0 0d       	add	r26, r0
 a56:	61 1d       	adc	r22, r1
 a58:	23 1f       	adc	r18, r19
 a5a:	84 9f       	mul	r24, r20
 a5c:	60 0d       	add	r22, r0
 a5e:	21 1d       	adc	r18, r1
 a60:	82 2f       	mov	r24, r18
 a62:	76 2f       	mov	r23, r22
 a64:	6a 2f       	mov	r22, r26
 a66:	11 24       	eor	r1, r1
 a68:	9f 57       	subi	r25, 0x7F	; 127
 a6a:	50 40       	sbci	r21, 0x00	; 0
 a6c:	9a f0       	brmi	.+38     	; 0xa94 <__mulsf3_pse+0x88>
 a6e:	f1 f0       	breq	.+60     	; 0xaac <__mulsf3_pse+0xa0>
 a70:	88 23       	and	r24, r24
 a72:	4a f0       	brmi	.+18     	; 0xa86 <__mulsf3_pse+0x7a>
 a74:	ee 0f       	add	r30, r30
 a76:	ff 1f       	adc	r31, r31
 a78:	bb 1f       	adc	r27, r27
 a7a:	66 1f       	adc	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	91 50       	subi	r25, 0x01	; 1
 a82:	50 40       	sbci	r21, 0x00	; 0
 a84:	a9 f7       	brne	.-22     	; 0xa70 <__mulsf3_pse+0x64>
 a86:	9e 3f       	cpi	r25, 0xFE	; 254
 a88:	51 05       	cpc	r21, r1
 a8a:	80 f0       	brcs	.+32     	; 0xaac <__mulsf3_pse+0xa0>
 a8c:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_inf>
 a90:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_szero>
 a94:	5f 3f       	cpi	r21, 0xFF	; 255
 a96:	e4 f3       	brlt	.-8      	; 0xa90 <__mulsf3_pse+0x84>
 a98:	98 3e       	cpi	r25, 0xE8	; 232
 a9a:	d4 f3       	brlt	.-12     	; 0xa90 <__mulsf3_pse+0x84>
 a9c:	86 95       	lsr	r24
 a9e:	77 95       	ror	r23
 aa0:	67 95       	ror	r22
 aa2:	b7 95       	ror	r27
 aa4:	f7 95       	ror	r31
 aa6:	e7 95       	ror	r30
 aa8:	9f 5f       	subi	r25, 0xFF	; 255
 aaa:	c1 f7       	brne	.-16     	; 0xa9c <__mulsf3_pse+0x90>
 aac:	fe 2b       	or	r31, r30
 aae:	88 0f       	add	r24, r24
 ab0:	91 1d       	adc	r25, r1
 ab2:	96 95       	lsr	r25
 ab4:	87 95       	ror	r24
 ab6:	97 f9       	bld	r25, 7
 ab8:	08 95       	ret

00000aba <__udivmodsi4>:
 aba:	a1 e2       	ldi	r26, 0x21	; 33
 abc:	1a 2e       	mov	r1, r26
 abe:	aa 1b       	sub	r26, r26
 ac0:	bb 1b       	sub	r27, r27
 ac2:	fd 01       	movw	r30, r26
 ac4:	0d c0       	rjmp	.+26     	; 0xae0 <__udivmodsi4_ep>

00000ac6 <__udivmodsi4_loop>:
 ac6:	aa 1f       	adc	r26, r26
 ac8:	bb 1f       	adc	r27, r27
 aca:	ee 1f       	adc	r30, r30
 acc:	ff 1f       	adc	r31, r31
 ace:	a2 17       	cp	r26, r18
 ad0:	b3 07       	cpc	r27, r19
 ad2:	e4 07       	cpc	r30, r20
 ad4:	f5 07       	cpc	r31, r21
 ad6:	20 f0       	brcs	.+8      	; 0xae0 <__udivmodsi4_ep>
 ad8:	a2 1b       	sub	r26, r18
 ada:	b3 0b       	sbc	r27, r19
 adc:	e4 0b       	sbc	r30, r20
 ade:	f5 0b       	sbc	r31, r21

00000ae0 <__udivmodsi4_ep>:
 ae0:	66 1f       	adc	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	99 1f       	adc	r25, r25
 ae8:	1a 94       	dec	r1
 aea:	69 f7       	brne	.-38     	; 0xac6 <__udivmodsi4_loop>
 aec:	60 95       	com	r22
 aee:	70 95       	com	r23
 af0:	80 95       	com	r24
 af2:	90 95       	com	r25
 af4:	9b 01       	movw	r18, r22
 af6:	ac 01       	movw	r20, r24
 af8:	bd 01       	movw	r22, r26
 afa:	cf 01       	movw	r24, r30
 afc:	08 95       	ret

00000afe <__umoddi3>:
 afe:	68 94       	set
 b00:	01 c0       	rjmp	.+2      	; 0xb04 <__udivdi3_umoddi3>

00000b02 <__udivdi3>:
 b02:	e8 94       	clt

00000b04 <__udivdi3_umoddi3>:
 b04:	8f 92       	push	r8
 b06:	9f 92       	push	r9
 b08:	cf 93       	push	r28
 b0a:	df 93       	push	r29
 b0c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__udivmod64>
 b10:	df 91       	pop	r29
 b12:	cf 91       	pop	r28
 b14:	9f 90       	pop	r9
 b16:	8f 90       	pop	r8
 b18:	08 95       	ret

00000b1a <__udivmod64>:
 b1a:	88 24       	eor	r8, r8
 b1c:	99 24       	eor	r9, r9
 b1e:	f4 01       	movw	r30, r8
 b20:	e4 01       	movw	r28, r8
 b22:	b0 e4       	ldi	r27, 0x40	; 64
 b24:	9f 93       	push	r25
 b26:	aa 27       	eor	r26, r26
 b28:	9a 15       	cp	r25, r10
 b2a:	8b 04       	cpc	r8, r11
 b2c:	9c 04       	cpc	r9, r12
 b2e:	ed 05       	cpc	r30, r13
 b30:	fe 05       	cpc	r31, r14
 b32:	cf 05       	cpc	r28, r15
 b34:	d0 07       	cpc	r29, r16
 b36:	a1 07       	cpc	r26, r17
 b38:	98 f4       	brcc	.+38     	; 0xb60 <__udivmod64+0x46>
 b3a:	ad 2f       	mov	r26, r29
 b3c:	dc 2f       	mov	r29, r28
 b3e:	cf 2f       	mov	r28, r31
 b40:	fe 2f       	mov	r31, r30
 b42:	e9 2d       	mov	r30, r9
 b44:	98 2c       	mov	r9, r8
 b46:	89 2e       	mov	r8, r25
 b48:	98 2f       	mov	r25, r24
 b4a:	87 2f       	mov	r24, r23
 b4c:	76 2f       	mov	r23, r22
 b4e:	65 2f       	mov	r22, r21
 b50:	54 2f       	mov	r21, r20
 b52:	43 2f       	mov	r20, r19
 b54:	32 2f       	mov	r19, r18
 b56:	22 27       	eor	r18, r18
 b58:	b8 50       	subi	r27, 0x08	; 8
 b5a:	31 f7       	brne	.-52     	; 0xb28 <__udivmod64+0xe>
 b5c:	bf 91       	pop	r27
 b5e:	27 c0       	rjmp	.+78     	; 0xbae <__udivmod64+0x94>
 b60:	1b 2e       	mov	r1, r27
 b62:	bf 91       	pop	r27
 b64:	bb 27       	eor	r27, r27
 b66:	22 0f       	add	r18, r18
 b68:	33 1f       	adc	r19, r19
 b6a:	44 1f       	adc	r20, r20
 b6c:	55 1f       	adc	r21, r21
 b6e:	66 1f       	adc	r22, r22
 b70:	77 1f       	adc	r23, r23
 b72:	88 1f       	adc	r24, r24
 b74:	99 1f       	adc	r25, r25
 b76:	88 1c       	adc	r8, r8
 b78:	99 1c       	adc	r9, r9
 b7a:	ee 1f       	adc	r30, r30
 b7c:	ff 1f       	adc	r31, r31
 b7e:	cc 1f       	adc	r28, r28
 b80:	dd 1f       	adc	r29, r29
 b82:	aa 1f       	adc	r26, r26
 b84:	bb 1f       	adc	r27, r27
 b86:	8a 14       	cp	r8, r10
 b88:	9b 04       	cpc	r9, r11
 b8a:	ec 05       	cpc	r30, r12
 b8c:	fd 05       	cpc	r31, r13
 b8e:	ce 05       	cpc	r28, r14
 b90:	df 05       	cpc	r29, r15
 b92:	a0 07       	cpc	r26, r16
 b94:	b1 07       	cpc	r27, r17
 b96:	48 f0       	brcs	.+18     	; 0xbaa <__udivmod64+0x90>
 b98:	8a 18       	sub	r8, r10
 b9a:	9b 08       	sbc	r9, r11
 b9c:	ec 09       	sbc	r30, r12
 b9e:	fd 09       	sbc	r31, r13
 ba0:	ce 09       	sbc	r28, r14
 ba2:	df 09       	sbc	r29, r15
 ba4:	a0 0b       	sbc	r26, r16
 ba6:	b1 0b       	sbc	r27, r17
 ba8:	21 60       	ori	r18, 0x01	; 1
 baa:	1a 94       	dec	r1
 bac:	e1 f6       	brne	.-72     	; 0xb66 <__udivmod64+0x4c>
 bae:	2e f4       	brtc	.+10     	; 0xbba <__udivmod64+0xa0>
 bb0:	94 01       	movw	r18, r8
 bb2:	af 01       	movw	r20, r30
 bb4:	be 01       	movw	r22, r28
 bb6:	cd 01       	movw	r24, r26
 bb8:	00 0c       	add	r0, r0
 bba:	08 95       	ret

00000bbc <__adddi3>:
 bbc:	2a 0d       	add	r18, r10
 bbe:	3b 1d       	adc	r19, r11
 bc0:	4c 1d       	adc	r20, r12
 bc2:	5d 1d       	adc	r21, r13
 bc4:	6e 1d       	adc	r22, r14
 bc6:	7f 1d       	adc	r23, r15
 bc8:	80 1f       	adc	r24, r16
 bca:	91 1f       	adc	r25, r17
 bcc:	08 95       	ret

00000bce <__adddi3_s8>:
 bce:	00 24       	eor	r0, r0
 bd0:	a7 fd       	sbrc	r26, 7
 bd2:	00 94       	com	r0
 bd4:	2a 0f       	add	r18, r26
 bd6:	30 1d       	adc	r19, r0
 bd8:	40 1d       	adc	r20, r0
 bda:	50 1d       	adc	r21, r0
 bdc:	60 1d       	adc	r22, r0
 bde:	70 1d       	adc	r23, r0
 be0:	80 1d       	adc	r24, r0
 be2:	90 1d       	adc	r25, r0
 be4:	08 95       	ret

00000be6 <_exit>:
 be6:	f8 94       	cli

00000be8 <__stop_program>:
 be8:	ff cf       	rjmp	.-2      	; 0xbe8 <__stop_program>
