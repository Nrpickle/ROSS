
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  0000024c  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000846  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000351  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035b  00000000  00000000  00000f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c1  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fc  00000000  00000000  000019f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001af5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	ec e4       	ldi	r30, 0x4C	; 76
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 30       	cpi	r26, 0x04	; 4
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  d2:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <_Z6initIOv>:
	
}
 
void initIO(void){
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
  da:	e0 e4       	ldi	r30, 0x40	; 64
  dc:	f6 e0       	ldi	r31, 0x06	; 6
  de:	92 e0       	ldi	r25, 0x02	; 2
  e0:	91 83       	std	Z+1, r25	; 0x01
	PORTC.DIRSET = PIN0_bm;
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	81 83       	std	Z+1, r24	; 0x01
	
	//Initialize output values
	STATUS_CLR();
  ea:	26 83       	std	Z+6, r18	; 0x06
	ERROR_CLR();
  ec:	96 83       	std	Z+6, r25	; 0x06
	
	REAR_RELAY_CLR();
  ee:	86 83       	std	Z+6, r24	; 0x06
  f0:	08 95       	ret

000000f2 <_Z25configure32MhzInternalOscv>:
		
}

void configure32MhzInternalOsc()
{
	OSC_CTRL |= OSC_RC32MEN_bm; //Setup 32Mhz crystal
  f2:	e0 e5       	ldi	r30, 0x50	; 80
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm));
  fc:	e1 e5       	ldi	r30, 0x51	; 81
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 ff       	sbrs	r24, 1
 104:	fd cf       	rjmp	.-6      	; 0x100 <_Z25configure32MhzInternalOscv+0xe>
	
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
 106:	88 ed       	ldi	r24, 0xD8	; 216
 108:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 40 00 	sts	0x0040, r24
 110:	08 95       	ret

00000112 <_Z14configureUSARTv>:
	
}

void configureUSART(void){
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
 112:	e0 e4       	ldi	r30, 0x40	; 64
 114:	f6 e0       	ldi	r31, 0x06	; 6
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	81 83       	std	Z+1, r24	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	82 83       	std	Z+2, r24	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
 11e:	86 85       	ldd	r24, Z+14	; 0x0e
 120:	80 61       	ori	r24, 0x10	; 16
 122:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 124:	e0 ec       	ldi	r30, 0xC0	; 192
 126:	f8 e0       	ldi	r31, 0x08	; 8
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	84 83       	std	Z+4, r24	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
 12c:	82 e2       	ldi	r24, 0x22	; 34
 12e:	86 83       	std	Z+6, r24	; 0x06
 130:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
 132:	83 81       	ldd	r24, Z+3	; 0x03
 134:	80 61       	ori	r24, 0x10	; 16
 136:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
 138:	83 81       	ldd	r24, Z+3	; 0x03
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	83 83       	std	Z+3, r24	; 0x03
 13e:	08 95       	ret

00000140 <main>:



int main(void)
{
	initIO();
 140:	0e 94 6d 00 	call	0xda	; 0xda <_Z6initIOv>
	//configureExternalOscillator();
	configure32MhzInternalOsc();
 144:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z25configure32MhzInternalOscv>
	configureUSART();
 148:	0e 94 89 00 	call	0x112	; 0x112 <_Z14configureUSARTv>
	
	uint16_t counter = 0;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
	
    while (1) 
    {
		_delay_ms(1);
		
		STATUS_CLR();
 150:	c0 e4       	ldi	r28, 0x40	; 64
 152:	d6 e0       	ldi	r29, 0x06	; 6
 154:	01 e0       	ldi	r16, 0x01	; 1
		ERROR_SET();
 156:	12 e0       	ldi	r17, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	ef e3       	ldi	r30, 0x3F	; 63
 15a:	ff e1       	ldi	r31, 0x1F	; 31
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x1c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x22>
 162:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(1);
		
		STATUS_CLR();
 164:	0e 83       	std	Y+6, r16	; 0x06
		ERROR_SET();
 166:	1d 83       	std	Y+5, r17	; 0x05
 168:	ef e3       	ldi	r30, 0x3F	; 63
 16a:	ff e1       	ldi	r31, 0x1F	; 31
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0x2c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x32>
 172:	00 00       	nop
		
		_delay_ms(1);
		
		STATUS_SET();
 174:	0d 83       	std	Y+5, r16	; 0x05
		ERROR_CLR();
 176:	1e 83       	std	Y+6, r17	; 0x06
		
		SendNumPC(counter++);
 178:	7c 01       	movw	r14, r24
 17a:	ff ef       	ldi	r31, 0xFF	; 255
 17c:	ef 1a       	sub	r14, r31
 17e:	ff 0a       	sbc	r15, r31
 180:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z9SendNumPCj>
		SendStringPC("\n\r");
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e2       	ldi	r25, 0x20	; 32
 188:	0e 94 c8 00 	call	0x190	; 0x190 <_Z12SendStringPCPc>
		_delay_ms(1);
		
		STATUS_SET();
		ERROR_CLR();
		
		SendNumPC(counter++);
 18c:	c7 01       	movw	r24, r14
		SendStringPC("\n\r");

    }
 18e:	e4 cf       	rjmp	.-56     	; 0x158 <main+0x18>

00000190 <_Z12SendStringPCPc>:

#include "usartROSS.h"

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 190:	fc 01       	movw	r30, r24
 192:	20 81       	ld	r18, Z
 194:	22 23       	and	r18, r18
 196:	59 f0       	breq	.+22     	; 0x1ae <_Z12SendStringPCPc+0x1e>
 198:	dc 01       	movw	r26, r24
 19a:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
 19c:	e0 ec       	ldi	r30, 0xC0	; 192
 19e:	f8 e0       	ldi	r31, 0x08	; 8
 1a0:	91 81       	ldd	r25, Z+1	; 0x01
 1a2:	95 ff       	sbrs	r25, 5
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
 1a6:	20 83       	st	Z, r18

#include "usartROSS.h"

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 1a8:	2d 91       	ld	r18, X+
 1aa:	21 11       	cpse	r18, r1
 1ac:	f9 cf       	rjmp	.-14     	; 0x1a0 <_Z12SendStringPCPc+0x10>
 1ae:	08 95       	ret

000001b0 <_Z9SendNumPCj>:
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
		USART_PutChar(&COMP_USART, stufftosend[i]);
	}
}

void SendNumPC(uint16_t numToSend){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	64 97       	sbiw	r28, 0x14	; 20
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1be:	4a e0       	ldi	r20, 0x0A	; 10
 1c0:	be 01       	movw	r22, r28
 1c2:	6f 5f       	subi	r22, 0xFF	; 255
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255
 1c6:	0e 94 ef 00 	call	0x1de	; 0x1de <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	0e 94 c8 00 	call	0x190	; 0x190 <_Z12SendStringPCPc>
 1d2:	64 96       	adiw	r28, 0x14	; 20
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <__itoa_ncheck>:
 1de:	bb 27       	eor	r27, r27
 1e0:	4a 30       	cpi	r20, 0x0A	; 10
 1e2:	31 f4       	brne	.+12     	; 0x1f0 <__itoa_ncheck+0x12>
 1e4:	99 23       	and	r25, r25
 1e6:	22 f4       	brpl	.+8      	; 0x1f0 <__itoa_ncheck+0x12>
 1e8:	bd e2       	ldi	r27, 0x2D	; 45
 1ea:	90 95       	com	r25
 1ec:	81 95       	neg	r24
 1ee:	9f 4f       	sbci	r25, 0xFF	; 255
 1f0:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__utoa_common>

000001f4 <__utoa_ncheck>:
 1f4:	bb 27       	eor	r27, r27

000001f6 <__utoa_common>:
 1f6:	fb 01       	movw	r30, r22
 1f8:	55 27       	eor	r21, r21
 1fa:	aa 27       	eor	r26, r26
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	aa 1f       	adc	r26, r26
 202:	a4 17       	cp	r26, r20
 204:	10 f0       	brcs	.+4      	; 0x20a <__utoa_common+0x14>
 206:	a4 1b       	sub	r26, r20
 208:	83 95       	inc	r24
 20a:	50 51       	subi	r21, 0x10	; 16
 20c:	b9 f7       	brne	.-18     	; 0x1fc <__utoa_common+0x6>
 20e:	a0 5d       	subi	r26, 0xD0	; 208
 210:	aa 33       	cpi	r26, 0x3A	; 58
 212:	08 f0       	brcs	.+2      	; 0x216 <__utoa_common+0x20>
 214:	a9 5d       	subi	r26, 0xD9	; 217
 216:	a1 93       	st	Z+, r26
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	79 f7       	brne	.-34     	; 0x1fa <__utoa_common+0x4>
 21c:	b1 11       	cpse	r27, r1
 21e:	b1 93       	st	Z+, r27
 220:	11 92       	st	Z+, r1
 222:	cb 01       	movw	r24, r22
 224:	0c 94 14 01 	jmp	0x228	; 0x228 <strrev>

00000228 <strrev>:
 228:	dc 01       	movw	r26, r24
 22a:	fc 01       	movw	r30, r24
 22c:	67 2f       	mov	r22, r23
 22e:	71 91       	ld	r23, Z+
 230:	77 23       	and	r23, r23
 232:	e1 f7       	brne	.-8      	; 0x22c <strrev+0x4>
 234:	32 97       	sbiw	r30, 0x02	; 2
 236:	04 c0       	rjmp	.+8      	; 0x240 <strrev+0x18>
 238:	7c 91       	ld	r23, X
 23a:	6d 93       	st	X+, r22
 23c:	70 83       	st	Z, r23
 23e:	62 91       	ld	r22, -Z
 240:	ae 17       	cp	r26, r30
 242:	bf 07       	cpc	r27, r31
 244:	c8 f3       	brcs	.-14     	; 0x238 <strrev+0x10>
 246:	08 95       	ret

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
