
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00802000  000003ba  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017c0  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d8  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c7  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001743  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000186  00000000  00000000  00003dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003f55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	ea eb       	ldi	r30, 0xBA	; 186
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 32       	cpi	r26, 0x28	; 40
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 23 01 	call	0x246	; 0x246 <main>
  d2:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <_Z8initADCsv>:
		SendStringPC((char *)"\n\r\n\r");

    }
}

void initADCs(){
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
	//Set reference to AVCC/2
	//
	
	//Set freerun for the ADCs (sample all of the time)
	
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	82 e1       	ldi	r24, 0x12	; 18
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	8c 93       	st	X, r24
  e8:	11 97       	sbiw	r26, 0x01	; 1
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	12 96       	adiw	r26, 0x02	; 2
  ee:	8c 93       	st	X, r24
  f0:	12 97       	sbiw	r26, 0x02	; 2
	ADCA.EVCTRL = 0; //Disable events
  f2:	13 96       	adiw	r26, 0x03	; 3
  f4:	1c 92       	st	X, r1
  f6:	13 97       	sbiw	r26, 0x03	; 3
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	14 96       	adiw	r26, 0x04	; 4
  fc:	8c 93       	st	X, r24
  fe:	14 97       	sbiw	r26, 0x04	; 4
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
static uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 100:	ca ec       	ldi	r28, 0xCA	; 202
 102:	d1 e0       	ldi	r29, 0x01	; 1
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	88 83       	st	Y, r24
	result = pgm_read_byte(index);
 108:	e0 e2       	ldi	r30, 0x20	; 32
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e4 91       	lpm	r30, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 10e:	18 82       	st	Y, r1
	
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
	ADCA.EVCTRL = 0; //Disable events
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
 110:	1c 96       	adiw	r26, 0x0c	; 12
 112:	ec 93       	st	X, r30
 114:	1c 97       	sbiw	r26, 0x0c	; 12
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
static uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 116:	88 83       	st	Y, r24
	result = pgm_read_byte(index);
 118:	e1 e2       	ldi	r30, 0x21	; 33
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	e4 91       	lpm	r30, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 11e:	18 82       	st	Y, r1
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
	ADCA.EVCTRL = 0; //Disable events
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
 120:	1d 96       	adiw	r26, 0x0d	; 13
 122:	ec 93       	st	X, r30
 124:	1d 97       	sbiw	r26, 0x0d	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	ef e7       	ldi	r30, 0x7F	; 127
 128:	fc e0       	ldi	r31, 0x0C	; 12
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <_Z8initADCsv+0x50>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_Z8initADCsv+0x56>
 130:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
 132:	90 96       	adiw	r26, 0x20	; 32
 134:	8c 93       	st	X, r24
 136:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	91 96       	adiw	r26, 0x21	; 33
 13c:	8c 93       	st	X, r24
 13e:	91 97       	sbiw	r26, 0x21	; 33
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
 140:	92 96       	adiw	r26, 0x22	; 34
 142:	1c 92       	st	X, r1
 144:	92 97       	sbiw	r26, 0x22	; 34
	ADCA.CTRLA = ADC_ENABLE_bm;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	8c 93       	st	X, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
//	ADCA.CTRLA |= ADC_CH8START_bm;
	
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
 150:	e0 e5       	ldi	r30, 0x50	; 80
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	8b e4       	ldi	r24, 0x4B	; 75
 156:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
 158:	80 81       	ld	r24, Z
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
 15e:	81 81       	ldd	r24, Z+1	; 0x01
 160:	83 fd       	sbrc	r24, 3
 162:	09 c0       	rjmp	.+18     	; 0x176 <_Z27configureExternalOscillatorv+0x26>
 164:	a0 e4       	ldi	r26, 0x40	; 64
 166:	b6 e0       	ldi	r27, 0x06	; 6
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	15 96       	adiw	r26, 0x05	; 5
 16c:	9c 93       	st	X, r25
 16e:	15 97       	sbiw	r26, 0x05	; 5
 170:	81 81       	ldd	r24, Z+1	; 0x01
 172:	83 ff       	sbrs	r24, 3
 174:	fa cf       	rjmp	.-12     	; 0x16a <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
 17c:	88 ed       	ldi	r24, 0xD8	; 216
 17e:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
 180:	e0 e5       	ldi	r30, 0x50	; 80
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	88 ec       	ldi	r24, 0xC8	; 200
 186:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
 188:	80 81       	ld	r24, Z
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
 18e:	81 81       	ldd	r24, Z+1	; 0x01
 190:	84 fd       	sbrc	r24, 4
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <_Z27configureExternalOscillatorv+0x56>
 194:	a0 e4       	ldi	r26, 0x40	; 64
 196:	b6 e0       	ldi	r27, 0x06	; 6
 198:	92 e0       	ldi	r25, 0x02	; 2
 19a:	15 96       	adiw	r26, 0x05	; 5
 19c:	9c 93       	st	X, r25
 19e:	15 97       	sbiw	r26, 0x05	; 5
 1a0:	81 81       	ldd	r24, Z+1	; 0x01
 1a2:	84 ff       	sbrs	r24, 4
 1a4:	fa cf       	rjmp	.-12     	; 0x19a <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
 1ac:	88 ed       	ldi	r24, 0xD8	; 216
 1ae:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
 1b0:	e0 e4       	ldi	r30, 0x40	; 64
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
 1b6:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <_Z6initIOv>:
	
}
 
void initIO(void){
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
 1be:	e0 e4       	ldi	r30, 0x40	; 64
 1c0:	f6 e0       	ldi	r31, 0x06	; 6
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	91 83       	std	Z+1, r25	; 0x01
	PORTC.DIRSET = PIN0_bm;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	81 83       	std	Z+1, r24	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
 1ca:	20 e2       	ldi	r18, 0x20	; 32
 1cc:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
 1ce:	34 e0       	ldi	r19, 0x04	; 4
 1d0:	32 83       	std	Z+2, r19	; 0x02
	PORTC.DIRCLR = PIN3_bm;
 1d2:	38 e0       	ldi	r19, 0x08	; 8
 1d4:	32 83       	std	Z+2, r19	; 0x02
	
	//Set pullups on the switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
 1d6:	38 e1       	ldi	r19, 0x18	; 24
 1d8:	32 8b       	std	Z+18, r19	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
 1da:	33 8b       	std	Z+19, r19	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
 1dc:	a0 e0       	ldi	r26, 0x00	; 0
 1de:	b6 e0       	ldi	r27, 0x06	; 6
 1e0:	12 96       	adiw	r26, 0x02	; 2
 1e2:	8c 93       	st	X, r24
 1e4:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
 1e6:	12 96       	adiw	r26, 0x02	; 2
 1e8:	9c 93       	st	X, r25
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
 1ea:	80 93 62 06 	sts	0x0662, r24
	
	
	//Initialize output values
	STATUS_CLR();
 1ee:	86 83       	std	Z+6, r24	; 0x06
	ERROR_CLR();
 1f0:	96 83       	std	Z+6, r25	; 0x06
	
	REAR_RELAY_CLR();
 1f2:	26 83       	std	Z+6, r18	; 0x06
 1f4:	08 95       	ret

000001f6 <_Z23sampleTempSensorVoltagev>:

	return( result );
}

int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);//ADC_CH_MUXNEG0_bm);
 1f6:	e0 e0       	ldi	r30, 0x00	; 0
 1f8:	f2 e0       	ldi	r31, 0x02	; 2
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
 1fe:	80 a1       	ldd	r24, Z+32	; 0x20
 200:	80 68       	ori	r24, 0x80	; 128
 202:	80 a3       	std	Z+32, r24	; 0x20
 204:	8f e7       	ldi	r24, 0x7F	; 127
 206:	9c e0       	ldi	r25, 0x0C	; 12
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <_Z23sampleTempSensorVoltagev+0x12>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <_Z23sampleTempSensorVoltagev+0x18>
 20e:	00 00       	nop
	
	_delay_us(400);
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 8)) != (1U << 8)); // (1U << n) where n is the adc channel, so zero for this one
	
	while(!(ADCA.INTFLAGS & (1 << 0)));
 210:	86 81       	ldd	r24, Z+6	; 0x06
 212:	80 ff       	sbrs	r24, 0
 214:	fd cf       	rjmp	.-6      	; 0x210 <_Z23sampleTempSensorVoltagev+0x1a>
	ADCA.INTFLAGS = (1 << 0);
 216:	e0 e0       	ldi	r30, 0x00	; 0
 218:	f2 e0       	ldi	r31, 0x02	; 2
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
 21e:	84 a1       	ldd	r24, Z+36	; 0x24
 220:	95 a1       	ldd	r25, Z+37	; 0x25
}
 222:	08 95       	ret

00000224 <_Z20sampleBatteryVoltagev>:

int16_t sampleBatteryVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN9_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for batt voltage sense
 224:	e0 e0       	ldi	r30, 0x00	; 0
 226:	f2 e0       	ldi	r31, 0x02	; 2
 228:	89 e4       	ldi	r24, 0x49	; 73
 22a:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
 22c:	80 a1       	ldd	r24, Z+32	; 0x20
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
	//ADCA.INTFLAGS = ((1U << 0) << ADC_CH0IF_bp);
	while(!(ADCA.INTFLAGS & (1 << 0)));
 232:	86 81       	ldd	r24, Z+6	; 0x06
 234:	80 ff       	sbrs	r24, 0
 236:	fd cf       	rjmp	.-6      	; 0x232 <_Z20sampleBatteryVoltagev+0xe>
	ADCA.INTFLAGS = (1 << 0);
 238:	e0 e0       	ldi	r30, 0x00	; 0
 23a:	f2 e0       	ldi	r31, 0x02	; 2
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;	
 240:	84 a1       	ldd	r24, Z+36	; 0x24
 242:	95 a1       	ldd	r25, Z+37	; 0x25
	
}
 244:	08 95       	ret

00000246 <main>:
int16_t sampleBatteryVoltage(void);


int main(void)
{
	initIO();
 246:	0e 94 df 00 	call	0x1be	; 0x1be <_Z6initIOv>
	configureExternalOscillator();
 24a:	0e 94 a8 00 	call	0x150	; 0x150 <_Z27configureExternalOscillatorv>
	//configure32MhzInternalOsc();
	configureUSART();	//Set up for 57600 Baud
 24e:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z14configureUSARTv>
	initADCs();
 252:	0e 94 6d 00 	call	0xda	; 0xda <_Z8initADCsv>
	
	uint16_t counter = 0;
	uint16_t temperature = 0;
 256:	00 e0       	ldi	r16, 0x00	; 0
 258:	10 e0       	ldi	r17, 0x00	; 0
	
    while (1) 
    {
		_delay_ms(100);
		
		if(CHECK_DIP_SW_1()){
 25a:	c0 e4       	ldi	r28, 0x40	; 64
 25c:	d6 e0       	ldi	r29, 0x06	; 6
			STATUS_SET();
		}
		else {
			STATUS_CLR();
 25e:	ee 24       	eor	r14, r14
 260:	e3 94       	inc	r14
		}
		if(temperature > 3700){
			ERROR_SET();
		}
		else{
			ERROR_CLR();
 262:	68 94       	set
 264:	ff 24       	eor	r15, r15
 266:	f1 f8       	bld	r15, 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	83 ec       	ldi	r24, 0xC3	; 195
 26c:	99 e0       	ldi	r25, 0x09	; 9
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x28>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x32>
 278:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(100);
		
		if(CHECK_DIP_SW_1()){
 27a:	88 85       	ldd	r24, Y+8	; 0x08
 27c:	82 fd       	sbrc	r24, 2
 27e:	02 c0       	rjmp	.+4      	; 0x284 <main+0x3e>
			STATUS_SET();
 280:	ed 82       	std	Y+5, r14	; 0x05
 282:	01 c0       	rjmp	.+2      	; 0x286 <main+0x40>
		}
		else {
			STATUS_CLR();
 284:	ee 82       	std	Y+6, r14	; 0x06
		}
		if(temperature > 3700){
 286:	05 37       	cpi	r16, 0x75	; 117
 288:	1e 40       	sbci	r17, 0x0E	; 14
 28a:	10 f0       	brcs	.+4      	; 0x290 <main+0x4a>
			ERROR_SET();
 28c:	fd 82       	std	Y+5, r15	; 0x05
 28e:	01 c0       	rjmp	.+2      	; 0x292 <main+0x4c>
		}
		else{
			ERROR_CLR();
 290:	fe 82       	std	Y+6, r15	; 0x06
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	97 ea       	ldi	r25, 0xA7	; 167
 296:	21 e6       	ldi	r18, 0x61	; 97
 298:	81 50       	subi	r24, 0x01	; 1
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	20 40       	sbci	r18, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0x52>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x5c>
 2a2:	00 00       	nop
		
		_delay_ms(1000);
		
		//STATUS_SET();
		//ERROR_CLR();
		SendStringPC((char *)"Temp ADC Val: ");
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e2       	ldi	r25, 0x20	; 32
 2a8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z12SendStringPCPc>
		SendNumPC(temperature = sampleTempSensorVoltage());
 2ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z23sampleTempSensorVoltagev>
 2b0:	8c 01       	movw	r16, r24
 2b2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z9SendNumPCj>
		SendStringPC((char *)"\tBattery ADC Val: ");
 2b6:	8f e0       	ldi	r24, 0x0F	; 15
 2b8:	90 e2       	ldi	r25, 0x20	; 32
 2ba:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z12SendStringPCPc>
		SendNumPC(sampleBatteryVoltage());
 2be:	0e 94 12 01 	call	0x224	; 0x224 <_Z20sampleBatteryVoltagev>
 2c2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z9SendNumPCj>
		SendStringPC((char *)"\n\r\n\r");
 2c6:	82 e2       	ldi	r24, 0x22	; 34
 2c8:	90 e2       	ldi	r25, 0x20	; 32
 2ca:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z12SendStringPCPc>

    }
 2ce:	cc cf       	rjmp	.-104    	; 0x268 <main+0x22>

000002d0 <_Z12SendStringPCPc>:

#include "usartROSS.h"

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 81       	ld	r18, Z
 2d4:	22 23       	and	r18, r18
 2d6:	59 f0       	breq	.+22     	; 0x2ee <_Z12SendStringPCPc+0x1e>
 2d8:	dc 01       	movw	r26, r24
 2da:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f8 e0       	ldi	r31, 0x08	; 8
 2e0:	91 81       	ldd	r25, Z+1	; 0x01
 2e2:	95 ff       	sbrs	r25, 5
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
 2e6:	20 83       	st	Z, r18

#include "usartROSS.h"

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 2e8:	2d 91       	ld	r18, X+
 2ea:	21 11       	cpse	r18, r1
 2ec:	f9 cf       	rjmp	.-14     	; 0x2e0 <_Z12SendStringPCPc+0x10>
 2ee:	08 95       	ret

000002f0 <_Z9SendNumPCj>:
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
		USART_PutChar(&COMP_USART, stufftosend[i]);
	}
}

void SendNumPC(uint16_t numToSend){
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	64 97       	sbiw	r28, 0x14	; 20
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2fe:	4a e0       	ldi	r20, 0x0A	; 10
 300:	be 01       	movw	r22, r28
 302:	6f 5f       	subi	r22, 0xFF	; 255
 304:	7f 4f       	sbci	r23, 0xFF	; 255
 306:	0e 94 a6 01 	call	0x34c	; 0x34c <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
 30a:	ce 01       	movw	r24, r28
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z12SendStringPCPc>
}
 312:	64 96       	adiw	r28, 0x14	; 20
 314:	cd bf       	out	0x3d, r28	; 61
 316:	de bf       	out	0x3e, r29	; 62
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <_Z14configureUSARTv>:

void configureUSART(void){
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
 31e:	e0 e4       	ldi	r30, 0x40	; 64
 320:	f6 e0       	ldi	r31, 0x06	; 6
 322:	80 e8       	ldi	r24, 0x80	; 128
 324:	81 83       	std	Z+1, r24	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
 326:	80 e4       	ldi	r24, 0x40	; 64
 328:	82 83       	std	Z+2, r24	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
 32a:	86 85       	ldd	r24, Z+14	; 0x0e
 32c:	80 61       	ori	r24, 0x10	; 16
 32e:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 330:	e0 ec       	ldi	r30, 0xC0	; 192
 332:	f8 e0       	ldi	r31, 0x08	; 8
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	84 83       	std	Z+4, r24	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
 338:	82 e2       	ldi	r24, 0x22	; 34
 33a:	86 83       	std	Z+6, r24	; 0x06
 33c:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
 33e:	83 81       	ldd	r24, Z+3	; 0x03
 340:	80 61       	ori	r24, 0x10	; 16
 342:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
 344:	83 81       	ldd	r24, Z+3	; 0x03
 346:	88 60       	ori	r24, 0x08	; 8
 348:	83 83       	std	Z+3, r24	; 0x03
 34a:	08 95       	ret

0000034c <__itoa_ncheck>:
 34c:	bb 27       	eor	r27, r27
 34e:	4a 30       	cpi	r20, 0x0A	; 10
 350:	31 f4       	brne	.+12     	; 0x35e <__itoa_ncheck+0x12>
 352:	99 23       	and	r25, r25
 354:	22 f4       	brpl	.+8      	; 0x35e <__itoa_ncheck+0x12>
 356:	bd e2       	ldi	r27, 0x2D	; 45
 358:	90 95       	com	r25
 35a:	81 95       	neg	r24
 35c:	9f 4f       	sbci	r25, 0xFF	; 255
 35e:	0c 94 b2 01 	jmp	0x364	; 0x364 <__utoa_common>

00000362 <__utoa_ncheck>:
 362:	bb 27       	eor	r27, r27

00000364 <__utoa_common>:
 364:	fb 01       	movw	r30, r22
 366:	55 27       	eor	r21, r21
 368:	aa 27       	eor	r26, r26
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	aa 1f       	adc	r26, r26
 370:	a4 17       	cp	r26, r20
 372:	10 f0       	brcs	.+4      	; 0x378 <__utoa_common+0x14>
 374:	a4 1b       	sub	r26, r20
 376:	83 95       	inc	r24
 378:	50 51       	subi	r21, 0x10	; 16
 37a:	b9 f7       	brne	.-18     	; 0x36a <__utoa_common+0x6>
 37c:	a0 5d       	subi	r26, 0xD0	; 208
 37e:	aa 33       	cpi	r26, 0x3A	; 58
 380:	08 f0       	brcs	.+2      	; 0x384 <__utoa_common+0x20>
 382:	a9 5d       	subi	r26, 0xD9	; 217
 384:	a1 93       	st	Z+, r26
 386:	00 97       	sbiw	r24, 0x00	; 0
 388:	79 f7       	brne	.-34     	; 0x368 <__utoa_common+0x4>
 38a:	b1 11       	cpse	r27, r1
 38c:	b1 93       	st	Z+, r27
 38e:	11 92       	st	Z+, r1
 390:	cb 01       	movw	r24, r22
 392:	0c 94 cb 01 	jmp	0x396	; 0x396 <strrev>

00000396 <strrev>:
 396:	dc 01       	movw	r26, r24
 398:	fc 01       	movw	r30, r24
 39a:	67 2f       	mov	r22, r23
 39c:	71 91       	ld	r23, Z+
 39e:	77 23       	and	r23, r23
 3a0:	e1 f7       	brne	.-8      	; 0x39a <strrev+0x4>
 3a2:	32 97       	sbiw	r30, 0x02	; 2
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <strrev+0x18>
 3a6:	7c 91       	ld	r23, X
 3a8:	6d 93       	st	X+, r22
 3aa:	70 83       	st	Z, r23
 3ac:	62 91       	ld	r22, -Z
 3ae:	ae 17       	cp	r26, r30
 3b0:	bf 07       	cpc	r27, r31
 3b2:	c8 f3       	brcs	.-14     	; 0x3a6 <strrev+0x10>
 3b4:	08 95       	ret

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
