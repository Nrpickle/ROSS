
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001680  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00802000  00001680  00001714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008020c0  008020c0  000017d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000431d  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f8  00000000  00000000  00005cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000762  00000000  00000000  000065a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00006d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002236  00000000  00000000  000070d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1b  00000000  00000000  0000930e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00009d29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_7>
      20:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_8>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_12>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_18>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_30>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_35>
      90:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_36>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_38>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	cd bf       	out	0x3d, r28	; 61
      b4:	df e2       	ldi	r29, 0x2F	; 47
      b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
      b8:	10 e2       	ldi	r17, 0x20	; 32
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b0 e2       	ldi	r27, 0x20	; 32
      be:	e0 e8       	ldi	r30, 0x80	; 128
      c0:	f6 e1       	ldi	r31, 0x16	; 22
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a0 3c       	cpi	r26, 0xC0	; 192
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	20 e2       	ldi	r18, 0x20	; 32
      d0:	a0 ec       	ldi	r26, 0xC0	; 192
      d2:	b0 e2       	ldi	r27, 0x20	; 32
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a5 3d       	cpi	r26, 0xD5	; 213
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <main>
      e2:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
      ea:	e0 e5       	ldi	r30, 0x50	; 80
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	8b e4       	ldi	r24, 0x4B	; 75
      f0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
      f2:	80 81       	ld	r24, Z
      f4:	88 60       	ori	r24, 0x08	; 8
      f6:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
      f8:	81 81       	ldd	r24, Z+1	; 0x01
      fa:	83 fd       	sbrc	r24, 3
      fc:	09 c0       	rjmp	.+18     	; 0x110 <_Z27configureExternalOscillatorv+0x26>
      fe:	a0 e4       	ldi	r26, 0x40	; 64
     100:	b6 e0       	ldi	r27, 0x06	; 6
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	15 96       	adiw	r26, 0x05	; 5
     106:	9c 93       	st	X, r25
     108:	15 97       	sbiw	r26, 0x05	; 5
     10a:	81 81       	ldd	r24, Z+1	; 0x01
     10c:	83 ff       	sbrs	r24, 3
     10e:	fa cf       	rjmp	.-12     	; 0x104 <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
     116:	88 ed       	ldi	r24, 0xD8	; 216
     118:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
     11a:	e0 e5       	ldi	r30, 0x50	; 80
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	88 ec       	ldi	r24, 0xC8	; 200
     120:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
     122:	80 81       	ld	r24, Z
     124:	80 61       	ori	r24, 0x10	; 16
     126:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	84 fd       	sbrc	r24, 4
     12c:	09 c0       	rjmp	.+18     	; 0x140 <_Z27configureExternalOscillatorv+0x56>
     12e:	a0 e4       	ldi	r26, 0x40	; 64
     130:	b6 e0       	ldi	r27, 0x06	; 6
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	15 96       	adiw	r26, 0x05	; 5
     136:	9c 93       	st	X, r25
     138:	15 97       	sbiw	r26, 0x05	; 5
     13a:	81 81       	ldd	r24, Z+1	; 0x01
     13c:	84 ff       	sbrs	r24, 4
     13e:	fa cf       	rjmp	.-12     	; 0x134 <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
     146:	88 ed       	ldi	r24, 0xD8	; 216
     148:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
     14a:	e0 e4       	ldi	r30, 0x40	; 64
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
     150:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	80 83       	st	Z, r24
     156:	08 95       	ret

00000158 <_Z11configureIOv>:
	
	
}

void configureIO(void){
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
     15c:	e0 e4       	ldi	r30, 0x40	; 64
     15e:	f6 e0       	ldi	r31, 0x06	; 6
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = PIN0_bm;
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	91 83       	std	Z+1, r25	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
     168:	20 e2       	ldi	r18, 0x20	; 32
     16a:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
     16c:	34 e0       	ldi	r19, 0x04	; 4
     16e:	32 83       	std	Z+2, r19	; 0x02
	PORTC.DIRCLR = PIN3_bm;
     170:	48 e0       	ldi	r20, 0x08	; 8
     172:	42 83       	std	Z+2, r20	; 0x02
	
	//Set pullups on the switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
     174:	48 e1       	ldi	r20, 0x18	; 24
     176:	42 8b       	std	Z+18, r20	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
     178:	43 8b       	std	Z+19, r20	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
     17a:	c0 e0       	ldi	r28, 0x00	; 0
     17c:	d6 e0       	ldi	r29, 0x06	; 6
     17e:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
     180:	8a 83       	std	Y+2, r24	; 0x02
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
     182:	a0 e6       	ldi	r26, 0x60	; 96
     184:	b6 e0       	ldi	r27, 0x06	; 6
     186:	12 96       	adiw	r26, 0x02	; 2
     188:	9c 93       	st	X, r25
     18a:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN1_bm;  //Voltage Sense - Electronics Battery
     18c:	12 96       	adiw	r26, 0x02	; 2
     18e:	8c 93       	st	X, r24
     190:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN2_bm;  //Voltage Sense - Rear Battery
     192:	12 96       	adiw	r26, 0x02	; 2
     194:	3c 93       	st	X, r19
     196:	12 97       	sbiw	r26, 0x02	; 2
	
	//Setup the RSSI input
	PORTA.DIRCLR = PIN2_bm;				//Set the RSSI pin to be an input
     198:	3a 83       	std	Y+2, r19	; 0x02
	//PORTA.INTCTRL = PMIC_MEDLVLEN_bm;	//Set PORTA's interrupt to be medium level
	//PORTA.INTMASK = PIN2_bm;			//Configure the RSSI pin to be an interrupt
	//PORTA.PIN2CTRL |=  PORT_ISC_BOTHEDGES_gc;	//Configure the interrupt to trigger on both edges
	
	//Setup the steering signal I/O
	PORTD.DIRCLR = PIN4_bm;  //Set the STEER_SIG_3v3 pin as an input
     19a:	30 e1       	ldi	r19, 0x10	; 16
     19c:	12 96       	adiw	r26, 0x02	; 2
     19e:	3c 93       	st	X, r19
     1a0:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRSET = PIN5_bm;	 //Set the STEER_SIG_3v3_PROCESSED pin to be an output
     1a2:	11 96       	adiw	r26, 0x01	; 1
     1a4:	2c 93       	st	X, r18
     1a6:	11 97       	sbiw	r26, 0x01	; 1

	//Setup steering control PWM interrupts
	PORTD.INTCTRL  = PMIC_MEDLVLEN_bm;	//Set PORTC's interrupt to be medium level
     1a8:	19 96       	adiw	r26, 0x09	; 9
     1aa:	8c 93       	st	X, r24
     1ac:	19 97       	sbiw	r26, 0x09	; 9
	PORTD.INTMASK  = PIN4_bm;			//Configure the PWM input pin as an interrupt
     1ae:	1a 96       	adiw	r26, 0x0a	; 10
     1b0:	3c 93       	st	X, r19
     1b2:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;  //Init the pin as a rising edge interrupt only
     1b4:	54 96       	adiw	r26, 0x14	; 20
     1b6:	9c 93       	st	X, r25
     1b8:	54 97       	sbiw	r26, 0x14	; 20
	
	//DONT FORGET TO CLEAR THE FLAG IN INTFLAGS	
	
	//Initialize output values
	STATUS_CLR();
     1ba:	96 83       	std	Z+6, r25	; 0x06
	ERROR_CLR();
     1bc:	86 83       	std	Z+6, r24	; 0x06
	
	REAR_RELAY_CLR();
     1be:	26 83       	std	Z+6, r18	; 0x06
	
	STEER_SIG_CLR();	
     1c0:	16 96       	adiw	r26, 0x06	; 6
     1c2:	2c 93       	st	X, r18
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <__vector_35>:
if timer has overflown, then we missed the appropriate edge, throw out our data
If timer is good, calculate PWM high time
Store in global variable

*/
ISR(PORTD_INT_vect){
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	11 24       	eor	r1, r1
     1d4:	8f 93       	push	r24
     1d6:	9f 93       	push	r25
	PORTD.INTFLAGS = PIN4_bm;
     1d8:	80 e1       	ldi	r24, 0x10	; 16
     1da:	80 93 6c 06 	sts	0x066C, r24

	
	if(PWMMeasuringStatus == NOT_MEASURING){  //We encountered the first part of the wave
     1de:	80 91 00 20 	lds	r24, 0x2000
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	81 f4       	brne	.+32     	; 0x206 <__vector_35+0x3c>
		TCC5.CNT = 0;	//Start counting
     1e6:	10 92 60 08 	sts	0x0860, r1
     1ea:	10 92 61 08 	sts	0x0861, r1
		PWMMeasuringStatus = MEASURING;
     1ee:	10 92 00 20 	sts	0x2000, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f2:	87 ec       	ldi	r24, 0xC7	; 199
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <__vector_35+0x2c>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <__vector_35+0x32>
     1fc:	00 00       	nop
		
		_delay_us(25);  //Delay ~6-7 clock cycles
		
		PORTD.PIN4CTRL = PORT_ISC_FALLING_gc; //Set the interrupt to wait for a falling wave (end of signal)
     1fe:	82 e0       	ldi	r24, 0x02	; 2
     200:	80 93 74 06 	sts	0x0674, r24
     204:	0f c0       	rjmp	.+30     	; 0x224 <__vector_35+0x5a>
	}
	else { //We finished encountering the wave (process the data)
		steeringPWMPeriod = TCC5.CNT * 2;
     206:	80 91 60 08 	lds	r24, 0x0860
     20a:	90 91 61 08 	lds	r25, 0x0861
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	80 93 c0 20 	sts	0x20C0, r24
     216:	90 93 c1 20 	sts	0x20C1, r25
		PWMMeasuringStatus = NOT_MEASURING;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 00 20 	sts	0x2000, r24
		
		PORTD.PIN4CTRL = PORT_ISC_RISING_gc; 
     220:	80 93 74 06 	sts	0x0674, r24
	}
	
}
     224:	9f 91       	pop	r25
     226:	8f 91       	pop	r24
     228:	0f 90       	pop	r0
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	0f 90       	pop	r0
     22e:	1f 90       	pop	r1
     230:	18 95       	reti

00000232 <__vector_30>:

//This function will be called on the edges of the RSSI signal 
//*CURRENTLY DISABLED*
ISR(PORTA_INT_vect){
     232:	1f 92       	push	r1
     234:	0f 92       	push	r0
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	0f 92       	push	r0
     23a:	11 24       	eor	r1, r1
     23c:	8f 93       	push	r24
     23e:	9f 93       	push	r25
     240:	ef 93       	push	r30
     242:	ff 93       	push	r31
	cli();
     244:	f8 94       	cli
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
     246:	84 e0       	ldi	r24, 0x04	; 4
     248:	80 93 0c 06 	sts	0x060C, r24
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
     24c:	80 91 cc 20 	lds	r24, 0x20CC
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	61 f4       	brne	.+24     	; 0x26c <__vector_30+0x3a>
     254:	80 91 08 06 	lds	r24, 0x0608
     258:	82 fd       	sbrc	r24, 2
     25a:	0b c0       	rjmp	.+22     	; 0x272 <__vector_30+0x40>
     25c:	1f c0       	rjmp	.+62     	; 0x29c <__vector_30+0x6a>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     25e:	80 91 08 06 	lds	r24, 0x0608
     262:	82 ff       	sbrs	r24, 2
     264:	0d c0       	rjmp	.+26     	; 0x280 <__vector_30+0x4e>
     266:	1a c0       	rjmp	.+52     	; 0x29c <__vector_30+0x6a>
		ERROR_SET();
	}
	
	
	//_delay_us(200);
	sei();
     268:	78 94       	sei
     26a:	1c c0       	rjmp	.+56     	; 0x2a4 <__vector_30+0x72>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     26c:	88 23       	and	r24, r24
     26e:	b9 f3       	breq	.-18     	; 0x25e <__vector_30+0x2c>
     270:	15 c0       	rjmp	.+42     	; 0x29c <__vector_30+0x6a>
	cli();
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
		RTC.CNT = 0;		//We want to start counting the counter now
     272:	10 92 08 04 	sts	0x0408, r1
     276:	10 92 09 04 	sts	0x0409, r1
		RSSI.measuring = MEASURING;
     27a:	10 92 cc 20 	sts	0x20CC, r1
     27e:	f4 cf       	rjmp	.-24     	; 0x268 <__vector_30+0x36>
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
		RSSI.countDifference = RTC.CNT;
     280:	80 91 08 04 	lds	r24, 0x0408
     284:	90 91 09 04 	lds	r25, 0x0409
     288:	eb ec       	ldi	r30, 0xCB	; 203
     28a:	f0 e2       	ldi	r31, 0x20	; 32
     28c:	84 83       	std	Z+4, r24	; 0x04
     28e:	95 83       	std	Z+5, r25	; 0x05
		
		RSSI.sampleCount++;
     290:	86 81       	ldd	r24, Z+6	; 0x06
     292:	97 81       	ldd	r25, Z+7	; 0x07
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	86 83       	std	Z+6, r24	; 0x06
     298:	97 83       	std	Z+7, r25	; 0x07
     29a:	e6 cf       	rjmp	.-52     	; 0x268 <__vector_30+0x36>
	}
	else {
		ERROR_SET();
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	80 93 45 06 	sts	0x0645, r24
     2a2:	e2 cf       	rjmp	.-60     	; 0x268 <__vector_30+0x36>
	}
	
	
	//_delay_us(200);
	sei();
}
     2a4:	ff 91       	pop	r31
     2a6:	ef 91       	pop	r30
     2a8:	9f 91       	pop	r25
     2aa:	8f 91       	pop	r24
     2ac:	0f 90       	pop	r0
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	0f 90       	pop	r0
     2b2:	1f 90       	pop	r1
     2b4:	18 95       	reti

000002b6 <_Z21configureTimerCounterv>:
1S    = 0x7A12

*/
void configureTimerCounter(){
	//Configure the accurate reporting timer
	TCC4.CTRLA = TC45_CLKSEL_DIV1024_gc;	//Configure a 1024 prescaler (we want very broad timing here, exact precision isn't required)
     2b6:	e0 e0       	ldi	r30, 0x00	; 0
     2b8:	f8 e0       	ldi	r31, 0x08	; 8
     2ba:	87 e0       	ldi	r24, 0x07	; 7
     2bc:	80 83       	st	Z, r24
	TCC4.PER = TC_1024_500MS;               //500mS delay
     2be:	89 e0       	ldi	r24, 0x09	; 9
     2c0:	9d e3       	ldi	r25, 0x3D	; 61
     2c2:	86 a3       	std	Z+38, r24	; 0x26
     2c4:	97 a3       	std	Z+39, r25	; 0x27
											//Default delay value. Reference pre-calculated table up above for more information
	TCC4.CTRLB = TC45_WGMODE_NORMAL_gc;		//Configure the timer for Normal mode operation
     2c6:	11 82       	std	Z+1, r1	; 0x01
	TCC4.INTCTRLA = TC45_OVFINTLVL_LO_gc;	//Set a low priority overflow interrupt
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	86 83       	std	Z+6, r24	; 0x06

	//Configure the PWM sense module
	//Input capture described on (168)
	TCC5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     2cc:	e0 e4       	ldi	r30, 0x40	; 64
     2ce:	f8 e0       	ldi	r31, 0x08	; 8
     2d0:	85 e0       	ldi	r24, 0x05	; 5
     2d2:	80 83       	st	Z, r24
	TCC5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     2d4:	11 82       	std	Z+1, r1	; 0x01
	TCC5.PER   = 12000;						//This is set to be 20% longer than the 20mS cycle should be
     2d6:	20 ee       	ldi	r18, 0xE0	; 224
     2d8:	3e e2       	ldi	r19, 0x2E	; 46
     2da:	26 a3       	std	Z+38, r18	; 0x26
     2dc:	37 a3       	std	Z+39, r19	; 0x27
	
	//Is the following necessary?
	TCC5.INTCTRLA = TC45_OVFINTLVL_MED_gc;	//Set a medium priority overflow interrupt (we want the PWM generation to remain stable)
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	96 83       	std	Z+6, r25	; 0x06
											//as it will only take a few clock cycles compared to this interrupt
	
	//Configure the PWM generation module
	TCD5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     2e2:	e0 e4       	ldi	r30, 0x40	; 64
     2e4:	f9 e0       	ldi	r31, 0x09	; 9
     2e6:	80 83       	st	Z, r24
	TCD5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     2e8:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PER   = 10000;						//We want to establish a 50Hz control loop here (20ms period)
     2ea:	80 e1       	ldi	r24, 0x10	; 16
     2ec:	97 e2       	ldi	r25, 0x27	; 39
     2ee:	86 a3       	std	Z+38, r24	; 0x26
     2f0:	97 a3       	std	Z+39, r25	; 0x27
	TCD5.INTCTRLA = TC45_OVFINTLVL_HI_gc;	//Set a high priority overflow interrupt
     2f2:	83 e0       	ldi	r24, 0x03	; 3
     2f4:	86 83       	std	Z+6, r24	; 0x06
	TCD5.INTCTRLB = TC45_CCAINTLVL_HI_gc;   
     2f6:	87 83       	std	Z+7, r24	; 0x07
	
	TCD5.CCA = 950;		//Initial value for compare
     2f8:	86 eb       	ldi	r24, 0xB6	; 182
     2fa:	93 e0       	ldi	r25, 0x03	; 3
     2fc:	80 a7       	std	Z+40, r24	; 0x28
     2fe:	91 a7       	std	Z+41, r25	; 0x29
     300:	08 95       	ret

00000302 <__vector_18>:
}

//This triggers when a PWM signal hasn't been detected for the past ~24mS
ISR (TCC5_OVF_vect){
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	8f 93       	push	r24
     30e:	9f 93       	push	r25
     310:	ef 93       	push	r30
     312:	ff 93       	push	r31
	TCC5.INTFLAGS |= 0b1;  //Reset interrupt flag
     314:	e0 e4       	ldi	r30, 0x40	; 64
     316:	f8 e0       	ldi	r31, 0x08	; 8
     318:	84 85       	ldd	r24, Z+12	; 0x0c
     31a:	81 60       	ori	r24, 0x01	; 1
     31c:	84 87       	std	Z+12, r24	; 0x0c
	
	PWMMeasuringStatus = NOT_MEASURING;		//Reset the "NOT MEASURING" flag
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 00 20 	sts	0x2000, r24
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;	//Reconfigure the port to wait for a high pulse
     324:	80 93 74 06 	sts	0x0674, r24
	
	steeringPWMPeriod = 1500;				//Set the steering PWM period to a stable "standby position"
     328:	8c ed       	ldi	r24, 0xDC	; 220
     32a:	95 e0       	ldi	r25, 0x05	; 5
     32c:	80 93 c0 20 	sts	0x20C0, r24
     330:	90 93 c1 20 	sts	0x20C1, r25
}
     334:	ff 91       	pop	r31
     336:	ef 91       	pop	r30
     338:	9f 91       	pop	r25
     33a:	8f 91       	pop	r24
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_38>:
/*
Compare vector A for the PWM generation module
This situation ------\______

*/
ISR (TCD5_CCA_vect){
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	8f 93       	push	r24
	STEER_SIG_CLR();
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	80 93 66 06 	sts	0x0666, r24
	//STATUS_SET();
}
     358:	8f 91       	pop	r24
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <__vector_36>:
This situation: _____/-----

*/


ISR (TCD5_OVF_vect){
     364:	1f 92       	push	r1
     366:	0f 92       	push	r0
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	0f 92       	push	r0
     36c:	11 24       	eor	r1, r1
     36e:	8f 93       	push	r24
     370:	ef 93       	push	r30
     372:	ff 93       	push	r31
	STEER_SIG_SET();
     374:	80 e2       	ldi	r24, 0x20	; 32
     376:	80 93 65 06 	sts	0x0665, r24
	
	TCD5.INTFLAGS |= 0b1;
     37a:	e0 e4       	ldi	r30, 0x40	; 64
     37c:	f9 e0       	ldi	r31, 0x09	; 9
     37e:	84 85       	ldd	r24, Z+12	; 0x0c
     380:	81 60       	ori	r24, 0x01	; 1
     382:	84 87       	std	Z+12, r24	; 0x0c
	
	TCD5.CNT = 0;
     384:	10 a2       	std	Z+32, r1	; 0x20
     386:	11 a2       	std	Z+33, r1	; 0x21
}
     388:	ff 91       	pop	r31
     38a:	ef 91       	pop	r30
     38c:	8f 91       	pop	r24
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <__vector_12>:

//Handles compare vector for T/C 4
ISR (TCC4_OVF_vect){
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	2f 93       	push	r18
     3a4:	3f 93       	push	r19
     3a6:	4f 93       	push	r20
     3a8:	5f 93       	push	r21
     3aa:	6f 93       	push	r22
     3ac:	7f 93       	push	r23
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
     3b2:	af 93       	push	r26
     3b4:	ef 93       	push	r30
     3b6:	ff 93       	push	r31
	++longCounter;
     3b8:	20 91 c2 20 	lds	r18, 0x20C2
     3bc:	30 91 c3 20 	lds	r19, 0x20C3
     3c0:	40 91 c4 20 	lds	r20, 0x20C4
     3c4:	50 91 c5 20 	lds	r21, 0x20C5
     3c8:	60 91 c6 20 	lds	r22, 0x20C6
     3cc:	70 91 c7 20 	lds	r23, 0x20C7
     3d0:	80 91 c8 20 	lds	r24, 0x20C8
     3d4:	90 91 c9 20 	lds	r25, 0x20C9
     3d8:	a1 e0       	ldi	r26, 0x01	; 1
     3da:	0e 94 2b 08 	call	0x1056	; 0x1056 <__adddi3_s8>
     3de:	20 93 c2 20 	sts	0x20C2, r18
     3e2:	30 93 c3 20 	sts	0x20C3, r19
     3e6:	40 93 c4 20 	sts	0x20C4, r20
     3ea:	50 93 c5 20 	sts	0x20C5, r21
     3ee:	60 93 c6 20 	sts	0x20C6, r22
     3f2:	70 93 c7 20 	sts	0x20C7, r23
     3f6:	80 93 c8 20 	sts	0x20C8, r24
     3fa:	90 93 c9 20 	sts	0x20C9, r25
	
	TCC4.INTFLAGS |= 0b1;  //Reset overflow interrupt
     3fe:	e0 e0       	ldi	r30, 0x00	; 0
     400:	f8 e0       	ldi	r31, 0x08	; 8
     402:	84 85       	ldd	r24, Z+12	; 0x0c
     404:	81 60       	ori	r24, 0x01	; 1
     406:	84 87       	std	Z+12, r24	; 0x0c
	
	broadcastStatus = 1;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 ca 20 	sts	0x20CA, r24
}
     40e:	ff 91       	pop	r31
     410:	ef 91       	pop	r30
     412:	af 91       	pop	r26
     414:	9f 91       	pop	r25
     416:	8f 91       	pop	r24
     418:	7f 91       	pop	r23
     41a:	6f 91       	pop	r22
     41c:	5f 91       	pop	r21
     41e:	4f 91       	pop	r20
     420:	3f 91       	pop	r19
     422:	2f 91       	pop	r18
     424:	0f 90       	pop	r0
     426:	0f be       	out	0x3f, r0	; 63
     428:	0f 90       	pop	r0
     42a:	1f 90       	pop	r1
     42c:	18 95       	reti

0000042e <_Z12configureRTCv>:

/*
The real time clock is configured to handle XTend RSSI Interpret
*/
void configureRTC(){
	RTC.CTRL = RTC_CORREN_bm | RTC_PRESCALER_DIV1_gc;		//Enable the RTC correction process, and the RTC itself with no prescaler
     42e:	e0 e0       	ldi	r30, 0x00	; 0
     430:	f4 e0       	ldi	r31, 0x04	; 4
     432:	89 e0       	ldi	r24, 0x09	; 9
     434:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_COMPINTLVL_LO_gc | RTC_OVFINTLVL_LO_gc; //Enable the overflow and 
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	82 83       	std	Z+2, r24	; 0x02
	
    OSC.CTRL |= OSC_RC32KEN_bm;								//Enable the 32.768kHz internal oscillator
     43a:	a0 e5       	ldi	r26, 0x50	; 80
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	8c 91       	ld	r24, X
     440:	84 60       	ori	r24, 0x04	; 4
     442:	8c 93       	st	X, r24
     444:	8f e7       	ldi	r24, 0x7F	; 127
     446:	9c e0       	ldi	r25, 0x0C	; 12
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <_Z12configureRTCv+0x1a>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <_Z12configureRTCv+0x20>
     44e:	00 00       	nop
	
	_delay_us(400);											//Wait for the oscillator to stabalize.
	
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC32_gc;					//Set the RTC input as the 32.768kHz internal oscillator
     450:	a0 e4       	ldi	r26, 0x40	; 64
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	8c e0       	ldi	r24, 0x0C	; 12
     456:	13 96       	adiw	r26, 0x03	; 3
     458:	8c 93       	st	X, r24
     45a:	13 97       	sbiw	r26, 0x03	; 3
	CLK.RTCCTRL |= CLK_RTCEN_bm;							//Enable the clock input
     45c:	13 96       	adiw	r26, 0x03	; 3
     45e:	8c 91       	ld	r24, X
     460:	13 97       	sbiw	r26, 0x03	; 3
     462:	81 60       	ori	r24, 0x01	; 1
     464:	13 96       	adiw	r26, 0x03	; 3
     466:	8c 93       	st	X, r24
	
	//Testing setup code
	RTC.COMP = 16384; //~1 second? Assuming 32.768 KHz
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e4       	ldi	r25, 0x40	; 64
     46c:	84 87       	std	Z+12, r24	; 0x0c
     46e:	95 87       	std	Z+13, r25	; 0x0d
	RTC.PER = 0xFF00;  //No tengo nuguien idea
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	9f ef       	ldi	r25, 0xFF	; 255
     474:	82 87       	std	Z+10, r24	; 0x0a
     476:	93 87       	std	Z+11, r25	; 0x0b
     478:	08 95       	ret

0000047a <__vector_7>:

}

ISR(RTC_OVF_vect){
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
	
}
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <__vector_8>:

ISR(RTC_COMP_vect){
     48e:	1f 92       	push	r1
     490:	0f 92       	push	r0
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	0f 92       	push	r0
     496:	11 24       	eor	r1, r1
     498:	8f 93       	push	r24
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
	
	RTC.CNT = 0;
     49e:	e0 e0       	ldi	r30, 0x00	; 0
     4a0:	f4 e0       	ldi	r31, 0x04	; 4
     4a2:	10 86       	std	Z+8, r1	; 0x08
     4a4:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTFLAGS = 0x02;
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	83 83       	std	Z+3, r24	; 0x03
	
	RSSI.countDifference = 0;
     4aa:	10 92 cf 20 	sts	0x20CF, r1
     4ae:	10 92 d0 20 	sts	0x20D0, r1
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	8f 91       	pop	r24
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <_Z12configureXCLv>:

void configureXCL(){
     4c2:	08 95       	ret

000004c4 <_Z19ReadCalibrationByteh>:
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     4c4:	aa ec       	ldi	r26, 0xCA	; 202
     4c6:	b1 e0       	ldi	r27, 0x01	; 1
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     4cc:	e8 2f       	mov	r30, r24
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     4d2:	1c 92       	st	X, r1

	return( result );
}
     4d4:	08 95       	ret

000004d6 <_Z13configureADCsv>:

#include "config.h"

extern RSSI_type RSSI;

void configureADCs(){
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
	// Batt Input Voltage
	// Halve Input
	//Set to single ended input
	//Set to 12-bit mode
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
     4da:	c0 e0       	ldi	r28, 0x00	; 0
     4dc:	d2 e0       	ldi	r29, 0x02	; 2
     4de:	82 e1       	ldi	r24, 0x12	; 18
     4e0:	89 83       	std	Y+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; //Disable events
     4e6:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
     4e8:	87 e0       	ldi	r24, 0x07	; 7
     4ea:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
     4ec:	80 e2       	ldi	r24, 0x20	; 32
     4ee:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z19ReadCalibrationByteh>
     4f2:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
     4f4:	81 e2       	ldi	r24, 0x21	; 33
     4f6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z19ReadCalibrationByteh>
     4fa:	8d 87       	std	Y+13, r24	; 0x0d
     4fc:	8f e7       	ldi	r24, 0x7F	; 127
     4fe:	9c e0       	ldi	r25, 0x0C	; 12
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <_Z13configureADCsv+0x2a>
     504:	00 c0       	rjmp	.+0      	; 0x506 <_Z13configureADCsv+0x30>
     506:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	88 a3       	std	Y+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
     50c:	81 e4       	ldi	r24, 0x41	; 65
     50e:	89 a3       	std	Y+33, r24	; 0x21
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
     510:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	88 83       	st	Y, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
	//ADCA.CTRLA |= ADC_CH8START_bm;
	*/	
}	
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <_Z23sampleTempSensorVoltagev>:




int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);//ADC_CH_MUXNEG0_bm);
     51c:	e0 e0       	ldi	r30, 0x00	; 0
     51e:	f2 e0       	ldi	r31, 0x02	; 2
     520:	81 e4       	ldi	r24, 0x41	; 65
     522:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     524:	80 a1       	ldd	r24, Z+32	; 0x20
     526:	80 68       	ori	r24, 0x80	; 128
     528:	80 a3       	std	Z+32, r24	; 0x20
     52a:	8f e7       	ldi	r24, 0x7F	; 127
     52c:	9c e0       	ldi	r25, 0x0C	; 12
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	f1 f7       	brne	.-4      	; 0x52e <_Z23sampleTempSensorVoltagev+0x12>
     532:	00 c0       	rjmp	.+0      	; 0x534 <_Z23sampleTempSensorVoltagev+0x18>
     534:	00 00       	nop
	
	_delay_us(400);
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 8)) != (1U << 8)); // (1U << n) where n is the adc channel, so zero for this one
	
	while(!(ADCA.INTFLAGS & (1 << 0)));
     536:	86 81       	ldd	r24, Z+6	; 0x06
     538:	80 ff       	sbrs	r24, 0
     53a:	fd cf       	rjmp	.-6      	; 0x536 <_Z23sampleTempSensorVoltagev+0x1a>
	ADCA.INTFLAGS = (1 << 0);
     53c:	e0 e0       	ldi	r30, 0x00	; 0
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     544:	84 a1       	ldd	r24, Z+36	; 0x24
     546:	95 a1       	ldd	r25, Z+37	; 0x25
}
     548:	08 95       	ret

0000054a <_Z20sampleBatteryVoltagev>:

int16_t sampleBatteryVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN9_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for batt voltage sense
     54a:	e0 e0       	ldi	r30, 0x00	; 0
     54c:	f2 e0       	ldi	r31, 0x02	; 2
     54e:	89 e4       	ldi	r24, 0x49	; 73
     550:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     552:	80 a1       	ldd	r24, Z+32	; 0x20
     554:	80 68       	ori	r24, 0x80	; 128
     556:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
	//ADCA.INTFLAGS = ((1U << 0) << ADC_CH0IF_bp);
	while(!(ADCA.INTFLAGS & (1 << 0)));
     558:	86 81       	ldd	r24, Z+6	; 0x06
     55a:	80 ff       	sbrs	r24, 0
     55c:	fd cf       	rjmp	.-6      	; 0x558 <_Z20sampleBatteryVoltagev+0xe>
	ADCA.INTFLAGS = (1 << 0);
     55e:	e0 e0       	ldi	r30, 0x00	; 0
     560:	f2 e0       	ldi	r31, 0x02	; 2
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     566:	84 a1       	ldd	r24, Z+36	; 0x24
     568:	95 a1       	ldd	r25, Z+37	; 0x25
}
     56a:	08 95       	ret

0000056c <_Z18getEBoxTemperaturev>:

double getEBoxTemperature(){
     56c:	2f 92       	push	r2
     56e:	3f 92       	push	r3
     570:	4f 92       	push	r4
     572:	5f 92       	push	r5
     574:	6f 92       	push	r6
     576:	7f 92       	push	r7
     578:	8f 92       	push	r8
     57a:	9f 92       	push	r9
     57c:	af 92       	push	r10
     57e:	bf 92       	push	r11
     580:	cf 92       	push	r12
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	0f 2e       	mov	r0, r31
     592:	f4 e6       	ldi	r31, 0x64	; 100
     594:	6f 2e       	mov	r6, r31
     596:	71 2c       	mov	r7, r1
     598:	f0 2d       	mov	r31, r0
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
     59a:	41 2c       	mov	r4, r1
     59c:	51 2c       	mov	r5, r1
     59e:	81 2c       	mov	r8, r1
     5a0:	91 2c       	mov	r9, r1
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
     5a4:	c0 e0       	ldi	r28, 0x00	; 0
     5a6:	21 2c       	mov	r2, r1
     5a8:	31 2c       	mov	r3, r1
	for(int i = 0; i < avgVal; ++i){
		sum += sampleTempSensorVoltage();
     5aa:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z23sampleTempSensorVoltagev>
     5ae:	b9 2e       	mov	r11, r25
     5b0:	a8 2e       	mov	r10, r24
     5b2:	19 2f       	mov	r17, r25
     5b4:	11 0f       	add	r17, r17
     5b6:	11 0b       	sbc	r17, r17
     5b8:	24 2d       	mov	r18, r4
     5ba:	35 2d       	mov	r19, r5
     5bc:	48 2d       	mov	r20, r8
     5be:	59 2d       	mov	r21, r9
     5c0:	6d 2f       	mov	r22, r29
     5c2:	7c 2f       	mov	r23, r28
     5c4:	82 2d       	mov	r24, r2
     5c6:	93 2d       	mov	r25, r3
     5c8:	c1 2e       	mov	r12, r17
     5ca:	d1 2e       	mov	r13, r17
     5cc:	e1 2e       	mov	r14, r17
     5ce:	f1 2e       	mov	r15, r17
     5d0:	01 2f       	mov	r16, r17
     5d2:	0e 94 22 08 	call	0x1044	; 0x1044 <__adddi3>
     5d6:	42 2e       	mov	r4, r18
     5d8:	53 2e       	mov	r5, r19
     5da:	84 2e       	mov	r8, r20
     5dc:	95 2e       	mov	r9, r21
     5de:	d6 2f       	mov	r29, r22
     5e0:	c7 2f       	mov	r28, r23
     5e2:	28 2e       	mov	r2, r24
     5e4:	39 2e       	mov	r3, r25
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	68 1a       	sub	r6, r24
     5ea:	71 08       	sbc	r7, r1
double getEBoxTemperature(){
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
	for(int i = 0; i < avgVal; ++i){
     5ec:	f1 f6       	brne	.-68     	; 0x5aa <_Z18getEBoxTemperaturev+0x3e>
		sum += sampleTempSensorVoltage();
	}
	temperature = sum / avgVal;
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f4 e6       	ldi	r31, 0x64	; 100
     5f2:	af 2e       	mov	r10, r31
     5f4:	f0 2d       	mov	r31, r0
     5f6:	b1 2c       	mov	r11, r1
     5f8:	c1 2c       	mov	r12, r1
     5fa:	d1 2c       	mov	r13, r1
     5fc:	e1 2c       	mov	r14, r1
     5fe:	f1 2c       	mov	r15, r1
     600:	00 e0       	ldi	r16, 0x00	; 0
     602:	10 e0       	ldi	r17, 0x00	; 0
     604:	24 2d       	mov	r18, r4
     606:	35 2d       	mov	r19, r5
     608:	48 2d       	mov	r20, r8
     60a:	59 2d       	mov	r21, r9
     60c:	6d 2f       	mov	r22, r29
     60e:	7c 2f       	mov	r23, r28
     610:	82 2d       	mov	r24, r2
     612:	93 2d       	mov	r25, r3
     614:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__udivdi3>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     618:	62 2f       	mov	r22, r18
     61a:	73 2f       	mov	r23, r19
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__floatunsisf>
     624:	29 e8       	ldi	r18, 0x89	; 137
     626:	3d e0       	ldi	r19, 0x0D	; 13
     628:	4d e9       	ldi	r20, 0x9D	; 157
     62a:	5a e3       	ldi	r21, 0x3A	; 58
     62c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
     630:	24 e6       	ldi	r18, 0x64	; 100
     632:	37 e6       	ldi	r19, 0x67	; 103
     634:	49 e1       	ldi	r20, 0x19	; 25
     636:	5b e3       	ldi	r21, 0x3B	; 59
     638:	0e 94 46 05 	call	0xa8c	; 0xa8c <__addsf3>
	
	#ifdef TMP36
		temperatureFloat = 100.0 * temperatureVoltage - 50.0;
	#endif
	#ifdef TMP37
		temperatureFloat = 50.0 * temperatureVoltage;
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	48 e4       	ldi	r20, 0x48	; 72
     642:	52 e4       	ldi	r21, 0x42	; 66
     644:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
	#endif
	
	return temperatureFloat;
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	bf 90       	pop	r11
     65a:	af 90       	pop	r10
     65c:	9f 90       	pop	r9
     65e:	8f 90       	pop	r8
     660:	7f 90       	pop	r7
     662:	6f 90       	pop	r6
     664:	5f 90       	pop	r5
     666:	4f 90       	pop	r4
     668:	3f 90       	pop	r3
     66a:	2f 90       	pop	r2
     66c:	08 95       	ret

0000066e <_Z28getElectronicsBatteryVoltagev>:

double getElectronicsBatteryVoltage(){
     66e:	cf 92       	push	r12
     670:	df 92       	push	r13
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	c2 e3       	ldi	r28, 0x32	; 50
     67c:	d0 e0       	ldi	r29, 0x00	; 0

	int avgVal = 50;
	uint32_t sum = 0;
     67e:	c1 2c       	mov	r12, r1
     680:	d1 2c       	mov	r13, r1
     682:	76 01       	movw	r14, r12
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
     684:	0e 94 a5 02 	call	0x54a	; 0x54a <_Z20sampleBatteryVoltagev>
     688:	09 2e       	mov	r0, r25
     68a:	00 0c       	add	r0, r0
     68c:	aa 0b       	sbc	r26, r26
     68e:	bb 0b       	sbc	r27, r27
     690:	c8 0e       	add	r12, r24
     692:	d9 1e       	adc	r13, r25
     694:	ea 1e       	adc	r14, r26
     696:	fb 1e       	adc	r15, r27
     698:	21 97       	sbiw	r28, 0x01	; 1
double getElectronicsBatteryVoltage(){

	int avgVal = 50;
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
     69a:	a1 f7       	brne	.-24     	; 0x684 <_Z28getElectronicsBatteryVoltagev+0x16>
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
     69c:	c7 01       	movw	r24, r14
     69e:	b6 01       	movw	r22, r12
     6a0:	22 e3       	ldi	r18, 0x32	; 50
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	0e 94 a1 07 	call	0xf42	; 0xf42 <__udivmodsi4>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     6ac:	b9 01       	movw	r22, r18
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__floatunsisf>
     6b6:	29 e8       	ldi	r18, 0x89	; 137
     6b8:	3d e0       	ldi	r19, 0x0D	; 13
     6ba:	4d e9       	ldi	r20, 0x9D	; 157
     6bc:	5a e3       	ldi	r21, 0x3A	; 58
     6be:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
     6c2:	24 e6       	ldi	r18, 0x64	; 100
     6c4:	37 e6       	ldi	r19, 0x67	; 103
     6c6:	49 e1       	ldi	r20, 0x19	; 25
     6c8:	5b e3       	ldi	r21, 0x3B	; 59
     6ca:	0e 94 46 05 	call	0xa8c	; 0xa8c <__addsf3>
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
	double electronicsVoltage = ADCCountToVoltage(electronicsVoltageCount);
	double calculatedElectronicsVoltage =  (electronicsVoltage / .56) + (10.0 - .05);
     6ce:	29 e2       	ldi	r18, 0x29	; 41
     6d0:	3c e5       	ldi	r19, 0x5C	; 92
     6d2:	4f e0       	ldi	r20, 0x0F	; 15
     6d4:	5f e3       	ldi	r21, 0x3F	; 63
     6d6:	0e 94 b2 05 	call	0xb64	; 0xb64 <__divsf3>
     6da:	23 e3       	ldi	r18, 0x33	; 51
     6dc:	33 e3       	ldi	r19, 0x33	; 51
     6de:	4f e1       	ldi	r20, 0x1F	; 31
     6e0:	51 e4       	ldi	r21, 0x41	; 65
     6e2:	0e 94 46 05 	call	0xa8c	; 0xa8c <__addsf3>

	return calculatedElectronicsVoltage;
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	08 95       	ret

000006f4 <main>:
//Global Variables *gasp*
volatile int toggle = 0;
volatile int temp = 1000;

int main(void)
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <main+0x6>
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <main+0x8>
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
	configureIO();
     700:	0e 94 ac 00 	call	0x158	; 0x158 <_Z11configureIOv>
	configureExternalOscillator();
     704:	0e 94 75 00 	call	0xea	; 0xea <_Z27configureExternalOscillatorv>
	configureUSART();					//Set up for 57600 Baud
     708:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z14configureUSARTv>
	configureTimerCounter();
     70c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z21configureTimerCounterv>
	configureADCs();
     710:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z13configureADCsv>
	configureRTC();
     714:	0e 94 17 02 	call	0x42e	; 0x42e <_Z12configureRTCv>
	configureXCL();
     718:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z12configureXCLv>
	
	LOW_LEVEL_INTERRUPTS_ENABLE();
     71c:	e0 ea       	ldi	r30, 0xA0	; 160
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	82 81       	ldd	r24, Z+2	; 0x02
     722:	81 60       	ori	r24, 0x01	; 1
     724:	82 83       	std	Z+2, r24	; 0x02
	MED_LEVEL_INTERRUPTS_ENABLE();
     726:	82 81       	ldd	r24, Z+2	; 0x02
     728:	82 60       	ori	r24, 0x02	; 2
     72a:	82 83       	std	Z+2, r24	; 0x02
	HIGH_LEVEL_INTERRUPTS_ENABLE();
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	84 60       	ori	r24, 0x04	; 4
     730:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable global interrupts
     732:	78 94       	sei
	
	uint8_t receivedUSARTData;
	
	RSSI.measuring = NOT_MEASURING;
     734:	eb ec       	ldi	r30, 0xCB	; 203
     736:	f0 e2       	ldi	r31, 0x20	; 32
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	81 83       	std	Z+1, r24	; 0x01
	RSSI.timeDifference = 0;
     73c:	12 82       	std	Z+2, r1	; 0x02
     73e:	13 82       	std	Z+3, r1	; 0x03
	RSSI.sampleCount = 0;
     740:	16 82       	std	Z+6, r1	; 0x06
     742:	17 82       	std	Z+7, r1	; 0x07

	//Init string with basic documentation
	SendStringPC((char *)"#[INIT ROSS PDB]\n\r");
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	90 e2       	ldi	r25, 0x20	; 32
     748:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
	SendStringPC((char *)"#Firmware version ");
     74c:	84 e1       	ldi	r24, 0x14	; 20
     74e:	90 e2       	ldi	r25, 0x20	; 32
     750:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
	SendStringPC((char *)FIRMWARE_VERSION_STR);
     754:	87 e2       	ldi	r24, 0x27	; 39
     756:	90 e2       	ldi	r25, 0x20	; 32
     758:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
	SendStringPC((char *)"\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr \n\r");
     75c:	8a e2       	ldi	r24, 0x2A	; 42
     75e:	90 e2       	ldi	r25, 0x20	; 32
     760:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     764:	0f 2e       	mov	r0, r31
     766:	f0 ec       	ldi	r31, 0xC0	; 192
     768:	ef 2e       	mov	r14, r31
     76a:	f8 e0       	ldi	r31, 0x08	; 8
     76c:	ff 2e       	mov	r15, r31
     76e:	f0 2d       	mov	r31, r0
			receivedUSARTData = USART_GetChar(&COMP_USART);
			if(receivedUSARTData == 'y')
				REAR_RELAY_SET();
			else if(receivedUSARTData == 'n')
				REAR_RELAY_CLR();
     770:	0f 2e       	mov	r0, r31
     772:	f0 e4       	ldi	r31, 0x40	; 64
     774:	4f 2e       	mov	r4, r31
     776:	f6 e0       	ldi	r31, 0x06	; 6
     778:	5f 2e       	mov	r5, r31
     77a:	f0 2d       	mov	r31, r0
     77c:	68 94       	set
     77e:	bb 24       	eor	r11, r11
     780:	b5 f8       	bld	r11, 5
		}		
		
		//TODO: if(pixhawkControl)
		TC_PWM_SET(steeringPWMPeriod);	//Process the artificial PWM output
     782:	0f 2e       	mov	r0, r31
     784:	f0 e4       	ldi	r31, 0x40	; 64
     786:	cf 2e       	mov	r12, r31
     788:	f9 e0       	ldi	r31, 0x09	; 9
     78a:	df 2e       	mov	r13, r31
     78c:	f0 2d       	mov	r31, r0
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
			broadcastStatus = 0;
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     78e:	21 2c       	mov	r2, r1
     790:	68 94       	set
     792:	33 24       	eor	r3, r3
     794:	33 f8       	bld	r3, 3
			double zero = 0.0;
			
			STATUS_TOGGLE();
			
			
			RTC.CNT = 0;
     796:	81 2c       	mov	r8, r1
     798:	68 94       	set
     79a:	99 24       	eor	r9, r9
     79c:	92 f8       	bld	r9, 2
				_delay_us(50);
				
				if(RTC.CNT > 250)
					break;
					
			}while(READ_RSSI_PIN());
     79e:	00 e0       	ldi	r16, 0x00	; 0
     7a0:	16 e0       	ldi	r17, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a2:	8f e3       	ldi	r24, 0x3F	; 63
     7a4:	9f e1       	ldi	r25, 0x1F	; 31
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <main+0xb2>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <main+0xb8>
     7ac:	00 00       	nop
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     7ae:	f7 01       	movw	r30, r14
     7b0:	81 81       	ldd	r24, Z+1	; 0x01
     7b2:	88 23       	and	r24, r24
     7b4:	54 f4       	brge	.+20     	; 0x7ca <main+0xd6>
			receivedUSARTData = USART_GetChar(&COMP_USART);
     7b6:	80 81       	ld	r24, Z
			if(receivedUSARTData == 'y')
     7b8:	89 37       	cpi	r24, 0x79	; 121
     7ba:	19 f4       	brne	.+6      	; 0x7c2 <main+0xce>
				REAR_RELAY_SET();
     7bc:	f2 01       	movw	r30, r4
     7be:	b5 82       	std	Z+5, r11	; 0x05
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <main+0xd6>
			else if(receivedUSARTData == 'n')
     7c2:	8e 36       	cpi	r24, 0x6E	; 110
     7c4:	11 f4       	brne	.+4      	; 0x7ca <main+0xd6>
				REAR_RELAY_CLR();
     7c6:	f2 01       	movw	r30, r4
     7c8:	b6 82       	std	Z+6, r11	; 0x06
		}		
		
		//TODO: if(pixhawkControl)
		TC_PWM_SET(steeringPWMPeriod);	//Process the artificial PWM output
     7ca:	60 91 c0 20 	lds	r22, 0x20C0
     7ce:	70 91 c1 20 	lds	r23, 0x20C1
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__floatunsisf>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	5f e3       	ldi	r21, 0x3F	; 63
     7e2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
     7e6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fixunssfsi>
     7ea:	f6 01       	movw	r30, r12
     7ec:	60 a7       	std	Z+40, r22	; 0x28
     7ee:	71 a7       	std	Z+41, r23	; 0x29
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
     7f0:	80 91 ca 20 	lds	r24, 0x20CA
     7f4:	88 23       	and	r24, r24
     7f6:	a9 f2       	breq	.-86     	; 0x7a2 <main+0xae>
			broadcastStatus = 0;
     7f8:	10 92 ca 20 	sts	0x20CA, r1
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     7fc:	f1 01       	movw	r30, r2
     7fe:	10 a2       	std	Z+32, r1	; 0x20
     800:	11 a2       	std	Z+33, r1	; 0x21
							//have a consistent report time. (We don't want to throw
							//out the accuracy of the TC)
			
			//Calculated desired output values
			double EBoxTemp = getEBoxTemperature();
     802:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z18getEBoxTemperaturev>
     806:	69 83       	std	Y+1, r22	; 0x01
     808:	7a 83       	std	Y+2, r23	; 0x02
     80a:	8b 83       	std	Y+3, r24	; 0x03
     80c:	9c 83       	std	Y+4, r25	; 0x04
			double electronicsBatteryVoltage = getElectronicsBatteryVoltage();
     80e:	0e 94 37 03 	call	0x66e	; 0x66e <_Z28getElectronicsBatteryVoltagev>
     812:	ab 01       	movw	r20, r22
     814:	bc 01       	movw	r22, r24
			double zero = 0.0;
			
			STATUS_TOGGLE();
     816:	f2 01       	movw	r30, r4
     818:	84 81       	ldd	r24, Z+4	; 0x04
     81a:	80 fd       	sbrc	r24, 0
     81c:	03 c0       	rjmp	.+6      	; 0x824 <main+0x130>
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	85 83       	std	Z+5, r24	; 0x05
     822:	03 c0       	rjmp	.+6      	; 0x82a <main+0x136>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	f2 01       	movw	r30, r4
     828:	86 83       	std	Z+6, r24	; 0x06
			
			
			RTC.CNT = 0;
     82a:	f4 01       	movw	r30, r8
     82c:	10 86       	std	Z+8, r1	; 0x08
     82e:	11 86       	std	Z+9, r1	; 0x09
			
			//Get RSSI from XTend
			RSSI.measuring = 0;
     830:	10 92 cc 20 	sts	0x20CC, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     834:	8f e8       	ldi	r24, 0x8F	; 143
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <main+0x144>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <main+0x14a>
     83e:	00 00       	nop
			do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
				_delay_us(50);
				
				if(RTC.CNT > 250)
     840:	f4 01       	movw	r30, r8
     842:	80 85       	ldd	r24, Z+8	; 0x08
     844:	91 85       	ldd	r25, Z+9	; 0x09
     846:	8b 3f       	cpi	r24, 0xFB	; 251
     848:	91 05       	cpc	r25, r1
     84a:	20 f4       	brcc	.+8      	; 0x854 <main+0x160>
					break;
					
			}while(READ_RSSI_PIN());
     84c:	f8 01       	movw	r30, r16
     84e:	80 85       	ldd	r24, Z+8	; 0x08
			
			RTC.CNT = 0;
			
			//Get RSSI from XTend
			RSSI.measuring = 0;
			do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
     850:	82 fd       	sbrc	r24, 2
     852:	f0 cf       	rjmp	.-32     	; 0x834 <main+0x140>
     854:	8f e8       	ldi	r24, 0x8F	; 143
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <main+0x164>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <main+0x16a>
     85e:	00 00       	nop
			}while(READ_RSSI_PIN());
			
			do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
				_delay_us(50);
				
				if(RTC.CNT > 250)
     860:	f4 01       	movw	r30, r8
     862:	80 85       	ldd	r24, Z+8	; 0x08
     864:	91 85       	ldd	r25, Z+9	; 0x09
     866:	8b 3f       	cpi	r24, 0xFB	; 251
     868:	91 05       	cpc	r25, r1
     86a:	20 f4       	brcc	.+8      	; 0x874 <main+0x180>
					break;
			}while(!READ_RSSI_PIN());
     86c:	f8 01       	movw	r30, r16
     86e:	80 85       	ldd	r24, Z+8	; 0x08
				if(RTC.CNT > 250)
					break;
					
			}while(READ_RSSI_PIN());
			
			do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
     870:	82 ff       	sbrs	r24, 2
     872:	f0 cf       	rjmp	.-32     	; 0x854 <main+0x160>
				
				if(RTC.CNT > 250)
					break;
			}while(!READ_RSSI_PIN());
			
			RTC.CNT = 0;  //Start counting
     874:	f4 01       	movw	r30, r8
     876:	10 86       	std	Z+8, r1	; 0x08
     878:	11 86       	std	Z+9, r1	; 0x09
     87a:	8f e8       	ldi	r24, 0x8F	; 143
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <main+0x18a>
     882:	00 c0       	rjmp	.+0      	; 0x884 <main+0x190>
     884:	00 00       	nop
			
			do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
				_delay_us(50);
				
				if(RTC.CNT > 250)
     886:	f4 01       	movw	r30, r8
     888:	80 85       	ldd	r24, Z+8	; 0x08
     88a:	91 85       	ldd	r25, Z+9	; 0x09
     88c:	8b 3f       	cpi	r24, 0xFB	; 251
     88e:	91 05       	cpc	r25, r1
     890:	20 f4       	brcc	.+8      	; 0x89a <main+0x1a6>
					break;
			}while(READ_RSSI_PIN());
     892:	f8 01       	movw	r30, r16
     894:	80 85       	ldd	r24, Z+8	; 0x08
					break;
			}while(!READ_RSSI_PIN());
			
			RTC.CNT = 0;  //Start counting
			
			do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
     896:	82 fd       	sbrc	r24, 2
     898:	f0 cf       	rjmp	.-32     	; 0x87a <main+0x186>
				
				if(RTC.CNT > 250)
					break;
			}while(READ_RSSI_PIN());
			
			RSSI.countDifference = RTC.CNT;
     89a:	f4 01       	movw	r30, r8
     89c:	80 85       	ldd	r24, Z+8	; 0x08
     89e:	91 85       	ldd	r25, Z+9	; 0x09
     8a0:	0f 2e       	mov	r0, r31
     8a2:	fb ec       	ldi	r31, 0xCB	; 203
     8a4:	6f 2e       	mov	r6, r31
     8a6:	f0 e2       	ldi	r31, 0x20	; 32
     8a8:	7f 2e       	mov	r7, r31
     8aa:	f0 2d       	mov	r31, r0
     8ac:	f3 01       	movw	r30, r6
     8ae:	84 83       	std	Z+4, r24	; 0x04
     8b0:	95 83       	std	Z+5, r25	; 0x05
			
			// DO MATH TO GET LENGTH OF PULSE
			
			RSSI.sampleCount++;
     8b2:	86 81       	ldd	r24, Z+6	; 0x06
     8b4:	97 81       	ldd	r25, Z+7	; 0x07
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	86 83       	std	Z+6, r24	; 0x06
     8ba:	97 83       	std	Z+7, r25	; 0x07
			
			//Actually output the desired values
			//Not the most elegant code in the world, but it works...
			
			//Send the battery voltage
			SendFloatPC(electronicsBatteryVoltage);
     8bc:	cb 01       	movw	r24, r22
     8be:	ba 01       	movw	r22, r20
     8c0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     8c4:	83 e9       	ldi	r24, 0x93	; 147
     8c6:	90 e2       	ldi	r25, 0x20	; 32
     8c8:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
			//Send the rear battery voltage
			SendFloatPC(zero);
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	cb 01       	movw	r24, r22
     8d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     8d6:	83 e9       	ldi	r24, 0x93	; 147
     8d8:	90 e2       	ldi	r25, 0x20	; 32
     8da:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
			//Send the EBox Temperature
			SendFloatPC(EBoxTemp);
     8de:	69 81       	ldd	r22, Y+1	; 0x01
     8e0:	7a 81       	ldd	r23, Y+2	; 0x02
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	9c 81       	ldd	r25, Y+4	; 0x04
     8e6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     8ea:	83 e9       	ldi	r24, 0x93	; 147
     8ec:	90 e2       	ldi	r25, 0x20	; 32
     8ee:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
			//Send 5v_SYS Curr
			SendFloatPC(zero);
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	cb 01       	movw	r24, r22
     8f8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     8fc:	83 e9       	ldi	r24, 0x93	; 147
     8fe:	90 e2       	ldi	r25, 0x20	; 32
     900:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
			//Send 5v_Comp Curr
			SendFloatPC(zero);
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	cb 01       	movw	r24, r22
     90a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z11SendFloatPCd>
			//SendNumPC(steeringPWMPeriod);
			//SendStringPC((char *)"] ");
			
			
			
			SendStringPC((char *)"RSSI Samples: ");
     90e:	85 e9       	ldi	r24, 0x95	; 149
     910:	90 e2       	ldi	r25, 0x20	; 32
     912:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
			SendNumPC(RSSI.sampleCount);
     916:	f3 01       	movw	r30, r6
     918:	86 81       	ldd	r24, Z+6	; 0x06
     91a:	97 81       	ldd	r25, Z+7	; 0x07
     91c:	0e 94 bd 04 	call	0x97a	; 0x97a <_Z9SendNumPCj>
//			SendStringPC((char *)"RTC Counter Value: ");
//			SendNumPC(RTC.CNT);
			SendStringPC((char *)"\tRSSI Count Value: ");
     920:	84 ea       	ldi	r24, 0xA4	; 164
     922:	90 e2       	ldi	r25, 0x20	; 32
     924:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
			SendNumPC(RSSI.countDifference);
     928:	f3 01       	movw	r30, r6
     92a:	84 81       	ldd	r24, Z+4	; 0x04
     92c:	95 81       	ldd	r25, Z+5	; 0x05
     92e:	0e 94 bd 04 	call	0x97a	; 0x97a <_Z9SendNumPCj>
			
			//Newline
			SendStringPC((char *)"\n\r");
     932:	80 e9       	ldi	r24, 0x90	; 144
     934:	90 e2       	ldi	r25, 0x20	; 32
     936:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
	
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
     93a:	f2 01       	movw	r30, r4
     93c:	80 85       	ldd	r24, Z+8	; 0x08
     93e:	83 fd       	sbrc	r24, 3
     940:	06 c0       	rjmp	.+12     	; 0x94e <main+0x25a>
				TCC4.PER = TC_1024_100MS;  //100mS delay
     942:	85 e3       	ldi	r24, 0x35	; 53
     944:	9c e0       	ldi	r25, 0x0C	; 12
     946:	f1 01       	movw	r30, r2
     948:	86 a3       	std	Z+38, r24	; 0x26
     94a:	97 a3       	std	Z+39, r25	; 0x27
     94c:	2a cf       	rjmp	.-428    	; 0x7a2 <main+0xae>
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
     94e:	89 e0       	ldi	r24, 0x09	; 9
     950:	9d e3       	ldi	r25, 0x3D	; 61
     952:	f1 01       	movw	r30, r2
     954:	86 a3       	std	Z+38, r24	; 0x26
     956:	97 a3       	std	Z+39, r25	; 0x27
     958:	24 cf       	rjmp	.-440    	; 0x7a2 <main+0xae>

0000095a <_Z12SendStringPCPc>:
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     95a:	fc 01       	movw	r30, r24
     95c:	20 81       	ld	r18, Z
     95e:	22 23       	and	r18, r18
     960:	59 f0       	breq	.+22     	; 0x978 <_Z12SendStringPCPc+0x1e>
     962:	dc 01       	movw	r26, r24
     964:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
     966:	e0 ec       	ldi	r30, 0xC0	; 192
     968:	f8 e0       	ldi	r31, 0x08	; 8
     96a:	91 81       	ldd	r25, Z+1	; 0x01
     96c:	95 ff       	sbrs	r25, 5
     96e:	fd cf       	rjmp	.-6      	; 0x96a <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
     970:	20 83       	st	Z, r18
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     972:	2d 91       	ld	r18, X+
     974:	21 11       	cpse	r18, r1
     976:	f9 cf       	rjmp	.-14     	; 0x96a <_Z12SendStringPCPc+0x10>
     978:	08 95       	ret

0000097a <_Z9SendNumPCj>:
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
		USART_PutChar(&COMP_USART, stufftosend[i]);
	}
}

void SendNumPC(uint16_t numToSend){
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	64 97       	sbiw	r28, 0x14	; 20
     984:	cd bf       	out	0x3d, r28	; 61
     986:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     988:	4a e0       	ldi	r20, 0x0A	; 10
     98a:	be 01       	movw	r22, r28
     98c:	6f 5f       	subi	r22, 0xFF	; 255
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	0e 94 37 08 	call	0x106e	; 0x106e <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
     994:	ce 01       	movw	r24, r28
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
}
     99c:	64 96       	adiw	r28, 0x14	; 20
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <_Z11SendFloatPCd>:

void SendFloatPC(double numToSend){
     9a8:	8f 92       	push	r8
     9aa:	9f 92       	push	r9
     9ac:	af 92       	push	r10
     9ae:	bf 92       	push	r11
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	c4 56       	subi	r28, 0x64	; 100
     9c6:	d1 09       	sbc	r29, r1
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	4b 01       	movw	r8, r22
     9ce:	5c 01       	movw	r10, r24
	char buffer[100];
	
	int d1 = numToSend;
     9d0:	0e 94 24 06 	call	0xc48	; 0xc48 <__fixsfsi>
     9d4:	6b 01       	movw	r12, r22
     9d6:	7c 01       	movw	r14, r24
	float f2 = numToSend - d1;
     9d8:	07 2e       	mov	r0, r23
     9da:	00 0c       	add	r0, r0
     9dc:	88 0b       	sbc	r24, r24
     9de:	99 0b       	sbc	r25, r25
     9e0:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__floatsisf>
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	c5 01       	movw	r24, r10
     9ea:	b4 01       	movw	r22, r8
     9ec:	0e 94 45 05 	call	0xa8a	; 0xa8a <__subsf3>
	int d2 = trunc(f2 * 10000);
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e4       	ldi	r19, 0x40	; 64
     9f4:	4c e1       	ldi	r20, 0x1C	; 28
     9f6:	56 e4       	ldi	r21, 0x46	; 70
     9f8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
     9fc:	0e 94 55 07 	call	0xeaa	; 0xeaa <trunc>
     a00:	0e 94 24 06 	call	0xc48	; 0xc48 <__fixsfsi>
	
	sprintf(buffer, "%d.%04d", d1, abs(d2));
     a04:	9b 01       	movw	r18, r22
     a06:	77 23       	and	r23, r23
     a08:	24 f4       	brge	.+8      	; 0xa12 <_Z11SendFloatPCd+0x6a>
     a0a:	22 27       	eor	r18, r18
     a0c:	33 27       	eor	r19, r19
     a0e:	26 1b       	sub	r18, r22
     a10:	37 0b       	sbc	r19, r23
     a12:	3f 93       	push	r19
     a14:	2f 93       	push	r18
     a16:	df 92       	push	r13
     a18:	cf 92       	push	r12
     a1a:	88 eb       	ldi	r24, 0xB8	; 184
     a1c:	90 e2       	ldi	r25, 0x20	; 32
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	8e 01       	movw	r16, r28
     a24:	0f 5f       	subi	r16, 0xFF	; 255
     a26:	1f 4f       	sbci	r17, 0xFF	; 255
     a28:	1f 93       	push	r17
     a2a:	0f 93       	push	r16
     a2c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <sprintf>
	
	//sprintf(buffer, "%f", numToSend);
	SendStringPC(buffer);
     a30:	c8 01       	movw	r24, r16
     a32:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12SendStringPCPc>
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	de bf       	out	0x3e, r29	; 62
}
     a3a:	cc 59       	subi	r28, 0x9C	; 156
     a3c:	df 4f       	sbci	r29, 0xFF	; 255
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	9f 90       	pop	r9
     a58:	8f 90       	pop	r8
     a5a:	08 95       	ret

00000a5c <_Z14configureUSARTv>:

void configureUSART(void){
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
     a5c:	e0 e4       	ldi	r30, 0x40	; 64
     a5e:	f6 e0       	ldi	r31, 0x06	; 6
     a60:	80 e8       	ldi	r24, 0x80	; 128
     a62:	81 83       	std	Z+1, r24	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
     a64:	80 e4       	ldi	r24, 0x40	; 64
     a66:	82 83       	std	Z+2, r24	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
     a68:	86 85       	ldd	r24, Z+14	; 0x0e
     a6a:	80 61       	ori	r24, 0x10	; 16
     a6c:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     a6e:	e0 ec       	ldi	r30, 0xC0	; 192
     a70:	f8 e0       	ldi	r31, 0x08	; 8
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	84 83       	std	Z+4, r24	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
     a76:	82 e2       	ldi	r24, 0x22	; 34
     a78:	86 83       	std	Z+6, r24	; 0x06
     a7a:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
     a7c:	83 81       	ldd	r24, Z+3	; 0x03
     a7e:	80 61       	ori	r24, 0x10	; 16
     a80:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
     a82:	83 81       	ldd	r24, Z+3	; 0x03
     a84:	88 60       	ori	r24, 0x08	; 8
     a86:	83 83       	std	Z+3, r24	; 0x03
     a88:	08 95       	ret

00000a8a <__subsf3>:
     a8a:	50 58       	subi	r21, 0x80	; 128

00000a8c <__addsf3>:
     a8c:	bb 27       	eor	r27, r27
     a8e:	aa 27       	eor	r26, r26
     a90:	0e 94 5d 05 	call	0xaba	; 0xaba <__addsf3x>
     a94:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_round>
     a98:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_pscA>
     a9c:	38 f0       	brcs	.+14     	; 0xaac <__addsf3+0x20>
     a9e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__fp_pscB>
     aa2:	20 f0       	brcs	.+8      	; 0xaac <__addsf3+0x20>
     aa4:	39 f4       	brne	.+14     	; 0xab4 <__addsf3+0x28>
     aa6:	9f 3f       	cpi	r25, 0xFF	; 255
     aa8:	19 f4       	brne	.+6      	; 0xab0 <__addsf3+0x24>
     aaa:	26 f4       	brtc	.+8      	; 0xab4 <__addsf3+0x28>
     aac:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_nan>
     ab0:	0e f4       	brtc	.+2      	; 0xab4 <__addsf3+0x28>
     ab2:	e0 95       	com	r30
     ab4:	e7 fb       	bst	r30, 7
     ab6:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_inf>

00000aba <__addsf3x>:
     aba:	e9 2f       	mov	r30, r25
     abc:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fp_split3>
     ac0:	58 f3       	brcs	.-42     	; 0xa98 <__addsf3+0xc>
     ac2:	ba 17       	cp	r27, r26
     ac4:	62 07       	cpc	r22, r18
     ac6:	73 07       	cpc	r23, r19
     ac8:	84 07       	cpc	r24, r20
     aca:	95 07       	cpc	r25, r21
     acc:	20 f0       	brcs	.+8      	; 0xad6 <__addsf3x+0x1c>
     ace:	79 f4       	brne	.+30     	; 0xaee <__addsf3x+0x34>
     ad0:	a6 f5       	brtc	.+104    	; 0xb3a <__addsf3x+0x80>
     ad2:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_zero>
     ad6:	0e f4       	brtc	.+2      	; 0xada <__addsf3x+0x20>
     ad8:	e0 95       	com	r30
     ada:	0b 2e       	mov	r0, r27
     adc:	ba 2f       	mov	r27, r26
     ade:	a0 2d       	mov	r26, r0
     ae0:	0b 01       	movw	r0, r22
     ae2:	b9 01       	movw	r22, r18
     ae4:	90 01       	movw	r18, r0
     ae6:	0c 01       	movw	r0, r24
     ae8:	ca 01       	movw	r24, r20
     aea:	a0 01       	movw	r20, r0
     aec:	11 24       	eor	r1, r1
     aee:	ff 27       	eor	r31, r31
     af0:	59 1b       	sub	r21, r25
     af2:	99 f0       	breq	.+38     	; 0xb1a <__addsf3x+0x60>
     af4:	59 3f       	cpi	r21, 0xF9	; 249
     af6:	50 f4       	brcc	.+20     	; 0xb0c <__addsf3x+0x52>
     af8:	50 3e       	cpi	r21, 0xE0	; 224
     afa:	68 f1       	brcs	.+90     	; 0xb56 <__addsf3x+0x9c>
     afc:	1a 16       	cp	r1, r26
     afe:	f0 40       	sbci	r31, 0x00	; 0
     b00:	a2 2f       	mov	r26, r18
     b02:	23 2f       	mov	r18, r19
     b04:	34 2f       	mov	r19, r20
     b06:	44 27       	eor	r20, r20
     b08:	58 5f       	subi	r21, 0xF8	; 248
     b0a:	f3 cf       	rjmp	.-26     	; 0xaf2 <__addsf3x+0x38>
     b0c:	46 95       	lsr	r20
     b0e:	37 95       	ror	r19
     b10:	27 95       	ror	r18
     b12:	a7 95       	ror	r26
     b14:	f0 40       	sbci	r31, 0x00	; 0
     b16:	53 95       	inc	r21
     b18:	c9 f7       	brne	.-14     	; 0xb0c <__addsf3x+0x52>
     b1a:	7e f4       	brtc	.+30     	; 0xb3a <__addsf3x+0x80>
     b1c:	1f 16       	cp	r1, r31
     b1e:	ba 0b       	sbc	r27, r26
     b20:	62 0b       	sbc	r22, r18
     b22:	73 0b       	sbc	r23, r19
     b24:	84 0b       	sbc	r24, r20
     b26:	ba f0       	brmi	.+46     	; 0xb56 <__addsf3x+0x9c>
     b28:	91 50       	subi	r25, 0x01	; 1
     b2a:	a1 f0       	breq	.+40     	; 0xb54 <__addsf3x+0x9a>
     b2c:	ff 0f       	add	r31, r31
     b2e:	bb 1f       	adc	r27, r27
     b30:	66 1f       	adc	r22, r22
     b32:	77 1f       	adc	r23, r23
     b34:	88 1f       	adc	r24, r24
     b36:	c2 f7       	brpl	.-16     	; 0xb28 <__addsf3x+0x6e>
     b38:	0e c0       	rjmp	.+28     	; 0xb56 <__addsf3x+0x9c>
     b3a:	ba 0f       	add	r27, r26
     b3c:	62 1f       	adc	r22, r18
     b3e:	73 1f       	adc	r23, r19
     b40:	84 1f       	adc	r24, r20
     b42:	48 f4       	brcc	.+18     	; 0xb56 <__addsf3x+0x9c>
     b44:	87 95       	ror	r24
     b46:	77 95       	ror	r23
     b48:	67 95       	ror	r22
     b4a:	b7 95       	ror	r27
     b4c:	f7 95       	ror	r31
     b4e:	9e 3f       	cpi	r25, 0xFE	; 254
     b50:	08 f0       	brcs	.+2      	; 0xb54 <__addsf3x+0x9a>
     b52:	b0 cf       	rjmp	.-160    	; 0xab4 <__addsf3+0x28>
     b54:	93 95       	inc	r25
     b56:	88 0f       	add	r24, r24
     b58:	08 f0       	brcs	.+2      	; 0xb5c <__addsf3x+0xa2>
     b5a:	99 27       	eor	r25, r25
     b5c:	ee 0f       	add	r30, r30
     b5e:	97 95       	ror	r25
     b60:	87 95       	ror	r24
     b62:	08 95       	ret

00000b64 <__divsf3>:
     b64:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__divsf3x>
     b68:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_round>
     b6c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__fp_pscB>
     b70:	58 f0       	brcs	.+22     	; 0xb88 <__divsf3+0x24>
     b72:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_pscA>
     b76:	40 f0       	brcs	.+16     	; 0xb88 <__divsf3+0x24>
     b78:	29 f4       	brne	.+10     	; 0xb84 <__divsf3+0x20>
     b7a:	5f 3f       	cpi	r21, 0xFF	; 255
     b7c:	29 f0       	breq	.+10     	; 0xb88 <__divsf3+0x24>
     b7e:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_inf>
     b82:	51 11       	cpse	r21, r1
     b84:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_szero>
     b88:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_nan>

00000b8c <__divsf3x>:
     b8c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fp_split3>
     b90:	68 f3       	brcs	.-38     	; 0xb6c <__divsf3+0x8>

00000b92 <__divsf3_pse>:
     b92:	99 23       	and	r25, r25
     b94:	b1 f3       	breq	.-20     	; 0xb82 <__divsf3+0x1e>
     b96:	55 23       	and	r21, r21
     b98:	91 f3       	breq	.-28     	; 0xb7e <__divsf3+0x1a>
     b9a:	95 1b       	sub	r25, r21
     b9c:	55 0b       	sbc	r21, r21
     b9e:	bb 27       	eor	r27, r27
     ba0:	aa 27       	eor	r26, r26
     ba2:	62 17       	cp	r22, r18
     ba4:	73 07       	cpc	r23, r19
     ba6:	84 07       	cpc	r24, r20
     ba8:	38 f0       	brcs	.+14     	; 0xbb8 <__divsf3_pse+0x26>
     baa:	9f 5f       	subi	r25, 0xFF	; 255
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
     bae:	22 0f       	add	r18, r18
     bb0:	33 1f       	adc	r19, r19
     bb2:	44 1f       	adc	r20, r20
     bb4:	aa 1f       	adc	r26, r26
     bb6:	a9 f3       	breq	.-22     	; 0xba2 <__divsf3_pse+0x10>
     bb8:	35 d0       	rcall	.+106    	; 0xc24 <__divsf3_pse+0x92>
     bba:	0e 2e       	mov	r0, r30
     bbc:	3a f0       	brmi	.+14     	; 0xbcc <__divsf3_pse+0x3a>
     bbe:	e0 e8       	ldi	r30, 0x80	; 128
     bc0:	32 d0       	rcall	.+100    	; 0xc26 <__divsf3_pse+0x94>
     bc2:	91 50       	subi	r25, 0x01	; 1
     bc4:	50 40       	sbci	r21, 0x00	; 0
     bc6:	e6 95       	lsr	r30
     bc8:	00 1c       	adc	r0, r0
     bca:	ca f7       	brpl	.-14     	; 0xbbe <__divsf3_pse+0x2c>
     bcc:	2b d0       	rcall	.+86     	; 0xc24 <__divsf3_pse+0x92>
     bce:	fe 2f       	mov	r31, r30
     bd0:	29 d0       	rcall	.+82     	; 0xc24 <__divsf3_pse+0x92>
     bd2:	66 0f       	add	r22, r22
     bd4:	77 1f       	adc	r23, r23
     bd6:	88 1f       	adc	r24, r24
     bd8:	bb 1f       	adc	r27, r27
     bda:	26 17       	cp	r18, r22
     bdc:	37 07       	cpc	r19, r23
     bde:	48 07       	cpc	r20, r24
     be0:	ab 07       	cpc	r26, r27
     be2:	b0 e8       	ldi	r27, 0x80	; 128
     be4:	09 f0       	breq	.+2      	; 0xbe8 <__divsf3_pse+0x56>
     be6:	bb 0b       	sbc	r27, r27
     be8:	80 2d       	mov	r24, r0
     bea:	bf 01       	movw	r22, r30
     bec:	ff 27       	eor	r31, r31
     bee:	93 58       	subi	r25, 0x83	; 131
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	3a f0       	brmi	.+14     	; 0xc02 <__divsf3_pse+0x70>
     bf4:	9e 3f       	cpi	r25, 0xFE	; 254
     bf6:	51 05       	cpc	r21, r1
     bf8:	78 f0       	brcs	.+30     	; 0xc18 <__divsf3_pse+0x86>
     bfa:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_inf>
     bfe:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_szero>
     c02:	5f 3f       	cpi	r21, 0xFF	; 255
     c04:	e4 f3       	brlt	.-8      	; 0xbfe <__divsf3_pse+0x6c>
     c06:	98 3e       	cpi	r25, 0xE8	; 232
     c08:	d4 f3       	brlt	.-12     	; 0xbfe <__divsf3_pse+0x6c>
     c0a:	86 95       	lsr	r24
     c0c:	77 95       	ror	r23
     c0e:	67 95       	ror	r22
     c10:	b7 95       	ror	r27
     c12:	f7 95       	ror	r31
     c14:	9f 5f       	subi	r25, 0xFF	; 255
     c16:	c9 f7       	brne	.-14     	; 0xc0a <__divsf3_pse+0x78>
     c18:	88 0f       	add	r24, r24
     c1a:	91 1d       	adc	r25, r1
     c1c:	96 95       	lsr	r25
     c1e:	87 95       	ror	r24
     c20:	97 f9       	bld	r25, 7
     c22:	08 95       	ret
     c24:	e1 e0       	ldi	r30, 0x01	; 1
     c26:	66 0f       	add	r22, r22
     c28:	77 1f       	adc	r23, r23
     c2a:	88 1f       	adc	r24, r24
     c2c:	bb 1f       	adc	r27, r27
     c2e:	62 17       	cp	r22, r18
     c30:	73 07       	cpc	r23, r19
     c32:	84 07       	cpc	r24, r20
     c34:	ba 07       	cpc	r27, r26
     c36:	20 f0       	brcs	.+8      	; 0xc40 <__divsf3_pse+0xae>
     c38:	62 1b       	sub	r22, r18
     c3a:	73 0b       	sbc	r23, r19
     c3c:	84 0b       	sbc	r24, r20
     c3e:	ba 0b       	sbc	r27, r26
     c40:	ee 1f       	adc	r30, r30
     c42:	88 f7       	brcc	.-30     	; 0xc26 <__divsf3_pse+0x94>
     c44:	e0 95       	com	r30
     c46:	08 95       	ret

00000c48 <__fixsfsi>:
     c48:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fixunssfsi>
     c4c:	68 94       	set
     c4e:	b1 11       	cpse	r27, r1
     c50:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_szero>
     c54:	08 95       	ret

00000c56 <__fixunssfsi>:
     c56:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__fp_splitA>
     c5a:	88 f0       	brcs	.+34     	; 0xc7e <__fixunssfsi+0x28>
     c5c:	9f 57       	subi	r25, 0x7F	; 127
     c5e:	98 f0       	brcs	.+38     	; 0xc86 <__fixunssfsi+0x30>
     c60:	b9 2f       	mov	r27, r25
     c62:	99 27       	eor	r25, r25
     c64:	b7 51       	subi	r27, 0x17	; 23
     c66:	b0 f0       	brcs	.+44     	; 0xc94 <__fixunssfsi+0x3e>
     c68:	e1 f0       	breq	.+56     	; 0xca2 <__fixunssfsi+0x4c>
     c6a:	66 0f       	add	r22, r22
     c6c:	77 1f       	adc	r23, r23
     c6e:	88 1f       	adc	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	1a f0       	brmi	.+6      	; 0xc7a <__fixunssfsi+0x24>
     c74:	ba 95       	dec	r27
     c76:	c9 f7       	brne	.-14     	; 0xc6a <__fixunssfsi+0x14>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <__fixunssfsi+0x4c>
     c7a:	b1 30       	cpi	r27, 0x01	; 1
     c7c:	91 f0       	breq	.+36     	; 0xca2 <__fixunssfsi+0x4c>
     c7e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fp_zero>
     c82:	b1 e0       	ldi	r27, 0x01	; 1
     c84:	08 95       	ret
     c86:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_zero>
     c8a:	67 2f       	mov	r22, r23
     c8c:	78 2f       	mov	r23, r24
     c8e:	88 27       	eor	r24, r24
     c90:	b8 5f       	subi	r27, 0xF8	; 248
     c92:	39 f0       	breq	.+14     	; 0xca2 <__fixunssfsi+0x4c>
     c94:	b9 3f       	cpi	r27, 0xF9	; 249
     c96:	cc f3       	brlt	.-14     	; 0xc8a <__fixunssfsi+0x34>
     c98:	86 95       	lsr	r24
     c9a:	77 95       	ror	r23
     c9c:	67 95       	ror	r22
     c9e:	b3 95       	inc	r27
     ca0:	d9 f7       	brne	.-10     	; 0xc98 <__fixunssfsi+0x42>
     ca2:	3e f4       	brtc	.+14     	; 0xcb2 <__fixunssfsi+0x5c>
     ca4:	90 95       	com	r25
     ca6:	80 95       	com	r24
     ca8:	70 95       	com	r23
     caa:	61 95       	neg	r22
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	8f 4f       	sbci	r24, 0xFF	; 255
     cb0:	9f 4f       	sbci	r25, 0xFF	; 255
     cb2:	08 95       	ret

00000cb4 <__floatunsisf>:
     cb4:	e8 94       	clt
     cb6:	09 c0       	rjmp	.+18     	; 0xcca <__floatsisf+0x12>

00000cb8 <__floatsisf>:
     cb8:	97 fb       	bst	r25, 7
     cba:	3e f4       	brtc	.+14     	; 0xcca <__floatsisf+0x12>
     cbc:	90 95       	com	r25
     cbe:	80 95       	com	r24
     cc0:	70 95       	com	r23
     cc2:	61 95       	neg	r22
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	99 23       	and	r25, r25
     ccc:	a9 f0       	breq	.+42     	; 0xcf8 <__floatsisf+0x40>
     cce:	f9 2f       	mov	r31, r25
     cd0:	96 e9       	ldi	r25, 0x96	; 150
     cd2:	bb 27       	eor	r27, r27
     cd4:	93 95       	inc	r25
     cd6:	f6 95       	lsr	r31
     cd8:	87 95       	ror	r24
     cda:	77 95       	ror	r23
     cdc:	67 95       	ror	r22
     cde:	b7 95       	ror	r27
     ce0:	f1 11       	cpse	r31, r1
     ce2:	f8 cf       	rjmp	.-16     	; 0xcd4 <__floatsisf+0x1c>
     ce4:	fa f4       	brpl	.+62     	; 0xd24 <__floatsisf+0x6c>
     ce6:	bb 0f       	add	r27, r27
     ce8:	11 f4       	brne	.+4      	; 0xcee <__floatsisf+0x36>
     cea:	60 ff       	sbrs	r22, 0
     cec:	1b c0       	rjmp	.+54     	; 0xd24 <__floatsisf+0x6c>
     cee:	6f 5f       	subi	r22, 0xFF	; 255
     cf0:	7f 4f       	sbci	r23, 0xFF	; 255
     cf2:	8f 4f       	sbci	r24, 0xFF	; 255
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	16 c0       	rjmp	.+44     	; 0xd24 <__floatsisf+0x6c>
     cf8:	88 23       	and	r24, r24
     cfa:	11 f0       	breq	.+4      	; 0xd00 <__floatsisf+0x48>
     cfc:	96 e9       	ldi	r25, 0x96	; 150
     cfe:	11 c0       	rjmp	.+34     	; 0xd22 <__floatsisf+0x6a>
     d00:	77 23       	and	r23, r23
     d02:	21 f0       	breq	.+8      	; 0xd0c <__floatsisf+0x54>
     d04:	9e e8       	ldi	r25, 0x8E	; 142
     d06:	87 2f       	mov	r24, r23
     d08:	76 2f       	mov	r23, r22
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <__floatsisf+0x5e>
     d0c:	66 23       	and	r22, r22
     d0e:	71 f0       	breq	.+28     	; 0xd2c <__floatsisf+0x74>
     d10:	96 e8       	ldi	r25, 0x86	; 134
     d12:	86 2f       	mov	r24, r22
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	2a f0       	brmi	.+10     	; 0xd24 <__floatsisf+0x6c>
     d1a:	9a 95       	dec	r25
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	88 1f       	adc	r24, r24
     d22:	da f7       	brpl	.-10     	; 0xd1a <__floatsisf+0x62>
     d24:	88 0f       	add	r24, r24
     d26:	96 95       	lsr	r25
     d28:	87 95       	ror	r24
     d2a:	97 f9       	bld	r25, 7
     d2c:	08 95       	ret

00000d2e <__fp_inf>:
     d2e:	97 f9       	bld	r25, 7
     d30:	9f 67       	ori	r25, 0x7F	; 127
     d32:	80 e8       	ldi	r24, 0x80	; 128
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	08 95       	ret

00000d3a <__fp_nan>:
     d3a:	9f ef       	ldi	r25, 0xFF	; 255
     d3c:	80 ec       	ldi	r24, 0xC0	; 192
     d3e:	08 95       	ret

00000d40 <__fp_pscA>:
     d40:	00 24       	eor	r0, r0
     d42:	0a 94       	dec	r0
     d44:	16 16       	cp	r1, r22
     d46:	17 06       	cpc	r1, r23
     d48:	18 06       	cpc	r1, r24
     d4a:	09 06       	cpc	r0, r25
     d4c:	08 95       	ret

00000d4e <__fp_pscB>:
     d4e:	00 24       	eor	r0, r0
     d50:	0a 94       	dec	r0
     d52:	12 16       	cp	r1, r18
     d54:	13 06       	cpc	r1, r19
     d56:	14 06       	cpc	r1, r20
     d58:	05 06       	cpc	r0, r21
     d5a:	08 95       	ret

00000d5c <__fp_round>:
     d5c:	09 2e       	mov	r0, r25
     d5e:	03 94       	inc	r0
     d60:	00 0c       	add	r0, r0
     d62:	11 f4       	brne	.+4      	; 0xd68 <__fp_round+0xc>
     d64:	88 23       	and	r24, r24
     d66:	52 f0       	brmi	.+20     	; 0xd7c <__fp_round+0x20>
     d68:	bb 0f       	add	r27, r27
     d6a:	40 f4       	brcc	.+16     	; 0xd7c <__fp_round+0x20>
     d6c:	bf 2b       	or	r27, r31
     d6e:	11 f4       	brne	.+4      	; 0xd74 <__fp_round+0x18>
     d70:	60 ff       	sbrs	r22, 0
     d72:	04 c0       	rjmp	.+8      	; 0xd7c <__fp_round+0x20>
     d74:	6f 5f       	subi	r22, 0xFF	; 255
     d76:	7f 4f       	sbci	r23, 0xFF	; 255
     d78:	8f 4f       	sbci	r24, 0xFF	; 255
     d7a:	9f 4f       	sbci	r25, 0xFF	; 255
     d7c:	08 95       	ret

00000d7e <__fp_split3>:
     d7e:	57 fd       	sbrc	r21, 7
     d80:	90 58       	subi	r25, 0x80	; 128
     d82:	44 0f       	add	r20, r20
     d84:	55 1f       	adc	r21, r21
     d86:	59 f0       	breq	.+22     	; 0xd9e <__fp_splitA+0x10>
     d88:	5f 3f       	cpi	r21, 0xFF	; 255
     d8a:	71 f0       	breq	.+28     	; 0xda8 <__fp_splitA+0x1a>
     d8c:	47 95       	ror	r20

00000d8e <__fp_splitA>:
     d8e:	88 0f       	add	r24, r24
     d90:	97 fb       	bst	r25, 7
     d92:	99 1f       	adc	r25, r25
     d94:	61 f0       	breq	.+24     	; 0xdae <__fp_splitA+0x20>
     d96:	9f 3f       	cpi	r25, 0xFF	; 255
     d98:	79 f0       	breq	.+30     	; 0xdb8 <__fp_splitA+0x2a>
     d9a:	87 95       	ror	r24
     d9c:	08 95       	ret
     d9e:	12 16       	cp	r1, r18
     da0:	13 06       	cpc	r1, r19
     da2:	14 06       	cpc	r1, r20
     da4:	55 1f       	adc	r21, r21
     da6:	f2 cf       	rjmp	.-28     	; 0xd8c <__fp_split3+0xe>
     da8:	46 95       	lsr	r20
     daa:	f1 df       	rcall	.-30     	; 0xd8e <__fp_splitA>
     dac:	08 c0       	rjmp	.+16     	; 0xdbe <__fp_splitA+0x30>
     dae:	16 16       	cp	r1, r22
     db0:	17 06       	cpc	r1, r23
     db2:	18 06       	cpc	r1, r24
     db4:	99 1f       	adc	r25, r25
     db6:	f1 cf       	rjmp	.-30     	; 0xd9a <__fp_splitA+0xc>
     db8:	86 95       	lsr	r24
     dba:	71 05       	cpc	r23, r1
     dbc:	61 05       	cpc	r22, r1
     dbe:	08 94       	sec
     dc0:	08 95       	ret

00000dc2 <__fp_zero>:
     dc2:	e8 94       	clt

00000dc4 <__fp_szero>:
     dc4:	bb 27       	eor	r27, r27
     dc6:	66 27       	eor	r22, r22
     dc8:	77 27       	eor	r23, r23
     dca:	cb 01       	movw	r24, r22
     dcc:	97 f9       	bld	r25, 7
     dce:	08 95       	ret

00000dd0 <__mulsf3>:
     dd0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3x>
     dd4:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_round>
     dd8:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_pscA>
     ddc:	38 f0       	brcs	.+14     	; 0xdec <__mulsf3+0x1c>
     dde:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__fp_pscB>
     de2:	20 f0       	brcs	.+8      	; 0xdec <__mulsf3+0x1c>
     de4:	95 23       	and	r25, r21
     de6:	11 f0       	breq	.+4      	; 0xdec <__mulsf3+0x1c>
     de8:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_inf>
     dec:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_nan>
     df0:	11 24       	eor	r1, r1
     df2:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_szero>

00000df6 <__mulsf3x>:
     df6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fp_split3>
     dfa:	70 f3       	brcs	.-36     	; 0xdd8 <__mulsf3+0x8>

00000dfc <__mulsf3_pse>:
     dfc:	95 9f       	mul	r25, r21
     dfe:	c1 f3       	breq	.-16     	; 0xdf0 <__mulsf3+0x20>
     e00:	95 0f       	add	r25, r21
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	55 1f       	adc	r21, r21
     e06:	62 9f       	mul	r22, r18
     e08:	f0 01       	movw	r30, r0
     e0a:	72 9f       	mul	r23, r18
     e0c:	bb 27       	eor	r27, r27
     e0e:	f0 0d       	add	r31, r0
     e10:	b1 1d       	adc	r27, r1
     e12:	63 9f       	mul	r22, r19
     e14:	aa 27       	eor	r26, r26
     e16:	f0 0d       	add	r31, r0
     e18:	b1 1d       	adc	r27, r1
     e1a:	aa 1f       	adc	r26, r26
     e1c:	64 9f       	mul	r22, r20
     e1e:	66 27       	eor	r22, r22
     e20:	b0 0d       	add	r27, r0
     e22:	a1 1d       	adc	r26, r1
     e24:	66 1f       	adc	r22, r22
     e26:	82 9f       	mul	r24, r18
     e28:	22 27       	eor	r18, r18
     e2a:	b0 0d       	add	r27, r0
     e2c:	a1 1d       	adc	r26, r1
     e2e:	62 1f       	adc	r22, r18
     e30:	73 9f       	mul	r23, r19
     e32:	b0 0d       	add	r27, r0
     e34:	a1 1d       	adc	r26, r1
     e36:	62 1f       	adc	r22, r18
     e38:	83 9f       	mul	r24, r19
     e3a:	a0 0d       	add	r26, r0
     e3c:	61 1d       	adc	r22, r1
     e3e:	22 1f       	adc	r18, r18
     e40:	74 9f       	mul	r23, r20
     e42:	33 27       	eor	r19, r19
     e44:	a0 0d       	add	r26, r0
     e46:	61 1d       	adc	r22, r1
     e48:	23 1f       	adc	r18, r19
     e4a:	84 9f       	mul	r24, r20
     e4c:	60 0d       	add	r22, r0
     e4e:	21 1d       	adc	r18, r1
     e50:	82 2f       	mov	r24, r18
     e52:	76 2f       	mov	r23, r22
     e54:	6a 2f       	mov	r22, r26
     e56:	11 24       	eor	r1, r1
     e58:	9f 57       	subi	r25, 0x7F	; 127
     e5a:	50 40       	sbci	r21, 0x00	; 0
     e5c:	9a f0       	brmi	.+38     	; 0xe84 <__mulsf3_pse+0x88>
     e5e:	f1 f0       	breq	.+60     	; 0xe9c <__mulsf3_pse+0xa0>
     e60:	88 23       	and	r24, r24
     e62:	4a f0       	brmi	.+18     	; 0xe76 <__mulsf3_pse+0x7a>
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	bb 1f       	adc	r27, r27
     e6a:	66 1f       	adc	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 1f       	adc	r24, r24
     e70:	91 50       	subi	r25, 0x01	; 1
     e72:	50 40       	sbci	r21, 0x00	; 0
     e74:	a9 f7       	brne	.-22     	; 0xe60 <__mulsf3_pse+0x64>
     e76:	9e 3f       	cpi	r25, 0xFE	; 254
     e78:	51 05       	cpc	r21, r1
     e7a:	80 f0       	brcs	.+32     	; 0xe9c <__mulsf3_pse+0xa0>
     e7c:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_inf>
     e80:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_szero>
     e84:	5f 3f       	cpi	r21, 0xFF	; 255
     e86:	e4 f3       	brlt	.-8      	; 0xe80 <__mulsf3_pse+0x84>
     e88:	98 3e       	cpi	r25, 0xE8	; 232
     e8a:	d4 f3       	brlt	.-12     	; 0xe80 <__mulsf3_pse+0x84>
     e8c:	86 95       	lsr	r24
     e8e:	77 95       	ror	r23
     e90:	67 95       	ror	r22
     e92:	b7 95       	ror	r27
     e94:	f7 95       	ror	r31
     e96:	e7 95       	ror	r30
     e98:	9f 5f       	subi	r25, 0xFF	; 255
     e9a:	c1 f7       	brne	.-16     	; 0xe8c <__mulsf3_pse+0x90>
     e9c:	fe 2b       	or	r31, r30
     e9e:	88 0f       	add	r24, r24
     ea0:	91 1d       	adc	r25, r1
     ea2:	96 95       	lsr	r25
     ea4:	87 95       	ror	r24
     ea6:	97 f9       	bld	r25, 7
     ea8:	08 95       	ret

00000eaa <trunc>:
     eaa:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_trunc>
     eae:	30 f0       	brcs	.+12     	; 0xebc <trunc+0x12>
     eb0:	9f 37       	cpi	r25, 0x7F	; 127
     eb2:	10 f4       	brcc	.+4      	; 0xeb8 <trunc+0xe>
     eb4:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_szero>
     eb8:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_mintl>
     ebc:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__fp_mpack>

00000ec0 <__fp_mintl>:
     ec0:	88 23       	and	r24, r24
     ec2:	71 f4       	brne	.+28     	; 0xee0 <__fp_mintl+0x20>
     ec4:	77 23       	and	r23, r23
     ec6:	21 f0       	breq	.+8      	; 0xed0 <__fp_mintl+0x10>
     ec8:	98 50       	subi	r25, 0x08	; 8
     eca:	87 2b       	or	r24, r23
     ecc:	76 2f       	mov	r23, r22
     ece:	07 c0       	rjmp	.+14     	; 0xede <__fp_mintl+0x1e>
     ed0:	66 23       	and	r22, r22
     ed2:	11 f4       	brne	.+4      	; 0xed8 <__fp_mintl+0x18>
     ed4:	99 27       	eor	r25, r25
     ed6:	0d c0       	rjmp	.+26     	; 0xef2 <__fp_mintl+0x32>
     ed8:	90 51       	subi	r25, 0x10	; 16
     eda:	86 2b       	or	r24, r22
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	2a f0       	brmi	.+10     	; 0xeec <__fp_mintl+0x2c>
     ee2:	9a 95       	dec	r25
     ee4:	66 0f       	add	r22, r22
     ee6:	77 1f       	adc	r23, r23
     ee8:	88 1f       	adc	r24, r24
     eea:	da f7       	brpl	.-10     	; 0xee2 <__fp_mintl+0x22>
     eec:	88 0f       	add	r24, r24
     eee:	96 95       	lsr	r25
     ef0:	87 95       	ror	r24
     ef2:	97 f9       	bld	r25, 7
     ef4:	08 95       	ret

00000ef6 <__fp_mpack>:
     ef6:	9f 3f       	cpi	r25, 0xFF	; 255
     ef8:	31 f0       	breq	.+12     	; 0xf06 <__fp_mpack_finite+0xc>

00000efa <__fp_mpack_finite>:
     efa:	91 50       	subi	r25, 0x01	; 1
     efc:	20 f4       	brcc	.+8      	; 0xf06 <__fp_mpack_finite+0xc>
     efe:	87 95       	ror	r24
     f00:	77 95       	ror	r23
     f02:	67 95       	ror	r22
     f04:	b7 95       	ror	r27
     f06:	88 0f       	add	r24, r24
     f08:	91 1d       	adc	r25, r1
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	97 f9       	bld	r25, 7
     f10:	08 95       	ret

00000f12 <__fp_trunc>:
     f12:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__fp_splitA>
     f16:	a0 f0       	brcs	.+40     	; 0xf40 <__fp_trunc+0x2e>
     f18:	be e7       	ldi	r27, 0x7E	; 126
     f1a:	b9 17       	cp	r27, r25
     f1c:	88 f4       	brcc	.+34     	; 0xf40 <__fp_trunc+0x2e>
     f1e:	bb 27       	eor	r27, r27
     f20:	9f 38       	cpi	r25, 0x8F	; 143
     f22:	60 f4       	brcc	.+24     	; 0xf3c <__fp_trunc+0x2a>
     f24:	16 16       	cp	r1, r22
     f26:	b1 1d       	adc	r27, r1
     f28:	67 2f       	mov	r22, r23
     f2a:	78 2f       	mov	r23, r24
     f2c:	88 27       	eor	r24, r24
     f2e:	98 5f       	subi	r25, 0xF8	; 248
     f30:	f7 cf       	rjmp	.-18     	; 0xf20 <__fp_trunc+0xe>
     f32:	86 95       	lsr	r24
     f34:	77 95       	ror	r23
     f36:	67 95       	ror	r22
     f38:	b1 1d       	adc	r27, r1
     f3a:	93 95       	inc	r25
     f3c:	96 39       	cpi	r25, 0x96	; 150
     f3e:	c8 f3       	brcs	.-14     	; 0xf32 <__fp_trunc+0x20>
     f40:	08 95       	ret

00000f42 <__udivmodsi4>:
     f42:	a1 e2       	ldi	r26, 0x21	; 33
     f44:	1a 2e       	mov	r1, r26
     f46:	aa 1b       	sub	r26, r26
     f48:	bb 1b       	sub	r27, r27
     f4a:	fd 01       	movw	r30, r26
     f4c:	0d c0       	rjmp	.+26     	; 0xf68 <__udivmodsi4_ep>

00000f4e <__udivmodsi4_loop>:
     f4e:	aa 1f       	adc	r26, r26
     f50:	bb 1f       	adc	r27, r27
     f52:	ee 1f       	adc	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	a2 17       	cp	r26, r18
     f58:	b3 07       	cpc	r27, r19
     f5a:	e4 07       	cpc	r30, r20
     f5c:	f5 07       	cpc	r31, r21
     f5e:	20 f0       	brcs	.+8      	; 0xf68 <__udivmodsi4_ep>
     f60:	a2 1b       	sub	r26, r18
     f62:	b3 0b       	sbc	r27, r19
     f64:	e4 0b       	sbc	r30, r20
     f66:	f5 0b       	sbc	r31, r21

00000f68 <__udivmodsi4_ep>:
     f68:	66 1f       	adc	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	1a 94       	dec	r1
     f72:	69 f7       	brne	.-38     	; 0xf4e <__udivmodsi4_loop>
     f74:	60 95       	com	r22
     f76:	70 95       	com	r23
     f78:	80 95       	com	r24
     f7a:	90 95       	com	r25
     f7c:	9b 01       	movw	r18, r22
     f7e:	ac 01       	movw	r20, r24
     f80:	bd 01       	movw	r22, r26
     f82:	cf 01       	movw	r24, r30
     f84:	08 95       	ret

00000f86 <__umoddi3>:
     f86:	68 94       	set
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <__udivdi3_umoddi3>

00000f8a <__udivdi3>:
     f8a:	e8 94       	clt

00000f8c <__udivdi3_umoddi3>:
     f8c:	8f 92       	push	r8
     f8e:	9f 92       	push	r9
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__udivmod64>
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	9f 90       	pop	r9
     f9e:	8f 90       	pop	r8
     fa0:	08 95       	ret

00000fa2 <__udivmod64>:
     fa2:	88 24       	eor	r8, r8
     fa4:	99 24       	eor	r9, r9
     fa6:	f4 01       	movw	r30, r8
     fa8:	e4 01       	movw	r28, r8
     faa:	b0 e4       	ldi	r27, 0x40	; 64
     fac:	9f 93       	push	r25
     fae:	aa 27       	eor	r26, r26
     fb0:	9a 15       	cp	r25, r10
     fb2:	8b 04       	cpc	r8, r11
     fb4:	9c 04       	cpc	r9, r12
     fb6:	ed 05       	cpc	r30, r13
     fb8:	fe 05       	cpc	r31, r14
     fba:	cf 05       	cpc	r28, r15
     fbc:	d0 07       	cpc	r29, r16
     fbe:	a1 07       	cpc	r26, r17
     fc0:	98 f4       	brcc	.+38     	; 0xfe8 <__udivmod64+0x46>
     fc2:	ad 2f       	mov	r26, r29
     fc4:	dc 2f       	mov	r29, r28
     fc6:	cf 2f       	mov	r28, r31
     fc8:	fe 2f       	mov	r31, r30
     fca:	e9 2d       	mov	r30, r9
     fcc:	98 2c       	mov	r9, r8
     fce:	89 2e       	mov	r8, r25
     fd0:	98 2f       	mov	r25, r24
     fd2:	87 2f       	mov	r24, r23
     fd4:	76 2f       	mov	r23, r22
     fd6:	65 2f       	mov	r22, r21
     fd8:	54 2f       	mov	r21, r20
     fda:	43 2f       	mov	r20, r19
     fdc:	32 2f       	mov	r19, r18
     fde:	22 27       	eor	r18, r18
     fe0:	b8 50       	subi	r27, 0x08	; 8
     fe2:	31 f7       	brne	.-52     	; 0xfb0 <__udivmod64+0xe>
     fe4:	bf 91       	pop	r27
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__udivmod64+0x94>
     fe8:	1b 2e       	mov	r1, r27
     fea:	bf 91       	pop	r27
     fec:	bb 27       	eor	r27, r27
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	44 1f       	adc	r20, r20
     ff4:	55 1f       	adc	r21, r21
     ff6:	66 1f       	adc	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	88 1f       	adc	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	88 1c       	adc	r8, r8
    1000:	99 1c       	adc	r9, r9
    1002:	ee 1f       	adc	r30, r30
    1004:	ff 1f       	adc	r31, r31
    1006:	cc 1f       	adc	r28, r28
    1008:	dd 1f       	adc	r29, r29
    100a:	aa 1f       	adc	r26, r26
    100c:	bb 1f       	adc	r27, r27
    100e:	8a 14       	cp	r8, r10
    1010:	9b 04       	cpc	r9, r11
    1012:	ec 05       	cpc	r30, r12
    1014:	fd 05       	cpc	r31, r13
    1016:	ce 05       	cpc	r28, r14
    1018:	df 05       	cpc	r29, r15
    101a:	a0 07       	cpc	r26, r16
    101c:	b1 07       	cpc	r27, r17
    101e:	48 f0       	brcs	.+18     	; 0x1032 <__udivmod64+0x90>
    1020:	8a 18       	sub	r8, r10
    1022:	9b 08       	sbc	r9, r11
    1024:	ec 09       	sbc	r30, r12
    1026:	fd 09       	sbc	r31, r13
    1028:	ce 09       	sbc	r28, r14
    102a:	df 09       	sbc	r29, r15
    102c:	a0 0b       	sbc	r26, r16
    102e:	b1 0b       	sbc	r27, r17
    1030:	21 60       	ori	r18, 0x01	; 1
    1032:	1a 94       	dec	r1
    1034:	e1 f6       	brne	.-72     	; 0xfee <__udivmod64+0x4c>
    1036:	2e f4       	brtc	.+10     	; 0x1042 <__udivmod64+0xa0>
    1038:	94 01       	movw	r18, r8
    103a:	af 01       	movw	r20, r30
    103c:	be 01       	movw	r22, r28
    103e:	cd 01       	movw	r24, r26
    1040:	00 0c       	add	r0, r0
    1042:	08 95       	ret

00001044 <__adddi3>:
    1044:	2a 0d       	add	r18, r10
    1046:	3b 1d       	adc	r19, r11
    1048:	4c 1d       	adc	r20, r12
    104a:	5d 1d       	adc	r21, r13
    104c:	6e 1d       	adc	r22, r14
    104e:	7f 1d       	adc	r23, r15
    1050:	80 1f       	adc	r24, r16
    1052:	91 1f       	adc	r25, r17
    1054:	08 95       	ret

00001056 <__adddi3_s8>:
    1056:	00 24       	eor	r0, r0
    1058:	a7 fd       	sbrc	r26, 7
    105a:	00 94       	com	r0
    105c:	2a 0f       	add	r18, r26
    105e:	30 1d       	adc	r19, r0
    1060:	40 1d       	adc	r20, r0
    1062:	50 1d       	adc	r21, r0
    1064:	60 1d       	adc	r22, r0
    1066:	70 1d       	adc	r23, r0
    1068:	80 1d       	adc	r24, r0
    106a:	90 1d       	adc	r25, r0
    106c:	08 95       	ret

0000106e <__itoa_ncheck>:
    106e:	bb 27       	eor	r27, r27
    1070:	4a 30       	cpi	r20, 0x0A	; 10
    1072:	31 f4       	brne	.+12     	; 0x1080 <__itoa_ncheck+0x12>
    1074:	99 23       	and	r25, r25
    1076:	22 f4       	brpl	.+8      	; 0x1080 <__itoa_ncheck+0x12>
    1078:	bd e2       	ldi	r27, 0x2D	; 45
    107a:	90 95       	com	r25
    107c:	81 95       	neg	r24
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__utoa_common>

00001084 <__utoa_ncheck>:
    1084:	bb 27       	eor	r27, r27

00001086 <__utoa_common>:
    1086:	fb 01       	movw	r30, r22
    1088:	55 27       	eor	r21, r21
    108a:	aa 27       	eor	r26, r26
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	aa 1f       	adc	r26, r26
    1092:	a4 17       	cp	r26, r20
    1094:	10 f0       	brcs	.+4      	; 0x109a <__utoa_common+0x14>
    1096:	a4 1b       	sub	r26, r20
    1098:	83 95       	inc	r24
    109a:	50 51       	subi	r21, 0x10	; 16
    109c:	b9 f7       	brne	.-18     	; 0x108c <__utoa_common+0x6>
    109e:	a0 5d       	subi	r26, 0xD0	; 208
    10a0:	aa 33       	cpi	r26, 0x3A	; 58
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <__utoa_common+0x20>
    10a4:	a9 5d       	subi	r26, 0xD9	; 217
    10a6:	a1 93       	st	Z+, r26
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	79 f7       	brne	.-34     	; 0x108a <__utoa_common+0x4>
    10ac:	b1 11       	cpse	r27, r1
    10ae:	b1 93       	st	Z+, r27
    10b0:	11 92       	st	Z+, r1
    10b2:	cb 01       	movw	r24, r22
    10b4:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <strrev>

000010b8 <sprintf>:
    10b8:	ae e0       	ldi	r26, 0x0E	; 14
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e2 e6       	ldi	r30, 0x62	; 98
    10be:	f8 e0       	ldi	r31, 0x08	; 8
    10c0:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__prologue_saves__+0x1c>
    10c4:	0d 89       	ldd	r16, Y+21	; 0x15
    10c6:	1e 89       	ldd	r17, Y+22	; 0x16
    10c8:	86 e0       	ldi	r24, 0x06	; 6
    10ca:	8c 83       	std	Y+4, r24	; 0x04
    10cc:	09 83       	std	Y+1, r16	; 0x01
    10ce:	1a 83       	std	Y+2, r17	; 0x02
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	9f e7       	ldi	r25, 0x7F	; 127
    10d4:	8d 83       	std	Y+5, r24	; 0x05
    10d6:	9e 83       	std	Y+6, r25	; 0x06
    10d8:	ae 01       	movw	r20, r28
    10da:	47 5e       	subi	r20, 0xE7	; 231
    10dc:	5f 4f       	sbci	r21, 0xFF	; 255
    10de:	6f 89       	ldd	r22, Y+23	; 0x17
    10e0:	78 8d       	ldd	r23, Y+24	; 0x18
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <vfprintf>
    10ea:	2f 81       	ldd	r18, Y+7	; 0x07
    10ec:	38 85       	ldd	r19, Y+8	; 0x08
    10ee:	f8 01       	movw	r30, r16
    10f0:	e2 0f       	add	r30, r18
    10f2:	f3 1f       	adc	r31, r19
    10f4:	10 82       	st	Z, r1
    10f6:	2e 96       	adiw	r28, 0x0e	; 14
    10f8:	e4 e0       	ldi	r30, 0x04	; 4
    10fa:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__epilogue_restores__+0x1c>

000010fe <vfprintf>:
    10fe:	ac e0       	ldi	r26, 0x0C	; 12
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e5 e8       	ldi	r30, 0x85	; 133
    1104:	f8 e0       	ldi	r31, 0x08	; 8
    1106:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__prologue_saves__>
    110a:	7c 01       	movw	r14, r24
    110c:	6b 01       	movw	r12, r22
    110e:	8a 01       	movw	r16, r20
    1110:	fc 01       	movw	r30, r24
    1112:	16 82       	std	Z+6, r1	; 0x06
    1114:	17 82       	std	Z+7, r1	; 0x07
    1116:	83 81       	ldd	r24, Z+3	; 0x03
    1118:	81 ff       	sbrs	r24, 1
    111a:	bd c1       	rjmp	.+890    	; 0x1496 <vfprintf+0x398>
    111c:	ce 01       	movw	r24, r28
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	4c 01       	movw	r8, r24
    1122:	f7 01       	movw	r30, r14
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	f6 01       	movw	r30, r12
    1128:	93 fd       	sbrc	r25, 3
    112a:	85 91       	lpm	r24, Z+
    112c:	93 ff       	sbrs	r25, 3
    112e:	81 91       	ld	r24, Z+
    1130:	6f 01       	movw	r12, r30
    1132:	88 23       	and	r24, r24
    1134:	09 f4       	brne	.+2      	; 0x1138 <vfprintf+0x3a>
    1136:	ab c1       	rjmp	.+854    	; 0x148e <vfprintf+0x390>
    1138:	85 32       	cpi	r24, 0x25	; 37
    113a:	39 f4       	brne	.+14     	; 0x114a <vfprintf+0x4c>
    113c:	93 fd       	sbrc	r25, 3
    113e:	85 91       	lpm	r24, Z+
    1140:	93 ff       	sbrs	r25, 3
    1142:	81 91       	ld	r24, Z+
    1144:	6f 01       	movw	r12, r30
    1146:	85 32       	cpi	r24, 0x25	; 37
    1148:	29 f4       	brne	.+10     	; 0x1154 <vfprintf+0x56>
    114a:	b7 01       	movw	r22, r14
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1152:	e7 cf       	rjmp	.-50     	; 0x1122 <vfprintf+0x24>
    1154:	51 2c       	mov	r5, r1
    1156:	31 2c       	mov	r3, r1
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	20 32       	cpi	r18, 0x20	; 32
    115c:	a0 f4       	brcc	.+40     	; 0x1186 <vfprintf+0x88>
    115e:	8b 32       	cpi	r24, 0x2B	; 43
    1160:	69 f0       	breq	.+26     	; 0x117c <vfprintf+0x7e>
    1162:	30 f4       	brcc	.+12     	; 0x1170 <vfprintf+0x72>
    1164:	80 32       	cpi	r24, 0x20	; 32
    1166:	59 f0       	breq	.+22     	; 0x117e <vfprintf+0x80>
    1168:	83 32       	cpi	r24, 0x23	; 35
    116a:	69 f4       	brne	.+26     	; 0x1186 <vfprintf+0x88>
    116c:	20 61       	ori	r18, 0x10	; 16
    116e:	2c c0       	rjmp	.+88     	; 0x11c8 <vfprintf+0xca>
    1170:	8d 32       	cpi	r24, 0x2D	; 45
    1172:	39 f0       	breq	.+14     	; 0x1182 <vfprintf+0x84>
    1174:	80 33       	cpi	r24, 0x30	; 48
    1176:	39 f4       	brne	.+14     	; 0x1186 <vfprintf+0x88>
    1178:	21 60       	ori	r18, 0x01	; 1
    117a:	26 c0       	rjmp	.+76     	; 0x11c8 <vfprintf+0xca>
    117c:	22 60       	ori	r18, 0x02	; 2
    117e:	24 60       	ori	r18, 0x04	; 4
    1180:	23 c0       	rjmp	.+70     	; 0x11c8 <vfprintf+0xca>
    1182:	28 60       	ori	r18, 0x08	; 8
    1184:	21 c0       	rjmp	.+66     	; 0x11c8 <vfprintf+0xca>
    1186:	27 fd       	sbrc	r18, 7
    1188:	27 c0       	rjmp	.+78     	; 0x11d8 <vfprintf+0xda>
    118a:	30 ed       	ldi	r19, 0xD0	; 208
    118c:	38 0f       	add	r19, r24
    118e:	3a 30       	cpi	r19, 0x0A	; 10
    1190:	78 f4       	brcc	.+30     	; 0x11b0 <vfprintf+0xb2>
    1192:	26 ff       	sbrs	r18, 6
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <vfprintf+0xa4>
    1196:	fa e0       	ldi	r31, 0x0A	; 10
    1198:	5f 9e       	mul	r5, r31
    119a:	30 0d       	add	r19, r0
    119c:	11 24       	eor	r1, r1
    119e:	53 2e       	mov	r5, r19
    11a0:	13 c0       	rjmp	.+38     	; 0x11c8 <vfprintf+0xca>
    11a2:	8a e0       	ldi	r24, 0x0A	; 10
    11a4:	38 9e       	mul	r3, r24
    11a6:	30 0d       	add	r19, r0
    11a8:	11 24       	eor	r1, r1
    11aa:	33 2e       	mov	r3, r19
    11ac:	20 62       	ori	r18, 0x20	; 32
    11ae:	0c c0       	rjmp	.+24     	; 0x11c8 <vfprintf+0xca>
    11b0:	8e 32       	cpi	r24, 0x2E	; 46
    11b2:	21 f4       	brne	.+8      	; 0x11bc <vfprintf+0xbe>
    11b4:	26 fd       	sbrc	r18, 6
    11b6:	6b c1       	rjmp	.+726    	; 0x148e <vfprintf+0x390>
    11b8:	20 64       	ori	r18, 0x40	; 64
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <vfprintf+0xca>
    11bc:	8c 36       	cpi	r24, 0x6C	; 108
    11be:	11 f4       	brne	.+4      	; 0x11c4 <vfprintf+0xc6>
    11c0:	20 68       	ori	r18, 0x80	; 128
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0xca>
    11c4:	88 36       	cpi	r24, 0x68	; 104
    11c6:	41 f4       	brne	.+16     	; 0x11d8 <vfprintf+0xda>
    11c8:	f6 01       	movw	r30, r12
    11ca:	93 fd       	sbrc	r25, 3
    11cc:	85 91       	lpm	r24, Z+
    11ce:	93 ff       	sbrs	r25, 3
    11d0:	81 91       	ld	r24, Z+
    11d2:	6f 01       	movw	r12, r30
    11d4:	81 11       	cpse	r24, r1
    11d6:	c1 cf       	rjmp	.-126    	; 0x115a <vfprintf+0x5c>
    11d8:	98 2f       	mov	r25, r24
    11da:	9f 7d       	andi	r25, 0xDF	; 223
    11dc:	95 54       	subi	r25, 0x45	; 69
    11de:	93 30       	cpi	r25, 0x03	; 3
    11e0:	28 f4       	brcc	.+10     	; 0x11ec <vfprintf+0xee>
    11e2:	0c 5f       	subi	r16, 0xFC	; 252
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	ff e3       	ldi	r31, 0x3F	; 63
    11e8:	f9 83       	std	Y+1, r31	; 0x01
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <vfprintf+0x108>
    11ec:	83 36       	cpi	r24, 0x63	; 99
    11ee:	31 f0       	breq	.+12     	; 0x11fc <vfprintf+0xfe>
    11f0:	83 37       	cpi	r24, 0x73	; 115
    11f2:	71 f0       	breq	.+28     	; 0x1210 <vfprintf+0x112>
    11f4:	83 35       	cpi	r24, 0x53	; 83
    11f6:	09 f0       	breq	.+2      	; 0x11fa <vfprintf+0xfc>
    11f8:	5b c0       	rjmp	.+182    	; 0x12b0 <vfprintf+0x1b2>
    11fa:	22 c0       	rjmp	.+68     	; 0x1240 <vfprintf+0x142>
    11fc:	f8 01       	movw	r30, r16
    11fe:	80 81       	ld	r24, Z
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	0e 5f       	subi	r16, 0xFE	; 254
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	44 24       	eor	r4, r4
    1208:	43 94       	inc	r4
    120a:	51 2c       	mov	r5, r1
    120c:	54 01       	movw	r10, r8
    120e:	15 c0       	rjmp	.+42     	; 0x123a <vfprintf+0x13c>
    1210:	38 01       	movw	r6, r16
    1212:	f2 e0       	ldi	r31, 0x02	; 2
    1214:	6f 0e       	add	r6, r31
    1216:	71 1c       	adc	r7, r1
    1218:	f8 01       	movw	r30, r16
    121a:	a0 80       	ld	r10, Z
    121c:	b1 80       	ldd	r11, Z+1	; 0x01
    121e:	26 ff       	sbrs	r18, 6
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <vfprintf+0x12a>
    1222:	65 2d       	mov	r22, r5
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <vfprintf+0x12e>
    1228:	6f ef       	ldi	r22, 0xFF	; 255
    122a:	7f ef       	ldi	r23, 0xFF	; 255
    122c:	c5 01       	movw	r24, r10
    122e:	2c 87       	std	Y+12, r18	; 0x0c
    1230:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <strnlen>
    1234:	2c 01       	movw	r4, r24
    1236:	83 01       	movw	r16, r6
    1238:	2c 85       	ldd	r18, Y+12	; 0x0c
    123a:	2f 77       	andi	r18, 0x7F	; 127
    123c:	22 2e       	mov	r2, r18
    123e:	17 c0       	rjmp	.+46     	; 0x126e <vfprintf+0x170>
    1240:	38 01       	movw	r6, r16
    1242:	f2 e0       	ldi	r31, 0x02	; 2
    1244:	6f 0e       	add	r6, r31
    1246:	71 1c       	adc	r7, r1
    1248:	f8 01       	movw	r30, r16
    124a:	a0 80       	ld	r10, Z
    124c:	b1 80       	ldd	r11, Z+1	; 0x01
    124e:	26 ff       	sbrs	r18, 6
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <vfprintf+0x15a>
    1252:	65 2d       	mov	r22, r5
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <vfprintf+0x15e>
    1258:	6f ef       	ldi	r22, 0xFF	; 255
    125a:	7f ef       	ldi	r23, 0xFF	; 255
    125c:	c5 01       	movw	r24, r10
    125e:	2c 87       	std	Y+12, r18	; 0x0c
    1260:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <strnlen_P>
    1264:	2c 01       	movw	r4, r24
    1266:	2c 85       	ldd	r18, Y+12	; 0x0c
    1268:	20 68       	ori	r18, 0x80	; 128
    126a:	22 2e       	mov	r2, r18
    126c:	83 01       	movw	r16, r6
    126e:	23 fc       	sbrc	r2, 3
    1270:	1b c0       	rjmp	.+54     	; 0x12a8 <vfprintf+0x1aa>
    1272:	83 2d       	mov	r24, r3
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	48 16       	cp	r4, r24
    1278:	59 06       	cpc	r5, r25
    127a:	b0 f4       	brcc	.+44     	; 0x12a8 <vfprintf+0x1aa>
    127c:	b7 01       	movw	r22, r14
    127e:	80 e2       	ldi	r24, 0x20	; 32
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1286:	3a 94       	dec	r3
    1288:	f4 cf       	rjmp	.-24     	; 0x1272 <vfprintf+0x174>
    128a:	f5 01       	movw	r30, r10
    128c:	27 fc       	sbrc	r2, 7
    128e:	85 91       	lpm	r24, Z+
    1290:	27 fe       	sbrs	r2, 7
    1292:	81 91       	ld	r24, Z+
    1294:	5f 01       	movw	r10, r30
    1296:	b7 01       	movw	r22, r14
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    129e:	31 10       	cpse	r3, r1
    12a0:	3a 94       	dec	r3
    12a2:	f1 e0       	ldi	r31, 0x01	; 1
    12a4:	4f 1a       	sub	r4, r31
    12a6:	51 08       	sbc	r5, r1
    12a8:	41 14       	cp	r4, r1
    12aa:	51 04       	cpc	r5, r1
    12ac:	71 f7       	brne	.-36     	; 0x128a <vfprintf+0x18c>
    12ae:	e5 c0       	rjmp	.+458    	; 0x147a <vfprintf+0x37c>
    12b0:	84 36       	cpi	r24, 0x64	; 100
    12b2:	11 f0       	breq	.+4      	; 0x12b8 <vfprintf+0x1ba>
    12b4:	89 36       	cpi	r24, 0x69	; 105
    12b6:	39 f5       	brne	.+78     	; 0x1306 <vfprintf+0x208>
    12b8:	f8 01       	movw	r30, r16
    12ba:	27 ff       	sbrs	r18, 7
    12bc:	07 c0       	rjmp	.+14     	; 0x12cc <vfprintf+0x1ce>
    12be:	60 81       	ld	r22, Z
    12c0:	71 81       	ldd	r23, Z+1	; 0x01
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	0c 5f       	subi	r16, 0xFC	; 252
    12c8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ca:	08 c0       	rjmp	.+16     	; 0x12dc <vfprintf+0x1de>
    12cc:	60 81       	ld	r22, Z
    12ce:	71 81       	ldd	r23, Z+1	; 0x01
    12d0:	07 2e       	mov	r0, r23
    12d2:	00 0c       	add	r0, r0
    12d4:	88 0b       	sbc	r24, r24
    12d6:	99 0b       	sbc	r25, r25
    12d8:	0e 5f       	subi	r16, 0xFE	; 254
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	2f 76       	andi	r18, 0x6F	; 111
    12de:	72 2e       	mov	r7, r18
    12e0:	97 ff       	sbrs	r25, 7
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <vfprintf+0x1f8>
    12e4:	90 95       	com	r25
    12e6:	80 95       	com	r24
    12e8:	70 95       	com	r23
    12ea:	61 95       	neg	r22
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	8f 4f       	sbci	r24, 0xFF	; 255
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	20 68       	ori	r18, 0x80	; 128
    12f4:	72 2e       	mov	r7, r18
    12f6:	2a e0       	ldi	r18, 0x0A	; 10
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	a4 01       	movw	r20, r8
    12fc:	0e 94 af 0a 	call	0x155e	; 0x155e <__ultoa_invert>
    1300:	a8 2e       	mov	r10, r24
    1302:	a8 18       	sub	r10, r8
    1304:	44 c0       	rjmp	.+136    	; 0x138e <vfprintf+0x290>
    1306:	85 37       	cpi	r24, 0x75	; 117
    1308:	29 f4       	brne	.+10     	; 0x1314 <vfprintf+0x216>
    130a:	2f 7e       	andi	r18, 0xEF	; 239
    130c:	b2 2e       	mov	r11, r18
    130e:	2a e0       	ldi	r18, 0x0A	; 10
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	25 c0       	rjmp	.+74     	; 0x135e <vfprintf+0x260>
    1314:	f2 2f       	mov	r31, r18
    1316:	f9 7f       	andi	r31, 0xF9	; 249
    1318:	bf 2e       	mov	r11, r31
    131a:	8f 36       	cpi	r24, 0x6F	; 111
    131c:	c1 f0       	breq	.+48     	; 0x134e <vfprintf+0x250>
    131e:	18 f4       	brcc	.+6      	; 0x1326 <vfprintf+0x228>
    1320:	88 35       	cpi	r24, 0x58	; 88
    1322:	79 f0       	breq	.+30     	; 0x1342 <vfprintf+0x244>
    1324:	b4 c0       	rjmp	.+360    	; 0x148e <vfprintf+0x390>
    1326:	80 37       	cpi	r24, 0x70	; 112
    1328:	19 f0       	breq	.+6      	; 0x1330 <vfprintf+0x232>
    132a:	88 37       	cpi	r24, 0x78	; 120
    132c:	21 f0       	breq	.+8      	; 0x1336 <vfprintf+0x238>
    132e:	af c0       	rjmp	.+350    	; 0x148e <vfprintf+0x390>
    1330:	2f 2f       	mov	r18, r31
    1332:	20 61       	ori	r18, 0x10	; 16
    1334:	b2 2e       	mov	r11, r18
    1336:	b4 fe       	sbrs	r11, 4
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <vfprintf+0x256>
    133a:	8b 2d       	mov	r24, r11
    133c:	84 60       	ori	r24, 0x04	; 4
    133e:	b8 2e       	mov	r11, r24
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <vfprintf+0x256>
    1342:	24 ff       	sbrs	r18, 4
    1344:	0a c0       	rjmp	.+20     	; 0x135a <vfprintf+0x25c>
    1346:	9f 2f       	mov	r25, r31
    1348:	96 60       	ori	r25, 0x06	; 6
    134a:	b9 2e       	mov	r11, r25
    134c:	06 c0       	rjmp	.+12     	; 0x135a <vfprintf+0x25c>
    134e:	28 e0       	ldi	r18, 0x08	; 8
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	05 c0       	rjmp	.+10     	; 0x135e <vfprintf+0x260>
    1354:	20 e1       	ldi	r18, 0x10	; 16
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <vfprintf+0x260>
    135a:	20 e1       	ldi	r18, 0x10	; 16
    135c:	32 e0       	ldi	r19, 0x02	; 2
    135e:	f8 01       	movw	r30, r16
    1360:	b7 fe       	sbrs	r11, 7
    1362:	07 c0       	rjmp	.+14     	; 0x1372 <vfprintf+0x274>
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	0c 5f       	subi	r16, 0xFC	; 252
    136e:	1f 4f       	sbci	r17, 0xFF	; 255
    1370:	06 c0       	rjmp	.+12     	; 0x137e <vfprintf+0x280>
    1372:	60 81       	ld	r22, Z
    1374:	71 81       	ldd	r23, Z+1	; 0x01
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 5f       	subi	r16, 0xFE	; 254
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	a4 01       	movw	r20, r8
    1380:	0e 94 af 0a 	call	0x155e	; 0x155e <__ultoa_invert>
    1384:	a8 2e       	mov	r10, r24
    1386:	a8 18       	sub	r10, r8
    1388:	fb 2d       	mov	r31, r11
    138a:	ff 77       	andi	r31, 0x7F	; 127
    138c:	7f 2e       	mov	r7, r31
    138e:	76 fe       	sbrs	r7, 6
    1390:	0b c0       	rjmp	.+22     	; 0x13a8 <vfprintf+0x2aa>
    1392:	37 2d       	mov	r19, r7
    1394:	3e 7f       	andi	r19, 0xFE	; 254
    1396:	a5 14       	cp	r10, r5
    1398:	50 f4       	brcc	.+20     	; 0x13ae <vfprintf+0x2b0>
    139a:	74 fe       	sbrs	r7, 4
    139c:	0a c0       	rjmp	.+20     	; 0x13b2 <vfprintf+0x2b4>
    139e:	72 fc       	sbrc	r7, 2
    13a0:	08 c0       	rjmp	.+16     	; 0x13b2 <vfprintf+0x2b4>
    13a2:	37 2d       	mov	r19, r7
    13a4:	3e 7e       	andi	r19, 0xEE	; 238
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <vfprintf+0x2b4>
    13a8:	ba 2c       	mov	r11, r10
    13aa:	37 2d       	mov	r19, r7
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <vfprintf+0x2b6>
    13ae:	ba 2c       	mov	r11, r10
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <vfprintf+0x2b6>
    13b2:	b5 2c       	mov	r11, r5
    13b4:	34 ff       	sbrs	r19, 4
    13b6:	0d c0       	rjmp	.+26     	; 0x13d2 <vfprintf+0x2d4>
    13b8:	fe 01       	movw	r30, r28
    13ba:	ea 0d       	add	r30, r10
    13bc:	f1 1d       	adc	r31, r1
    13be:	80 81       	ld	r24, Z
    13c0:	80 33       	cpi	r24, 0x30	; 48
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <vfprintf+0x2ca>
    13c4:	39 7e       	andi	r19, 0xE9	; 233
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <vfprintf+0x2dc>
    13c8:	32 ff       	sbrs	r19, 2
    13ca:	06 c0       	rjmp	.+12     	; 0x13d8 <vfprintf+0x2da>
    13cc:	b3 94       	inc	r11
    13ce:	b3 94       	inc	r11
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <vfprintf+0x2dc>
    13d2:	83 2f       	mov	r24, r19
    13d4:	86 78       	andi	r24, 0x86	; 134
    13d6:	09 f0       	breq	.+2      	; 0x13da <vfprintf+0x2dc>
    13d8:	b3 94       	inc	r11
    13da:	33 fd       	sbrc	r19, 3
    13dc:	13 c0       	rjmp	.+38     	; 0x1404 <vfprintf+0x306>
    13de:	30 ff       	sbrs	r19, 0
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <vfprintf+0x2f0>
    13e2:	5a 2c       	mov	r5, r10
    13e4:	b3 14       	cp	r11, r3
    13e6:	18 f4       	brcc	.+6      	; 0x13ee <vfprintf+0x2f0>
    13e8:	53 0c       	add	r5, r3
    13ea:	5b 18       	sub	r5, r11
    13ec:	b3 2c       	mov	r11, r3
    13ee:	b3 14       	cp	r11, r3
    13f0:	68 f4       	brcc	.+26     	; 0x140c <vfprintf+0x30e>
    13f2:	b7 01       	movw	r22, r14
    13f4:	80 e2       	ldi	r24, 0x20	; 32
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	3c 87       	std	Y+12, r19	; 0x0c
    13fa:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    13fe:	b3 94       	inc	r11
    1400:	3c 85       	ldd	r19, Y+12	; 0x0c
    1402:	f5 cf       	rjmp	.-22     	; 0x13ee <vfprintf+0x2f0>
    1404:	b3 14       	cp	r11, r3
    1406:	10 f4       	brcc	.+4      	; 0x140c <vfprintf+0x30e>
    1408:	3b 18       	sub	r3, r11
    140a:	01 c0       	rjmp	.+2      	; 0x140e <vfprintf+0x310>
    140c:	31 2c       	mov	r3, r1
    140e:	34 ff       	sbrs	r19, 4
    1410:	12 c0       	rjmp	.+36     	; 0x1436 <vfprintf+0x338>
    1412:	b7 01       	movw	r22, r14
    1414:	80 e3       	ldi	r24, 0x30	; 48
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	3c 87       	std	Y+12, r19	; 0x0c
    141a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    141e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1420:	32 ff       	sbrs	r19, 2
    1422:	17 c0       	rjmp	.+46     	; 0x1452 <vfprintf+0x354>
    1424:	31 fd       	sbrc	r19, 1
    1426:	03 c0       	rjmp	.+6      	; 0x142e <vfprintf+0x330>
    1428:	88 e7       	ldi	r24, 0x78	; 120
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <vfprintf+0x334>
    142e:	88 e5       	ldi	r24, 0x58	; 88
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	b7 01       	movw	r22, r14
    1434:	0c c0       	rjmp	.+24     	; 0x144e <vfprintf+0x350>
    1436:	83 2f       	mov	r24, r19
    1438:	86 78       	andi	r24, 0x86	; 134
    143a:	59 f0       	breq	.+22     	; 0x1452 <vfprintf+0x354>
    143c:	31 ff       	sbrs	r19, 1
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <vfprintf+0x346>
    1440:	8b e2       	ldi	r24, 0x2B	; 43
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <vfprintf+0x348>
    1444:	80 e2       	ldi	r24, 0x20	; 32
    1446:	37 fd       	sbrc	r19, 7
    1448:	8d e2       	ldi	r24, 0x2D	; 45
    144a:	b7 01       	movw	r22, r14
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1452:	a5 14       	cp	r10, r5
    1454:	38 f4       	brcc	.+14     	; 0x1464 <vfprintf+0x366>
    1456:	b7 01       	movw	r22, r14
    1458:	80 e3       	ldi	r24, 0x30	; 48
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1460:	5a 94       	dec	r5
    1462:	f7 cf       	rjmp	.-18     	; 0x1452 <vfprintf+0x354>
    1464:	aa 94       	dec	r10
    1466:	f4 01       	movw	r30, r8
    1468:	ea 0d       	add	r30, r10
    146a:	f1 1d       	adc	r31, r1
    146c:	80 81       	ld	r24, Z
    146e:	b7 01       	movw	r22, r14
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1476:	a1 10       	cpse	r10, r1
    1478:	f5 cf       	rjmp	.-22     	; 0x1464 <vfprintf+0x366>
    147a:	33 20       	and	r3, r3
    147c:	09 f4       	brne	.+2      	; 0x1480 <vfprintf+0x382>
    147e:	51 ce       	rjmp	.-862    	; 0x1122 <vfprintf+0x24>
    1480:	b7 01       	movw	r22, r14
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    148a:	3a 94       	dec	r3
    148c:	f6 cf       	rjmp	.-20     	; 0x147a <vfprintf+0x37c>
    148e:	f7 01       	movw	r30, r14
    1490:	86 81       	ldd	r24, Z+6	; 0x06
    1492:	97 81       	ldd	r25, Z+7	; 0x07
    1494:	02 c0       	rjmp	.+4      	; 0x149a <vfprintf+0x39c>
    1496:	8f ef       	ldi	r24, 0xFF	; 255
    1498:	9f ef       	ldi	r25, 0xFF	; 255
    149a:	2c 96       	adiw	r28, 0x0c	; 12
    149c:	e2 e1       	ldi	r30, 0x12	; 18
    149e:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__epilogue_restores__>

000014a2 <strnlen_P>:
    14a2:	fc 01       	movw	r30, r24
    14a4:	05 90       	lpm	r0, Z+
    14a6:	61 50       	subi	r22, 0x01	; 1
    14a8:	70 40       	sbci	r23, 0x00	; 0
    14aa:	01 10       	cpse	r0, r1
    14ac:	d8 f7       	brcc	.-10     	; 0x14a4 <strnlen_P+0x2>
    14ae:	80 95       	com	r24
    14b0:	90 95       	com	r25
    14b2:	8e 0f       	add	r24, r30
    14b4:	9f 1f       	adc	r25, r31
    14b6:	08 95       	ret

000014b8 <strnlen>:
    14b8:	fc 01       	movw	r30, r24
    14ba:	61 50       	subi	r22, 0x01	; 1
    14bc:	70 40       	sbci	r23, 0x00	; 0
    14be:	01 90       	ld	r0, Z+
    14c0:	01 10       	cpse	r0, r1
    14c2:	d8 f7       	brcc	.-10     	; 0x14ba <strnlen+0x2>
    14c4:	80 95       	com	r24
    14c6:	90 95       	com	r25
    14c8:	8e 0f       	add	r24, r30
    14ca:	9f 1f       	adc	r25, r31
    14cc:	08 95       	ret

000014ce <strrev>:
    14ce:	dc 01       	movw	r26, r24
    14d0:	fc 01       	movw	r30, r24
    14d2:	67 2f       	mov	r22, r23
    14d4:	71 91       	ld	r23, Z+
    14d6:	77 23       	and	r23, r23
    14d8:	e1 f7       	brne	.-8      	; 0x14d2 <strrev+0x4>
    14da:	32 97       	sbiw	r30, 0x02	; 2
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <strrev+0x18>
    14de:	7c 91       	ld	r23, X
    14e0:	6d 93       	st	X+, r22
    14e2:	70 83       	st	Z, r23
    14e4:	62 91       	ld	r22, -Z
    14e6:	ae 17       	cp	r26, r30
    14e8:	bf 07       	cpc	r27, r31
    14ea:	c8 f3       	brcs	.-14     	; 0x14de <strrev+0x10>
    14ec:	08 95       	ret

000014ee <fputc>:
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	fb 01       	movw	r30, r22
    14f8:	23 81       	ldd	r18, Z+3	; 0x03
    14fa:	21 fd       	sbrc	r18, 1
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <fputc+0x16>
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	28 c0       	rjmp	.+80     	; 0x1554 <fputc+0x66>
    1504:	22 ff       	sbrs	r18, 2
    1506:	16 c0       	rjmp	.+44     	; 0x1534 <fputc+0x46>
    1508:	46 81       	ldd	r20, Z+6	; 0x06
    150a:	57 81       	ldd	r21, Z+7	; 0x07
    150c:	24 81       	ldd	r18, Z+4	; 0x04
    150e:	35 81       	ldd	r19, Z+5	; 0x05
    1510:	42 17       	cp	r20, r18
    1512:	53 07       	cpc	r21, r19
    1514:	44 f4       	brge	.+16     	; 0x1526 <fputc+0x38>
    1516:	a0 81       	ld	r26, Z
    1518:	b1 81       	ldd	r27, Z+1	; 0x01
    151a:	9d 01       	movw	r18, r26
    151c:	2f 5f       	subi	r18, 0xFF	; 255
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	20 83       	st	Z, r18
    1522:	31 83       	std	Z+1, r19	; 0x01
    1524:	8c 93       	st	X, r24
    1526:	26 81       	ldd	r18, Z+6	; 0x06
    1528:	37 81       	ldd	r19, Z+7	; 0x07
    152a:	2f 5f       	subi	r18, 0xFF	; 255
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	26 83       	std	Z+6, r18	; 0x06
    1530:	37 83       	std	Z+7, r19	; 0x07
    1532:	10 c0       	rjmp	.+32     	; 0x1554 <fputc+0x66>
    1534:	eb 01       	movw	r28, r22
    1536:	09 2f       	mov	r16, r25
    1538:	18 2f       	mov	r17, r24
    153a:	00 84       	ldd	r0, Z+8	; 0x08
    153c:	f1 85       	ldd	r31, Z+9	; 0x09
    153e:	e0 2d       	mov	r30, r0
    1540:	09 95       	icall
    1542:	89 2b       	or	r24, r25
    1544:	e1 f6       	brne	.-72     	; 0x14fe <fputc+0x10>
    1546:	8e 81       	ldd	r24, Y+6	; 0x06
    1548:	9f 81       	ldd	r25, Y+7	; 0x07
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	8e 83       	std	Y+6, r24	; 0x06
    154e:	9f 83       	std	Y+7, r25	; 0x07
    1550:	81 2f       	mov	r24, r17
    1552:	90 2f       	mov	r25, r16
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	08 95       	ret

0000155e <__ultoa_invert>:
    155e:	fa 01       	movw	r30, r20
    1560:	aa 27       	eor	r26, r26
    1562:	28 30       	cpi	r18, 0x08	; 8
    1564:	51 f1       	breq	.+84     	; 0x15ba <__ultoa_invert+0x5c>
    1566:	20 31       	cpi	r18, 0x10	; 16
    1568:	81 f1       	breq	.+96     	; 0x15ca <__ultoa_invert+0x6c>
    156a:	e8 94       	clt
    156c:	6f 93       	push	r22
    156e:	6e 7f       	andi	r22, 0xFE	; 254
    1570:	6e 5f       	subi	r22, 0xFE	; 254
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	af 4f       	sbci	r26, 0xFF	; 255
    157a:	b1 e0       	ldi	r27, 0x01	; 1
    157c:	3e d0       	rcall	.+124    	; 0x15fa <__ultoa_invert+0x9c>
    157e:	b4 e0       	ldi	r27, 0x04	; 4
    1580:	3c d0       	rcall	.+120    	; 0x15fa <__ultoa_invert+0x9c>
    1582:	67 0f       	add	r22, r23
    1584:	78 1f       	adc	r23, r24
    1586:	89 1f       	adc	r24, r25
    1588:	9a 1f       	adc	r25, r26
    158a:	a1 1d       	adc	r26, r1
    158c:	68 0f       	add	r22, r24
    158e:	79 1f       	adc	r23, r25
    1590:	8a 1f       	adc	r24, r26
    1592:	91 1d       	adc	r25, r1
    1594:	a1 1d       	adc	r26, r1
    1596:	6a 0f       	add	r22, r26
    1598:	71 1d       	adc	r23, r1
    159a:	81 1d       	adc	r24, r1
    159c:	91 1d       	adc	r25, r1
    159e:	a1 1d       	adc	r26, r1
    15a0:	20 d0       	rcall	.+64     	; 0x15e2 <__ultoa_invert+0x84>
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <__ultoa_invert+0x48>
    15a4:	68 94       	set
    15a6:	3f 91       	pop	r19
    15a8:	2a e0       	ldi	r18, 0x0A	; 10
    15aa:	26 9f       	mul	r18, r22
    15ac:	11 24       	eor	r1, r1
    15ae:	30 19       	sub	r19, r0
    15b0:	30 5d       	subi	r19, 0xD0	; 208
    15b2:	31 93       	st	Z+, r19
    15b4:	de f6       	brtc	.-74     	; 0x156c <__ultoa_invert+0xe>
    15b6:	cf 01       	movw	r24, r30
    15b8:	08 95       	ret
    15ba:	46 2f       	mov	r20, r22
    15bc:	47 70       	andi	r20, 0x07	; 7
    15be:	40 5d       	subi	r20, 0xD0	; 208
    15c0:	41 93       	st	Z+, r20
    15c2:	b3 e0       	ldi	r27, 0x03	; 3
    15c4:	0f d0       	rcall	.+30     	; 0x15e4 <__ultoa_invert+0x86>
    15c6:	c9 f7       	brne	.-14     	; 0x15ba <__ultoa_invert+0x5c>
    15c8:	f6 cf       	rjmp	.-20     	; 0x15b6 <__ultoa_invert+0x58>
    15ca:	46 2f       	mov	r20, r22
    15cc:	4f 70       	andi	r20, 0x0F	; 15
    15ce:	40 5d       	subi	r20, 0xD0	; 208
    15d0:	4a 33       	cpi	r20, 0x3A	; 58
    15d2:	18 f0       	brcs	.+6      	; 0x15da <__ultoa_invert+0x7c>
    15d4:	49 5d       	subi	r20, 0xD9	; 217
    15d6:	31 fd       	sbrc	r19, 1
    15d8:	40 52       	subi	r20, 0x20	; 32
    15da:	41 93       	st	Z+, r20
    15dc:	02 d0       	rcall	.+4      	; 0x15e2 <__ultoa_invert+0x84>
    15de:	a9 f7       	brne	.-22     	; 0x15ca <__ultoa_invert+0x6c>
    15e0:	ea cf       	rjmp	.-44     	; 0x15b6 <__ultoa_invert+0x58>
    15e2:	b4 e0       	ldi	r27, 0x04	; 4
    15e4:	a6 95       	lsr	r26
    15e6:	97 95       	ror	r25
    15e8:	87 95       	ror	r24
    15ea:	77 95       	ror	r23
    15ec:	67 95       	ror	r22
    15ee:	ba 95       	dec	r27
    15f0:	c9 f7       	brne	.-14     	; 0x15e4 <__ultoa_invert+0x86>
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	61 05       	cpc	r22, r1
    15f6:	71 05       	cpc	r23, r1
    15f8:	08 95       	ret
    15fa:	9b 01       	movw	r18, r22
    15fc:	ac 01       	movw	r20, r24
    15fe:	0a 2e       	mov	r0, r26
    1600:	06 94       	lsr	r0
    1602:	57 95       	ror	r21
    1604:	47 95       	ror	r20
    1606:	37 95       	ror	r19
    1608:	27 95       	ror	r18
    160a:	ba 95       	dec	r27
    160c:	c9 f7       	brne	.-14     	; 0x1600 <__ultoa_invert+0xa2>
    160e:	62 0f       	add	r22, r18
    1610:	73 1f       	adc	r23, r19
    1612:	84 1f       	adc	r24, r20
    1614:	95 1f       	adc	r25, r21
    1616:	a0 1d       	adc	r26, r0
    1618:	08 95       	ret

0000161a <__prologue_saves__>:
    161a:	2f 92       	push	r2
    161c:	3f 92       	push	r3
    161e:	4f 92       	push	r4
    1620:	5f 92       	push	r5
    1622:	6f 92       	push	r6
    1624:	7f 92       	push	r7
    1626:	8f 92       	push	r8
    1628:	9f 92       	push	r9
    162a:	af 92       	push	r10
    162c:	bf 92       	push	r11
    162e:	cf 92       	push	r12
    1630:	df 92       	push	r13
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	ca 1b       	sub	r28, r26
    1644:	db 0b       	sbc	r29, r27
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	09 94       	ijmp

0000164c <__epilogue_restores__>:
    164c:	2a 88       	ldd	r2, Y+18	; 0x12
    164e:	39 88       	ldd	r3, Y+17	; 0x11
    1650:	48 88       	ldd	r4, Y+16	; 0x10
    1652:	5f 84       	ldd	r5, Y+15	; 0x0f
    1654:	6e 84       	ldd	r6, Y+14	; 0x0e
    1656:	7d 84       	ldd	r7, Y+13	; 0x0d
    1658:	8c 84       	ldd	r8, Y+12	; 0x0c
    165a:	9b 84       	ldd	r9, Y+11	; 0x0b
    165c:	aa 84       	ldd	r10, Y+10	; 0x0a
    165e:	b9 84       	ldd	r11, Y+9	; 0x09
    1660:	c8 84       	ldd	r12, Y+8	; 0x08
    1662:	df 80       	ldd	r13, Y+7	; 0x07
    1664:	ee 80       	ldd	r14, Y+6	; 0x06
    1666:	fd 80       	ldd	r15, Y+5	; 0x05
    1668:	0c 81       	ldd	r16, Y+4	; 0x04
    166a:	1b 81       	ldd	r17, Y+3	; 0x03
    166c:	aa 81       	ldd	r26, Y+2	; 0x02
    166e:	b9 81       	ldd	r27, Y+1	; 0x01
    1670:	ce 0f       	add	r28, r30
    1672:	d1 1d       	adc	r29, r1
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	ed 01       	movw	r28, r26
    167a:	08 95       	ret

0000167c <_exit>:
    167c:	f8 94       	cli

0000167e <__stop_program>:
    167e:	ff cf       	rjmp	.-2      	; 0x167e <__stop_program>
