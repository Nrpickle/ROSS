
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  0000037e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001748  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c6  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c3  00000000  00000000  000020f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  000024bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016a7  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000186  00000000  00000000  00003c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003dcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	ee e7       	ldi	r30, 0x7E	; 126
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 30       	cpi	r26, 0x04	; 4
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 11 01 	call	0x222	; 0x222 <main>
  d2:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <_Z8initADCsv>:
		SendStringPC((char *)"\n\r");

    }
}

void initADCs(){
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
	
	//Set reference to AVCC/2
	//
	
	//Set freerun for the ADCs (sample all of the time)
	ADCA.CTRLA = ADC_ENABLE_bm;
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	8c 93       	st	X, r24
	ADCA.CTRLB |= ADC_RESOLUTION_12BIT_gc;
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	8c 91       	ld	r24, X
  ea:	11 97       	sbiw	r26, 0x01	; 1
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	8c 93       	st	X, r24
  f0:	11 97       	sbiw	r26, 0x01	; 1
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
  f2:	80 e2       	ldi	r24, 0x20	; 32
  f4:	12 96       	adiw	r26, 0x02	; 2
  f6:	8c 93       	st	X, r24
  f8:	12 97       	sbiw	r26, 0x02	; 2
	ADCA.EVCTRL = 0; //Disable events
  fa:	13 96       	adiw	r26, 0x03	; 3
  fc:	1c 92       	st	X, r1
  fe:	13 97       	sbiw	r26, 0x03	; 3
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 100:	87 e0       	ldi	r24, 0x07	; 7
 102:	14 96       	adiw	r26, 0x04	; 4
 104:	8c 93       	st	X, r24
 106:	14 97       	sbiw	r26, 0x04	; 4
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
static uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 108:	ca ec       	ldi	r28, 0xCA	; 202
 10a:	d1 e0       	ldi	r29, 0x01	; 1
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	88 83       	st	Y, r24
	result = pgm_read_byte(index);
 110:	e0 e2       	ldi	r30, 0x20	; 32
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	e4 91       	lpm	r30, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 116:	18 82       	st	Y, r1
	ADCA.CTRLA = ADC_ENABLE_bm;
	ADCA.CTRLB |= ADC_RESOLUTION_12BIT_gc;
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
	ADCA.EVCTRL = 0; //Disable events
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
 118:	1c 96       	adiw	r26, 0x0c	; 12
 11a:	ec 93       	st	X, r30
 11c:	1c 97       	sbiw	r26, 0x0c	; 12
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
static uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 11e:	88 83       	st	Y, r24
	result = pgm_read_byte(index);
 120:	e1 e2       	ldi	r30, 0x21	; 33
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	e4 91       	lpm	r30, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 126:	18 82       	st	Y, r1
	ADCA.CTRLB |= ADC_RESOLUTION_12BIT_gc;
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
	ADCA.EVCTRL = 0; //Disable events
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
 128:	1d 96       	adiw	r26, 0x0d	; 13
 12a:	ec 93       	st	X, r30
 12c:	1d 97       	sbiw	r26, 0x0d	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	ef e7       	ldi	r30, 0x7F	; 127
 130:	fc e0       	ldi	r31, 0x0C	; 12
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <_Z8initADCsv+0x58>
 136:	00 c0       	rjmp	.+0      	; 0x138 <_Z8initADCsv+0x5e>
 138:	00 00       	nop
	_delay_us(400);
	
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
 13a:	90 96       	adiw	r26, 0x20	; 32
 13c:	8c 93       	st	X, r24
 13e:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEG0_bm);  //Init the ADC MUX to use the PIN8 input
 140:	81 e4       	ldi	r24, 0x41	; 65
 142:	91 96       	adiw	r26, 0x21	; 33
 144:	8c 93       	st	X, r24
 146:	91 97       	sbiw	r26, 0x21	; 33
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
 148:	92 96       	adiw	r26, 0x22	; 34
 14a:	1c 92       	st	X, r1
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
//	ADCA.CTRLA |= ADC_CH8START_bm;
	
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
 152:	e0 e5       	ldi	r30, 0x50	; 80
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	8b e4       	ldi	r24, 0x4B	; 75
 158:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
 15a:	80 81       	ld	r24, Z
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
 160:	81 81       	ldd	r24, Z+1	; 0x01
 162:	83 fd       	sbrc	r24, 3
 164:	09 c0       	rjmp	.+18     	; 0x178 <_Z27configureExternalOscillatorv+0x26>
 166:	a0 e4       	ldi	r26, 0x40	; 64
 168:	b6 e0       	ldi	r27, 0x06	; 6
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	15 96       	adiw	r26, 0x05	; 5
 16e:	9c 93       	st	X, r25
 170:	15 97       	sbiw	r26, 0x05	; 5
 172:	81 81       	ldd	r24, Z+1	; 0x01
 174:	83 ff       	sbrs	r24, 3
 176:	fa cf       	rjmp	.-12     	; 0x16c <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
 17e:	88 ed       	ldi	r24, 0xD8	; 216
 180:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
 182:	e0 e5       	ldi	r30, 0x50	; 80
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	88 ec       	ldi	r24, 0xC8	; 200
 188:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
 18a:	80 81       	ld	r24, Z
 18c:	80 61       	ori	r24, 0x10	; 16
 18e:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
 190:	81 81       	ldd	r24, Z+1	; 0x01
 192:	84 fd       	sbrc	r24, 4
 194:	09 c0       	rjmp	.+18     	; 0x1a8 <_Z27configureExternalOscillatorv+0x56>
 196:	a0 e4       	ldi	r26, 0x40	; 64
 198:	b6 e0       	ldi	r27, 0x06	; 6
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	15 96       	adiw	r26, 0x05	; 5
 19e:	9c 93       	st	X, r25
 1a0:	15 97       	sbiw	r26, 0x05	; 5
 1a2:	81 81       	ldd	r24, Z+1	; 0x01
 1a4:	84 ff       	sbrs	r24, 4
 1a6:	fa cf       	rjmp	.-12     	; 0x19c <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
 1ae:	88 ed       	ldi	r24, 0xD8	; 216
 1b0:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
 1b2:	e0 e4       	ldi	r30, 0x40	; 64
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
 1b8:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	80 83       	st	Z, r24
 1be:	08 95       	ret

000001c0 <_Z6initIOv>:
	
}
 
void initIO(void){
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
 1c0:	e0 e4       	ldi	r30, 0x40	; 64
 1c2:	f6 e0       	ldi	r31, 0x06	; 6
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	91 83       	std	Z+1, r25	; 0x01
	PORTC.DIRSET = PIN0_bm;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	81 83       	std	Z+1, r24	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
 1cc:	20 e2       	ldi	r18, 0x20	; 32
 1ce:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
 1d0:	34 e0       	ldi	r19, 0x04	; 4
 1d2:	32 83       	std	Z+2, r19	; 0x02
	PORTC.DIRCLR = PIN3_bm;
 1d4:	38 e0       	ldi	r19, 0x08	; 8
 1d6:	32 83       	std	Z+2, r19	; 0x02
	
	//Set pullups on the switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
 1d8:	38 e1       	ldi	r19, 0x18	; 24
 1da:	32 8b       	std	Z+18, r19	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
 1dc:	33 8b       	std	Z+19, r19	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
 1de:	a0 e0       	ldi	r26, 0x00	; 0
 1e0:	b6 e0       	ldi	r27, 0x06	; 6
 1e2:	12 96       	adiw	r26, 0x02	; 2
 1e4:	8c 93       	st	X, r24
 1e6:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
 1e8:	12 96       	adiw	r26, 0x02	; 2
 1ea:	9c 93       	st	X, r25
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
 1ec:	80 93 62 06 	sts	0x0662, r24
	
	
	//Initialize output values
	STATUS_CLR();
 1f0:	86 83       	std	Z+6, r24	; 0x06
	ERROR_CLR();
 1f2:	96 83       	std	Z+6, r25	; 0x06
	
	REAR_RELAY_CLR();
 1f4:	26 83       	std	Z+6, r18	; 0x06
 1f6:	08 95       	ret

000001f8 <_Z23sampleTempSensorVoltagev>:

	return( result );
}

int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEG0_bm);//ADC_CH_MUXNEG0_bm);
 1f8:	e0 e0       	ldi	r30, 0x00	; 0
 1fa:	f2 e0       	ldi	r31, 0x02	; 2
 1fc:	81 e4       	ldi	r24, 0x41	; 65
 1fe:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
 200:	80 a1       	ldd	r24, Z+32	; 0x20
 202:	80 68       	ori	r24, 0x80	; 128
 204:	80 a3       	std	Z+32, r24	; 0x20
 206:	8f e7       	ldi	r24, 0x7F	; 127
 208:	9c e0       	ldi	r25, 0x0C	; 12
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <_Z23sampleTempSensorVoltagev+0x12>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <_Z23sampleTempSensorVoltagev+0x18>
 210:	00 00       	nop
	
	_delay_us(400);
	
	while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
 212:	86 81       	ldd	r24, Z+6	; 0x06
 214:	80 ff       	sbrs	r24, 0
 216:	fd cf       	rjmp	.-6      	; 0x212 <_Z23sampleTempSensorVoltagev+0x1a>
	
	return 	ADCA.CH0.RES;
 218:	80 91 24 02 	lds	r24, 0x0224
 21c:	90 91 25 02 	lds	r25, 0x0225
}
 220:	08 95       	ret

00000222 <main>:
int16_t sampleBatteryVoltage(void);


int main(void)
{
	initIO();
 222:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z6initIOv>
	configureExternalOscillator();
 226:	0e 94 a9 00 	call	0x152	; 0x152 <_Z27configureExternalOscillatorv>
	//configure32MhzInternalOsc();
	configureUSART();
 22a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z14configureUSARTv>
	initADCs();
 22e:	0e 94 6d 00 	call	0xda	; 0xda <_Z8initADCsv>
	
	uint16_t counter = 0;
	uint16_t temperature = 0;
 232:	00 e0       	ldi	r16, 0x00	; 0
 234:	10 e0       	ldi	r17, 0x00	; 0
	
    while (1) 
    {
		_delay_ms(100);
		
		if(CHECK_DIP_SW_1()){
 236:	c0 e4       	ldi	r28, 0x40	; 64
 238:	d6 e0       	ldi	r29, 0x06	; 6
			STATUS_SET();
		}
		else {
			STATUS_CLR();
 23a:	ee 24       	eor	r14, r14
 23c:	e3 94       	inc	r14
		}
		if(temperature > 3700){
			ERROR_SET();
		}
		else{
			ERROR_CLR();
 23e:	68 94       	set
 240:	ff 24       	eor	r15, r15
 242:	f1 f8       	bld	r15, 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	83 ec       	ldi	r24, 0xC3	; 195
 248:	99 e0       	ldi	r25, 0x09	; 9
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x28>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x32>
 254:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(100);
		
		if(CHECK_DIP_SW_1()){
 256:	88 85       	ldd	r24, Y+8	; 0x08
 258:	82 fd       	sbrc	r24, 2
 25a:	02 c0       	rjmp	.+4      	; 0x260 <main+0x3e>
			STATUS_SET();
 25c:	ed 82       	std	Y+5, r14	; 0x05
 25e:	01 c0       	rjmp	.+2      	; 0x262 <main+0x40>
		}
		else {
			STATUS_CLR();
 260:	ee 82       	std	Y+6, r14	; 0x06
		}
		if(temperature > 3700){
 262:	05 37       	cpi	r16, 0x75	; 117
 264:	1e 40       	sbci	r17, 0x0E	; 14
 266:	10 f0       	brcs	.+4      	; 0x26c <main+0x4a>
			ERROR_SET();
 268:	fd 82       	std	Y+5, r15	; 0x05
 26a:	01 c0       	rjmp	.+2      	; 0x26e <main+0x4c>
		}
		else{
			ERROR_CLR();
 26c:	fe 82       	std	Y+6, r15	; 0x06
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	97 ea       	ldi	r25, 0xA7	; 167
 272:	21 e6       	ldi	r18, 0x61	; 97
 274:	81 50       	subi	r24, 0x01	; 1
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	20 40       	sbci	r18, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x52>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x5c>
 27e:	00 00       	nop
		_delay_ms(1000);
		
		//STATUS_SET();
		//ERROR_CLR();
		
		SendNumPC(temperature = sampleTempSensorVoltage());
 280:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_Z23sampleTempSensorVoltagev>
 284:	8c 01       	movw	r16, r24
 286:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_Z9SendNumPCj>
		SendStringPC((char *)"\n\r");
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e2       	ldi	r25, 0x20	; 32
 28e:	0e 94 4a 01 	call	0x294	; 0x294 <_Z12SendStringPCPc>

    }
 292:	d8 cf       	rjmp	.-80     	; 0x244 <main+0x22>

00000294 <_Z12SendStringPCPc>:

#include "usartROSS.h"

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 294:	fc 01       	movw	r30, r24
 296:	20 81       	ld	r18, Z
 298:	22 23       	and	r18, r18
 29a:	59 f0       	breq	.+22     	; 0x2b2 <_Z12SendStringPCPc+0x1e>
 29c:	dc 01       	movw	r26, r24
 29e:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
 2a0:	e0 ec       	ldi	r30, 0xC0	; 192
 2a2:	f8 e0       	ldi	r31, 0x08	; 8
 2a4:	91 81       	ldd	r25, Z+1	; 0x01
 2a6:	95 ff       	sbrs	r25, 5
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
 2aa:	20 83       	st	Z, r18

#include "usartROSS.h"

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 2ac:	2d 91       	ld	r18, X+
 2ae:	21 11       	cpse	r18, r1
 2b0:	f9 cf       	rjmp	.-14     	; 0x2a4 <_Z12SendStringPCPc+0x10>
 2b2:	08 95       	ret

000002b4 <_Z9SendNumPCj>:
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
		USART_PutChar(&COMP_USART, stufftosend[i]);
	}
}

void SendNumPC(uint16_t numToSend){
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	64 97       	sbiw	r28, 0x14	; 20
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2c2:	4a e0       	ldi	r20, 0x0A	; 10
 2c4:	be 01       	movw	r22, r28
 2c6:	6f 5f       	subi	r22, 0xFF	; 255
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	0e 94 88 01 	call	0x310	; 0x310 <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
 2ce:	ce 01       	movw	r24, r28
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	0e 94 4a 01 	call	0x294	; 0x294 <_Z12SendStringPCPc>
}
 2d6:	64 96       	adiw	r28, 0x14	; 20
 2d8:	cd bf       	out	0x3d, r28	; 61
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <_Z14configureUSARTv>:

void configureUSART(void){
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
 2e2:	e0 e4       	ldi	r30, 0x40	; 64
 2e4:	f6 e0       	ldi	r31, 0x06	; 6
 2e6:	80 e8       	ldi	r24, 0x80	; 128
 2e8:	81 83       	std	Z+1, r24	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
 2ea:	80 e4       	ldi	r24, 0x40	; 64
 2ec:	82 83       	std	Z+2, r24	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
 2ee:	86 85       	ldd	r24, Z+14	; 0x0e
 2f0:	80 61       	ori	r24, 0x10	; 16
 2f2:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 2f4:	e0 ec       	ldi	r30, 0xC0	; 192
 2f6:	f8 e0       	ldi	r31, 0x08	; 8
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	84 83       	std	Z+4, r24	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
 2fc:	82 e2       	ldi	r24, 0x22	; 34
 2fe:	86 83       	std	Z+6, r24	; 0x06
 300:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
 302:	83 81       	ldd	r24, Z+3	; 0x03
 304:	80 61       	ori	r24, 0x10	; 16
 306:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
 308:	83 81       	ldd	r24, Z+3	; 0x03
 30a:	88 60       	ori	r24, 0x08	; 8
 30c:	83 83       	std	Z+3, r24	; 0x03
 30e:	08 95       	ret

00000310 <__itoa_ncheck>:
 310:	bb 27       	eor	r27, r27
 312:	4a 30       	cpi	r20, 0x0A	; 10
 314:	31 f4       	brne	.+12     	; 0x322 <__itoa_ncheck+0x12>
 316:	99 23       	and	r25, r25
 318:	22 f4       	brpl	.+8      	; 0x322 <__itoa_ncheck+0x12>
 31a:	bd e2       	ldi	r27, 0x2D	; 45
 31c:	90 95       	com	r25
 31e:	81 95       	neg	r24
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	0c 94 94 01 	jmp	0x328	; 0x328 <__utoa_common>

00000326 <__utoa_ncheck>:
 326:	bb 27       	eor	r27, r27

00000328 <__utoa_common>:
 328:	fb 01       	movw	r30, r22
 32a:	55 27       	eor	r21, r21
 32c:	aa 27       	eor	r26, r26
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	aa 1f       	adc	r26, r26
 334:	a4 17       	cp	r26, r20
 336:	10 f0       	brcs	.+4      	; 0x33c <__utoa_common+0x14>
 338:	a4 1b       	sub	r26, r20
 33a:	83 95       	inc	r24
 33c:	50 51       	subi	r21, 0x10	; 16
 33e:	b9 f7       	brne	.-18     	; 0x32e <__utoa_common+0x6>
 340:	a0 5d       	subi	r26, 0xD0	; 208
 342:	aa 33       	cpi	r26, 0x3A	; 58
 344:	08 f0       	brcs	.+2      	; 0x348 <__utoa_common+0x20>
 346:	a9 5d       	subi	r26, 0xD9	; 217
 348:	a1 93       	st	Z+, r26
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	79 f7       	brne	.-34     	; 0x32c <__utoa_common+0x4>
 34e:	b1 11       	cpse	r27, r1
 350:	b1 93       	st	Z+, r27
 352:	11 92       	st	Z+, r1
 354:	cb 01       	movw	r24, r22
 356:	0c 94 ad 01 	jmp	0x35a	; 0x35a <strrev>

0000035a <strrev>:
 35a:	dc 01       	movw	r26, r24
 35c:	fc 01       	movw	r30, r24
 35e:	67 2f       	mov	r22, r23
 360:	71 91       	ld	r23, Z+
 362:	77 23       	and	r23, r23
 364:	e1 f7       	brne	.-8      	; 0x35e <strrev+0x4>
 366:	32 97       	sbiw	r30, 0x02	; 2
 368:	04 c0       	rjmp	.+8      	; 0x372 <strrev+0x18>
 36a:	7c 91       	ld	r23, X
 36c:	6d 93       	st	X+, r22
 36e:	70 83       	st	Z, r23
 370:	62 91       	ld	r22, -Z
 372:	ae 17       	cp	r26, r30
 374:	bf 07       	cpc	r27, r31
 376:	c8 f3       	brcs	.-14     	; 0x36a <strrev+0x10>
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
