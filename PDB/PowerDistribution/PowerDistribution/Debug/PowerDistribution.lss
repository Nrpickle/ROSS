
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000186c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00802000  0000186c  00001900  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008020be  008020be  000019be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004461  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f5  00000000  00000000  00005fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b1  00000000  00000000  000068e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00007094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022f0  00000000  00000000  00007484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009fc  00000000  00000000  00009774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000a170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_7>
      20:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_8>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_12>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_18>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_30>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_35>
      90:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_36>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_38>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	cd bf       	out	0x3d, r28	; 61
      b4:	df e2       	ldi	r29, 0x2F	; 47
      b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
      b8:	10 e2       	ldi	r17, 0x20	; 32
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b0 e2       	ldi	r27, 0x20	; 32
      be:	ec e6       	ldi	r30, 0x6C	; 108
      c0:	f8 e1       	ldi	r31, 0x18	; 24
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	ae 3b       	cpi	r26, 0xBE	; 190
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	20 e2       	ldi	r18, 0x20	; 32
      d0:	ae eb       	ldi	r26, 0xBE	; 190
      d2:	b0 e2       	ldi	r27, 0x20	; 32
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a8 3d       	cpi	r26, 0xD8	; 216
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <main>
      e2:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
      ea:	e0 e5       	ldi	r30, 0x50	; 80
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	8b e4       	ldi	r24, 0x4B	; 75
      f0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
      f2:	80 81       	ld	r24, Z
      f4:	88 60       	ori	r24, 0x08	; 8
      f6:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
      f8:	81 81       	ldd	r24, Z+1	; 0x01
      fa:	83 fd       	sbrc	r24, 3
      fc:	09 c0       	rjmp	.+18     	; 0x110 <_Z27configureExternalOscillatorv+0x26>
      fe:	a0 e4       	ldi	r26, 0x40	; 64
     100:	b6 e0       	ldi	r27, 0x06	; 6
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	15 96       	adiw	r26, 0x05	; 5
     106:	9c 93       	st	X, r25
     108:	15 97       	sbiw	r26, 0x05	; 5
     10a:	81 81       	ldd	r24, Z+1	; 0x01
     10c:	83 ff       	sbrs	r24, 3
     10e:	fa cf       	rjmp	.-12     	; 0x104 <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
     116:	88 ed       	ldi	r24, 0xD8	; 216
     118:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
     11a:	e0 e5       	ldi	r30, 0x50	; 80
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	88 ec       	ldi	r24, 0xC8	; 200
     120:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
     122:	80 81       	ld	r24, Z
     124:	80 61       	ori	r24, 0x10	; 16
     126:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	84 fd       	sbrc	r24, 4
     12c:	09 c0       	rjmp	.+18     	; 0x140 <_Z27configureExternalOscillatorv+0x56>
     12e:	a0 e4       	ldi	r26, 0x40	; 64
     130:	b6 e0       	ldi	r27, 0x06	; 6
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	15 96       	adiw	r26, 0x05	; 5
     136:	9c 93       	st	X, r25
     138:	15 97       	sbiw	r26, 0x05	; 5
     13a:	81 81       	ldd	r24, Z+1	; 0x01
     13c:	84 ff       	sbrs	r24, 4
     13e:	fa cf       	rjmp	.-12     	; 0x134 <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
     146:	88 ed       	ldi	r24, 0xD8	; 216
     148:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
     14a:	e0 e4       	ldi	r30, 0x40	; 64
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
     150:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	80 83       	st	Z, r24
     156:	08 95       	ret

00000158 <_Z11configureIOv>:
	
	
}

void configureIO(void){
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
     15c:	e0 e4       	ldi	r30, 0x40	; 64
     15e:	f6 e0       	ldi	r31, 0x06	; 6
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = PIN0_bm;
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	91 83       	std	Z+1, r25	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
     168:	20 e2       	ldi	r18, 0x20	; 32
     16a:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
     16c:	44 e0       	ldi	r20, 0x04	; 4
     16e:	42 83       	std	Z+2, r20	; 0x02
	PORTC.DIRCLR = PIN3_bm;
     170:	38 e0       	ldi	r19, 0x08	; 8
     172:	32 83       	std	Z+2, r19	; 0x02
	
	//Set pullups on the setting switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
     174:	38 e1       	ldi	r19, 0x18	; 24
     176:	32 8b       	std	Z+18, r19	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
     178:	33 8b       	std	Z+19, r19	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
     17a:	c0 e0       	ldi	r28, 0x00	; 0
     17c:	d6 e0       	ldi	r29, 0x06	; 6
     17e:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
     180:	8a 83       	std	Y+2, r24	; 0x02
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
     182:	a0 e6       	ldi	r26, 0x60	; 96
     184:	b6 e0       	ldi	r27, 0x06	; 6
     186:	12 96       	adiw	r26, 0x02	; 2
     188:	9c 93       	st	X, r25
     18a:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN1_bm;  //Voltage Sense - Electronics Battery
     18c:	12 96       	adiw	r26, 0x02	; 2
     18e:	8c 93       	st	X, r24
     190:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN2_bm;  //Voltage Sense - Rear Battery
     192:	12 96       	adiw	r26, 0x02	; 2
     194:	4c 93       	st	X, r20
     196:	12 97       	sbiw	r26, 0x02	; 2

	//Set the Current Sense Fault detect pin to be an input
	PORTC.DIRCLR = PIN4_bm;
     198:	30 e1       	ldi	r19, 0x10	; 16
     19a:	32 83       	std	Z+2, r19	; 0x02
	
	//Setup the RSSI input
	PORTA.DIRCLR = PIN2_bm;				//Set the RSSI pin to be an input
     19c:	4a 83       	std	Y+2, r20	; 0x02
	
	//Setup the steering signal I/O
	PORTD.DIRCLR = PIN4_bm;  //Set the STEER_SIG_3v3 pin as an input
     19e:	12 96       	adiw	r26, 0x02	; 2
     1a0:	3c 93       	st	X, r19
     1a2:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRSET = PIN5_bm;	 //Set the STEER_SIG_3v3_PROCESSED pin to be an output
     1a4:	11 96       	adiw	r26, 0x01	; 1
     1a6:	2c 93       	st	X, r18
     1a8:	11 97       	sbiw	r26, 0x01	; 1

	//Setup steering control PWM interrupts
	PORTD.INTCTRL  = PMIC_MEDLVLEN_bm;	//Set PORTC's interrupt to be medium level
     1aa:	19 96       	adiw	r26, 0x09	; 9
     1ac:	8c 93       	st	X, r24
     1ae:	19 97       	sbiw	r26, 0x09	; 9
	PORTD.INTMASK  = PIN4_bm;			//Configure the PWM input pin as an interrupt
     1b0:	1a 96       	adiw	r26, 0x0a	; 10
     1b2:	3c 93       	st	X, r19
     1b4:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;  //Init the pin as a rising edge interrupt only
     1b6:	54 96       	adiw	r26, 0x14	; 20
     1b8:	9c 93       	st	X, r25
     1ba:	54 97       	sbiw	r26, 0x14	; 20
	
	//Initialize output values
	STATUS_CLR();
     1bc:	96 83       	std	Z+6, r25	; 0x06
	ERROR_CLR();
     1be:	86 83       	std	Z+6, r24	; 0x06
	
	REAR_RELAY_CLR();
     1c0:	26 83       	std	Z+6, r18	; 0x06
	
	STEER_SIG_CLR();	
     1c2:	16 96       	adiw	r26, 0x06	; 6
     1c4:	2c 93       	st	X, r18
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <__vector_35>:
if timer has overflown, then we missed the appropriate edge, throw out our data
If timer is good, calculate PWM high time
Store in global variable

*/
ISR(PORTD_INT_vect){
     1cc:	1f 92       	push	r1
     1ce:	0f 92       	push	r0
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	0f 92       	push	r0
     1d4:	11 24       	eor	r1, r1
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
	PORTD.INTFLAGS = PIN4_bm;
     1da:	80 e1       	ldi	r24, 0x10	; 16
     1dc:	80 93 6c 06 	sts	0x066C, r24

	
	if(PWMMeasuringStatus == NOT_MEASURING){  //We encountered the first part of the wave
     1e0:	80 91 00 20 	lds	r24, 0x2000
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	81 f4       	brne	.+32     	; 0x208 <__vector_35+0x3c>
		TCC5.CNT = 0;	//Start counting
     1e8:	10 92 60 08 	sts	0x0860, r1
     1ec:	10 92 61 08 	sts	0x0861, r1
		PWMMeasuringStatus = MEASURING;
     1f0:	10 92 00 20 	sts	0x2000, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f4:	87 ec       	ldi	r24, 0xC7	; 199
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <__vector_35+0x2c>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <__vector_35+0x32>
     1fe:	00 00       	nop
		
		_delay_us(25);  //Delay ~6-7 clock cycles
		
		PORTD.PIN4CTRL = PORT_ISC_FALLING_gc; //Set the interrupt to wait for a falling wave (end of signal)
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 74 06 	sts	0x0674, r24
     206:	0f c0       	rjmp	.+30     	; 0x226 <__vector_35+0x5a>
	}
	else { //We finished encountering the wave (process the data)
		steeringPWMPeriod = TCC5.CNT * 2;
     208:	80 91 60 08 	lds	r24, 0x0860
     20c:	90 91 61 08 	lds	r25, 0x0861
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	80 93 be 20 	sts	0x20BE, r24
     218:	90 93 bf 20 	sts	0x20BF, r25
		PWMMeasuringStatus = NOT_MEASURING;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 00 20 	sts	0x2000, r24
		
		PORTD.PIN4CTRL = PORT_ISC_RISING_gc; 
     222:	80 93 74 06 	sts	0x0674, r24
	}
	
}
     226:	9f 91       	pop	r25
     228:	8f 91       	pop	r24
     22a:	0f 90       	pop	r0
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	0f 90       	pop	r0
     230:	1f 90       	pop	r1
     232:	18 95       	reti

00000234 <__vector_30>:

//This function will be called on the edges of the RSSI signal 
//*CURRENTLY DISABLED*
ISR(PORTA_INT_vect){
     234:	1f 92       	push	r1
     236:	0f 92       	push	r0
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	0f 92       	push	r0
     23c:	11 24       	eor	r1, r1
     23e:	8f 93       	push	r24
     240:	9f 93       	push	r25
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
	cli();
     246:	f8 94       	cli
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
     248:	84 e0       	ldi	r24, 0x04	; 4
     24a:	80 93 0c 06 	sts	0x060C, r24
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
     24e:	80 91 cf 20 	lds	r24, 0x20CF
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	61 f4       	brne	.+24     	; 0x26e <__vector_30+0x3a>
     256:	80 91 08 06 	lds	r24, 0x0608
     25a:	82 fd       	sbrc	r24, 2
     25c:	0b c0       	rjmp	.+22     	; 0x274 <__vector_30+0x40>
     25e:	1f c0       	rjmp	.+62     	; 0x29e <__vector_30+0x6a>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     260:	80 91 08 06 	lds	r24, 0x0608
     264:	82 ff       	sbrs	r24, 2
     266:	0d c0       	rjmp	.+26     	; 0x282 <__vector_30+0x4e>
     268:	1a c0       	rjmp	.+52     	; 0x29e <__vector_30+0x6a>
		ERROR_SET();
	}
	
	
	//_delay_us(200);
	sei();
     26a:	78 94       	sei
     26c:	1c c0       	rjmp	.+56     	; 0x2a6 <__vector_30+0x72>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     26e:	88 23       	and	r24, r24
     270:	b9 f3       	breq	.-18     	; 0x260 <__vector_30+0x2c>
     272:	15 c0       	rjmp	.+42     	; 0x29e <__vector_30+0x6a>
	cli();
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
		RTC.CNT = 0;		//We want to start counting the counter now
     274:	10 92 08 04 	sts	0x0408, r1
     278:	10 92 09 04 	sts	0x0409, r1
		RSSI.measuring = MEASURING;
     27c:	10 92 cf 20 	sts	0x20CF, r1
     280:	f4 cf       	rjmp	.-24     	; 0x26a <__vector_30+0x36>
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
		RSSI.countDifference = RTC.CNT;
     282:	80 91 08 04 	lds	r24, 0x0408
     286:	90 91 09 04 	lds	r25, 0x0409
     28a:	ee ec       	ldi	r30, 0xCE	; 206
     28c:	f0 e2       	ldi	r31, 0x20	; 32
     28e:	84 83       	std	Z+4, r24	; 0x04
     290:	95 83       	std	Z+5, r25	; 0x05
		
		RSSI.sampleCount++;
     292:	86 81       	ldd	r24, Z+6	; 0x06
     294:	97 81       	ldd	r25, Z+7	; 0x07
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	86 83       	std	Z+6, r24	; 0x06
     29a:	97 83       	std	Z+7, r25	; 0x07
     29c:	e6 cf       	rjmp	.-52     	; 0x26a <__vector_30+0x36>
	}
	else {
		ERROR_SET();
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	80 93 45 06 	sts	0x0645, r24
     2a4:	e2 cf       	rjmp	.-60     	; 0x26a <__vector_30+0x36>
	}
	
	
	//_delay_us(200);
	sei();
}
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <_Z21configureTimerCounterv>:
1S    = 0x7A12

*/
void configureTimerCounter(){
	//Configure the accurate reporting timer
	TCC4.CTRLA = TC45_CLKSEL_DIV1024_gc;	//Configure a 1024 prescaler (we want very broad timing here, exact precision isn't required)
     2b8:	e0 e0       	ldi	r30, 0x00	; 0
     2ba:	f8 e0       	ldi	r31, 0x08	; 8
     2bc:	87 e0       	ldi	r24, 0x07	; 7
     2be:	80 83       	st	Z, r24
	TCC4.PER = TC_1024_500MS;               //500mS delay
     2c0:	89 e0       	ldi	r24, 0x09	; 9
     2c2:	9d e3       	ldi	r25, 0x3D	; 61
     2c4:	86 a3       	std	Z+38, r24	; 0x26
     2c6:	97 a3       	std	Z+39, r25	; 0x27
											//Default delay value. Reference pre-calculated table up above for more information
	TCC4.CTRLB = TC45_WGMODE_NORMAL_gc;		//Configure the timer for Normal mode operation
     2c8:	11 82       	std	Z+1, r1	; 0x01
	TCC4.INTCTRLA = TC45_OVFINTLVL_LO_gc;	//Set a low priority overflow interrupt
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	86 83       	std	Z+6, r24	; 0x06

	//Configure the PWM sense module
	//Input capture described on (168)
	TCC5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     2ce:	e0 e4       	ldi	r30, 0x40	; 64
     2d0:	f8 e0       	ldi	r31, 0x08	; 8
     2d2:	85 e0       	ldi	r24, 0x05	; 5
     2d4:	80 83       	st	Z, r24
	TCC5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     2d6:	11 82       	std	Z+1, r1	; 0x01
	TCC5.PER   = 12000;						//This is set to be 20% longer than the 20mS cycle should be
     2d8:	20 ee       	ldi	r18, 0xE0	; 224
     2da:	3e e2       	ldi	r19, 0x2E	; 46
     2dc:	26 a3       	std	Z+38, r18	; 0x26
     2de:	37 a3       	std	Z+39, r19	; 0x27
	
	//Is the following necessary?
	TCC5.INTCTRLA = TC45_OVFINTLVL_MED_gc;	//Set a medium priority overflow interrupt (we want the PWM generation to remain stable)
     2e0:	92 e0       	ldi	r25, 0x02	; 2
     2e2:	96 83       	std	Z+6, r25	; 0x06
											//as it will only take a few clock cycles compared to this interrupt
	
	//Configure the PWM generation module
	TCD5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     2e4:	e0 e4       	ldi	r30, 0x40	; 64
     2e6:	f9 e0       	ldi	r31, 0x09	; 9
     2e8:	80 83       	st	Z, r24
	TCD5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     2ea:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PER   = 10000;						//We want to establish a 50Hz control loop here (20ms period)
     2ec:	80 e1       	ldi	r24, 0x10	; 16
     2ee:	97 e2       	ldi	r25, 0x27	; 39
     2f0:	86 a3       	std	Z+38, r24	; 0x26
     2f2:	97 a3       	std	Z+39, r25	; 0x27
	TCD5.INTCTRLA = TC45_OVFINTLVL_HI_gc;	//Set a high priority overflow interrupt
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	86 83       	std	Z+6, r24	; 0x06
	TCD5.INTCTRLB = TC45_CCAINTLVL_HI_gc;   
     2f8:	87 83       	std	Z+7, r24	; 0x07
	
	TCD5.CCA = 950;		//Initial value for compare
     2fa:	86 eb       	ldi	r24, 0xB6	; 182
     2fc:	93 e0       	ldi	r25, 0x03	; 3
     2fe:	80 a7       	std	Z+40, r24	; 0x28
     300:	91 a7       	std	Z+41, r25	; 0x29
     302:	08 95       	ret

00000304 <__vector_18>:
}

//This triggers when a PWM signal hasn't been detected for the past ~24mS
ISR (TCC5_OVF_vect){
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
     312:	ef 93       	push	r30
     314:	ff 93       	push	r31
	TCC5.INTFLAGS |= 0b1;  //Reset interrupt flag
     316:	e0 e4       	ldi	r30, 0x40	; 64
     318:	f8 e0       	ldi	r31, 0x08	; 8
     31a:	84 85       	ldd	r24, Z+12	; 0x0c
     31c:	81 60       	ori	r24, 0x01	; 1
     31e:	84 87       	std	Z+12, r24	; 0x0c
	
	PWMMeasuringStatus = NOT_MEASURING;		//Reset the "NOT MEASURING" flag
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	80 93 00 20 	sts	0x2000, r24
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;	//Reconfigure the port to wait for a high pulse
     326:	80 93 74 06 	sts	0x0674, r24
	
	steeringPWMPeriod = 1500;				//Set the steering PWM period to a stable "standby position"
     32a:	8c ed       	ldi	r24, 0xDC	; 220
     32c:	95 e0       	ldi	r25, 0x05	; 5
     32e:	80 93 be 20 	sts	0x20BE, r24
     332:	90 93 bf 20 	sts	0x20BF, r25
}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <__vector_38>:
/*
Compare vector A for the PWM generation module
This situation ------\______

*/
ISR (TCD5_CCA_vect){
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	8f 93       	push	r24
	STEER_SIG_CLR();
     354:	80 e2       	ldi	r24, 0x20	; 32
     356:	80 93 66 06 	sts	0x0666, r24
	//STATUS_SET();
}
     35a:	8f 91       	pop	r24
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <__vector_36>:
This situation: _____/-----

*/


ISR (TCD5_OVF_vect){
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	8f 93       	push	r24
     372:	ef 93       	push	r30
     374:	ff 93       	push	r31
	STEER_SIG_SET();
     376:	80 e2       	ldi	r24, 0x20	; 32
     378:	80 93 65 06 	sts	0x0665, r24
	
	TCD5.INTFLAGS |= 0b1;
     37c:	e0 e4       	ldi	r30, 0x40	; 64
     37e:	f9 e0       	ldi	r31, 0x09	; 9
     380:	84 85       	ldd	r24, Z+12	; 0x0c
     382:	81 60       	ori	r24, 0x01	; 1
     384:	84 87       	std	Z+12, r24	; 0x0c
	
	TCD5.CNT = 0;
     386:	10 a2       	std	Z+32, r1	; 0x20
     388:	11 a2       	std	Z+33, r1	; 0x21
}
     38a:	ff 91       	pop	r31
     38c:	ef 91       	pop	r30
     38e:	8f 91       	pop	r24
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <__vector_12>:

//Handles compare vector for T/C 4
ISR (TCC4_OVF_vect){
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	2f 93       	push	r18
     3a6:	3f 93       	push	r19
     3a8:	4f 93       	push	r20
     3aa:	5f 93       	push	r21
     3ac:	6f 93       	push	r22
     3ae:	7f 93       	push	r23
     3b0:	8f 93       	push	r24
     3b2:	9f 93       	push	r25
     3b4:	af 93       	push	r26
     3b6:	ef 93       	push	r30
     3b8:	ff 93       	push	r31
	++longCounter;
     3ba:	20 91 c0 20 	lds	r18, 0x20C0
     3be:	30 91 c1 20 	lds	r19, 0x20C1
     3c2:	40 91 c2 20 	lds	r20, 0x20C2
     3c6:	50 91 c3 20 	lds	r21, 0x20C3
     3ca:	60 91 c4 20 	lds	r22, 0x20C4
     3ce:	70 91 c5 20 	lds	r23, 0x20C5
     3d2:	80 91 c6 20 	lds	r24, 0x20C6
     3d6:	90 91 c7 20 	lds	r25, 0x20C7
     3da:	a1 e0       	ldi	r26, 0x01	; 1
     3dc:	0e 94 21 09 	call	0x1242	; 0x1242 <__adddi3_s8>
     3e0:	20 93 c0 20 	sts	0x20C0, r18
     3e4:	30 93 c1 20 	sts	0x20C1, r19
     3e8:	40 93 c2 20 	sts	0x20C2, r20
     3ec:	50 93 c3 20 	sts	0x20C3, r21
     3f0:	60 93 c4 20 	sts	0x20C4, r22
     3f4:	70 93 c5 20 	sts	0x20C5, r23
     3f8:	80 93 c6 20 	sts	0x20C6, r24
     3fc:	90 93 c7 20 	sts	0x20C7, r25
	
	TCC4.INTFLAGS |= 0b1;  //Reset overflow interrupt
     400:	e0 e0       	ldi	r30, 0x00	; 0
     402:	f8 e0       	ldi	r31, 0x08	; 8
     404:	84 85       	ldd	r24, Z+12	; 0x0c
     406:	81 60       	ori	r24, 0x01	; 1
     408:	84 87       	std	Z+12, r24	; 0x0c
	
	broadcastStatus = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 c8 20 	sts	0x20C8, r24
}
     410:	ff 91       	pop	r31
     412:	ef 91       	pop	r30
     414:	af 91       	pop	r26
     416:	9f 91       	pop	r25
     418:	8f 91       	pop	r24
     41a:	7f 91       	pop	r23
     41c:	6f 91       	pop	r22
     41e:	5f 91       	pop	r21
     420:	4f 91       	pop	r20
     422:	3f 91       	pop	r19
     424:	2f 91       	pop	r18
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <_Z12configureRTCv>:

/*
The real time clock is configured to handle XTend RSSI Interpret
*/
void configureRTC(){
	RTC.CTRL = RTC_CORREN_bm | RTC_PRESCALER_DIV1_gc;		//Enable the RTC correction process, and the RTC itself with no prescaler
     430:	e0 e0       	ldi	r30, 0x00	; 0
     432:	f4 e0       	ldi	r31, 0x04	; 4
     434:	89 e0       	ldi	r24, 0x09	; 9
     436:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_COMPINTLVL_LO_gc | RTC_OVFINTLVL_LO_gc; //Enable the overflow and 
     438:	85 e0       	ldi	r24, 0x05	; 5
     43a:	82 83       	std	Z+2, r24	; 0x02
	
    OSC.CTRL |= OSC_RC32KEN_bm;								//Enable the 32.768kHz internal oscillator
     43c:	a0 e5       	ldi	r26, 0x50	; 80
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	8c 91       	ld	r24, X
     442:	84 60       	ori	r24, 0x04	; 4
     444:	8c 93       	st	X, r24
     446:	8f e7       	ldi	r24, 0x7F	; 127
     448:	9c e0       	ldi	r25, 0x0C	; 12
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <_Z12configureRTCv+0x1a>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <_Z12configureRTCv+0x20>
     450:	00 00       	nop
	
	_delay_us(400);											//Wait for the oscillator to stabalize.
	
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC32_gc;					//Set the RTC input as the 32.768kHz internal oscillator
     452:	a0 e4       	ldi	r26, 0x40	; 64
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	8c e0       	ldi	r24, 0x0C	; 12
     458:	13 96       	adiw	r26, 0x03	; 3
     45a:	8c 93       	st	X, r24
     45c:	13 97       	sbiw	r26, 0x03	; 3
	CLK.RTCCTRL |= CLK_RTCEN_bm;							//Enable the clock input
     45e:	13 96       	adiw	r26, 0x03	; 3
     460:	8c 91       	ld	r24, X
     462:	13 97       	sbiw	r26, 0x03	; 3
     464:	81 60       	ori	r24, 0x01	; 1
     466:	13 96       	adiw	r26, 0x03	; 3
     468:	8c 93       	st	X, r24
	
	//Testing setup code
	RTC.COMP = 16384; //~1 second? Assuming 32.768 KHz
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e4       	ldi	r25, 0x40	; 64
     46e:	84 87       	std	Z+12, r24	; 0x0c
     470:	95 87       	std	Z+13, r25	; 0x0d
	RTC.PER = 0xFF00;  //No tengo nuguien idea
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	9f ef       	ldi	r25, 0xFF	; 255
     476:	82 87       	std	Z+10, r24	; 0x0a
     478:	93 87       	std	Z+11, r25	; 0x0b
     47a:	08 95       	ret

0000047c <__vector_7>:

}

ISR(RTC_OVF_vect){
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
	
}
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <__vector_8>:

ISR(RTC_COMP_vect){
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	8f 93       	push	r24
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
	
	RTC.CNT = 0;
     4a0:	e0 e0       	ldi	r30, 0x00	; 0
     4a2:	f4 e0       	ldi	r31, 0x04	; 4
     4a4:	10 86       	std	Z+8, r1	; 0x08
     4a6:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTFLAGS = 0x02;
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	83 83       	std	Z+3, r24	; 0x03
	
	RSSI.countDifference = 0;
     4ac:	10 92 d2 20 	sts	0x20D2, r1
     4b0:	10 92 d3 20 	sts	0x20D3, r1
}
     4b4:	ff 91       	pop	r31
     4b6:	ef 91       	pop	r30
     4b8:	8f 91       	pop	r24
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <_Z12configureXCLv>:

void configureXCL(){
     4c4:	08 95       	ret

000004c6 <_Z19ReadCalibrationByteh>:
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     4c6:	aa ec       	ldi	r26, 0xCA	; 202
     4c8:	b1 e0       	ldi	r27, 0x01	; 1
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     4ce:	e8 2f       	mov	r30, r24
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     4d4:	1c 92       	st	X, r1

	return( result );
}
     4d6:	08 95       	ret

000004d8 <_Z13configureADCsv>:

#include "config.h"

extern RSSI_type RSSI;

void configureADCs(){
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
	// Batt Input Voltage
	// Halve Input
	//Set to single ended input
	//Set to 12-bit mode
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
     4dc:	c0 e0       	ldi	r28, 0x00	; 0
     4de:	d2 e0       	ldi	r29, 0x02	; 2
     4e0:	82 e1       	ldi	r24, 0x12	; 18
     4e2:	89 83       	std	Y+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
     4e4:	80 e2       	ldi	r24, 0x20	; 32
     4e6:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; //Disable events
     4e8:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
     4ea:	87 e0       	ldi	r24, 0x07	; 7
     4ec:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
     4ee:	80 e2       	ldi	r24, 0x20	; 32
     4f0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z19ReadCalibrationByteh>
     4f4:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
     4f6:	81 e2       	ldi	r24, 0x21	; 33
     4f8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z19ReadCalibrationByteh>
     4fc:	8d 87       	std	Y+13, r24	; 0x0d
     4fe:	8f e7       	ldi	r24, 0x7F	; 127
     500:	9c e0       	ldi	r25, 0x0C	; 12
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <_Z13configureADCsv+0x2a>
     506:	00 c0       	rjmp	.+0      	; 0x508 <_Z13configureADCsv+0x30>
     508:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	88 a3       	std	Y+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
     50e:	81 e4       	ldi	r24, 0x41	; 65
     510:	89 a3       	std	Y+33, r24	; 0x21
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
     512:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	88 83       	st	Y, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
	//ADCA.CTRLA |= ADC_CH8START_bm;
	*/	
}	
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <_Z23sampleTempSensorVoltagev>:

	
}

int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);//ADC_CH_MUXNEG0_bm);
     51e:	e0 e0       	ldi	r30, 0x00	; 0
     520:	f2 e0       	ldi	r31, 0x02	; 2
     522:	81 e4       	ldi	r24, 0x41	; 65
     524:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     526:	80 a1       	ldd	r24, Z+32	; 0x20
     528:	80 68       	ori	r24, 0x80	; 128
     52a:	80 a3       	std	Z+32, r24	; 0x20
     52c:	8f e7       	ldi	r24, 0x7F	; 127
     52e:	9c e0       	ldi	r25, 0x0C	; 12
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <_Z23sampleTempSensorVoltagev+0x12>
     534:	00 c0       	rjmp	.+0      	; 0x536 <_Z23sampleTempSensorVoltagev+0x18>
     536:	00 00       	nop
	
	_delay_us(400);
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 8)) != (1U << 8)); // (1U << n) where n is the adc channel, so zero for this one
	
	while(!(ADCA.INTFLAGS & (1 << 0)));
     538:	86 81       	ldd	r24, Z+6	; 0x06
     53a:	80 ff       	sbrs	r24, 0
     53c:	fd cf       	rjmp	.-6      	; 0x538 <_Z23sampleTempSensorVoltagev+0x1a>
	ADCA.INTFLAGS = (1 << 0);
     53e:	e0 e0       	ldi	r30, 0x00	; 0
     540:	f2 e0       	ldi	r31, 0x02	; 2
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     546:	84 a1       	ldd	r24, Z+36	; 0x24
     548:	95 a1       	ldd	r25, Z+37	; 0x25
}
     54a:	08 95       	ret

0000054c <_Z20sampleBatteryVoltagev>:

int16_t sampleBatteryVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN9_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for batt voltage sense
     54c:	e0 e0       	ldi	r30, 0x00	; 0
     54e:	f2 e0       	ldi	r31, 0x02	; 2
     550:	89 e4       	ldi	r24, 0x49	; 73
     552:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     554:	80 a1       	ldd	r24, Z+32	; 0x20
     556:	80 68       	ori	r24, 0x80	; 128
     558:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
	//ADCA.INTFLAGS = ((1U << 0) << ADC_CH0IF_bp);
	while(!(ADCA.INTFLAGS & (1 << 0)));
     55a:	86 81       	ldd	r24, Z+6	; 0x06
     55c:	80 ff       	sbrs	r24, 0
     55e:	fd cf       	rjmp	.-6      	; 0x55a <_Z20sampleBatteryVoltagev+0xe>
	ADCA.INTFLAGS = (1 << 0);
     560:	e0 e0       	ldi	r30, 0x00	; 0
     562:	f2 e0       	ldi	r31, 0x02	; 2
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     568:	84 a1       	ldd	r24, Z+36	; 0x24
     56a:	95 a1       	ldd	r25, Z+37	; 0x25
}
     56c:	08 95       	ret

0000056e <_Z18getEBoxTemperaturev>:

double getEBoxTemperature(){
     56e:	2f 92       	push	r2
     570:	3f 92       	push	r3
     572:	4f 92       	push	r4
     574:	5f 92       	push	r5
     576:	6f 92       	push	r6
     578:	7f 92       	push	r7
     57a:	8f 92       	push	r8
     57c:	9f 92       	push	r9
     57e:	af 92       	push	r10
     580:	bf 92       	push	r11
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	0f 2e       	mov	r0, r31
     594:	f4 e6       	ldi	r31, 0x64	; 100
     596:	6f 2e       	mov	r6, r31
     598:	71 2c       	mov	r7, r1
     59a:	f0 2d       	mov	r31, r0
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
     59c:	41 2c       	mov	r4, r1
     59e:	51 2c       	mov	r5, r1
     5a0:	81 2c       	mov	r8, r1
     5a2:	91 2c       	mov	r9, r1
     5a4:	d0 e0       	ldi	r29, 0x00	; 0
     5a6:	c0 e0       	ldi	r28, 0x00	; 0
     5a8:	21 2c       	mov	r2, r1
     5aa:	31 2c       	mov	r3, r1
	for(int i = 0; i < avgVal; ++i){
		sum += sampleTempSensorVoltage();
     5ac:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z23sampleTempSensorVoltagev>
     5b0:	b9 2e       	mov	r11, r25
     5b2:	a8 2e       	mov	r10, r24
     5b4:	19 2f       	mov	r17, r25
     5b6:	11 0f       	add	r17, r17
     5b8:	11 0b       	sbc	r17, r17
     5ba:	24 2d       	mov	r18, r4
     5bc:	35 2d       	mov	r19, r5
     5be:	48 2d       	mov	r20, r8
     5c0:	59 2d       	mov	r21, r9
     5c2:	6d 2f       	mov	r22, r29
     5c4:	7c 2f       	mov	r23, r28
     5c6:	82 2d       	mov	r24, r2
     5c8:	93 2d       	mov	r25, r3
     5ca:	c1 2e       	mov	r12, r17
     5cc:	d1 2e       	mov	r13, r17
     5ce:	e1 2e       	mov	r14, r17
     5d0:	f1 2e       	mov	r15, r17
     5d2:	01 2f       	mov	r16, r17
     5d4:	0e 94 18 09 	call	0x1230	; 0x1230 <__adddi3>
     5d8:	42 2e       	mov	r4, r18
     5da:	53 2e       	mov	r5, r19
     5dc:	84 2e       	mov	r8, r20
     5de:	95 2e       	mov	r9, r21
     5e0:	d6 2f       	mov	r29, r22
     5e2:	c7 2f       	mov	r28, r23
     5e4:	28 2e       	mov	r2, r24
     5e6:	39 2e       	mov	r3, r25
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	68 1a       	sub	r6, r24
     5ec:	71 08       	sbc	r7, r1
double getEBoxTemperature(){
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
	for(int i = 0; i < avgVal; ++i){
     5ee:	f1 f6       	brne	.-68     	; 0x5ac <_Z18getEBoxTemperaturev+0x3e>
		sum += sampleTempSensorVoltage();
	}
	temperature = sum / avgVal;
     5f0:	0f 2e       	mov	r0, r31
     5f2:	f4 e6       	ldi	r31, 0x64	; 100
     5f4:	af 2e       	mov	r10, r31
     5f6:	f0 2d       	mov	r31, r0
     5f8:	b1 2c       	mov	r11, r1
     5fa:	c1 2c       	mov	r12, r1
     5fc:	d1 2c       	mov	r13, r1
     5fe:	e1 2c       	mov	r14, r1
     600:	f1 2c       	mov	r15, r1
     602:	00 e0       	ldi	r16, 0x00	; 0
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	24 2d       	mov	r18, r4
     608:	35 2d       	mov	r19, r5
     60a:	48 2d       	mov	r20, r8
     60c:	59 2d       	mov	r21, r9
     60e:	6d 2f       	mov	r22, r29
     610:	7c 2f       	mov	r23, r28
     612:	82 2d       	mov	r24, r2
     614:	93 2d       	mov	r25, r3
     616:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivdi3>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     61a:	62 2f       	mov	r22, r18
     61c:	73 2f       	mov	r23, r19
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 3c 07 	call	0xe78	; 0xe78 <__floatunsisf>
     626:	29 e8       	ldi	r18, 0x89	; 137
     628:	3d e0       	ldi	r19, 0x0D	; 13
     62a:	4d e9       	ldi	r20, 0x9D	; 157
     62c:	5a e3       	ldi	r21, 0x3A	; 58
     62e:	0e 94 ca 07 	call	0xf94	; 0xf94 <__mulsf3>
     632:	24 e6       	ldi	r18, 0x64	; 100
     634:	37 e6       	ldi	r19, 0x67	; 103
     636:	49 e1       	ldi	r20, 0x19	; 25
     638:	5b e3       	ldi	r21, 0x3B	; 59
     63a:	0e 94 28 06 	call	0xc50	; 0xc50 <__addsf3>
	
	#ifdef TMP36
		temperatureFloat = 100.0 * temperatureVoltage - 50.0;
	#endif
	#ifdef TMP37
		temperatureFloat = 50.0 * temperatureVoltage;
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	48 e4       	ldi	r20, 0x48	; 72
     644:	52 e4       	ldi	r21, 0x42	; 66
     646:	0e 94 ca 07 	call	0xf94	; 0xf94 <__mulsf3>
	#endif
	
	return temperatureFloat;
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
     65a:	bf 90       	pop	r11
     65c:	af 90       	pop	r10
     65e:	9f 90       	pop	r9
     660:	8f 90       	pop	r8
     662:	7f 90       	pop	r7
     664:	6f 90       	pop	r6
     666:	5f 90       	pop	r5
     668:	4f 90       	pop	r4
     66a:	3f 90       	pop	r3
     66c:	2f 90       	pop	r2
     66e:	08 95       	ret

00000670 <_Z28getElectronicsBatteryVoltagev>:

double getElectronicsBatteryVoltage(){
     670:	cf 92       	push	r12
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	c2 e3       	ldi	r28, 0x32	; 50
     67e:	d0 e0       	ldi	r29, 0x00	; 0

	int avgVal = 50;
	uint32_t sum = 0;
     680:	c1 2c       	mov	r12, r1
     682:	d1 2c       	mov	r13, r1
     684:	76 01       	movw	r14, r12
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
     686:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z20sampleBatteryVoltagev>
     68a:	09 2e       	mov	r0, r25
     68c:	00 0c       	add	r0, r0
     68e:	aa 0b       	sbc	r26, r26
     690:	bb 0b       	sbc	r27, r27
     692:	c8 0e       	add	r12, r24
     694:	d9 1e       	adc	r13, r25
     696:	ea 1e       	adc	r14, r26
     698:	fb 1e       	adc	r15, r27
     69a:	21 97       	sbiw	r28, 0x01	; 1
double getElectronicsBatteryVoltage(){

	int avgVal = 50;
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
     69c:	a1 f7       	brne	.-24     	; 0x686 <_Z28getElectronicsBatteryVoltagev+0x16>
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
     69e:	c7 01       	movw	r24, r14
     6a0:	b6 01       	movw	r22, r12
     6a2:	22 e3       	ldi	r18, 0x32	; 50
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodsi4>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     6ae:	b9 01       	movw	r22, r18
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 3c 07 	call	0xe78	; 0xe78 <__floatunsisf>
     6b8:	29 e8       	ldi	r18, 0x89	; 137
     6ba:	3d e0       	ldi	r19, 0x0D	; 13
     6bc:	4d e9       	ldi	r20, 0x9D	; 157
     6be:	5a e3       	ldi	r21, 0x3A	; 58
     6c0:	0e 94 ca 07 	call	0xf94	; 0xf94 <__mulsf3>
     6c4:	24 e6       	ldi	r18, 0x64	; 100
     6c6:	37 e6       	ldi	r19, 0x67	; 103
     6c8:	49 e1       	ldi	r20, 0x19	; 25
     6ca:	5b e3       	ldi	r21, 0x3B	; 59
     6cc:	0e 94 28 06 	call	0xc50	; 0xc50 <__addsf3>
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
	double electronicsVoltage = ADCCountToVoltage(electronicsVoltageCount);
	double calculatedElectronicsVoltage =  (electronicsVoltage / .56) + (10.0 - .05);
     6d0:	29 e2       	ldi	r18, 0x29	; 41
     6d2:	3c e5       	ldi	r19, 0x5C	; 92
     6d4:	4f e0       	ldi	r20, 0x0F	; 15
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	0e 94 94 06 	call	0xd28	; 0xd28 <__divsf3>
     6dc:	23 e3       	ldi	r18, 0x33	; 51
     6de:	33 e3       	ldi	r19, 0x33	; 51
     6e0:	4f e1       	ldi	r20, 0x1F	; 31
     6e2:	51 e4       	ldi	r21, 0x41	; 65
     6e4:	0e 94 28 06 	call	0xc50	; 0xc50 <__addsf3>

	return calculatedElectronicsVoltage;
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	df 90       	pop	r13
     6f2:	cf 90       	pop	r12
     6f4:	08 95       	ret

000006f6 <main>:

#define REMOTE_START_CHECK 0x1
#define REMOTE_STOP_CHECK  0x2

int main(void)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <main+0x6>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <main+0x8>
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
	configureIO();
     702:	0e 94 ac 00 	call	0x158	; 0x158 <_Z11configureIOv>
	configureExternalOscillator();
     706:	0e 94 75 00 	call	0xea	; 0xea <_Z27configureExternalOscillatorv>
	configureUSART();					//Set up for 57600 Baud
     70a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_Z14configureUSARTv>
	configureTimerCounter();
     70e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z21configureTimerCounterv>
	configureADCs();
     712:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z13configureADCsv>
	configureRTC();
     716:	0e 94 18 02 	call	0x430	; 0x430 <_Z12configureRTCv>
	configureXCL();
     71a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z12configureXCLv>
	
	LOW_LEVEL_INTERRUPTS_ENABLE();
     71e:	e0 ea       	ldi	r30, 0xA0	; 160
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	81 60       	ori	r24, 0x01	; 1
     726:	82 83       	std	Z+2, r24	; 0x02
	MED_LEVEL_INTERRUPTS_ENABLE();
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	82 60       	ori	r24, 0x02	; 2
     72c:	82 83       	std	Z+2, r24	; 0x02
	HIGH_LEVEL_INTERRUPTS_ENABLE();
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	84 60       	ori	r24, 0x04	; 4
     732:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable global interrupts
     734:	78 94       	sei
	
	uint8_t receivedUSARTData;
	
	RSSI.measuring = NOT_MEASURING;
     736:	ee ec       	ldi	r30, 0xCE	; 206
     738:	f0 e2       	ldi	r31, 0x20	; 32
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	81 83       	std	Z+1, r24	; 0x01
	RSSI.timeDifference = 0;
     73e:	12 82       	std	Z+2, r1	; 0x02
     740:	13 82       	std	Z+3, r1	; 0x03
	RSSI.sampleCount = 0;
     742:	16 82       	std	Z+6, r1	; 0x06
     744:	17 82       	std	Z+7, r1	; 0x07

	//Init string with basic documentation
	SendStringPC((char *)"#[INIT ROSS PDB]\n\r");
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	90 e2       	ldi	r25, 0x20	; 32
     74a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
	SendStringPC((char *)"#Firmware version ");
     74e:	86 e1       	ldi	r24, 0x16	; 22
     750:	90 e2       	ldi	r25, 0x20	; 32
     752:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
	SendStringPC((char *)FIRMWARE_VERSION_STR);
     756:	89 e2       	ldi	r24, 0x29	; 41
     758:	90 e2       	ldi	r25, 0x20	; 32
     75a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
	SendStringPC((char *)"\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr | XTend RSSI | \"Remote Input\" \n\r");
     75e:	8c e2       	ldi	r24, 0x2C	; 44
     760:	90 e2       	ldi	r25, 0x20	; 32
     762:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
    {

		_delay_ms(1);		

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     766:	00 ec       	ldi	r16, 0xC0	; 192
     768:	18 e0       	ldi	r17, 0x08	; 8
			}
			
			if(receivedUSARTData >= 71 && receivedUSARTData <= 87){		//Then we need to process a PWM override
				pixhawkOverride = 1;
				manualPWMOutput = receivedUSARTData * 50 - 2450;  //This will generate the correct output per https://goo.gl/7wYL6b
				if(CHECK_DIP_SW_2()){	//5 second update time
     76a:	0f 2e       	mov	r0, r31
     76c:	f0 e4       	ldi	r31, 0x40	; 64
     76e:	2f 2e       	mov	r2, r31
     770:	f6 e0       	ldi	r31, 0x06	; 6
     772:	3f 2e       	mov	r3, r31
     774:	f0 2d       	mov	r31, r0
						pixhawkOverrideCountdown = 10;
					else
						pixhawkOverrideCountdown = 50;
				}
				else {	//1 second update time
					if(TCC4.PER == TC_1024_100MS)
     776:	81 2c       	mov	r8, r1
     778:	68 94       	set
     77a:	99 24       	eor	r9, r9
     77c:	93 f8       	bld	r9, 3
						pixhawkOverrideCountdown = 10;
					else if(TCC4.PER == TC_1024_500MS)
						pixhawkOverrideCountdown = 2;
					else
						pixhawkOverrideCountdown = 10;
     77e:	0f 2e       	mov	r0, r31
     780:	fa e0       	ldi	r31, 0x0A	; 10
     782:	4f 2e       	mov	r4, r31
     784:	51 2c       	mov	r5, r1
     786:	f0 2d       	mov	r31, r0
				pixhawkOverride = 0;
				pixhawkOverrideCountdown = 0;
			}
			
			if(receivedUSARTData >= 71 && receivedUSARTData <= 87){		//Then we need to process a PWM override
				pixhawkOverride = 1;
     788:	cc 24       	eor	r12, r12
     78a:	c3 94       	inc	r12
				manualPWMOutput = receivedUSARTData * 50 - 2450;  //This will generate the correct output per https://goo.gl/7wYL6b
     78c:	0f 2e       	mov	r0, r31
     78e:	f2 e3       	ldi	r31, 0x32	; 50
     790:	bf 2e       	mov	r11, r31
     792:	f0 2d       	mov	r31, r0
			}
			
			if(receivedUSARTData == 'y')
				REAR_RELAY_SET();
			else if(receivedUSARTData == 'n')
				REAR_RELAY_CLR();
     794:	68 94       	set
     796:	77 24       	eor	r7, r7
     798:	75 f8       	bld	r7, 5
			if(receivedUSARTData == 10){	//Remote start requested
				remoteInput = REMOTE_START_CHECK;
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
			}	
			else if(receivedUSARTData == 20){	//Remote stop requested
				remoteInput = REMOTE_STOP_CHECK;
     79a:	68 94       	set
     79c:	66 24       	eor	r6, r6
     79e:	61 f8       	bld	r6, 1
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
     7a0:	0f 2e       	mov	r0, r31
     7a2:	f5 e0       	ldi	r31, 0x05	; 5
     7a4:	af 2e       	mov	r10, r31
     7a6:	f0 2d       	mov	r31, r0
		
		if(pixhawkOverride){	//If we do want to override the signal
			TC_PWM_SET(manualPWMOutput);	//Output the desired override PWM output
		}
		else {  //We don't want to overrride the signal
			TC_PWM_SET(steeringPWMPeriod);	//Output the Pixhawk PWM signal
     7a8:	0f 2e       	mov	r0, r31
     7aa:	f0 e4       	ldi	r31, 0x40	; 64
     7ac:	ef 2e       	mov	r14, r31
     7ae:	f9 e0       	ldi	r31, 0x09	; 9
     7b0:	ff 2e       	mov	r15, r31
     7b2:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b4:	8f e3       	ldi	r24, 0x3F	; 63
     7b6:	9f e1       	ldi	r25, 0x1F	; 31
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <main+0xc2>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <main+0xc8>
     7be:	00 00       	nop
    {

		_delay_ms(1);		

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     7c0:	f8 01       	movw	r30, r16
     7c2:	81 81       	ldd	r24, Z+1	; 0x01
     7c4:	88 23       	and	r24, r24
     7c6:	0c f0       	brlt	.+2      	; 0x7ca <main+0xd4>
     7c8:	6d c0       	rjmp	.+218    	; 0x8a4 <main+0x1ae>
			receivedUSARTData = USART_GetChar(&COMP_USART);
     7ca:	d0 80       	ld	r13, Z
			
			//Check if the inputted command is within the range to be
			//forwarded to the ON/OFF switch
			if(receivedUSARTData >= 30 && receivedUSARTData <= 65){
     7cc:	82 ee       	ldi	r24, 0xE2	; 226
     7ce:	8d 0d       	add	r24, r13
     7d0:	84 32       	cpi	r24, 0x24	; 36
     7d2:	18 f4       	brcc	.+6      	; 0x7da <main+0xe4>
				SendCharONOFF(receivedUSARTData);
     7d4:	8d 2d       	mov	r24, r13
     7d6:	0e 94 8a 05 	call	0xb14	; 0xb14 <_Z13SendCharONOFFc>
			}
			
			if(receivedUSARTData == 'y')
     7da:	f9 e7       	ldi	r31, 0x79	; 121
     7dc:	df 12       	cpse	r13, r31
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <main+0xf0>
				REAR_RELAY_SET();
     7e0:	f1 01       	movw	r30, r2
     7e2:	75 82       	std	Z+5, r7	; 0x05
     7e4:	10 c0       	rjmp	.+32     	; 0x806 <main+0x110>
			else if(receivedUSARTData == 'n')
     7e6:	fe e6       	ldi	r31, 0x6E	; 110
     7e8:	df 12       	cpse	r13, r31
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <main+0xfc>
				REAR_RELAY_CLR();
     7ec:	f1 01       	movw	r30, r2
     7ee:	76 82       	std	Z+6, r7	; 0x06
     7f0:	0a c0       	rjmp	.+20     	; 0x806 <main+0x110>
			
			if(receivedUSARTData == 70){  //Then we need to cancel our override (if it exists)
     7f2:	f6 e4       	ldi	r31, 0x46	; 70
     7f4:	df 12       	cpse	r13, r31
     7f6:	07 c0       	rjmp	.+14     	; 0x806 <main+0x110>
				pixhawkOverride = 0;
     7f8:	10 92 cb 20 	sts	0x20CB, r1
				pixhawkOverrideCountdown = 0;
     7fc:	10 92 c9 20 	sts	0x20C9, r1
     800:	10 92 ca 20 	sts	0x20CA, r1
     804:	4f c0       	rjmp	.+158    	; 0x8a4 <main+0x1ae>
			}
			
			if(receivedUSARTData >= 71 && receivedUSARTData <= 87){		//Then we need to process a PWM override
     806:	89 eb       	ldi	r24, 0xB9	; 185
     808:	8d 0d       	add	r24, r13
     80a:	81 31       	cpi	r24, 0x11	; 17
     80c:	08 f0       	brcs	.+2      	; 0x810 <main+0x11a>
     80e:	4a c0       	rjmp	.+148    	; 0x8a4 <main+0x1ae>
				pixhawkOverride = 1;
     810:	c0 92 cb 20 	sts	0x20CB, r12
				manualPWMOutput = receivedUSARTData * 50 - 2450;  //This will generate the correct output per https://goo.gl/7wYL6b
     814:	bd 9c       	mul	r11, r13
     816:	c0 01       	movw	r24, r0
     818:	11 24       	eor	r1, r1
     81a:	82 59       	subi	r24, 0x92	; 146
     81c:	99 40       	sbci	r25, 0x09	; 9
     81e:	80 93 01 20 	sts	0x2001, r24
     822:	90 93 02 20 	sts	0x2002, r25
				if(CHECK_DIP_SW_2()){	//5 second update time
     826:	f1 01       	movw	r30, r2
     828:	80 85       	ldd	r24, Z+8	; 0x08
     82a:	82 fd       	sbrc	r24, 2
     82c:	1f c0       	rjmp	.+62     	; 0x86c <main+0x176>
					if(TCC4.PER == TC_1024_100MS)
     82e:	f4 01       	movw	r30, r8
     830:	86 a1       	ldd	r24, Z+38	; 0x26
     832:	97 a1       	ldd	r25, Z+39	; 0x27
     834:	85 33       	cpi	r24, 0x35	; 53
     836:	9c 40       	sbci	r25, 0x0C	; 12
     838:	39 f4       	brne	.+14     	; 0x848 <main+0x152>
						pixhawkOverrideCountdown = 50;
     83a:	82 e3       	ldi	r24, 0x32	; 50
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	80 93 c9 20 	sts	0x20C9, r24
     842:	90 93 ca 20 	sts	0x20CA, r25
     846:	2e c0       	rjmp	.+92     	; 0x8a4 <main+0x1ae>
					else if(TCC4.PER == TC_1024_500MS)
     848:	f4 01       	movw	r30, r8
     84a:	86 a1       	ldd	r24, Z+38	; 0x26
     84c:	97 a1       	ldd	r25, Z+39	; 0x27
     84e:	89 30       	cpi	r24, 0x09	; 9
     850:	9d 43       	sbci	r25, 0x3D	; 61
     852:	29 f4       	brne	.+10     	; 0x85e <main+0x168>
						pixhawkOverrideCountdown = 10;
     854:	40 92 c9 20 	sts	0x20C9, r4
     858:	50 92 ca 20 	sts	0x20CA, r5
     85c:	23 c0       	rjmp	.+70     	; 0x8a4 <main+0x1ae>
					else
						pixhawkOverrideCountdown = 50;
     85e:	82 e3       	ldi	r24, 0x32	; 50
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 93 c9 20 	sts	0x20C9, r24
     866:	90 93 ca 20 	sts	0x20CA, r25
     86a:	1c c0       	rjmp	.+56     	; 0x8a4 <main+0x1ae>
				}
				else {	//1 second update time
					if(TCC4.PER == TC_1024_100MS)
     86c:	f4 01       	movw	r30, r8
     86e:	86 a1       	ldd	r24, Z+38	; 0x26
     870:	97 a1       	ldd	r25, Z+39	; 0x27
     872:	85 33       	cpi	r24, 0x35	; 53
     874:	9c 40       	sbci	r25, 0x0C	; 12
     876:	29 f4       	brne	.+10     	; 0x882 <main+0x18c>
						pixhawkOverrideCountdown = 10;
     878:	40 92 c9 20 	sts	0x20C9, r4
     87c:	50 92 ca 20 	sts	0x20CA, r5
     880:	11 c0       	rjmp	.+34     	; 0x8a4 <main+0x1ae>
					else if(TCC4.PER == TC_1024_500MS)
     882:	f4 01       	movw	r30, r8
     884:	86 a1       	ldd	r24, Z+38	; 0x26
     886:	97 a1       	ldd	r25, Z+39	; 0x27
     888:	89 30       	cpi	r24, 0x09	; 9
     88a:	9d 43       	sbci	r25, 0x3D	; 61
     88c:	39 f4       	brne	.+14     	; 0x89c <main+0x1a6>
						pixhawkOverrideCountdown = 2;
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	80 93 c9 20 	sts	0x20C9, r24
     896:	90 93 ca 20 	sts	0x20CA, r25
     89a:	04 c0       	rjmp	.+8      	; 0x8a4 <main+0x1ae>
					else
						pixhawkOverrideCountdown = 10;
     89c:	40 92 c9 20 	sts	0x20C9, r4
     8a0:	50 92 ca 20 	sts	0x20CA, r5
				}
			}
		}		
		
		//Check for commands from the ON/OFF Switch
		if(USART_IsRXComplete(&ONOFF_USART)){
     8a4:	80 91 c1 09 	lds	r24, 0x09C1
     8a8:	88 23       	and	r24, r24
     8aa:	84 f4       	brge	.+32     	; 0x8cc <main+0x1d6>
			receivedUSARTData = USART_GetChar(&ONOFF_USART);
     8ac:	e0 ec       	ldi	r30, 0xC0	; 192
     8ae:	f9 e0       	ldi	r31, 0x09	; 9
     8b0:	80 81       	ld	r24, Z
			//CHECK FOR IF START OR STOP COMMAND
			if(receivedUSARTData == 10){	//Remote start requested
     8b2:	8a 30       	cpi	r24, 0x0A	; 10
     8b4:	29 f4       	brne	.+10     	; 0x8c0 <main+0x1ca>
				remoteInput = REMOTE_START_CHECK;
     8b6:	c0 92 cd 20 	sts	0x20CD, r12
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
     8ba:	a0 92 cc 20 	sts	0x20CC, r10
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <main+0x1d6>
			}	
			else if(receivedUSARTData == 20){	//Remote stop requested
     8c0:	84 31       	cpi	r24, 0x14	; 20
     8c2:	21 f4       	brne	.+8      	; 0x8cc <main+0x1d6>
				remoteInput = REMOTE_STOP_CHECK;
     8c4:	60 92 cd 20 	sts	0x20CD, r6
				remoteOutputCountdown = STATIC_STATUS_OUTPUT_COUNT;
     8c8:	a0 92 cc 20 	sts	0x20CC, r10
			}
		}
		
		if(pixhawkOverride){	//If we do want to override the signal
     8cc:	80 91 cb 20 	lds	r24, 0x20CB
     8d0:	88 23       	and	r24, r24
     8d2:	a1 f0       	breq	.+40     	; 0x8fc <main+0x206>
			TC_PWM_SET(manualPWMOutput);	//Output the desired override PWM output
     8d4:	60 91 01 20 	lds	r22, 0x2001
     8d8:	70 91 02 20 	lds	r23, 0x2002
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 3c 07 	call	0xe78	; 0xe78 <__floatunsisf>
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	5f e3       	ldi	r21, 0x3F	; 63
     8ec:	0e 94 ca 07 	call	0xf94	; 0xf94 <__mulsf3>
     8f0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fixunssfsi>
     8f4:	f7 01       	movw	r30, r14
     8f6:	60 a7       	std	Z+40, r22	; 0x28
     8f8:	71 a7       	std	Z+41, r23	; 0x29
     8fa:	13 c0       	rjmp	.+38     	; 0x922 <main+0x22c>
		}
		else {  //We don't want to overrride the signal
			TC_PWM_SET(steeringPWMPeriod);	//Output the Pixhawk PWM signal
     8fc:	60 91 be 20 	lds	r22, 0x20BE
     900:	70 91 bf 20 	lds	r23, 0x20BF
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 3c 07 	call	0xe78	; 0xe78 <__floatunsisf>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	5f e3       	ldi	r21, 0x3F	; 63
     914:	0e 94 ca 07 	call	0xf94	; 0xf94 <__mulsf3>
     918:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fixunssfsi>
     91c:	f7 01       	movw	r30, r14
     91e:	60 a7       	std	Z+40, r22	; 0x28
     920:	71 a7       	std	Z+41, r23	; 0x29
		}
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
     922:	80 91 c8 20 	lds	r24, 0x20C8
     926:	88 23       	and	r24, r24
     928:	09 f4       	brne	.+2      	; 0x92c <main+0x236>
     92a:	44 cf       	rjmp	.-376    	; 0x7b4 <main+0xbe>
			broadcastStatus = 0;
     92c:	10 92 c8 20 	sts	0x20C8, r1
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     930:	f4 01       	movw	r30, r8
     932:	10 a2       	std	Z+32, r1	; 0x20
     934:	11 a2       	std	Z+33, r1	; 0x21
							//have a consistent report time. (We don't want to throw
							//out the accuracy of the TC)
			
			//Calculated desired output values
			double EBoxTemp = getEBoxTemperature();
     936:	0e 94 b7 02 	call	0x56e	; 0x56e <_Z18getEBoxTemperaturev>
     93a:	69 83       	std	Y+1, r22	; 0x01
     93c:	7a 83       	std	Y+2, r23	; 0x02
     93e:	8b 83       	std	Y+3, r24	; 0x03
     940:	9c 83       	std	Y+4, r25	; 0x04
			double electronicsBatteryVoltage = getElectronicsBatteryVoltage();
     942:	0e 94 38 03 	call	0x670	; 0x670 <_Z28getElectronicsBatteryVoltagev>
     946:	6b 01       	movw	r12, r22
     948:	7c 01       	movw	r14, r24
		}
    }
}

uint16_t inline getXTendRSSI(){
	RTC.CNT = 0;
     94a:	10 92 08 04 	sts	0x0408, r1
     94e:	10 92 09 04 	sts	0x0409, r1
				
	//Get RSSI from XTend
	RSSI.measuring = 0;
     952:	10 92 cf 20 	sts	0x20CF, r1
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     956:	e0 e0       	ldi	r30, 0x00	; 0
     958:	f4 e0       	ldi	r31, 0x04	; 4
		break;
					
	}while(READ_RSSI_PIN());
     95a:	a0 e0       	ldi	r26, 0x00	; 0
     95c:	b6 e0       	ldi	r27, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     95e:	8f e8       	ldi	r24, 0x8F	; 143
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <main+0x26c>
     966:	00 c0       	rjmp	.+0      	; 0x968 <main+0x272>
     968:	00 00       	nop
	//Get RSSI from XTend
	RSSI.measuring = 0;
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     96a:	80 85       	ldd	r24, Z+8	; 0x08
     96c:	91 85       	ldd	r25, Z+9	; 0x09
     96e:	82 31       	cpi	r24, 0x12	; 18
     970:	91 40       	sbci	r25, 0x01	; 1
     972:	28 f4       	brcc	.+10     	; 0x97e <main+0x288>
		break;
					
	}while(READ_RSSI_PIN());
     974:	18 96       	adiw	r26, 0x08	; 8
     976:	8c 91       	ld	r24, X
     978:	18 97       	sbiw	r26, 0x08	; 8
uint16_t inline getXTendRSSI(){
	RTC.CNT = 0;
				
	//Get RSSI from XTend
	RSSI.measuring = 0;
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
     97a:	82 fd       	sbrc	r24, 2
     97c:	f0 cf       	rjmp	.-32     	; 0x95e <main+0x268>
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     97e:	e0 e0       	ldi	r30, 0x00	; 0
     980:	f4 e0       	ldi	r31, 0x04	; 4
		break;
	}while(!READ_RSSI_PIN());
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b6 e0       	ldi	r27, 0x06	; 6
     986:	8f e8       	ldi	r24, 0x8F	; 143
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <main+0x294>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <main+0x29a>
     990:	00 00       	nop
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     992:	80 85       	ldd	r24, Z+8	; 0x08
     994:	91 85       	ldd	r25, Z+9	; 0x09
     996:	82 31       	cpi	r24, 0x12	; 18
     998:	91 40       	sbci	r25, 0x01	; 1
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <main+0x2b0>
		break;
	}while(!READ_RSSI_PIN());
     99c:	18 96       	adiw	r26, 0x08	; 8
     99e:	8c 91       	ld	r24, X
     9a0:	18 97       	sbiw	r26, 0x08	; 8
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
					
	}while(READ_RSSI_PIN());
				
	do{  //Wait until we have a "High" signal on the RSSI (wait for this ____/----)
     9a2:	82 ff       	sbrs	r24, 2
     9a4:	f0 cf       	rjmp	.-32     	; 0x986 <main+0x290>
					
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
	}while(!READ_RSSI_PIN());
				
	RTC.CNT = 0;  //Start counting
     9a6:	10 92 08 04 	sts	0x0408, r1
     9aa:	10 92 09 04 	sts	0x0409, r1
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     9ae:	e0 e0       	ldi	r30, 0x00	; 0
     9b0:	f4 e0       	ldi	r31, 0x04	; 4
		break;
	}while(READ_RSSI_PIN());
     9b2:	a0 e0       	ldi	r26, 0x00	; 0
     9b4:	b6 e0       	ldi	r27, 0x06	; 6
     9b6:	8f e8       	ldi	r24, 0x8F	; 143
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <main+0x2c4>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <main+0x2ca>
     9c0:	00 00       	nop
	RTC.CNT = 0;  //Start counting
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
		_delay_us(50);
					
		if(RTC.CNT > RSSI_MAX_COUNT)
     9c2:	80 85       	ldd	r24, Z+8	; 0x08
     9c4:	91 85       	ldd	r25, Z+9	; 0x09
     9c6:	82 31       	cpi	r24, 0x12	; 18
     9c8:	91 40       	sbci	r25, 0x01	; 1
     9ca:	28 f4       	brcc	.+10     	; 0x9d6 <main+0x2e0>
		break;
	}while(READ_RSSI_PIN());
     9cc:	18 96       	adiw	r26, 0x08	; 8
     9ce:	8c 91       	ld	r24, X
     9d0:	18 97       	sbiw	r26, 0x08	; 8
		break;
	}while(!READ_RSSI_PIN());
				
	RTC.CNT = 0;  //Start counting
				
	do{   //Wait until we have a "Low" signal on the RSSI (wait for this ----\_____)
     9d2:	82 fd       	sbrc	r24, 2
     9d4:	f0 cf       	rjmp	.-32     	; 0x9b6 <main+0x2c0>
					
		if(RTC.CNT > RSSI_MAX_COUNT)
		break;
	}while(READ_RSSI_PIN());
				
	RSSI.countDifference = RTC.CNT;
     9d6:	80 91 08 04 	lds	r24, 0x0408
     9da:	90 91 09 04 	lds	r25, 0x0409
     9de:	0f 2e       	mov	r0, r31
     9e0:	fe ec       	ldi	r31, 0xCE	; 206
     9e2:	af 2e       	mov	r10, r31
     9e4:	f0 e2       	ldi	r31, 0x20	; 32
     9e6:	bf 2e       	mov	r11, r31
     9e8:	f0 2d       	mov	r31, r0
     9ea:	f5 01       	movw	r30, r10
     9ec:	84 83       	std	Z+4, r24	; 0x04
     9ee:	95 83       	std	Z+5, r25	; 0x05
	
	RSSI.value = (100 * RSSI.countDifference) / RSSI_MAX_COUNT;
     9f0:	24 81       	ldd	r18, Z+4	; 0x04
     9f2:	35 81       	ldd	r19, Z+5	; 0x05
     9f4:	44 e6       	ldi	r20, 0x64	; 100
     9f6:	42 9f       	mul	r20, r18
     9f8:	c0 01       	movw	r24, r0
     9fa:	43 9f       	mul	r20, r19
     9fc:	90 0d       	add	r25, r0
     9fe:	11 24       	eor	r1, r1
     a00:	61 e1       	ldi	r22, 0x11	; 17
     a02:	71 e0       	ldi	r23, 0x01	; 1
     a04:	0e 94 83 08 	call	0x1106	; 0x1106 <__udivmodhi4>
     a08:	60 83       	st	Z, r22
				
	RSSI.sampleCount++;
     a0a:	86 81       	ldd	r24, Z+6	; 0x06
     a0c:	97 81       	ldd	r25, Z+7	; 0x07
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	86 83       	std	Z+6, r24	; 0x06
     a12:	97 83       	std	Z+7, r25	; 0x07
	
	return RSSI.countDifference;
     a14:	84 81       	ldd	r24, Z+4	; 0x04
     a16:	95 81       	ldd	r25, Z+5	; 0x05
			
			
			//Actually output the desired values
			//Not the most elegant code in the world, but it works...
			
			SendFloatPC(electronicsBatteryVoltage);	//Send the battery voltage
     a18:	c7 01       	movw	r24, r14
     a1a:	b6 01       	movw	r22, r12
     a1c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     a20:	83 eb       	ldi	r24, 0xB3	; 179
     a22:	90 e2       	ldi	r25, 0x20	; 32
     a24:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
			SendFloatPC(zero);		//Send the rear battery voltage
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	cb 01       	movw	r24, r22
     a2e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     a32:	83 eb       	ldi	r24, 0xB3	; 179
     a34:	90 e2       	ldi	r25, 0x20	; 32
     a36:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
			SendFloatPC(EBoxTemp);	//Send the EBox Temperature
     a3a:	69 81       	ldd	r22, Y+1	; 0x01
     a3c:	7a 81       	ldd	r23, Y+2	; 0x02
     a3e:	8b 81       	ldd	r24, Y+3	; 0x03
     a40:	9c 81       	ldd	r25, Y+4	; 0x04
     a42:	0e 94 a4 05 	call	0xb48	; 0xb48 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     a46:	83 eb       	ldi	r24, 0xB3	; 179
     a48:	90 e2       	ldi	r25, 0x20	; 32
     a4a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
			SendFloatPC(zero);		//Send 5v_SYS Curr
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	cb 01       	movw	r24, r22
     a54:	0e 94 a4 05 	call	0xb48	; 0xb48 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     a58:	83 eb       	ldi	r24, 0xB3	; 179
     a5a:	90 e2       	ldi	r25, 0x20	; 32
     a5c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
			SendFloatPC(zero);		//Send 5v_SYS Curr
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	cb 01       	movw	r24, r22
     a66:	0e 94 a4 05 	call	0xb48	; 0xb48 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     a6a:	83 eb       	ldi	r24, 0xB3	; 179
     a6c:	90 e2       	ldi	r25, 0x20	; 32
     a6e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
			SendNumPC(RSSI.value);
     a72:	f5 01       	movw	r30, r10
     a74:	80 81       	ld	r24, Z
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_Z9SendNumPCj>
			if(RSSI.value == 0)
     a7c:	f5 01       	movw	r30, r10
     a7e:	80 81       	ld	r24, Z
     a80:	81 11       	cpse	r24, r1
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <main+0x396>
				SendNumPC(zero);
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_Z9SendNumPCj>
			SendStringPC((char *)"|");
     a8c:	83 eb       	ldi	r24, 0xB3	; 179
     a8e:	90 e2       	ldi	r25, 0x20	; 32
     a90:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
			SendNumPC(remoteInput);
     a94:	80 91 cd 20 	lds	r24, 0x20CD
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_Z9SendNumPCj>
			//SendStringPC((char *)"|");
			
			debuggingOutput();
			
			//Newline
			SendStringPC((char *)"\n\r");
     a9e:	80 eb       	ldi	r24, 0xB0	; 176
     aa0:	90 e2       	ldi	r25, 0x20	; 32
     aa2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
	
			//Check if we have outputs that need to "expire"
			if(--remoteOutputCountdown == 0){
     aa6:	80 91 cc 20 	lds	r24, 0x20CC
     aaa:	81 50       	subi	r24, 0x01	; 1
     aac:	80 93 cc 20 	sts	0x20CC, r24
     ab0:	81 11       	cpse	r24, r1
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <main+0x3c2>
				remoteInput = 0;
     ab4:	10 92 cd 20 	sts	0x20CD, r1
			}
			
			//Check on the output overriding
			if(pixhawkOverrideCountdown){	//If we are still counting down, this also means that
     ab8:	80 91 c9 20 	lds	r24, 0x20C9
     abc:	90 91 ca 20 	lds	r25, 0x20CA
     ac0:	00 97       	sbiw	r24, 0x00	; 0
     ac2:	31 f0       	breq	.+12     	; 0xad0 <main+0x3da>
											//we are currently overriding our output
				--pixhawkOverrideCountdown;	//Decrement our counter
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	80 93 c9 20 	sts	0x20C9, r24
     aca:	90 93 ca 20 	sts	0x20CA, r25
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <main+0x3de>
			}
			else {	//If we are not counting down, then we want to ensure we are outputting the Pixhawk PWM
				pixhawkOverride = 0;
     ad0:	10 92 cb 20 	sts	0x20CB, r1
			}
	
			//Check the updating speed setting
			//The speed shouldn't be set lower than maybe 75mS due to RSSI processing time
			if(CHECK_DIP_SW_1()){
     ad4:	f1 01       	movw	r30, r2
     ad6:	80 85       	ldd	r24, Z+8	; 0x08
     ad8:	83 fd       	sbrc	r24, 3
     ada:	06 c0       	rjmp	.+12     	; 0xae8 <main+0x3f2>
				TCC4.PER = TC_1024_100MS;  //100mS delay
     adc:	85 e3       	ldi	r24, 0x35	; 53
     ade:	9c e0       	ldi	r25, 0x0C	; 12
     ae0:	f4 01       	movw	r30, r8
     ae2:	86 a3       	std	Z+38, r24	; 0x26
     ae4:	97 a3       	std	Z+39, r25	; 0x27
     ae6:	50 ce       	rjmp	.-864    	; 0x788 <main+0x92>
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
     ae8:	89 e0       	ldi	r24, 0x09	; 9
     aea:	9d e3       	ldi	r25, 0x3D	; 61
     aec:	f4 01       	movw	r30, r8
     aee:	86 a3       	std	Z+38, r24	; 0x26
     af0:	97 a3       	std	Z+39, r25	; 0x27
     af2:	4a ce       	rjmp	.-876    	; 0x788 <main+0x92>

00000af4 <_Z12SendStringPCPc>:
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     af4:	fc 01       	movw	r30, r24
     af6:	20 81       	ld	r18, Z
     af8:	22 23       	and	r18, r18
     afa:	59 f0       	breq	.+22     	; 0xb12 <_Z12SendStringPCPc+0x1e>
     afc:	dc 01       	movw	r26, r24
     afe:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
     b00:	e0 ec       	ldi	r30, 0xC0	; 192
     b02:	f8 e0       	ldi	r31, 0x08	; 8
     b04:	91 81       	ldd	r25, Z+1	; 0x01
     b06:	95 ff       	sbrs	r25, 5
     b08:	fd cf       	rjmp	.-6      	; 0xb04 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
     b0a:	20 83       	st	Z, r18
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     b0c:	2d 91       	ld	r18, X+
     b0e:	21 11       	cpse	r18, r1
     b10:	f9 cf       	rjmp	.-14     	; 0xb04 <_Z12SendStringPCPc+0x10>
     b12:	08 95       	ret

00000b14 <_Z13SendCharONOFFc>:
void SendCharPC(char charToSend){
	USART_PutChar(&COMP_USART, charToSend);
}

void SendCharONOFF(char charToSend){
	USART_PutChar(&ONOFF_USART, charToSend);	
     b14:	80 93 c0 09 	sts	0x09C0, r24
     b18:	08 95       	ret

00000b1a <_Z9SendNumPCj>:
}

void SendNumPC(uint16_t numToSend){
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	64 97       	sbiw	r28, 0x14	; 20
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b28:	4a e0       	ldi	r20, 0x0A	; 10
     b2a:	be 01       	movw	r22, r28
     b2c:	6f 5f       	subi	r22, 0xFF	; 255
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	0e 94 2d 09 	call	0x125a	; 0x125a <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
}
     b3c:	64 96       	adiw	r28, 0x14	; 20
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <_Z11SendFloatPCd>:

void SendFloatPC(double numToSend){
     b48:	8f 92       	push	r8
     b4a:	9f 92       	push	r9
     b4c:	af 92       	push	r10
     b4e:	bf 92       	push	r11
     b50:	cf 92       	push	r12
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	c4 56       	subi	r28, 0x64	; 100
     b66:	d1 09       	sbc	r29, r1
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	4b 01       	movw	r8, r22
     b6e:	5c 01       	movw	r10, r24
	char buffer[100];
	
	int d1 = numToSend;
     b70:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixsfsi>
     b74:	6b 01       	movw	r12, r22
     b76:	7c 01       	movw	r14, r24
	float f2 = numToSend - d1;
     b78:	07 2e       	mov	r0, r23
     b7a:	00 0c       	add	r0, r0
     b7c:	88 0b       	sbc	r24, r24
     b7e:	99 0b       	sbc	r25, r25
     b80:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__floatsisf>
     b84:	9b 01       	movw	r18, r22
     b86:	ac 01       	movw	r20, r24
     b88:	c5 01       	movw	r24, r10
     b8a:	b4 01       	movw	r22, r8
     b8c:	0e 94 27 06 	call	0xc4e	; 0xc4e <__subsf3>
	int d2 = trunc(f2 * 10000);
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e4       	ldi	r19, 0x40	; 64
     b94:	4c e1       	ldi	r20, 0x1C	; 28
     b96:	56 e4       	ldi	r21, 0x46	; 70
     b98:	0e 94 ca 07 	call	0xf94	; 0xf94 <__mulsf3>
     b9c:	0e 94 37 08 	call	0x106e	; 0x106e <trunc>
     ba0:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixsfsi>
	
	sprintf(buffer, "%d.%04d", d1, abs(d2));
     ba4:	9b 01       	movw	r18, r22
     ba6:	77 23       	and	r23, r23
     ba8:	24 f4       	brge	.+8      	; 0xbb2 <_Z11SendFloatPCd+0x6a>
     baa:	22 27       	eor	r18, r18
     bac:	33 27       	eor	r19, r19
     bae:	26 1b       	sub	r18, r22
     bb0:	37 0b       	sbc	r19, r23
     bb2:	3f 93       	push	r19
     bb4:	2f 93       	push	r18
     bb6:	df 92       	push	r13
     bb8:	cf 92       	push	r12
     bba:	85 eb       	ldi	r24, 0xB5	; 181
     bbc:	90 e2       	ldi	r25, 0x20	; 32
     bbe:	9f 93       	push	r25
     bc0:	8f 93       	push	r24
     bc2:	8e 01       	movw	r16, r28
     bc4:	0f 5f       	subi	r16, 0xFF	; 255
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
     bc8:	1f 93       	push	r17
     bca:	0f 93       	push	r16
     bcc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <sprintf>
	
	//sprintf(buffer, "%f", numToSend);
	SendStringPC(buffer);
     bd0:	c8 01       	movw	r24, r16
     bd2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z12SendStringPCPc>
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	de bf       	out	0x3e, r29	; 62
}
     bda:	cc 59       	subi	r28, 0x9C	; 156
     bdc:	df 4f       	sbci	r29, 0xFF	; 255
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	df 90       	pop	r13
     bf0:	cf 90       	pop	r12
     bf2:	bf 90       	pop	r11
     bf4:	af 90       	pop	r10
     bf6:	9f 90       	pop	r9
     bf8:	8f 90       	pop	r8
     bfa:	08 95       	ret

00000bfc <_Z14configureUSARTv>:

void configureUSART(void){
	//ENABLE COMUPTER USART
	
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
     bfc:	e0 e4       	ldi	r30, 0x40	; 64
     bfe:	f6 e0       	ldi	r31, 0x06	; 6
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	41 83       	std	Z+1, r20	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
     c04:	30 e4       	ldi	r19, 0x40	; 64
     c06:	32 83       	std	Z+2, r19	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
     c08:	86 85       	ldd	r24, Z+14	; 0x0e
     c0a:	80 61       	ori	r24, 0x10	; 16
     c0c:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     c0e:	e0 ec       	ldi	r30, 0xC0	; 192
     c10:	f8 e0       	ldi	r31, 0x08	; 8
     c12:	23 e0       	ldi	r18, 0x03	; 3
     c14:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
     c16:	92 e2       	ldi	r25, 0x22	; 34
     c18:	96 83       	std	Z+6, r25	; 0x06
     c1a:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
     c1c:	83 81       	ldd	r24, Z+3	; 0x03
     c1e:	80 61       	ori	r24, 0x10	; 16
     c20:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
     c22:	83 81       	ldd	r24, Z+3	; 0x03
     c24:	88 60       	ori	r24, 0x08	; 8
     c26:	83 83       	std	Z+3, r24	; 0x03
	
	//ENABLE ON/OFF SWITCH USART
	
	//Set TX (pin7) to be output
	PORTD.DIRSET = PIN7_bm;
     c28:	e0 e6       	ldi	r30, 0x60	; 96
     c2a:	f6 e0       	ldi	r31, 0x06	; 6
     c2c:	41 83       	std	Z+1, r20	; 0x01
	//Set RX (pin6) to be input
	PORTD.DIRCLR = PIN6_bm;
     c2e:	32 83       	std	Z+2, r19	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTD.REMAP |= (1 << 4);
     c30:	86 85       	ldd	r24, Z+14	; 0x0e
     c32:	80 61       	ori	r24, 0x10	; 16
     c34:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&ONOFF_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     c36:	e0 ec       	ldi	r30, 0xC0	; 192
     c38:	f9 e0       	ldi	r31, 0x09	; 9
     c3a:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&ONOFF_USART, 34, 0);
     c3c:	96 83       	std	Z+6, r25	; 0x06
     c3e:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&ONOFF_USART);
     c40:	83 81       	ldd	r24, Z+3	; 0x03
     c42:	80 61       	ori	r24, 0x10	; 16
     c44:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&ONOFF_USART);
     c46:	83 81       	ldd	r24, Z+3	; 0x03
     c48:	88 60       	ori	r24, 0x08	; 8
     c4a:	83 83       	std	Z+3, r24	; 0x03
     c4c:	08 95       	ret

00000c4e <__subsf3>:
     c4e:	50 58       	subi	r21, 0x80	; 128

00000c50 <__addsf3>:
     c50:	bb 27       	eor	r27, r27
     c52:	aa 27       	eor	r26, r26
     c54:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__addsf3x>
     c58:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_round>
     c5c:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscA>
     c60:	38 f0       	brcs	.+14     	; 0xc70 <__addsf3+0x20>
     c62:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_pscB>
     c66:	20 f0       	brcs	.+8      	; 0xc70 <__addsf3+0x20>
     c68:	39 f4       	brne	.+14     	; 0xc78 <__addsf3+0x28>
     c6a:	9f 3f       	cpi	r25, 0xFF	; 255
     c6c:	19 f4       	brne	.+6      	; 0xc74 <__addsf3+0x24>
     c6e:	26 f4       	brtc	.+8      	; 0xc78 <__addsf3+0x28>
     c70:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__fp_nan>
     c74:	0e f4       	brtc	.+2      	; 0xc78 <__addsf3+0x28>
     c76:	e0 95       	com	r30
     c78:	e7 fb       	bst	r30, 7
     c7a:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>

00000c7e <__addsf3x>:
     c7e:	e9 2f       	mov	r30, r25
     c80:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_split3>
     c84:	58 f3       	brcs	.-42     	; 0xc5c <__addsf3+0xc>
     c86:	ba 17       	cp	r27, r26
     c88:	62 07       	cpc	r22, r18
     c8a:	73 07       	cpc	r23, r19
     c8c:	84 07       	cpc	r24, r20
     c8e:	95 07       	cpc	r25, r21
     c90:	20 f0       	brcs	.+8      	; 0xc9a <__addsf3x+0x1c>
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__addsf3x+0x34>
     c94:	a6 f5       	brtc	.+104    	; 0xcfe <__addsf3x+0x80>
     c96:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_zero>
     c9a:	0e f4       	brtc	.+2      	; 0xc9e <__addsf3x+0x20>
     c9c:	e0 95       	com	r30
     c9e:	0b 2e       	mov	r0, r27
     ca0:	ba 2f       	mov	r27, r26
     ca2:	a0 2d       	mov	r26, r0
     ca4:	0b 01       	movw	r0, r22
     ca6:	b9 01       	movw	r22, r18
     ca8:	90 01       	movw	r18, r0
     caa:	0c 01       	movw	r0, r24
     cac:	ca 01       	movw	r24, r20
     cae:	a0 01       	movw	r20, r0
     cb0:	11 24       	eor	r1, r1
     cb2:	ff 27       	eor	r31, r31
     cb4:	59 1b       	sub	r21, r25
     cb6:	99 f0       	breq	.+38     	; 0xcde <__addsf3x+0x60>
     cb8:	59 3f       	cpi	r21, 0xF9	; 249
     cba:	50 f4       	brcc	.+20     	; 0xcd0 <__addsf3x+0x52>
     cbc:	50 3e       	cpi	r21, 0xE0	; 224
     cbe:	68 f1       	brcs	.+90     	; 0xd1a <__addsf3x+0x9c>
     cc0:	1a 16       	cp	r1, r26
     cc2:	f0 40       	sbci	r31, 0x00	; 0
     cc4:	a2 2f       	mov	r26, r18
     cc6:	23 2f       	mov	r18, r19
     cc8:	34 2f       	mov	r19, r20
     cca:	44 27       	eor	r20, r20
     ccc:	58 5f       	subi	r21, 0xF8	; 248
     cce:	f3 cf       	rjmp	.-26     	; 0xcb6 <__addsf3x+0x38>
     cd0:	46 95       	lsr	r20
     cd2:	37 95       	ror	r19
     cd4:	27 95       	ror	r18
     cd6:	a7 95       	ror	r26
     cd8:	f0 40       	sbci	r31, 0x00	; 0
     cda:	53 95       	inc	r21
     cdc:	c9 f7       	brne	.-14     	; 0xcd0 <__addsf3x+0x52>
     cde:	7e f4       	brtc	.+30     	; 0xcfe <__addsf3x+0x80>
     ce0:	1f 16       	cp	r1, r31
     ce2:	ba 0b       	sbc	r27, r26
     ce4:	62 0b       	sbc	r22, r18
     ce6:	73 0b       	sbc	r23, r19
     ce8:	84 0b       	sbc	r24, r20
     cea:	ba f0       	brmi	.+46     	; 0xd1a <__addsf3x+0x9c>
     cec:	91 50       	subi	r25, 0x01	; 1
     cee:	a1 f0       	breq	.+40     	; 0xd18 <__addsf3x+0x9a>
     cf0:	ff 0f       	add	r31, r31
     cf2:	bb 1f       	adc	r27, r27
     cf4:	66 1f       	adc	r22, r22
     cf6:	77 1f       	adc	r23, r23
     cf8:	88 1f       	adc	r24, r24
     cfa:	c2 f7       	brpl	.-16     	; 0xcec <__addsf3x+0x6e>
     cfc:	0e c0       	rjmp	.+28     	; 0xd1a <__addsf3x+0x9c>
     cfe:	ba 0f       	add	r27, r26
     d00:	62 1f       	adc	r22, r18
     d02:	73 1f       	adc	r23, r19
     d04:	84 1f       	adc	r24, r20
     d06:	48 f4       	brcc	.+18     	; 0xd1a <__addsf3x+0x9c>
     d08:	87 95       	ror	r24
     d0a:	77 95       	ror	r23
     d0c:	67 95       	ror	r22
     d0e:	b7 95       	ror	r27
     d10:	f7 95       	ror	r31
     d12:	9e 3f       	cpi	r25, 0xFE	; 254
     d14:	08 f0       	brcs	.+2      	; 0xd18 <__addsf3x+0x9a>
     d16:	b0 cf       	rjmp	.-160    	; 0xc78 <__addsf3+0x28>
     d18:	93 95       	inc	r25
     d1a:	88 0f       	add	r24, r24
     d1c:	08 f0       	brcs	.+2      	; 0xd20 <__addsf3x+0xa2>
     d1e:	99 27       	eor	r25, r25
     d20:	ee 0f       	add	r30, r30
     d22:	97 95       	ror	r25
     d24:	87 95       	ror	r24
     d26:	08 95       	ret

00000d28 <__divsf3>:
     d28:	0e 94 a8 06 	call	0xd50	; 0xd50 <__divsf3x>
     d2c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_round>
     d30:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_pscB>
     d34:	58 f0       	brcs	.+22     	; 0xd4c <__divsf3+0x24>
     d36:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscA>
     d3a:	40 f0       	brcs	.+16     	; 0xd4c <__divsf3+0x24>
     d3c:	29 f4       	brne	.+10     	; 0xd48 <__divsf3+0x20>
     d3e:	5f 3f       	cpi	r21, 0xFF	; 255
     d40:	29 f0       	breq	.+10     	; 0xd4c <__divsf3+0x24>
     d42:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>
     d46:	51 11       	cpse	r21, r1
     d48:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>
     d4c:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__fp_nan>

00000d50 <__divsf3x>:
     d50:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_split3>
     d54:	68 f3       	brcs	.-38     	; 0xd30 <__divsf3+0x8>

00000d56 <__divsf3_pse>:
     d56:	99 23       	and	r25, r25
     d58:	b1 f3       	breq	.-20     	; 0xd46 <__divsf3+0x1e>
     d5a:	55 23       	and	r21, r21
     d5c:	91 f3       	breq	.-28     	; 0xd42 <__divsf3+0x1a>
     d5e:	95 1b       	sub	r25, r21
     d60:	55 0b       	sbc	r21, r21
     d62:	bb 27       	eor	r27, r27
     d64:	aa 27       	eor	r26, r26
     d66:	62 17       	cp	r22, r18
     d68:	73 07       	cpc	r23, r19
     d6a:	84 07       	cpc	r24, r20
     d6c:	38 f0       	brcs	.+14     	; 0xd7c <__divsf3_pse+0x26>
     d6e:	9f 5f       	subi	r25, 0xFF	; 255
     d70:	5f 4f       	sbci	r21, 0xFF	; 255
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
     d76:	44 1f       	adc	r20, r20
     d78:	aa 1f       	adc	r26, r26
     d7a:	a9 f3       	breq	.-22     	; 0xd66 <__divsf3_pse+0x10>
     d7c:	35 d0       	rcall	.+106    	; 0xde8 <__divsf3_pse+0x92>
     d7e:	0e 2e       	mov	r0, r30
     d80:	3a f0       	brmi	.+14     	; 0xd90 <__divsf3_pse+0x3a>
     d82:	e0 e8       	ldi	r30, 0x80	; 128
     d84:	32 d0       	rcall	.+100    	; 0xdea <__divsf3_pse+0x94>
     d86:	91 50       	subi	r25, 0x01	; 1
     d88:	50 40       	sbci	r21, 0x00	; 0
     d8a:	e6 95       	lsr	r30
     d8c:	00 1c       	adc	r0, r0
     d8e:	ca f7       	brpl	.-14     	; 0xd82 <__divsf3_pse+0x2c>
     d90:	2b d0       	rcall	.+86     	; 0xde8 <__divsf3_pse+0x92>
     d92:	fe 2f       	mov	r31, r30
     d94:	29 d0       	rcall	.+82     	; 0xde8 <__divsf3_pse+0x92>
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	bb 1f       	adc	r27, r27
     d9e:	26 17       	cp	r18, r22
     da0:	37 07       	cpc	r19, r23
     da2:	48 07       	cpc	r20, r24
     da4:	ab 07       	cpc	r26, r27
     da6:	b0 e8       	ldi	r27, 0x80	; 128
     da8:	09 f0       	breq	.+2      	; 0xdac <__divsf3_pse+0x56>
     daa:	bb 0b       	sbc	r27, r27
     dac:	80 2d       	mov	r24, r0
     dae:	bf 01       	movw	r22, r30
     db0:	ff 27       	eor	r31, r31
     db2:	93 58       	subi	r25, 0x83	; 131
     db4:	5f 4f       	sbci	r21, 0xFF	; 255
     db6:	3a f0       	brmi	.+14     	; 0xdc6 <__divsf3_pse+0x70>
     db8:	9e 3f       	cpi	r25, 0xFE	; 254
     dba:	51 05       	cpc	r21, r1
     dbc:	78 f0       	brcs	.+30     	; 0xddc <__divsf3_pse+0x86>
     dbe:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>
     dc2:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>
     dc6:	5f 3f       	cpi	r21, 0xFF	; 255
     dc8:	e4 f3       	brlt	.-8      	; 0xdc2 <__divsf3_pse+0x6c>
     dca:	98 3e       	cpi	r25, 0xE8	; 232
     dcc:	d4 f3       	brlt	.-12     	; 0xdc2 <__divsf3_pse+0x6c>
     dce:	86 95       	lsr	r24
     dd0:	77 95       	ror	r23
     dd2:	67 95       	ror	r22
     dd4:	b7 95       	ror	r27
     dd6:	f7 95       	ror	r31
     dd8:	9f 5f       	subi	r25, 0xFF	; 255
     dda:	c9 f7       	brne	.-14     	; 0xdce <__divsf3_pse+0x78>
     ddc:	88 0f       	add	r24, r24
     dde:	91 1d       	adc	r25, r1
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret
     de8:	e1 e0       	ldi	r30, 0x01	; 1
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	bb 1f       	adc	r27, r27
     df2:	62 17       	cp	r22, r18
     df4:	73 07       	cpc	r23, r19
     df6:	84 07       	cpc	r24, r20
     df8:	ba 07       	cpc	r27, r26
     dfa:	20 f0       	brcs	.+8      	; 0xe04 <__divsf3_pse+0xae>
     dfc:	62 1b       	sub	r22, r18
     dfe:	73 0b       	sbc	r23, r19
     e00:	84 0b       	sbc	r24, r20
     e02:	ba 0b       	sbc	r27, r26
     e04:	ee 1f       	adc	r30, r30
     e06:	88 f7       	brcc	.-30     	; 0xdea <__divsf3_pse+0x94>
     e08:	e0 95       	com	r30
     e0a:	08 95       	ret

00000e0c <__fixsfsi>:
     e0c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fixunssfsi>
     e10:	68 94       	set
     e12:	b1 11       	cpse	r27, r1
     e14:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>
     e18:	08 95       	ret

00000e1a <__fixunssfsi>:
     e1a:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fp_splitA>
     e1e:	88 f0       	brcs	.+34     	; 0xe42 <__fixunssfsi+0x28>
     e20:	9f 57       	subi	r25, 0x7F	; 127
     e22:	98 f0       	brcs	.+38     	; 0xe4a <__fixunssfsi+0x30>
     e24:	b9 2f       	mov	r27, r25
     e26:	99 27       	eor	r25, r25
     e28:	b7 51       	subi	r27, 0x17	; 23
     e2a:	b0 f0       	brcs	.+44     	; 0xe58 <__fixunssfsi+0x3e>
     e2c:	e1 f0       	breq	.+56     	; 0xe66 <__fixunssfsi+0x4c>
     e2e:	66 0f       	add	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	88 1f       	adc	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	1a f0       	brmi	.+6      	; 0xe3e <__fixunssfsi+0x24>
     e38:	ba 95       	dec	r27
     e3a:	c9 f7       	brne	.-14     	; 0xe2e <__fixunssfsi+0x14>
     e3c:	14 c0       	rjmp	.+40     	; 0xe66 <__fixunssfsi+0x4c>
     e3e:	b1 30       	cpi	r27, 0x01	; 1
     e40:	91 f0       	breq	.+36     	; 0xe66 <__fixunssfsi+0x4c>
     e42:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_zero>
     e46:	b1 e0       	ldi	r27, 0x01	; 1
     e48:	08 95       	ret
     e4a:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_zero>
     e4e:	67 2f       	mov	r22, r23
     e50:	78 2f       	mov	r23, r24
     e52:	88 27       	eor	r24, r24
     e54:	b8 5f       	subi	r27, 0xF8	; 248
     e56:	39 f0       	breq	.+14     	; 0xe66 <__fixunssfsi+0x4c>
     e58:	b9 3f       	cpi	r27, 0xF9	; 249
     e5a:	cc f3       	brlt	.-14     	; 0xe4e <__fixunssfsi+0x34>
     e5c:	86 95       	lsr	r24
     e5e:	77 95       	ror	r23
     e60:	67 95       	ror	r22
     e62:	b3 95       	inc	r27
     e64:	d9 f7       	brne	.-10     	; 0xe5c <__fixunssfsi+0x42>
     e66:	3e f4       	brtc	.+14     	; 0xe76 <__fixunssfsi+0x5c>
     e68:	90 95       	com	r25
     e6a:	80 95       	com	r24
     e6c:	70 95       	com	r23
     e6e:	61 95       	neg	r22
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	8f 4f       	sbci	r24, 0xFF	; 255
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	08 95       	ret

00000e78 <__floatunsisf>:
     e78:	e8 94       	clt
     e7a:	09 c0       	rjmp	.+18     	; 0xe8e <__floatsisf+0x12>

00000e7c <__floatsisf>:
     e7c:	97 fb       	bst	r25, 7
     e7e:	3e f4       	brtc	.+14     	; 0xe8e <__floatsisf+0x12>
     e80:	90 95       	com	r25
     e82:	80 95       	com	r24
     e84:	70 95       	com	r23
     e86:	61 95       	neg	r22
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	8f 4f       	sbci	r24, 0xFF	; 255
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	99 23       	and	r25, r25
     e90:	a9 f0       	breq	.+42     	; 0xebc <__floatsisf+0x40>
     e92:	f9 2f       	mov	r31, r25
     e94:	96 e9       	ldi	r25, 0x96	; 150
     e96:	bb 27       	eor	r27, r27
     e98:	93 95       	inc	r25
     e9a:	f6 95       	lsr	r31
     e9c:	87 95       	ror	r24
     e9e:	77 95       	ror	r23
     ea0:	67 95       	ror	r22
     ea2:	b7 95       	ror	r27
     ea4:	f1 11       	cpse	r31, r1
     ea6:	f8 cf       	rjmp	.-16     	; 0xe98 <__floatsisf+0x1c>
     ea8:	fa f4       	brpl	.+62     	; 0xee8 <__floatsisf+0x6c>
     eaa:	bb 0f       	add	r27, r27
     eac:	11 f4       	brne	.+4      	; 0xeb2 <__floatsisf+0x36>
     eae:	60 ff       	sbrs	r22, 0
     eb0:	1b c0       	rjmp	.+54     	; 0xee8 <__floatsisf+0x6c>
     eb2:	6f 5f       	subi	r22, 0xFF	; 255
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	16 c0       	rjmp	.+44     	; 0xee8 <__floatsisf+0x6c>
     ebc:	88 23       	and	r24, r24
     ebe:	11 f0       	breq	.+4      	; 0xec4 <__floatsisf+0x48>
     ec0:	96 e9       	ldi	r25, 0x96	; 150
     ec2:	11 c0       	rjmp	.+34     	; 0xee6 <__floatsisf+0x6a>
     ec4:	77 23       	and	r23, r23
     ec6:	21 f0       	breq	.+8      	; 0xed0 <__floatsisf+0x54>
     ec8:	9e e8       	ldi	r25, 0x8E	; 142
     eca:	87 2f       	mov	r24, r23
     ecc:	76 2f       	mov	r23, r22
     ece:	05 c0       	rjmp	.+10     	; 0xeda <__floatsisf+0x5e>
     ed0:	66 23       	and	r22, r22
     ed2:	71 f0       	breq	.+28     	; 0xef0 <__floatsisf+0x74>
     ed4:	96 e8       	ldi	r25, 0x86	; 134
     ed6:	86 2f       	mov	r24, r22
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	2a f0       	brmi	.+10     	; 0xee8 <__floatsisf+0x6c>
     ede:	9a 95       	dec	r25
     ee0:	66 0f       	add	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	88 1f       	adc	r24, r24
     ee6:	da f7       	brpl	.-10     	; 0xede <__floatsisf+0x62>
     ee8:	88 0f       	add	r24, r24
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	97 f9       	bld	r25, 7
     ef0:	08 95       	ret

00000ef2 <__fp_inf>:
     ef2:	97 f9       	bld	r25, 7
     ef4:	9f 67       	ori	r25, 0x7F	; 127
     ef6:	80 e8       	ldi	r24, 0x80	; 128
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	08 95       	ret

00000efe <__fp_nan>:
     efe:	9f ef       	ldi	r25, 0xFF	; 255
     f00:	80 ec       	ldi	r24, 0xC0	; 192
     f02:	08 95       	ret

00000f04 <__fp_pscA>:
     f04:	00 24       	eor	r0, r0
     f06:	0a 94       	dec	r0
     f08:	16 16       	cp	r1, r22
     f0a:	17 06       	cpc	r1, r23
     f0c:	18 06       	cpc	r1, r24
     f0e:	09 06       	cpc	r0, r25
     f10:	08 95       	ret

00000f12 <__fp_pscB>:
     f12:	00 24       	eor	r0, r0
     f14:	0a 94       	dec	r0
     f16:	12 16       	cp	r1, r18
     f18:	13 06       	cpc	r1, r19
     f1a:	14 06       	cpc	r1, r20
     f1c:	05 06       	cpc	r0, r21
     f1e:	08 95       	ret

00000f20 <__fp_round>:
     f20:	09 2e       	mov	r0, r25
     f22:	03 94       	inc	r0
     f24:	00 0c       	add	r0, r0
     f26:	11 f4       	brne	.+4      	; 0xf2c <__fp_round+0xc>
     f28:	88 23       	and	r24, r24
     f2a:	52 f0       	brmi	.+20     	; 0xf40 <__fp_round+0x20>
     f2c:	bb 0f       	add	r27, r27
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fp_round+0x20>
     f30:	bf 2b       	or	r27, r31
     f32:	11 f4       	brne	.+4      	; 0xf38 <__fp_round+0x18>
     f34:	60 ff       	sbrs	r22, 0
     f36:	04 c0       	rjmp	.+8      	; 0xf40 <__fp_round+0x20>
     f38:	6f 5f       	subi	r22, 0xFF	; 255
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	08 95       	ret

00000f42 <__fp_split3>:
     f42:	57 fd       	sbrc	r21, 7
     f44:	90 58       	subi	r25, 0x80	; 128
     f46:	44 0f       	add	r20, r20
     f48:	55 1f       	adc	r21, r21
     f4a:	59 f0       	breq	.+22     	; 0xf62 <__fp_splitA+0x10>
     f4c:	5f 3f       	cpi	r21, 0xFF	; 255
     f4e:	71 f0       	breq	.+28     	; 0xf6c <__fp_splitA+0x1a>
     f50:	47 95       	ror	r20

00000f52 <__fp_splitA>:
     f52:	88 0f       	add	r24, r24
     f54:	97 fb       	bst	r25, 7
     f56:	99 1f       	adc	r25, r25
     f58:	61 f0       	breq	.+24     	; 0xf72 <__fp_splitA+0x20>
     f5a:	9f 3f       	cpi	r25, 0xFF	; 255
     f5c:	79 f0       	breq	.+30     	; 0xf7c <__fp_splitA+0x2a>
     f5e:	87 95       	ror	r24
     f60:	08 95       	ret
     f62:	12 16       	cp	r1, r18
     f64:	13 06       	cpc	r1, r19
     f66:	14 06       	cpc	r1, r20
     f68:	55 1f       	adc	r21, r21
     f6a:	f2 cf       	rjmp	.-28     	; 0xf50 <__fp_split3+0xe>
     f6c:	46 95       	lsr	r20
     f6e:	f1 df       	rcall	.-30     	; 0xf52 <__fp_splitA>
     f70:	08 c0       	rjmp	.+16     	; 0xf82 <__fp_splitA+0x30>
     f72:	16 16       	cp	r1, r22
     f74:	17 06       	cpc	r1, r23
     f76:	18 06       	cpc	r1, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	f1 cf       	rjmp	.-30     	; 0xf5e <__fp_splitA+0xc>
     f7c:	86 95       	lsr	r24
     f7e:	71 05       	cpc	r23, r1
     f80:	61 05       	cpc	r22, r1
     f82:	08 94       	sec
     f84:	08 95       	ret

00000f86 <__fp_zero>:
     f86:	e8 94       	clt

00000f88 <__fp_szero>:
     f88:	bb 27       	eor	r27, r27
     f8a:	66 27       	eor	r22, r22
     f8c:	77 27       	eor	r23, r23
     f8e:	cb 01       	movw	r24, r22
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret

00000f94 <__mulsf3>:
     f94:	0e 94 dd 07 	call	0xfba	; 0xfba <__mulsf3x>
     f98:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_round>
     f9c:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscA>
     fa0:	38 f0       	brcs	.+14     	; 0xfb0 <__mulsf3+0x1c>
     fa2:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_pscB>
     fa6:	20 f0       	brcs	.+8      	; 0xfb0 <__mulsf3+0x1c>
     fa8:	95 23       	and	r25, r21
     faa:	11 f0       	breq	.+4      	; 0xfb0 <__mulsf3+0x1c>
     fac:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>
     fb0:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__fp_nan>
     fb4:	11 24       	eor	r1, r1
     fb6:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>

00000fba <__mulsf3x>:
     fba:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_split3>
     fbe:	70 f3       	brcs	.-36     	; 0xf9c <__mulsf3+0x8>

00000fc0 <__mulsf3_pse>:
     fc0:	95 9f       	mul	r25, r21
     fc2:	c1 f3       	breq	.-16     	; 0xfb4 <__mulsf3+0x20>
     fc4:	95 0f       	add	r25, r21
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	55 1f       	adc	r21, r21
     fca:	62 9f       	mul	r22, r18
     fcc:	f0 01       	movw	r30, r0
     fce:	72 9f       	mul	r23, r18
     fd0:	bb 27       	eor	r27, r27
     fd2:	f0 0d       	add	r31, r0
     fd4:	b1 1d       	adc	r27, r1
     fd6:	63 9f       	mul	r22, r19
     fd8:	aa 27       	eor	r26, r26
     fda:	f0 0d       	add	r31, r0
     fdc:	b1 1d       	adc	r27, r1
     fde:	aa 1f       	adc	r26, r26
     fe0:	64 9f       	mul	r22, r20
     fe2:	66 27       	eor	r22, r22
     fe4:	b0 0d       	add	r27, r0
     fe6:	a1 1d       	adc	r26, r1
     fe8:	66 1f       	adc	r22, r22
     fea:	82 9f       	mul	r24, r18
     fec:	22 27       	eor	r18, r18
     fee:	b0 0d       	add	r27, r0
     ff0:	a1 1d       	adc	r26, r1
     ff2:	62 1f       	adc	r22, r18
     ff4:	73 9f       	mul	r23, r19
     ff6:	b0 0d       	add	r27, r0
     ff8:	a1 1d       	adc	r26, r1
     ffa:	62 1f       	adc	r22, r18
     ffc:	83 9f       	mul	r24, r19
     ffe:	a0 0d       	add	r26, r0
    1000:	61 1d       	adc	r22, r1
    1002:	22 1f       	adc	r18, r18
    1004:	74 9f       	mul	r23, r20
    1006:	33 27       	eor	r19, r19
    1008:	a0 0d       	add	r26, r0
    100a:	61 1d       	adc	r22, r1
    100c:	23 1f       	adc	r18, r19
    100e:	84 9f       	mul	r24, r20
    1010:	60 0d       	add	r22, r0
    1012:	21 1d       	adc	r18, r1
    1014:	82 2f       	mov	r24, r18
    1016:	76 2f       	mov	r23, r22
    1018:	6a 2f       	mov	r22, r26
    101a:	11 24       	eor	r1, r1
    101c:	9f 57       	subi	r25, 0x7F	; 127
    101e:	50 40       	sbci	r21, 0x00	; 0
    1020:	9a f0       	brmi	.+38     	; 0x1048 <__mulsf3_pse+0x88>
    1022:	f1 f0       	breq	.+60     	; 0x1060 <__mulsf3_pse+0xa0>
    1024:	88 23       	and	r24, r24
    1026:	4a f0       	brmi	.+18     	; 0x103a <__mulsf3_pse+0x7a>
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	bb 1f       	adc	r27, r27
    102e:	66 1f       	adc	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	91 50       	subi	r25, 0x01	; 1
    1036:	50 40       	sbci	r21, 0x00	; 0
    1038:	a9 f7       	brne	.-22     	; 0x1024 <__mulsf3_pse+0x64>
    103a:	9e 3f       	cpi	r25, 0xFE	; 254
    103c:	51 05       	cpc	r21, r1
    103e:	80 f0       	brcs	.+32     	; 0x1060 <__mulsf3_pse+0xa0>
    1040:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>
    1044:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>
    1048:	5f 3f       	cpi	r21, 0xFF	; 255
    104a:	e4 f3       	brlt	.-8      	; 0x1044 <__mulsf3_pse+0x84>
    104c:	98 3e       	cpi	r25, 0xE8	; 232
    104e:	d4 f3       	brlt	.-12     	; 0x1044 <__mulsf3_pse+0x84>
    1050:	86 95       	lsr	r24
    1052:	77 95       	ror	r23
    1054:	67 95       	ror	r22
    1056:	b7 95       	ror	r27
    1058:	f7 95       	ror	r31
    105a:	e7 95       	ror	r30
    105c:	9f 5f       	subi	r25, 0xFF	; 255
    105e:	c1 f7       	brne	.-16     	; 0x1050 <__mulsf3_pse+0x90>
    1060:	fe 2b       	or	r31, r30
    1062:	88 0f       	add	r24, r24
    1064:	91 1d       	adc	r25, r1
    1066:	96 95       	lsr	r25
    1068:	87 95       	ror	r24
    106a:	97 f9       	bld	r25, 7
    106c:	08 95       	ret

0000106e <trunc>:
    106e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fp_trunc>
    1072:	30 f0       	brcs	.+12     	; 0x1080 <trunc+0x12>
    1074:	9f 37       	cpi	r25, 0x7F	; 127
    1076:	10 f4       	brcc	.+4      	; 0x107c <trunc+0xe>
    1078:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_szero>
    107c:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_mintl>
    1080:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <__fp_mpack>

00001084 <__fp_mintl>:
    1084:	88 23       	and	r24, r24
    1086:	71 f4       	brne	.+28     	; 0x10a4 <__fp_mintl+0x20>
    1088:	77 23       	and	r23, r23
    108a:	21 f0       	breq	.+8      	; 0x1094 <__fp_mintl+0x10>
    108c:	98 50       	subi	r25, 0x08	; 8
    108e:	87 2b       	or	r24, r23
    1090:	76 2f       	mov	r23, r22
    1092:	07 c0       	rjmp	.+14     	; 0x10a2 <__fp_mintl+0x1e>
    1094:	66 23       	and	r22, r22
    1096:	11 f4       	brne	.+4      	; 0x109c <__fp_mintl+0x18>
    1098:	99 27       	eor	r25, r25
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <__fp_mintl+0x32>
    109c:	90 51       	subi	r25, 0x10	; 16
    109e:	86 2b       	or	r24, r22
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	2a f0       	brmi	.+10     	; 0x10b0 <__fp_mintl+0x2c>
    10a6:	9a 95       	dec	r25
    10a8:	66 0f       	add	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	da f7       	brpl	.-10     	; 0x10a6 <__fp_mintl+0x22>
    10b0:	88 0f       	add	r24, r24
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	97 f9       	bld	r25, 7
    10b8:	08 95       	ret

000010ba <__fp_mpack>:
    10ba:	9f 3f       	cpi	r25, 0xFF	; 255
    10bc:	31 f0       	breq	.+12     	; 0x10ca <__fp_mpack_finite+0xc>

000010be <__fp_mpack_finite>:
    10be:	91 50       	subi	r25, 0x01	; 1
    10c0:	20 f4       	brcc	.+8      	; 0x10ca <__fp_mpack_finite+0xc>
    10c2:	87 95       	ror	r24
    10c4:	77 95       	ror	r23
    10c6:	67 95       	ror	r22
    10c8:	b7 95       	ror	r27
    10ca:	88 0f       	add	r24, r24
    10cc:	91 1d       	adc	r25, r1
    10ce:	96 95       	lsr	r25
    10d0:	87 95       	ror	r24
    10d2:	97 f9       	bld	r25, 7
    10d4:	08 95       	ret

000010d6 <__fp_trunc>:
    10d6:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fp_splitA>
    10da:	a0 f0       	brcs	.+40     	; 0x1104 <__fp_trunc+0x2e>
    10dc:	be e7       	ldi	r27, 0x7E	; 126
    10de:	b9 17       	cp	r27, r25
    10e0:	88 f4       	brcc	.+34     	; 0x1104 <__fp_trunc+0x2e>
    10e2:	bb 27       	eor	r27, r27
    10e4:	9f 38       	cpi	r25, 0x8F	; 143
    10e6:	60 f4       	brcc	.+24     	; 0x1100 <__fp_trunc+0x2a>
    10e8:	16 16       	cp	r1, r22
    10ea:	b1 1d       	adc	r27, r1
    10ec:	67 2f       	mov	r22, r23
    10ee:	78 2f       	mov	r23, r24
    10f0:	88 27       	eor	r24, r24
    10f2:	98 5f       	subi	r25, 0xF8	; 248
    10f4:	f7 cf       	rjmp	.-18     	; 0x10e4 <__fp_trunc+0xe>
    10f6:	86 95       	lsr	r24
    10f8:	77 95       	ror	r23
    10fa:	67 95       	ror	r22
    10fc:	b1 1d       	adc	r27, r1
    10fe:	93 95       	inc	r25
    1100:	96 39       	cpi	r25, 0x96	; 150
    1102:	c8 f3       	brcs	.-14     	; 0x10f6 <__fp_trunc+0x20>
    1104:	08 95       	ret

00001106 <__udivmodhi4>:
    1106:	aa 1b       	sub	r26, r26
    1108:	bb 1b       	sub	r27, r27
    110a:	51 e1       	ldi	r21, 0x11	; 17
    110c:	07 c0       	rjmp	.+14     	; 0x111c <__udivmodhi4_ep>

0000110e <__udivmodhi4_loop>:
    110e:	aa 1f       	adc	r26, r26
    1110:	bb 1f       	adc	r27, r27
    1112:	a6 17       	cp	r26, r22
    1114:	b7 07       	cpc	r27, r23
    1116:	10 f0       	brcs	.+4      	; 0x111c <__udivmodhi4_ep>
    1118:	a6 1b       	sub	r26, r22
    111a:	b7 0b       	sbc	r27, r23

0000111c <__udivmodhi4_ep>:
    111c:	88 1f       	adc	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	5a 95       	dec	r21
    1122:	a9 f7       	brne	.-22     	; 0x110e <__udivmodhi4_loop>
    1124:	80 95       	com	r24
    1126:	90 95       	com	r25
    1128:	bc 01       	movw	r22, r24
    112a:	cd 01       	movw	r24, r26
    112c:	08 95       	ret

0000112e <__udivmodsi4>:
    112e:	a1 e2       	ldi	r26, 0x21	; 33
    1130:	1a 2e       	mov	r1, r26
    1132:	aa 1b       	sub	r26, r26
    1134:	bb 1b       	sub	r27, r27
    1136:	fd 01       	movw	r30, r26
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <__udivmodsi4_ep>

0000113a <__udivmodsi4_loop>:
    113a:	aa 1f       	adc	r26, r26
    113c:	bb 1f       	adc	r27, r27
    113e:	ee 1f       	adc	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	a2 17       	cp	r26, r18
    1144:	b3 07       	cpc	r27, r19
    1146:	e4 07       	cpc	r30, r20
    1148:	f5 07       	cpc	r31, r21
    114a:	20 f0       	brcs	.+8      	; 0x1154 <__udivmodsi4_ep>
    114c:	a2 1b       	sub	r26, r18
    114e:	b3 0b       	sbc	r27, r19
    1150:	e4 0b       	sbc	r30, r20
    1152:	f5 0b       	sbc	r31, r21

00001154 <__udivmodsi4_ep>:
    1154:	66 1f       	adc	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	88 1f       	adc	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	1a 94       	dec	r1
    115e:	69 f7       	brne	.-38     	; 0x113a <__udivmodsi4_loop>
    1160:	60 95       	com	r22
    1162:	70 95       	com	r23
    1164:	80 95       	com	r24
    1166:	90 95       	com	r25
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	bd 01       	movw	r22, r26
    116e:	cf 01       	movw	r24, r30
    1170:	08 95       	ret

00001172 <__umoddi3>:
    1172:	68 94       	set
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <__udivdi3_umoddi3>

00001176 <__udivdi3>:
    1176:	e8 94       	clt

00001178 <__udivdi3_umoddi3>:
    1178:	8f 92       	push	r8
    117a:	9f 92       	push	r9
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmod64>
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	9f 90       	pop	r9
    118a:	8f 90       	pop	r8
    118c:	08 95       	ret

0000118e <__udivmod64>:
    118e:	88 24       	eor	r8, r8
    1190:	99 24       	eor	r9, r9
    1192:	f4 01       	movw	r30, r8
    1194:	e4 01       	movw	r28, r8
    1196:	b0 e4       	ldi	r27, 0x40	; 64
    1198:	9f 93       	push	r25
    119a:	aa 27       	eor	r26, r26
    119c:	9a 15       	cp	r25, r10
    119e:	8b 04       	cpc	r8, r11
    11a0:	9c 04       	cpc	r9, r12
    11a2:	ed 05       	cpc	r30, r13
    11a4:	fe 05       	cpc	r31, r14
    11a6:	cf 05       	cpc	r28, r15
    11a8:	d0 07       	cpc	r29, r16
    11aa:	a1 07       	cpc	r26, r17
    11ac:	98 f4       	brcc	.+38     	; 0x11d4 <__udivmod64+0x46>
    11ae:	ad 2f       	mov	r26, r29
    11b0:	dc 2f       	mov	r29, r28
    11b2:	cf 2f       	mov	r28, r31
    11b4:	fe 2f       	mov	r31, r30
    11b6:	e9 2d       	mov	r30, r9
    11b8:	98 2c       	mov	r9, r8
    11ba:	89 2e       	mov	r8, r25
    11bc:	98 2f       	mov	r25, r24
    11be:	87 2f       	mov	r24, r23
    11c0:	76 2f       	mov	r23, r22
    11c2:	65 2f       	mov	r22, r21
    11c4:	54 2f       	mov	r21, r20
    11c6:	43 2f       	mov	r20, r19
    11c8:	32 2f       	mov	r19, r18
    11ca:	22 27       	eor	r18, r18
    11cc:	b8 50       	subi	r27, 0x08	; 8
    11ce:	31 f7       	brne	.-52     	; 0x119c <__udivmod64+0xe>
    11d0:	bf 91       	pop	r27
    11d2:	27 c0       	rjmp	.+78     	; 0x1222 <__udivmod64+0x94>
    11d4:	1b 2e       	mov	r1, r27
    11d6:	bf 91       	pop	r27
    11d8:	bb 27       	eor	r27, r27
    11da:	22 0f       	add	r18, r18
    11dc:	33 1f       	adc	r19, r19
    11de:	44 1f       	adc	r20, r20
    11e0:	55 1f       	adc	r21, r21
    11e2:	66 1f       	adc	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	88 1f       	adc	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	88 1c       	adc	r8, r8
    11ec:	99 1c       	adc	r9, r9
    11ee:	ee 1f       	adc	r30, r30
    11f0:	ff 1f       	adc	r31, r31
    11f2:	cc 1f       	adc	r28, r28
    11f4:	dd 1f       	adc	r29, r29
    11f6:	aa 1f       	adc	r26, r26
    11f8:	bb 1f       	adc	r27, r27
    11fa:	8a 14       	cp	r8, r10
    11fc:	9b 04       	cpc	r9, r11
    11fe:	ec 05       	cpc	r30, r12
    1200:	fd 05       	cpc	r31, r13
    1202:	ce 05       	cpc	r28, r14
    1204:	df 05       	cpc	r29, r15
    1206:	a0 07       	cpc	r26, r16
    1208:	b1 07       	cpc	r27, r17
    120a:	48 f0       	brcs	.+18     	; 0x121e <__udivmod64+0x90>
    120c:	8a 18       	sub	r8, r10
    120e:	9b 08       	sbc	r9, r11
    1210:	ec 09       	sbc	r30, r12
    1212:	fd 09       	sbc	r31, r13
    1214:	ce 09       	sbc	r28, r14
    1216:	df 09       	sbc	r29, r15
    1218:	a0 0b       	sbc	r26, r16
    121a:	b1 0b       	sbc	r27, r17
    121c:	21 60       	ori	r18, 0x01	; 1
    121e:	1a 94       	dec	r1
    1220:	e1 f6       	brne	.-72     	; 0x11da <__udivmod64+0x4c>
    1222:	2e f4       	brtc	.+10     	; 0x122e <__udivmod64+0xa0>
    1224:	94 01       	movw	r18, r8
    1226:	af 01       	movw	r20, r30
    1228:	be 01       	movw	r22, r28
    122a:	cd 01       	movw	r24, r26
    122c:	00 0c       	add	r0, r0
    122e:	08 95       	ret

00001230 <__adddi3>:
    1230:	2a 0d       	add	r18, r10
    1232:	3b 1d       	adc	r19, r11
    1234:	4c 1d       	adc	r20, r12
    1236:	5d 1d       	adc	r21, r13
    1238:	6e 1d       	adc	r22, r14
    123a:	7f 1d       	adc	r23, r15
    123c:	80 1f       	adc	r24, r16
    123e:	91 1f       	adc	r25, r17
    1240:	08 95       	ret

00001242 <__adddi3_s8>:
    1242:	00 24       	eor	r0, r0
    1244:	a7 fd       	sbrc	r26, 7
    1246:	00 94       	com	r0
    1248:	2a 0f       	add	r18, r26
    124a:	30 1d       	adc	r19, r0
    124c:	40 1d       	adc	r20, r0
    124e:	50 1d       	adc	r21, r0
    1250:	60 1d       	adc	r22, r0
    1252:	70 1d       	adc	r23, r0
    1254:	80 1d       	adc	r24, r0
    1256:	90 1d       	adc	r25, r0
    1258:	08 95       	ret

0000125a <__itoa_ncheck>:
    125a:	bb 27       	eor	r27, r27
    125c:	4a 30       	cpi	r20, 0x0A	; 10
    125e:	31 f4       	brne	.+12     	; 0x126c <__itoa_ncheck+0x12>
    1260:	99 23       	and	r25, r25
    1262:	22 f4       	brpl	.+8      	; 0x126c <__itoa_ncheck+0x12>
    1264:	bd e2       	ldi	r27, 0x2D	; 45
    1266:	90 95       	com	r25
    1268:	81 95       	neg	r24
    126a:	9f 4f       	sbci	r25, 0xFF	; 255
    126c:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__utoa_common>

00001270 <__utoa_ncheck>:
    1270:	bb 27       	eor	r27, r27

00001272 <__utoa_common>:
    1272:	fb 01       	movw	r30, r22
    1274:	55 27       	eor	r21, r21
    1276:	aa 27       	eor	r26, r26
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	aa 1f       	adc	r26, r26
    127e:	a4 17       	cp	r26, r20
    1280:	10 f0       	brcs	.+4      	; 0x1286 <__utoa_common+0x14>
    1282:	a4 1b       	sub	r26, r20
    1284:	83 95       	inc	r24
    1286:	50 51       	subi	r21, 0x10	; 16
    1288:	b9 f7       	brne	.-18     	; 0x1278 <__utoa_common+0x6>
    128a:	a0 5d       	subi	r26, 0xD0	; 208
    128c:	aa 33       	cpi	r26, 0x3A	; 58
    128e:	08 f0       	brcs	.+2      	; 0x1292 <__utoa_common+0x20>
    1290:	a9 5d       	subi	r26, 0xD9	; 217
    1292:	a1 93       	st	Z+, r26
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	79 f7       	brne	.-34     	; 0x1276 <__utoa_common+0x4>
    1298:	b1 11       	cpse	r27, r1
    129a:	b1 93       	st	Z+, r27
    129c:	11 92       	st	Z+, r1
    129e:	cb 01       	movw	r24, r22
    12a0:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <strrev>

000012a4 <sprintf>:
    12a4:	ae e0       	ldi	r26, 0x0E	; 14
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e8 e5       	ldi	r30, 0x58	; 88
    12aa:	f9 e0       	ldi	r31, 0x09	; 9
    12ac:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__prologue_saves__+0x1c>
    12b0:	0d 89       	ldd	r16, Y+21	; 0x15
    12b2:	1e 89       	ldd	r17, Y+22	; 0x16
    12b4:	86 e0       	ldi	r24, 0x06	; 6
    12b6:	8c 83       	std	Y+4, r24	; 0x04
    12b8:	09 83       	std	Y+1, r16	; 0x01
    12ba:	1a 83       	std	Y+2, r17	; 0x02
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	9f e7       	ldi	r25, 0x7F	; 127
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	ae 01       	movw	r20, r28
    12c6:	47 5e       	subi	r20, 0xE7	; 231
    12c8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ca:	6f 89       	ldd	r22, Y+23	; 0x17
    12cc:	78 8d       	ldd	r23, Y+24	; 0x18
    12ce:	ce 01       	movw	r24, r28
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	0e 94 75 09 	call	0x12ea	; 0x12ea <vfprintf>
    12d6:	2f 81       	ldd	r18, Y+7	; 0x07
    12d8:	38 85       	ldd	r19, Y+8	; 0x08
    12da:	f8 01       	movw	r30, r16
    12dc:	e2 0f       	add	r30, r18
    12de:	f3 1f       	adc	r31, r19
    12e0:	10 82       	st	Z, r1
    12e2:	2e 96       	adiw	r28, 0x0e	; 14
    12e4:	e4 e0       	ldi	r30, 0x04	; 4
    12e6:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__epilogue_restores__+0x1c>

000012ea <vfprintf>:
    12ea:	ac e0       	ldi	r26, 0x0C	; 12
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e7       	ldi	r30, 0x7B	; 123
    12f0:	f9 e0       	ldi	r31, 0x09	; 9
    12f2:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__prologue_saves__>
    12f6:	7c 01       	movw	r14, r24
    12f8:	6b 01       	movw	r12, r22
    12fa:	8a 01       	movw	r16, r20
    12fc:	fc 01       	movw	r30, r24
    12fe:	16 82       	std	Z+6, r1	; 0x06
    1300:	17 82       	std	Z+7, r1	; 0x07
    1302:	83 81       	ldd	r24, Z+3	; 0x03
    1304:	81 ff       	sbrs	r24, 1
    1306:	bd c1       	rjmp	.+890    	; 0x1682 <vfprintf+0x398>
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	4c 01       	movw	r8, r24
    130e:	f7 01       	movw	r30, r14
    1310:	93 81       	ldd	r25, Z+3	; 0x03
    1312:	f6 01       	movw	r30, r12
    1314:	93 fd       	sbrc	r25, 3
    1316:	85 91       	lpm	r24, Z+
    1318:	93 ff       	sbrs	r25, 3
    131a:	81 91       	ld	r24, Z+
    131c:	6f 01       	movw	r12, r30
    131e:	88 23       	and	r24, r24
    1320:	09 f4       	brne	.+2      	; 0x1324 <vfprintf+0x3a>
    1322:	ab c1       	rjmp	.+854    	; 0x167a <vfprintf+0x390>
    1324:	85 32       	cpi	r24, 0x25	; 37
    1326:	39 f4       	brne	.+14     	; 0x1336 <vfprintf+0x4c>
    1328:	93 fd       	sbrc	r25, 3
    132a:	85 91       	lpm	r24, Z+
    132c:	93 ff       	sbrs	r25, 3
    132e:	81 91       	ld	r24, Z+
    1330:	6f 01       	movw	r12, r30
    1332:	85 32       	cpi	r24, 0x25	; 37
    1334:	29 f4       	brne	.+10     	; 0x1340 <vfprintf+0x56>
    1336:	b7 01       	movw	r22, r14
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 6d 0b 	call	0x16da	; 0x16da <fputc>
    133e:	e7 cf       	rjmp	.-50     	; 0x130e <vfprintf+0x24>
    1340:	51 2c       	mov	r5, r1
    1342:	31 2c       	mov	r3, r1
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	20 32       	cpi	r18, 0x20	; 32
    1348:	a0 f4       	brcc	.+40     	; 0x1372 <vfprintf+0x88>
    134a:	8b 32       	cpi	r24, 0x2B	; 43
    134c:	69 f0       	breq	.+26     	; 0x1368 <vfprintf+0x7e>
    134e:	30 f4       	brcc	.+12     	; 0x135c <vfprintf+0x72>
    1350:	80 32       	cpi	r24, 0x20	; 32
    1352:	59 f0       	breq	.+22     	; 0x136a <vfprintf+0x80>
    1354:	83 32       	cpi	r24, 0x23	; 35
    1356:	69 f4       	brne	.+26     	; 0x1372 <vfprintf+0x88>
    1358:	20 61       	ori	r18, 0x10	; 16
    135a:	2c c0       	rjmp	.+88     	; 0x13b4 <vfprintf+0xca>
    135c:	8d 32       	cpi	r24, 0x2D	; 45
    135e:	39 f0       	breq	.+14     	; 0x136e <vfprintf+0x84>
    1360:	80 33       	cpi	r24, 0x30	; 48
    1362:	39 f4       	brne	.+14     	; 0x1372 <vfprintf+0x88>
    1364:	21 60       	ori	r18, 0x01	; 1
    1366:	26 c0       	rjmp	.+76     	; 0x13b4 <vfprintf+0xca>
    1368:	22 60       	ori	r18, 0x02	; 2
    136a:	24 60       	ori	r18, 0x04	; 4
    136c:	23 c0       	rjmp	.+70     	; 0x13b4 <vfprintf+0xca>
    136e:	28 60       	ori	r18, 0x08	; 8
    1370:	21 c0       	rjmp	.+66     	; 0x13b4 <vfprintf+0xca>
    1372:	27 fd       	sbrc	r18, 7
    1374:	27 c0       	rjmp	.+78     	; 0x13c4 <vfprintf+0xda>
    1376:	30 ed       	ldi	r19, 0xD0	; 208
    1378:	38 0f       	add	r19, r24
    137a:	3a 30       	cpi	r19, 0x0A	; 10
    137c:	78 f4       	brcc	.+30     	; 0x139c <vfprintf+0xb2>
    137e:	26 ff       	sbrs	r18, 6
    1380:	06 c0       	rjmp	.+12     	; 0x138e <vfprintf+0xa4>
    1382:	fa e0       	ldi	r31, 0x0A	; 10
    1384:	5f 9e       	mul	r5, r31
    1386:	30 0d       	add	r19, r0
    1388:	11 24       	eor	r1, r1
    138a:	53 2e       	mov	r5, r19
    138c:	13 c0       	rjmp	.+38     	; 0x13b4 <vfprintf+0xca>
    138e:	8a e0       	ldi	r24, 0x0A	; 10
    1390:	38 9e       	mul	r3, r24
    1392:	30 0d       	add	r19, r0
    1394:	11 24       	eor	r1, r1
    1396:	33 2e       	mov	r3, r19
    1398:	20 62       	ori	r18, 0x20	; 32
    139a:	0c c0       	rjmp	.+24     	; 0x13b4 <vfprintf+0xca>
    139c:	8e 32       	cpi	r24, 0x2E	; 46
    139e:	21 f4       	brne	.+8      	; 0x13a8 <vfprintf+0xbe>
    13a0:	26 fd       	sbrc	r18, 6
    13a2:	6b c1       	rjmp	.+726    	; 0x167a <vfprintf+0x390>
    13a4:	20 64       	ori	r18, 0x40	; 64
    13a6:	06 c0       	rjmp	.+12     	; 0x13b4 <vfprintf+0xca>
    13a8:	8c 36       	cpi	r24, 0x6C	; 108
    13aa:	11 f4       	brne	.+4      	; 0x13b0 <vfprintf+0xc6>
    13ac:	20 68       	ori	r18, 0x80	; 128
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <vfprintf+0xca>
    13b0:	88 36       	cpi	r24, 0x68	; 104
    13b2:	41 f4       	brne	.+16     	; 0x13c4 <vfprintf+0xda>
    13b4:	f6 01       	movw	r30, r12
    13b6:	93 fd       	sbrc	r25, 3
    13b8:	85 91       	lpm	r24, Z+
    13ba:	93 ff       	sbrs	r25, 3
    13bc:	81 91       	ld	r24, Z+
    13be:	6f 01       	movw	r12, r30
    13c0:	81 11       	cpse	r24, r1
    13c2:	c1 cf       	rjmp	.-126    	; 0x1346 <vfprintf+0x5c>
    13c4:	98 2f       	mov	r25, r24
    13c6:	9f 7d       	andi	r25, 0xDF	; 223
    13c8:	95 54       	subi	r25, 0x45	; 69
    13ca:	93 30       	cpi	r25, 0x03	; 3
    13cc:	28 f4       	brcc	.+10     	; 0x13d8 <vfprintf+0xee>
    13ce:	0c 5f       	subi	r16, 0xFC	; 252
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	ff e3       	ldi	r31, 0x3F	; 63
    13d4:	f9 83       	std	Y+1, r31	; 0x01
    13d6:	0d c0       	rjmp	.+26     	; 0x13f2 <vfprintf+0x108>
    13d8:	83 36       	cpi	r24, 0x63	; 99
    13da:	31 f0       	breq	.+12     	; 0x13e8 <vfprintf+0xfe>
    13dc:	83 37       	cpi	r24, 0x73	; 115
    13de:	71 f0       	breq	.+28     	; 0x13fc <vfprintf+0x112>
    13e0:	83 35       	cpi	r24, 0x53	; 83
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <vfprintf+0xfc>
    13e4:	5b c0       	rjmp	.+182    	; 0x149c <vfprintf+0x1b2>
    13e6:	22 c0       	rjmp	.+68     	; 0x142c <vfprintf+0x142>
    13e8:	f8 01       	movw	r30, r16
    13ea:	80 81       	ld	r24, Z
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	0e 5f       	subi	r16, 0xFE	; 254
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	44 24       	eor	r4, r4
    13f4:	43 94       	inc	r4
    13f6:	51 2c       	mov	r5, r1
    13f8:	54 01       	movw	r10, r8
    13fa:	15 c0       	rjmp	.+42     	; 0x1426 <vfprintf+0x13c>
    13fc:	38 01       	movw	r6, r16
    13fe:	f2 e0       	ldi	r31, 0x02	; 2
    1400:	6f 0e       	add	r6, r31
    1402:	71 1c       	adc	r7, r1
    1404:	f8 01       	movw	r30, r16
    1406:	a0 80       	ld	r10, Z
    1408:	b1 80       	ldd	r11, Z+1	; 0x01
    140a:	26 ff       	sbrs	r18, 6
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <vfprintf+0x12a>
    140e:	65 2d       	mov	r22, r5
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <vfprintf+0x12e>
    1414:	6f ef       	ldi	r22, 0xFF	; 255
    1416:	7f ef       	ldi	r23, 0xFF	; 255
    1418:	c5 01       	movw	r24, r10
    141a:	2c 87       	std	Y+12, r18	; 0x0c
    141c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <strnlen>
    1420:	2c 01       	movw	r4, r24
    1422:	83 01       	movw	r16, r6
    1424:	2c 85       	ldd	r18, Y+12	; 0x0c
    1426:	2f 77       	andi	r18, 0x7F	; 127
    1428:	22 2e       	mov	r2, r18
    142a:	17 c0       	rjmp	.+46     	; 0x145a <vfprintf+0x170>
    142c:	38 01       	movw	r6, r16
    142e:	f2 e0       	ldi	r31, 0x02	; 2
    1430:	6f 0e       	add	r6, r31
    1432:	71 1c       	adc	r7, r1
    1434:	f8 01       	movw	r30, r16
    1436:	a0 80       	ld	r10, Z
    1438:	b1 80       	ldd	r11, Z+1	; 0x01
    143a:	26 ff       	sbrs	r18, 6
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfprintf+0x15a>
    143e:	65 2d       	mov	r22, r5
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <vfprintf+0x15e>
    1444:	6f ef       	ldi	r22, 0xFF	; 255
    1446:	7f ef       	ldi	r23, 0xFF	; 255
    1448:	c5 01       	movw	r24, r10
    144a:	2c 87       	std	Y+12, r18	; 0x0c
    144c:	0e 94 47 0b 	call	0x168e	; 0x168e <strnlen_P>
    1450:	2c 01       	movw	r4, r24
    1452:	2c 85       	ldd	r18, Y+12	; 0x0c
    1454:	20 68       	ori	r18, 0x80	; 128
    1456:	22 2e       	mov	r2, r18
    1458:	83 01       	movw	r16, r6
    145a:	23 fc       	sbrc	r2, 3
    145c:	1b c0       	rjmp	.+54     	; 0x1494 <vfprintf+0x1aa>
    145e:	83 2d       	mov	r24, r3
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	48 16       	cp	r4, r24
    1464:	59 06       	cpc	r5, r25
    1466:	b0 f4       	brcc	.+44     	; 0x1494 <vfprintf+0x1aa>
    1468:	b7 01       	movw	r22, r14
    146a:	80 e2       	ldi	r24, 0x20	; 32
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 6d 0b 	call	0x16da	; 0x16da <fputc>
    1472:	3a 94       	dec	r3
    1474:	f4 cf       	rjmp	.-24     	; 0x145e <vfprintf+0x174>
    1476:	f5 01       	movw	r30, r10
    1478:	27 fc       	sbrc	r2, 7
    147a:	85 91       	lpm	r24, Z+
    147c:	27 fe       	sbrs	r2, 7
    147e:	81 91       	ld	r24, Z+
    1480:	5f 01       	movw	r10, r30
    1482:	b7 01       	movw	r22, r14
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 6d 0b 	call	0x16da	; 0x16da <fputc>
    148a:	31 10       	cpse	r3, r1
    148c:	3a 94       	dec	r3
    148e:	f1 e0       	ldi	r31, 0x01	; 1
    1490:	4f 1a       	sub	r4, r31
    1492:	51 08       	sbc	r5, r1
    1494:	41 14       	cp	r4, r1
    1496:	51 04       	cpc	r5, r1
    1498:	71 f7       	brne	.-36     	; 0x1476 <vfprintf+0x18c>
    149a:	e5 c0       	rjmp	.+458    	; 0x1666 <vfprintf+0x37c>
    149c:	84 36       	cpi	r24, 0x64	; 100
    149e:	11 f0       	breq	.+4      	; 0x14a4 <vfprintf+0x1ba>
    14a0:	89 36       	cpi	r24, 0x69	; 105
    14a2:	39 f5       	brne	.+78     	; 0x14f2 <vfprintf+0x208>
    14a4:	f8 01       	movw	r30, r16
    14a6:	27 ff       	sbrs	r18, 7
    14a8:	07 c0       	rjmp	.+14     	; 0x14b8 <vfprintf+0x1ce>
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	0c 5f       	subi	r16, 0xFC	; 252
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	08 c0       	rjmp	.+16     	; 0x14c8 <vfprintf+0x1de>
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	07 2e       	mov	r0, r23
    14be:	00 0c       	add	r0, r0
    14c0:	88 0b       	sbc	r24, r24
    14c2:	99 0b       	sbc	r25, r25
    14c4:	0e 5f       	subi	r16, 0xFE	; 254
    14c6:	1f 4f       	sbci	r17, 0xFF	; 255
    14c8:	2f 76       	andi	r18, 0x6F	; 111
    14ca:	72 2e       	mov	r7, r18
    14cc:	97 ff       	sbrs	r25, 7
    14ce:	09 c0       	rjmp	.+18     	; 0x14e2 <vfprintf+0x1f8>
    14d0:	90 95       	com	r25
    14d2:	80 95       	com	r24
    14d4:	70 95       	com	r23
    14d6:	61 95       	neg	r22
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	20 68       	ori	r18, 0x80	; 128
    14e0:	72 2e       	mov	r7, r18
    14e2:	2a e0       	ldi	r18, 0x0A	; 10
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	a4 01       	movw	r20, r8
    14e8:	0e 94 a5 0b 	call	0x174a	; 0x174a <__ultoa_invert>
    14ec:	a8 2e       	mov	r10, r24
    14ee:	a8 18       	sub	r10, r8
    14f0:	44 c0       	rjmp	.+136    	; 0x157a <vfprintf+0x290>
    14f2:	85 37       	cpi	r24, 0x75	; 117
    14f4:	29 f4       	brne	.+10     	; 0x1500 <vfprintf+0x216>
    14f6:	2f 7e       	andi	r18, 0xEF	; 239
    14f8:	b2 2e       	mov	r11, r18
    14fa:	2a e0       	ldi	r18, 0x0A	; 10
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	25 c0       	rjmp	.+74     	; 0x154a <vfprintf+0x260>
    1500:	f2 2f       	mov	r31, r18
    1502:	f9 7f       	andi	r31, 0xF9	; 249
    1504:	bf 2e       	mov	r11, r31
    1506:	8f 36       	cpi	r24, 0x6F	; 111
    1508:	c1 f0       	breq	.+48     	; 0x153a <vfprintf+0x250>
    150a:	18 f4       	brcc	.+6      	; 0x1512 <vfprintf+0x228>
    150c:	88 35       	cpi	r24, 0x58	; 88
    150e:	79 f0       	breq	.+30     	; 0x152e <vfprintf+0x244>
    1510:	b4 c0       	rjmp	.+360    	; 0x167a <vfprintf+0x390>
    1512:	80 37       	cpi	r24, 0x70	; 112
    1514:	19 f0       	breq	.+6      	; 0x151c <vfprintf+0x232>
    1516:	88 37       	cpi	r24, 0x78	; 120
    1518:	21 f0       	breq	.+8      	; 0x1522 <vfprintf+0x238>
    151a:	af c0       	rjmp	.+350    	; 0x167a <vfprintf+0x390>
    151c:	2f 2f       	mov	r18, r31
    151e:	20 61       	ori	r18, 0x10	; 16
    1520:	b2 2e       	mov	r11, r18
    1522:	b4 fe       	sbrs	r11, 4
    1524:	0d c0       	rjmp	.+26     	; 0x1540 <vfprintf+0x256>
    1526:	8b 2d       	mov	r24, r11
    1528:	84 60       	ori	r24, 0x04	; 4
    152a:	b8 2e       	mov	r11, r24
    152c:	09 c0       	rjmp	.+18     	; 0x1540 <vfprintf+0x256>
    152e:	24 ff       	sbrs	r18, 4
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <vfprintf+0x25c>
    1532:	9f 2f       	mov	r25, r31
    1534:	96 60       	ori	r25, 0x06	; 6
    1536:	b9 2e       	mov	r11, r25
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <vfprintf+0x25c>
    153a:	28 e0       	ldi	r18, 0x08	; 8
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	05 c0       	rjmp	.+10     	; 0x154a <vfprintf+0x260>
    1540:	20 e1       	ldi	r18, 0x10	; 16
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0x260>
    1546:	20 e1       	ldi	r18, 0x10	; 16
    1548:	32 e0       	ldi	r19, 0x02	; 2
    154a:	f8 01       	movw	r30, r16
    154c:	b7 fe       	sbrs	r11, 7
    154e:	07 c0       	rjmp	.+14     	; 0x155e <vfprintf+0x274>
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	0c 5f       	subi	r16, 0xFC	; 252
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	06 c0       	rjmp	.+12     	; 0x156a <vfprintf+0x280>
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 5f       	subi	r16, 0xFE	; 254
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	a4 01       	movw	r20, r8
    156c:	0e 94 a5 0b 	call	0x174a	; 0x174a <__ultoa_invert>
    1570:	a8 2e       	mov	r10, r24
    1572:	a8 18       	sub	r10, r8
    1574:	fb 2d       	mov	r31, r11
    1576:	ff 77       	andi	r31, 0x7F	; 127
    1578:	7f 2e       	mov	r7, r31
    157a:	76 fe       	sbrs	r7, 6
    157c:	0b c0       	rjmp	.+22     	; 0x1594 <vfprintf+0x2aa>
    157e:	37 2d       	mov	r19, r7
    1580:	3e 7f       	andi	r19, 0xFE	; 254
    1582:	a5 14       	cp	r10, r5
    1584:	50 f4       	brcc	.+20     	; 0x159a <vfprintf+0x2b0>
    1586:	74 fe       	sbrs	r7, 4
    1588:	0a c0       	rjmp	.+20     	; 0x159e <vfprintf+0x2b4>
    158a:	72 fc       	sbrc	r7, 2
    158c:	08 c0       	rjmp	.+16     	; 0x159e <vfprintf+0x2b4>
    158e:	37 2d       	mov	r19, r7
    1590:	3e 7e       	andi	r19, 0xEE	; 238
    1592:	05 c0       	rjmp	.+10     	; 0x159e <vfprintf+0x2b4>
    1594:	ba 2c       	mov	r11, r10
    1596:	37 2d       	mov	r19, r7
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <vfprintf+0x2b6>
    159a:	ba 2c       	mov	r11, r10
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <vfprintf+0x2b6>
    159e:	b5 2c       	mov	r11, r5
    15a0:	34 ff       	sbrs	r19, 4
    15a2:	0d c0       	rjmp	.+26     	; 0x15be <vfprintf+0x2d4>
    15a4:	fe 01       	movw	r30, r28
    15a6:	ea 0d       	add	r30, r10
    15a8:	f1 1d       	adc	r31, r1
    15aa:	80 81       	ld	r24, Z
    15ac:	80 33       	cpi	r24, 0x30	; 48
    15ae:	11 f4       	brne	.+4      	; 0x15b4 <vfprintf+0x2ca>
    15b0:	39 7e       	andi	r19, 0xE9	; 233
    15b2:	09 c0       	rjmp	.+18     	; 0x15c6 <vfprintf+0x2dc>
    15b4:	32 ff       	sbrs	r19, 2
    15b6:	06 c0       	rjmp	.+12     	; 0x15c4 <vfprintf+0x2da>
    15b8:	b3 94       	inc	r11
    15ba:	b3 94       	inc	r11
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <vfprintf+0x2dc>
    15be:	83 2f       	mov	r24, r19
    15c0:	86 78       	andi	r24, 0x86	; 134
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <vfprintf+0x2dc>
    15c4:	b3 94       	inc	r11
    15c6:	33 fd       	sbrc	r19, 3
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <vfprintf+0x306>
    15ca:	30 ff       	sbrs	r19, 0
    15cc:	06 c0       	rjmp	.+12     	; 0x15da <vfprintf+0x2f0>
    15ce:	5a 2c       	mov	r5, r10
    15d0:	b3 14       	cp	r11, r3
    15d2:	18 f4       	brcc	.+6      	; 0x15da <vfprintf+0x2f0>
    15d4:	53 0c       	add	r5, r3
    15d6:	5b 18       	sub	r5, r11
    15d8:	b3 2c       	mov	r11, r3
    15da:	b3 14       	cp	r11, r3
    15dc:	68 f4       	brcc	.+26     	; 0x15f8 <vfprintf+0x30e>
    15de:	b7 01       	movw	r22, r14
    15e0:	80 e2       	ldi	r24, 0x20	; 32
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	3c 87       	std	Y+12, r19	; 0x0c
    15e6:	0e 94 6d 0b 	call	0x16da	; 0x16da <fputc>
    15ea:	b3 94       	inc	r11
    15ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    15ee:	f5 cf       	rjmp	.-22     	; 0x15da <vfprintf+0x2f0>
    15f0:	b3 14       	cp	r11, r3
    15f2:	10 f4       	brcc	.+4      	; 0x15f8 <vfprintf+0x30e>
    15f4:	3b 18       	sub	r3, r11
    15f6:	01 c0       	rjmp	.+2      	; 0x15fa <vfprintf+0x310>
    15f8:	31 2c       	mov	r3, r1
    15fa:	34 ff       	sbrs	r19, 4
    15fc:	12 c0       	rjmp	.+36     	; 0x1622 <vfprintf+0x338>
    15fe:	b7 01       	movw	r22, r14
    1600:	80 e3       	ldi	r24, 0x30	; 48
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	3c 87       	std	Y+12, r19	; 0x0c
    1606:	0e 94 6d 0b 	call	0x16da	; 0x16da <fputc>
    160a:	3c 85       	ldd	r19, Y+12	; 0x0c
    160c:	32 ff       	sbrs	r19, 2
    160e:	17 c0       	rjmp	.+46     	; 0x163e <vfprintf+0x354>
    1610:	31 fd       	sbrc	r19, 1
    1612:	03 c0       	rjmp	.+6      	; 0x161a <vfprintf+0x330>
    1614:	88 e7       	ldi	r24, 0x78	; 120
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 c0       	rjmp	.+4      	; 0x161e <vfprintf+0x334>
    161a:	88 e5       	ldi	r24, 0x58	; 88
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	b7 01       	movw	r22, r14
    1620:	0c c0       	rjmp	.+24     	; 0x163a <vfprintf+0x350>
    1622:	83 2f       	mov	r24, r19
    1624:	86 78       	andi	r24, 0x86	; 134
    1626:	59 f0       	breq	.+22     	; 0x163e <vfprintf+0x354>
    1628:	31 ff       	sbrs	r19, 1
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <vfprintf+0x346>
    162c:	8b e2       	ldi	r24, 0x2B	; 43
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <vfprintf+0x348>
    1630:	80 e2       	ldi	r24, 0x20	; 32
    1632:	37 fd       	sbrc	r19, 7
    1634:	8d e2       	ldi	r24, 0x2D	; 45
    1636:	b7 01       	movw	r22, r14
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 6d 0b 	call	0x16da	; 0x16da <fputc>
    163e:	a5 14       	cp	r10, r5
    1640:	38 f4       	brcc	.+14     	; 0x1650 <vfprintf+0x366>
    1642:	b7 01       	movw	r22, r14
    1644:	80 e3       	ldi	r24, 0x30	; 48
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 6d 0b 	call	0x16da	; 0x16da <fputc>
    164c:	5a 94       	dec	r5
    164e:	f7 cf       	rjmp	.-18     	; 0x163e <vfprintf+0x354>
    1650:	aa 94       	dec	r10
    1652:	f4 01       	movw	r30, r8
    1654:	ea 0d       	add	r30, r10
    1656:	f1 1d       	adc	r31, r1
    1658:	80 81       	ld	r24, Z
    165a:	b7 01       	movw	r22, r14
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 6d 0b 	call	0x16da	; 0x16da <fputc>
    1662:	a1 10       	cpse	r10, r1
    1664:	f5 cf       	rjmp	.-22     	; 0x1650 <vfprintf+0x366>
    1666:	33 20       	and	r3, r3
    1668:	09 f4       	brne	.+2      	; 0x166c <vfprintf+0x382>
    166a:	51 ce       	rjmp	.-862    	; 0x130e <vfprintf+0x24>
    166c:	b7 01       	movw	r22, r14
    166e:	80 e2       	ldi	r24, 0x20	; 32
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 6d 0b 	call	0x16da	; 0x16da <fputc>
    1676:	3a 94       	dec	r3
    1678:	f6 cf       	rjmp	.-20     	; 0x1666 <vfprintf+0x37c>
    167a:	f7 01       	movw	r30, r14
    167c:	86 81       	ldd	r24, Z+6	; 0x06
    167e:	97 81       	ldd	r25, Z+7	; 0x07
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfprintf+0x39c>
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	9f ef       	ldi	r25, 0xFF	; 255
    1686:	2c 96       	adiw	r28, 0x0c	; 12
    1688:	e2 e1       	ldi	r30, 0x12	; 18
    168a:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__epilogue_restores__>

0000168e <strnlen_P>:
    168e:	fc 01       	movw	r30, r24
    1690:	05 90       	lpm	r0, Z+
    1692:	61 50       	subi	r22, 0x01	; 1
    1694:	70 40       	sbci	r23, 0x00	; 0
    1696:	01 10       	cpse	r0, r1
    1698:	d8 f7       	brcc	.-10     	; 0x1690 <strnlen_P+0x2>
    169a:	80 95       	com	r24
    169c:	90 95       	com	r25
    169e:	8e 0f       	add	r24, r30
    16a0:	9f 1f       	adc	r25, r31
    16a2:	08 95       	ret

000016a4 <strnlen>:
    16a4:	fc 01       	movw	r30, r24
    16a6:	61 50       	subi	r22, 0x01	; 1
    16a8:	70 40       	sbci	r23, 0x00	; 0
    16aa:	01 90       	ld	r0, Z+
    16ac:	01 10       	cpse	r0, r1
    16ae:	d8 f7       	brcc	.-10     	; 0x16a6 <strnlen+0x2>
    16b0:	80 95       	com	r24
    16b2:	90 95       	com	r25
    16b4:	8e 0f       	add	r24, r30
    16b6:	9f 1f       	adc	r25, r31
    16b8:	08 95       	ret

000016ba <strrev>:
    16ba:	dc 01       	movw	r26, r24
    16bc:	fc 01       	movw	r30, r24
    16be:	67 2f       	mov	r22, r23
    16c0:	71 91       	ld	r23, Z+
    16c2:	77 23       	and	r23, r23
    16c4:	e1 f7       	brne	.-8      	; 0x16be <strrev+0x4>
    16c6:	32 97       	sbiw	r30, 0x02	; 2
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <strrev+0x18>
    16ca:	7c 91       	ld	r23, X
    16cc:	6d 93       	st	X+, r22
    16ce:	70 83       	st	Z, r23
    16d0:	62 91       	ld	r22, -Z
    16d2:	ae 17       	cp	r26, r30
    16d4:	bf 07       	cpc	r27, r31
    16d6:	c8 f3       	brcs	.-14     	; 0x16ca <strrev+0x10>
    16d8:	08 95       	ret

000016da <fputc>:
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	fb 01       	movw	r30, r22
    16e4:	23 81       	ldd	r18, Z+3	; 0x03
    16e6:	21 fd       	sbrc	r18, 1
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <fputc+0x16>
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	9f ef       	ldi	r25, 0xFF	; 255
    16ee:	28 c0       	rjmp	.+80     	; 0x1740 <fputc+0x66>
    16f0:	22 ff       	sbrs	r18, 2
    16f2:	16 c0       	rjmp	.+44     	; 0x1720 <fputc+0x46>
    16f4:	46 81       	ldd	r20, Z+6	; 0x06
    16f6:	57 81       	ldd	r21, Z+7	; 0x07
    16f8:	24 81       	ldd	r18, Z+4	; 0x04
    16fa:	35 81       	ldd	r19, Z+5	; 0x05
    16fc:	42 17       	cp	r20, r18
    16fe:	53 07       	cpc	r21, r19
    1700:	44 f4       	brge	.+16     	; 0x1712 <fputc+0x38>
    1702:	a0 81       	ld	r26, Z
    1704:	b1 81       	ldd	r27, Z+1	; 0x01
    1706:	9d 01       	movw	r18, r26
    1708:	2f 5f       	subi	r18, 0xFF	; 255
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	20 83       	st	Z, r18
    170e:	31 83       	std	Z+1, r19	; 0x01
    1710:	8c 93       	st	X, r24
    1712:	26 81       	ldd	r18, Z+6	; 0x06
    1714:	37 81       	ldd	r19, Z+7	; 0x07
    1716:	2f 5f       	subi	r18, 0xFF	; 255
    1718:	3f 4f       	sbci	r19, 0xFF	; 255
    171a:	26 83       	std	Z+6, r18	; 0x06
    171c:	37 83       	std	Z+7, r19	; 0x07
    171e:	10 c0       	rjmp	.+32     	; 0x1740 <fputc+0x66>
    1720:	eb 01       	movw	r28, r22
    1722:	09 2f       	mov	r16, r25
    1724:	18 2f       	mov	r17, r24
    1726:	00 84       	ldd	r0, Z+8	; 0x08
    1728:	f1 85       	ldd	r31, Z+9	; 0x09
    172a:	e0 2d       	mov	r30, r0
    172c:	09 95       	icall
    172e:	89 2b       	or	r24, r25
    1730:	e1 f6       	brne	.-72     	; 0x16ea <fputc+0x10>
    1732:	8e 81       	ldd	r24, Y+6	; 0x06
    1734:	9f 81       	ldd	r25, Y+7	; 0x07
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	8e 83       	std	Y+6, r24	; 0x06
    173a:	9f 83       	std	Y+7, r25	; 0x07
    173c:	81 2f       	mov	r24, r17
    173e:	90 2f       	mov	r25, r16
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	08 95       	ret

0000174a <__ultoa_invert>:
    174a:	fa 01       	movw	r30, r20
    174c:	aa 27       	eor	r26, r26
    174e:	28 30       	cpi	r18, 0x08	; 8
    1750:	51 f1       	breq	.+84     	; 0x17a6 <__ultoa_invert+0x5c>
    1752:	20 31       	cpi	r18, 0x10	; 16
    1754:	81 f1       	breq	.+96     	; 0x17b6 <__ultoa_invert+0x6c>
    1756:	e8 94       	clt
    1758:	6f 93       	push	r22
    175a:	6e 7f       	andi	r22, 0xFE	; 254
    175c:	6e 5f       	subi	r22, 0xFE	; 254
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	8f 4f       	sbci	r24, 0xFF	; 255
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	af 4f       	sbci	r26, 0xFF	; 255
    1766:	b1 e0       	ldi	r27, 0x01	; 1
    1768:	3e d0       	rcall	.+124    	; 0x17e6 <__ultoa_invert+0x9c>
    176a:	b4 e0       	ldi	r27, 0x04	; 4
    176c:	3c d0       	rcall	.+120    	; 0x17e6 <__ultoa_invert+0x9c>
    176e:	67 0f       	add	r22, r23
    1770:	78 1f       	adc	r23, r24
    1772:	89 1f       	adc	r24, r25
    1774:	9a 1f       	adc	r25, r26
    1776:	a1 1d       	adc	r26, r1
    1778:	68 0f       	add	r22, r24
    177a:	79 1f       	adc	r23, r25
    177c:	8a 1f       	adc	r24, r26
    177e:	91 1d       	adc	r25, r1
    1780:	a1 1d       	adc	r26, r1
    1782:	6a 0f       	add	r22, r26
    1784:	71 1d       	adc	r23, r1
    1786:	81 1d       	adc	r24, r1
    1788:	91 1d       	adc	r25, r1
    178a:	a1 1d       	adc	r26, r1
    178c:	20 d0       	rcall	.+64     	; 0x17ce <__ultoa_invert+0x84>
    178e:	09 f4       	brne	.+2      	; 0x1792 <__ultoa_invert+0x48>
    1790:	68 94       	set
    1792:	3f 91       	pop	r19
    1794:	2a e0       	ldi	r18, 0x0A	; 10
    1796:	26 9f       	mul	r18, r22
    1798:	11 24       	eor	r1, r1
    179a:	30 19       	sub	r19, r0
    179c:	30 5d       	subi	r19, 0xD0	; 208
    179e:	31 93       	st	Z+, r19
    17a0:	de f6       	brtc	.-74     	; 0x1758 <__ultoa_invert+0xe>
    17a2:	cf 01       	movw	r24, r30
    17a4:	08 95       	ret
    17a6:	46 2f       	mov	r20, r22
    17a8:	47 70       	andi	r20, 0x07	; 7
    17aa:	40 5d       	subi	r20, 0xD0	; 208
    17ac:	41 93       	st	Z+, r20
    17ae:	b3 e0       	ldi	r27, 0x03	; 3
    17b0:	0f d0       	rcall	.+30     	; 0x17d0 <__ultoa_invert+0x86>
    17b2:	c9 f7       	brne	.-14     	; 0x17a6 <__ultoa_invert+0x5c>
    17b4:	f6 cf       	rjmp	.-20     	; 0x17a2 <__ultoa_invert+0x58>
    17b6:	46 2f       	mov	r20, r22
    17b8:	4f 70       	andi	r20, 0x0F	; 15
    17ba:	40 5d       	subi	r20, 0xD0	; 208
    17bc:	4a 33       	cpi	r20, 0x3A	; 58
    17be:	18 f0       	brcs	.+6      	; 0x17c6 <__ultoa_invert+0x7c>
    17c0:	49 5d       	subi	r20, 0xD9	; 217
    17c2:	31 fd       	sbrc	r19, 1
    17c4:	40 52       	subi	r20, 0x20	; 32
    17c6:	41 93       	st	Z+, r20
    17c8:	02 d0       	rcall	.+4      	; 0x17ce <__ultoa_invert+0x84>
    17ca:	a9 f7       	brne	.-22     	; 0x17b6 <__ultoa_invert+0x6c>
    17cc:	ea cf       	rjmp	.-44     	; 0x17a2 <__ultoa_invert+0x58>
    17ce:	b4 e0       	ldi	r27, 0x04	; 4
    17d0:	a6 95       	lsr	r26
    17d2:	97 95       	ror	r25
    17d4:	87 95       	ror	r24
    17d6:	77 95       	ror	r23
    17d8:	67 95       	ror	r22
    17da:	ba 95       	dec	r27
    17dc:	c9 f7       	brne	.-14     	; 0x17d0 <__ultoa_invert+0x86>
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	61 05       	cpc	r22, r1
    17e2:	71 05       	cpc	r23, r1
    17e4:	08 95       	ret
    17e6:	9b 01       	movw	r18, r22
    17e8:	ac 01       	movw	r20, r24
    17ea:	0a 2e       	mov	r0, r26
    17ec:	06 94       	lsr	r0
    17ee:	57 95       	ror	r21
    17f0:	47 95       	ror	r20
    17f2:	37 95       	ror	r19
    17f4:	27 95       	ror	r18
    17f6:	ba 95       	dec	r27
    17f8:	c9 f7       	brne	.-14     	; 0x17ec <__ultoa_invert+0xa2>
    17fa:	62 0f       	add	r22, r18
    17fc:	73 1f       	adc	r23, r19
    17fe:	84 1f       	adc	r24, r20
    1800:	95 1f       	adc	r25, r21
    1802:	a0 1d       	adc	r26, r0
    1804:	08 95       	ret

00001806 <__prologue_saves__>:
    1806:	2f 92       	push	r2
    1808:	3f 92       	push	r3
    180a:	4f 92       	push	r4
    180c:	5f 92       	push	r5
    180e:	6f 92       	push	r6
    1810:	7f 92       	push	r7
    1812:	8f 92       	push	r8
    1814:	9f 92       	push	r9
    1816:	af 92       	push	r10
    1818:	bf 92       	push	r11
    181a:	cf 92       	push	r12
    181c:	df 92       	push	r13
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	ca 1b       	sub	r28, r26
    1830:	db 0b       	sbc	r29, r27
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	09 94       	ijmp

00001838 <__epilogue_restores__>:
    1838:	2a 88       	ldd	r2, Y+18	; 0x12
    183a:	39 88       	ldd	r3, Y+17	; 0x11
    183c:	48 88       	ldd	r4, Y+16	; 0x10
    183e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1840:	6e 84       	ldd	r6, Y+14	; 0x0e
    1842:	7d 84       	ldd	r7, Y+13	; 0x0d
    1844:	8c 84       	ldd	r8, Y+12	; 0x0c
    1846:	9b 84       	ldd	r9, Y+11	; 0x0b
    1848:	aa 84       	ldd	r10, Y+10	; 0x0a
    184a:	b9 84       	ldd	r11, Y+9	; 0x09
    184c:	c8 84       	ldd	r12, Y+8	; 0x08
    184e:	df 80       	ldd	r13, Y+7	; 0x07
    1850:	ee 80       	ldd	r14, Y+6	; 0x06
    1852:	fd 80       	ldd	r15, Y+5	; 0x05
    1854:	0c 81       	ldd	r16, Y+4	; 0x04
    1856:	1b 81       	ldd	r17, Y+3	; 0x03
    1858:	aa 81       	ldd	r26, Y+2	; 0x02
    185a:	b9 81       	ldd	r27, Y+1	; 0x01
    185c:	ce 0f       	add	r28, r30
    185e:	d1 1d       	adc	r29, r1
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	ed 01       	movw	r28, r26
    1866:	08 95       	ret

00001868 <_exit>:
    1868:	f8 94       	cli

0000186a <__stop_program>:
    186a:	ff cf       	rjmp	.-2      	; 0x186a <__stop_program>
