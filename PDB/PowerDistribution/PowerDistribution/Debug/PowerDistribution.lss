
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000138e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00802000  0000138e  00001422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080209c  0080209c  000014be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a3e  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f2  00000000  00000000  0000509a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b3  00000000  00000000  0000588c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00005f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020de  00000000  00000000  00006260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000819  00000000  00000000  0000833e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00008b57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_7>
      20:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_8>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_12>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_30>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	cd bf       	out	0x3d, r28	; 61
      b4:	df e2       	ldi	r29, 0x2F	; 47
      b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
      b8:	10 e2       	ldi	r17, 0x20	; 32
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b0 e2       	ldi	r27, 0x20	; 32
      be:	ee e8       	ldi	r30, 0x8E	; 142
      c0:	f3 e1       	ldi	r31, 0x13	; 19
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	ac 39       	cpi	r26, 0x9C	; 156
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	20 e2       	ldi	r18, 0x20	; 32
      d0:	ac e9       	ldi	r26, 0x9C	; 156
      d2:	b0 e2       	ldi	r27, 0x20	; 32
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	af 3a       	cpi	r26, 0xAF	; 175
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
      e2:	0c 94 c5 09 	jmp	0x138a	; 0x138a <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
      ea:	e0 e5       	ldi	r30, 0x50	; 80
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	8b e4       	ldi	r24, 0x4B	; 75
      f0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
      f2:	80 81       	ld	r24, Z
      f4:	88 60       	ori	r24, 0x08	; 8
      f6:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
      f8:	81 81       	ldd	r24, Z+1	; 0x01
      fa:	83 fd       	sbrc	r24, 3
      fc:	09 c0       	rjmp	.+18     	; 0x110 <_Z27configureExternalOscillatorv+0x26>
      fe:	a0 e4       	ldi	r26, 0x40	; 64
     100:	b6 e0       	ldi	r27, 0x06	; 6
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	15 96       	adiw	r26, 0x05	; 5
     106:	9c 93       	st	X, r25
     108:	15 97       	sbiw	r26, 0x05	; 5
     10a:	81 81       	ldd	r24, Z+1	; 0x01
     10c:	83 ff       	sbrs	r24, 3
     10e:	fa cf       	rjmp	.-12     	; 0x104 <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
     116:	88 ed       	ldi	r24, 0xD8	; 216
     118:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
     11a:	e0 e5       	ldi	r30, 0x50	; 80
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	88 ec       	ldi	r24, 0xC8	; 200
     120:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
     122:	80 81       	ld	r24, Z
     124:	80 61       	ori	r24, 0x10	; 16
     126:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	84 fd       	sbrc	r24, 4
     12c:	09 c0       	rjmp	.+18     	; 0x140 <_Z27configureExternalOscillatorv+0x56>
     12e:	a0 e4       	ldi	r26, 0x40	; 64
     130:	b6 e0       	ldi	r27, 0x06	; 6
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	15 96       	adiw	r26, 0x05	; 5
     136:	9c 93       	st	X, r25
     138:	15 97       	sbiw	r26, 0x05	; 5
     13a:	81 81       	ldd	r24, Z+1	; 0x01
     13c:	84 ff       	sbrs	r24, 4
     13e:	fa cf       	rjmp	.-12     	; 0x134 <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
     146:	88 ed       	ldi	r24, 0xD8	; 216
     148:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
     14a:	e0 e4       	ldi	r30, 0x40	; 64
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
     150:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	80 83       	st	Z, r24
     156:	08 95       	ret

00000158 <_Z11configureIOv>:
	
	
}

void configureIO(void){
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
     15c:	e0 e4       	ldi	r30, 0x40	; 64
     15e:	f6 e0       	ldi	r31, 0x06	; 6
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = PIN0_bm;
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	91 83       	std	Z+1, r25	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
     168:	20 e2       	ldi	r18, 0x20	; 32
     16a:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
     16c:	34 e0       	ldi	r19, 0x04	; 4
     16e:	32 83       	std	Z+2, r19	; 0x02
	PORTC.DIRCLR = PIN3_bm;
     170:	48 e0       	ldi	r20, 0x08	; 8
     172:	42 83       	std	Z+2, r20	; 0x02
	
	//Set pullups on the switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
     174:	48 e1       	ldi	r20, 0x18	; 24
     176:	42 8b       	std	Z+18, r20	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
     178:	43 8b       	std	Z+19, r20	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
     17a:	c0 e0       	ldi	r28, 0x00	; 0
     17c:	d6 e0       	ldi	r29, 0x06	; 6
     17e:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
     180:	8a 83       	std	Y+2, r24	; 0x02
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
     182:	a0 e6       	ldi	r26, 0x60	; 96
     184:	b6 e0       	ldi	r27, 0x06	; 6
     186:	12 96       	adiw	r26, 0x02	; 2
     188:	9c 93       	st	X, r25
     18a:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN1_bm;  //Voltage Sense - Electronics Battery
     18c:	12 96       	adiw	r26, 0x02	; 2
     18e:	8c 93       	st	X, r24
     190:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN2_bm;  //Voltage Sense - Rear Battery
     192:	12 96       	adiw	r26, 0x02	; 2
     194:	3c 93       	st	X, r19
     196:	12 97       	sbiw	r26, 0x02	; 2
	
	//Setup the RSSI input
	PORTA.DIRCLR = PIN2_bm;				//Set the RSSI pin to be an input
     198:	3a 83       	std	Y+2, r19	; 0x02
	//PORTA.INTCTRL = PMIC_MEDLVLEN_bm;	//Set PORTA's interrupt to be medium level
	//PORTA.INTMASK = PIN2_bm;			//Configure the RSSI pin to be an interrupt
	//PORTA.PIN2CTRL |=  PORT_ISC_BOTHEDGES_gc;	//Configure the interrupt to trigger on both edges
	
	//Setup the steering signal I/O
	PORTD.OUTCLR = PIN4_bm;  //Set the STEER_SIG_3v3 pin as an input
     19a:	30 e1       	ldi	r19, 0x10	; 16
     19c:	16 96       	adiw	r26, 0x06	; 6
     19e:	3c 93       	st	X, r19
     1a0:	16 97       	sbiw	r26, 0x06	; 6
	PORTD.OUTSET = PIN5_bm;	 //Set the STEER_SIG_3v3_PROCESSED pin to be an output
     1a2:	15 96       	adiw	r26, 0x05	; 5
     1a4:	2c 93       	st	X, r18
	
	//DONT FORGET TO CLEAR THE FLAG IN INTFLAGS	
	
	//Initialize output values
	STATUS_CLR();
     1a6:	96 83       	std	Z+6, r25	; 0x06
	ERROR_CLR();
     1a8:	86 83       	std	Z+6, r24	; 0x06
	
	REAR_RELAY_CLR();
     1aa:	26 83       	std	Z+6, r18	; 0x06
		
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <__vector_30>:

//This function will be called on the edges of the RSSI signal
ISR(PORTA_INT_vect){
     1b2:	1f 92       	push	r1
     1b4:	0f 92       	push	r0
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	0f 92       	push	r0
     1ba:	11 24       	eor	r1, r1
     1bc:	8f 93       	push	r24
     1be:	9f 93       	push	r25
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
	cli();
     1c4:	f8 94       	cli
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
     1c6:	84 e0       	ldi	r24, 0x04	; 4
     1c8:	80 93 0c 06 	sts	0x060C, r24
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
     1cc:	80 91 a6 20 	lds	r24, 0x20A6
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	61 f4       	brne	.+24     	; 0x1ec <__vector_30+0x3a>
     1d4:	80 91 08 06 	lds	r24, 0x0608
     1d8:	82 fd       	sbrc	r24, 2
     1da:	0b c0       	rjmp	.+22     	; 0x1f2 <__vector_30+0x40>
     1dc:	1f c0       	rjmp	.+62     	; 0x21c <__vector_30+0x6a>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     1de:	80 91 08 06 	lds	r24, 0x0608
     1e2:	82 ff       	sbrs	r24, 2
     1e4:	0d c0       	rjmp	.+26     	; 0x200 <__vector_30+0x4e>
     1e6:	1a c0       	rjmp	.+52     	; 0x21c <__vector_30+0x6a>
		ERROR_SET();
	}
	
	
	//_delay_us(200);
	sei();
     1e8:	78 94       	sei
     1ea:	1c c0       	rjmp	.+56     	; 0x224 <__vector_30+0x72>
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     1ec:	88 23       	and	r24, r24
     1ee:	b9 f3       	breq	.-18     	; 0x1de <__vector_30+0x2c>
     1f0:	15 c0       	rjmp	.+42     	; 0x21c <__vector_30+0x6a>
	cli();
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
		RTC.CNT = 0;		//We want to start counting the counter now
     1f2:	10 92 08 04 	sts	0x0408, r1
     1f6:	10 92 09 04 	sts	0x0409, r1
		RSSI.measuring = MEASURING;
     1fa:	10 92 a6 20 	sts	0x20A6, r1
     1fe:	f4 cf       	rjmp	.-24     	; 0x1e8 <__vector_30+0x36>

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
		RSSI.countDifference = RTC.CNT;
     200:	80 91 08 04 	lds	r24, 0x0408
     204:	90 91 09 04 	lds	r25, 0x0409
     208:	e5 ea       	ldi	r30, 0xA5	; 165
     20a:	f0 e2       	ldi	r31, 0x20	; 32
     20c:	84 83       	std	Z+4, r24	; 0x04
     20e:	95 83       	std	Z+5, r25	; 0x05
		
		RSSI.sampleCount++;
     210:	86 81       	ldd	r24, Z+6	; 0x06
     212:	97 81       	ldd	r25, Z+7	; 0x07
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	86 83       	std	Z+6, r24	; 0x06
     218:	97 83       	std	Z+7, r25	; 0x07
     21a:	e6 cf       	rjmp	.-52     	; 0x1e8 <__vector_30+0x36>
	}
	else {
		ERROR_SET();
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	80 93 45 06 	sts	0x0645, r24
     222:	e2 cf       	rjmp	.-60     	; 0x1e8 <__vector_30+0x36>
	}
	
	
	//_delay_us(200);
	sei();
}
     224:	ff 91       	pop	r31
     226:	ef 91       	pop	r30
     228:	9f 91       	pop	r25
     22a:	8f 91       	pop	r24
     22c:	0f 90       	pop	r0
     22e:	0f be       	out	0x3f, r0	; 63
     230:	0f 90       	pop	r0
     232:	1f 90       	pop	r1
     234:	18 95       	reti

00000236 <_Z21configureTimerCounterv>:
1S    = 0x7A12

*/
void configureTimerCounter(){
	//Configure the accurate reporting timer
	TCC4.CTRLA = TC45_CLKSEL_DIV1024_gc;	//Configure a 1024 prescaler (we want very broad timing here, exact precision isn't required)
     236:	e0 e0       	ldi	r30, 0x00	; 0
     238:	f8 e0       	ldi	r31, 0x08	; 8
     23a:	87 e0       	ldi	r24, 0x07	; 7
     23c:	80 83       	st	Z, r24
	TCC4.PER = TC_1024_500MS;               //500mS delay
     23e:	89 e0       	ldi	r24, 0x09	; 9
     240:	9d e3       	ldi	r25, 0x3D	; 61
     242:	86 a3       	std	Z+38, r24	; 0x26
     244:	97 a3       	std	Z+39, r25	; 0x27
											//Default delay value. Reference pre-calculated table up above for more information
	TCC4.CTRLB = TC45_WGMODE_NORMAL_gc;		//Configure the timer for Normal mode operation
     246:	11 82       	std	Z+1, r1	; 0x01
	TCC4.INTCTRLA = TC45_OVFINTLVL_LO_gc;	//Set a low priority overflow interrupt
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	86 83       	std	Z+6, r24	; 0x06
	//Configure the PWM sense module
	//Input capture described on (168)
	
	
	//Configure the PWM generation module
	TCD5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     24c:	e0 e4       	ldi	r30, 0x40	; 64
     24e:	f9 e0       	ldi	r31, 0x09	; 9
     250:	85 e0       	ldi	r24, 0x05	; 5
     252:	80 83       	st	Z, r24
	TCD5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     254:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PER   = 10000;						//We want to establish a 50Hz control loop here
     256:	80 e1       	ldi	r24, 0x10	; 16
     258:	97 e2       	ldi	r25, 0x27	; 39
     25a:	86 a3       	std	Z+38, r24	; 0x26
     25c:	97 a3       	std	Z+39, r25	; 0x27
	TCD5.INTCTRLA = TC45_OVFINTLVL_HI_gc;	//Set a high priority overflow interrupt
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	86 83       	std	Z+6, r24	; 0x06
     262:	08 95       	ret

00000264 <__vector_12>:
	
	
}

//Handles compare vector for T/C 4
ISR (TCC4_OVF_vect){
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	11 24       	eor	r1, r1
     26e:	2f 93       	push	r18
     270:	3f 93       	push	r19
     272:	4f 93       	push	r20
     274:	5f 93       	push	r21
     276:	6f 93       	push	r22
     278:	7f 93       	push	r23
     27a:	8f 93       	push	r24
     27c:	9f 93       	push	r25
     27e:	af 93       	push	r26
     280:	ef 93       	push	r30
     282:	ff 93       	push	r31
	++longCounter;
     284:	20 91 9c 20 	lds	r18, 0x209C
     288:	30 91 9d 20 	lds	r19, 0x209D
     28c:	40 91 9e 20 	lds	r20, 0x209E
     290:	50 91 9f 20 	lds	r21, 0x209F
     294:	60 91 a0 20 	lds	r22, 0x20A0
     298:	70 91 a1 20 	lds	r23, 0x20A1
     29c:	80 91 a2 20 	lds	r24, 0x20A2
     2a0:	90 91 a3 20 	lds	r25, 0x20A3
     2a4:	a1 e0       	ldi	r26, 0x01	; 1
     2a6:	0e 94 e7 06 	call	0xdce	; 0xdce <__adddi3_s8>
     2aa:	20 93 9c 20 	sts	0x209C, r18
     2ae:	30 93 9d 20 	sts	0x209D, r19
     2b2:	40 93 9e 20 	sts	0x209E, r20
     2b6:	50 93 9f 20 	sts	0x209F, r21
     2ba:	60 93 a0 20 	sts	0x20A0, r22
     2be:	70 93 a1 20 	sts	0x20A1, r23
     2c2:	80 93 a2 20 	sts	0x20A2, r24
     2c6:	90 93 a3 20 	sts	0x20A3, r25
	
	TCC4.INTFLAGS |= 0b1;  //Reset overflow interrupt
     2ca:	e0 e0       	ldi	r30, 0x00	; 0
     2cc:	f8 e0       	ldi	r31, 0x08	; 8
     2ce:	84 85       	ldd	r24, Z+12	; 0x0c
     2d0:	81 60       	ori	r24, 0x01	; 1
     2d2:	84 87       	std	Z+12, r24	; 0x0c
	
	broadcastStatus = 1;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	80 93 a4 20 	sts	0x20A4, r24
}
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	af 91       	pop	r26
     2e0:	9f 91       	pop	r25
     2e2:	8f 91       	pop	r24
     2e4:	7f 91       	pop	r23
     2e6:	6f 91       	pop	r22
     2e8:	5f 91       	pop	r21
     2ea:	4f 91       	pop	r20
     2ec:	3f 91       	pop	r19
     2ee:	2f 91       	pop	r18
     2f0:	0f 90       	pop	r0
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	0f 90       	pop	r0
     2f6:	1f 90       	pop	r1
     2f8:	18 95       	reti

000002fa <_Z12configureRTCv>:

The real time clock is configured to handle XTend RSSI Interpret
*/

void configureRTC(){
	RTC.CTRL = RTC_CORREN_bm | RTC_PRESCALER_DIV1_gc;		//Enable the RTC correction process, and the RTC itself with no prescaler
     2fa:	e0 e0       	ldi	r30, 0x00	; 0
     2fc:	f4 e0       	ldi	r31, 0x04	; 4
     2fe:	89 e0       	ldi	r24, 0x09	; 9
     300:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_COMPINTLVL_LO_gc | RTC_OVFINTLVL_LO_gc; //Enable the overflow and 
     302:	85 e0       	ldi	r24, 0x05	; 5
     304:	82 83       	std	Z+2, r24	; 0x02
	
    OSC.CTRL |= OSC_RC32KEN_bm;								//Enable the 32.768kHz internal oscillator
     306:	a0 e5       	ldi	r26, 0x50	; 80
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	8c 91       	ld	r24, X
     30c:	84 60       	ori	r24, 0x04	; 4
     30e:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     310:	8f e7       	ldi	r24, 0x7F	; 127
     312:	9c e0       	ldi	r25, 0x0C	; 12
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <_Z12configureRTCv+0x1a>
     318:	00 c0       	rjmp	.+0      	; 0x31a <_Z12configureRTCv+0x20>
     31a:	00 00       	nop
	
	_delay_us(400);											//Wait for the oscillator to stabalize.
	
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC32_gc;					//Set the RTC input as the 32.768kHz internal oscillator
     31c:	a0 e4       	ldi	r26, 0x40	; 64
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	8c e0       	ldi	r24, 0x0C	; 12
     322:	13 96       	adiw	r26, 0x03	; 3
     324:	8c 93       	st	X, r24
     326:	13 97       	sbiw	r26, 0x03	; 3
	CLK.RTCCTRL |= CLK_RTCEN_bm;							//Enable the clock input
     328:	13 96       	adiw	r26, 0x03	; 3
     32a:	8c 91       	ld	r24, X
     32c:	13 97       	sbiw	r26, 0x03	; 3
     32e:	81 60       	ori	r24, 0x01	; 1
     330:	13 96       	adiw	r26, 0x03	; 3
     332:	8c 93       	st	X, r24
	
	//Testing setup code
	RTC.COMP = 16384; //~1 second? Assuming 32.768 KHz
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e4       	ldi	r25, 0x40	; 64
     338:	84 87       	std	Z+12, r24	; 0x0c
     33a:	95 87       	std	Z+13, r25	; 0x0d
	RTC.PER = 0xFF00;  //No tengo nuguien idea
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	9f ef       	ldi	r25, 0xFF	; 255
     340:	82 87       	std	Z+10, r24	; 0x0a
     342:	93 87       	std	Z+11, r25	; 0x0b
     344:	08 95       	ret

00000346 <__vector_7>:

}

ISR(RTC_OVF_vect){
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
	
}
     350:	0f 90       	pop	r0
     352:	0f be       	out	0x3f, r0	; 63
     354:	0f 90       	pop	r0
     356:	1f 90       	pop	r1
     358:	18 95       	reti

0000035a <__vector_8>:

ISR(RTC_COMP_vect){
     35a:	1f 92       	push	r1
     35c:	0f 92       	push	r0
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	0f 92       	push	r0
     362:	11 24       	eor	r1, r1
     364:	8f 93       	push	r24
     366:	ef 93       	push	r30
     368:	ff 93       	push	r31
	
	RTC.CNT = 0;
     36a:	e0 e0       	ldi	r30, 0x00	; 0
     36c:	f4 e0       	ldi	r31, 0x04	; 4
     36e:	10 86       	std	Z+8, r1	; 0x08
     370:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTFLAGS = 0x02;
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	83 83       	std	Z+3, r24	; 0x03
	
	RSSI.countDifference = 0;
     376:	10 92 a9 20 	sts	0x20A9, r1
     37a:	10 92 aa 20 	sts	0x20AA, r1
}
     37e:	ff 91       	pop	r31
     380:	ef 91       	pop	r30
     382:	8f 91       	pop	r24
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	0f 90       	pop	r0
     38a:	1f 90       	pop	r1
     38c:	18 95       	reti

0000038e <_Z12configureXCLv>:

void configureXCL(){
     38e:	08 95       	ret

00000390 <_Z19ReadCalibrationByteh>:
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     390:	aa ec       	ldi	r26, 0xCA	; 202
     392:	b1 e0       	ldi	r27, 0x01	; 1
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     398:	e8 2f       	mov	r30, r24
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     39e:	1c 92       	st	X, r1

	return( result );
}
     3a0:	08 95       	ret

000003a2 <_Z13configureADCsv>:

#include "config.h"

extern RSSI_type RSSI;

void configureADCs(){
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
	// Batt Input Voltage
	// Halve Input
	//Set to single ended input
	//Set to 12-bit mode
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
     3a6:	c0 e0       	ldi	r28, 0x00	; 0
     3a8:	d2 e0       	ldi	r29, 0x02	; 2
     3aa:	82 e1       	ldi	r24, 0x12	; 18
     3ac:	89 83       	std	Y+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
     3ae:	80 e2       	ldi	r24, 0x20	; 32
     3b0:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; //Disable events
     3b2:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
     3b4:	87 e0       	ldi	r24, 0x07	; 7
     3b6:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
     3b8:	80 e2       	ldi	r24, 0x20	; 32
     3ba:	0e 94 c8 01 	call	0x390	; 0x390 <_Z19ReadCalibrationByteh>
     3be:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
     3c0:	81 e2       	ldi	r24, 0x21	; 33
     3c2:	0e 94 c8 01 	call	0x390	; 0x390 <_Z19ReadCalibrationByteh>
     3c6:	8d 87       	std	Y+13, r24	; 0x0d
     3c8:	8f e7       	ldi	r24, 0x7F	; 127
     3ca:	9c e0       	ldi	r25, 0x0C	; 12
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <_Z13configureADCsv+0x2a>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <_Z13configureADCsv+0x30>
     3d2:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	88 a3       	std	Y+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
     3d8:	81 e4       	ldi	r24, 0x41	; 65
     3da:	89 a3       	std	Y+33, r24	; 0x21
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
     3dc:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	88 83       	st	Y, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
	//ADCA.CTRLA |= ADC_CH8START_bm;
	*/	
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <_Z23sampleTempSensorVoltagev>:




int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);//ADC_CH_MUXNEG0_bm);
     3e8:	e0 e0       	ldi	r30, 0x00	; 0
     3ea:	f2 e0       	ldi	r31, 0x02	; 2
     3ec:	81 e4       	ldi	r24, 0x41	; 65
     3ee:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     3f0:	80 a1       	ldd	r24, Z+32	; 0x20
     3f2:	80 68       	ori	r24, 0x80	; 128
     3f4:	80 a3       	std	Z+32, r24	; 0x20
     3f6:	8f e7       	ldi	r24, 0x7F	; 127
     3f8:	9c e0       	ldi	r25, 0x0C	; 12
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <_Z23sampleTempSensorVoltagev+0x12>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <_Z23sampleTempSensorVoltagev+0x18>
     400:	00 00       	nop
	
	_delay_us(400);
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 8)) != (1U << 8)); // (1U << n) where n is the adc channel, so zero for this one
	
	while(!(ADCA.INTFLAGS & (1 << 0)));
     402:	86 81       	ldd	r24, Z+6	; 0x06
     404:	80 ff       	sbrs	r24, 0
     406:	fd cf       	rjmp	.-6      	; 0x402 <_Z23sampleTempSensorVoltagev+0x1a>
	ADCA.INTFLAGS = (1 << 0);
     408:	e0 e0       	ldi	r30, 0x00	; 0
     40a:	f2 e0       	ldi	r31, 0x02	; 2
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     410:	84 a1       	ldd	r24, Z+36	; 0x24
     412:	95 a1       	ldd	r25, Z+37	; 0x25
}
     414:	08 95       	ret

00000416 <_Z20sampleBatteryVoltagev>:

int16_t sampleBatteryVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN9_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for batt voltage sense
     416:	e0 e0       	ldi	r30, 0x00	; 0
     418:	f2 e0       	ldi	r31, 0x02	; 2
     41a:	89 e4       	ldi	r24, 0x49	; 73
     41c:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     41e:	80 a1       	ldd	r24, Z+32	; 0x20
     420:	80 68       	ori	r24, 0x80	; 128
     422:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
	//ADCA.INTFLAGS = ((1U << 0) << ADC_CH0IF_bp);
	while(!(ADCA.INTFLAGS & (1 << 0)));
     424:	86 81       	ldd	r24, Z+6	; 0x06
     426:	80 ff       	sbrs	r24, 0
     428:	fd cf       	rjmp	.-6      	; 0x424 <_Z20sampleBatteryVoltagev+0xe>
	ADCA.INTFLAGS = (1 << 0);
     42a:	e0 e0       	ldi	r30, 0x00	; 0
     42c:	f2 e0       	ldi	r31, 0x02	; 2
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     432:	84 a1       	ldd	r24, Z+36	; 0x24
     434:	95 a1       	ldd	r25, Z+37	; 0x25
}
     436:	08 95       	ret

00000438 <_Z18getEBoxTemperaturev>:

double getEBoxTemperature(){
     438:	2f 92       	push	r2
     43a:	3f 92       	push	r3
     43c:	4f 92       	push	r4
     43e:	5f 92       	push	r5
     440:	6f 92       	push	r6
     442:	7f 92       	push	r7
     444:	8f 92       	push	r8
     446:	9f 92       	push	r9
     448:	af 92       	push	r10
     44a:	bf 92       	push	r11
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	0f 2e       	mov	r0, r31
     45e:	f4 e6       	ldi	r31, 0x64	; 100
     460:	6f 2e       	mov	r6, r31
     462:	71 2c       	mov	r7, r1
     464:	f0 2d       	mov	r31, r0
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
     466:	41 2c       	mov	r4, r1
     468:	51 2c       	mov	r5, r1
     46a:	81 2c       	mov	r8, r1
     46c:	91 2c       	mov	r9, r1
     46e:	d0 e0       	ldi	r29, 0x00	; 0
     470:	c0 e0       	ldi	r28, 0x00	; 0
     472:	21 2c       	mov	r2, r1
     474:	31 2c       	mov	r3, r1
	for(int i = 0; i < avgVal; ++i){
		sum += sampleTempSensorVoltage();
     476:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_Z23sampleTempSensorVoltagev>
     47a:	b9 2e       	mov	r11, r25
     47c:	a8 2e       	mov	r10, r24
     47e:	19 2f       	mov	r17, r25
     480:	11 0f       	add	r17, r17
     482:	11 0b       	sbc	r17, r17
     484:	24 2d       	mov	r18, r4
     486:	35 2d       	mov	r19, r5
     488:	48 2d       	mov	r20, r8
     48a:	59 2d       	mov	r21, r9
     48c:	6d 2f       	mov	r22, r29
     48e:	7c 2f       	mov	r23, r28
     490:	82 2d       	mov	r24, r2
     492:	93 2d       	mov	r25, r3
     494:	c1 2e       	mov	r12, r17
     496:	d1 2e       	mov	r13, r17
     498:	e1 2e       	mov	r14, r17
     49a:	f1 2e       	mov	r15, r17
     49c:	01 2f       	mov	r16, r17
     49e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__adddi3>
     4a2:	42 2e       	mov	r4, r18
     4a4:	53 2e       	mov	r5, r19
     4a6:	84 2e       	mov	r8, r20
     4a8:	95 2e       	mov	r9, r21
     4aa:	d6 2f       	mov	r29, r22
     4ac:	c7 2f       	mov	r28, r23
     4ae:	28 2e       	mov	r2, r24
     4b0:	39 2e       	mov	r3, r25
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	68 1a       	sub	r6, r24
     4b6:	71 08       	sbc	r7, r1
double getEBoxTemperature(){
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
	for(int i = 0; i < avgVal; ++i){
     4b8:	f1 f6       	brne	.-68     	; 0x476 <_Z18getEBoxTemperaturev+0x3e>
		sum += sampleTempSensorVoltage();
	}
	temperature = sum / avgVal;
     4ba:	0f 2e       	mov	r0, r31
     4bc:	f4 e6       	ldi	r31, 0x64	; 100
     4be:	af 2e       	mov	r10, r31
     4c0:	f0 2d       	mov	r31, r0
     4c2:	b1 2c       	mov	r11, r1
     4c4:	c1 2c       	mov	r12, r1
     4c6:	d1 2c       	mov	r13, r1
     4c8:	e1 2c       	mov	r14, r1
     4ca:	f1 2c       	mov	r15, r1
     4cc:	00 e0       	ldi	r16, 0x00	; 0
     4ce:	10 e0       	ldi	r17, 0x00	; 0
     4d0:	24 2d       	mov	r18, r4
     4d2:	35 2d       	mov	r19, r5
     4d4:	48 2d       	mov	r20, r8
     4d6:	59 2d       	mov	r21, r9
     4d8:	6d 2f       	mov	r22, r29
     4da:	7c 2f       	mov	r23, r28
     4dc:	82 2d       	mov	r24, r2
     4de:	93 2d       	mov	r25, r3
     4e0:	0e 94 81 06 	call	0xd02	; 0xd02 <__udivdi3>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     4e4:	62 2f       	mov	r22, r18
     4e6:	73 2f       	mov	r23, r19
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 16 05 	call	0xa2c	; 0xa2c <__floatunsisf>
     4f0:	29 e8       	ldi	r18, 0x89	; 137
     4f2:	3d e0       	ldi	r19, 0x0D	; 13
     4f4:	4d e9       	ldi	r20, 0x9D	; 157
     4f6:	5a e3       	ldi	r21, 0x3A	; 58
     4f8:	0e 94 a4 05 	call	0xb48	; 0xb48 <__mulsf3>
     4fc:	24 e6       	ldi	r18, 0x64	; 100
     4fe:	37 e6       	ldi	r19, 0x67	; 103
     500:	49 e1       	ldi	r20, 0x19	; 25
     502:	5b e3       	ldi	r21, 0x3B	; 59
     504:	0e 94 02 04 	call	0x804	; 0x804 <__addsf3>
	
	#ifdef TMP36
		temperatureFloat = 100.0 * temperatureVoltage - 50.0;
	#endif
	#ifdef TMP37
		temperatureFloat = 50.0 * temperatureVoltage;
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	48 e4       	ldi	r20, 0x48	; 72
     50e:	52 e4       	ldi	r21, 0x42	; 66
     510:	0e 94 a4 05 	call	0xb48	; 0xb48 <__mulsf3>
	#endif
	
	return temperatureFloat;
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	df 90       	pop	r13
     522:	cf 90       	pop	r12
     524:	bf 90       	pop	r11
     526:	af 90       	pop	r10
     528:	9f 90       	pop	r9
     52a:	8f 90       	pop	r8
     52c:	7f 90       	pop	r7
     52e:	6f 90       	pop	r6
     530:	5f 90       	pop	r5
     532:	4f 90       	pop	r4
     534:	3f 90       	pop	r3
     536:	2f 90       	pop	r2
     538:	08 95       	ret

0000053a <_Z28getElectronicsBatteryVoltagev>:

double getElectronicsBatteryVoltage(){
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	c2 e3       	ldi	r28, 0x32	; 50
     548:	d0 e0       	ldi	r29, 0x00	; 0

	int avgVal = 50;
	uint32_t sum = 0;
     54a:	c1 2c       	mov	r12, r1
     54c:	d1 2c       	mov	r13, r1
     54e:	76 01       	movw	r14, r12
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
     550:	0e 94 0b 02 	call	0x416	; 0x416 <_Z20sampleBatteryVoltagev>
     554:	09 2e       	mov	r0, r25
     556:	00 0c       	add	r0, r0
     558:	aa 0b       	sbc	r26, r26
     55a:	bb 0b       	sbc	r27, r27
     55c:	c8 0e       	add	r12, r24
     55e:	d9 1e       	adc	r13, r25
     560:	ea 1e       	adc	r14, r26
     562:	fb 1e       	adc	r15, r27
     564:	21 97       	sbiw	r28, 0x01	; 1
double getElectronicsBatteryVoltage(){

	int avgVal = 50;
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
     566:	a1 f7       	brne	.-24     	; 0x550 <_Z28getElectronicsBatteryVoltagev+0x16>
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
     568:	c7 01       	movw	r24, r14
     56a:	b6 01       	movw	r22, r12
     56c:	22 e3       	ldi	r18, 0x32	; 50
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	0e 94 5d 06 	call	0xcba	; 0xcba <__udivmodsi4>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     578:	b9 01       	movw	r22, r18
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 16 05 	call	0xa2c	; 0xa2c <__floatunsisf>
     582:	29 e8       	ldi	r18, 0x89	; 137
     584:	3d e0       	ldi	r19, 0x0D	; 13
     586:	4d e9       	ldi	r20, 0x9D	; 157
     588:	5a e3       	ldi	r21, 0x3A	; 58
     58a:	0e 94 a4 05 	call	0xb48	; 0xb48 <__mulsf3>
     58e:	24 e6       	ldi	r18, 0x64	; 100
     590:	37 e6       	ldi	r19, 0x67	; 103
     592:	49 e1       	ldi	r20, 0x19	; 25
     594:	5b e3       	ldi	r21, 0x3B	; 59
     596:	0e 94 02 04 	call	0x804	; 0x804 <__addsf3>
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
	double electronicsVoltage = ADCCountToVoltage(electronicsVoltageCount);
	double calculatedElectronicsVoltage =  (electronicsVoltage / .56) + (10.0 - .05);
     59a:	29 e2       	ldi	r18, 0x29	; 41
     59c:	3c e5       	ldi	r19, 0x5C	; 92
     59e:	4f e0       	ldi	r20, 0x0F	; 15
     5a0:	5f e3       	ldi	r21, 0x3F	; 63
     5a2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__divsf3>
     5a6:	23 e3       	ldi	r18, 0x33	; 51
     5a8:	33 e3       	ldi	r19, 0x33	; 51
     5aa:	4f e1       	ldi	r20, 0x1F	; 31
     5ac:	51 e4       	ldi	r21, 0x41	; 65
     5ae:	0e 94 02 04 	call	0x804	; 0x804 <__addsf3>

	return calculatedElectronicsVoltage;
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	08 95       	ret

000005c0 <main>:
//Global Variables *gasp*
volatile int toggle = 0;

int main(void)
{
	configureIO();
     5c0:	0e 94 ac 00 	call	0x158	; 0x158 <_Z11configureIOv>
	configureExternalOscillator();
     5c4:	0e 94 75 00 	call	0xea	; 0xea <_Z27configureExternalOscillatorv>
	configureUSART();					//Set up for 57600 Baud
     5c8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_Z14configureUSARTv>
	configureTimerCounter();
     5cc:	0e 94 1b 01 	call	0x236	; 0x236 <_Z21configureTimerCounterv>
	configureADCs();
     5d0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z13configureADCsv>
	configureRTC();
     5d4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_Z12configureRTCv>
	configureXCL();
     5d8:	0e 94 c7 01 	call	0x38e	; 0x38e <_Z12configureXCLv>
	
	LOW_LEVEL_INTERRUPTS_ENABLE();
     5dc:	e0 ea       	ldi	r30, 0xA0	; 160
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	82 81       	ldd	r24, Z+2	; 0x02
     5e2:	81 60       	ori	r24, 0x01	; 1
     5e4:	82 83       	std	Z+2, r24	; 0x02
	//MED_LEVEL_INTERRUPTS_ENABLE();
	HIGH_LEVEL_INTERRUPTS_ENABLE();
     5e6:	82 81       	ldd	r24, Z+2	; 0x02
     5e8:	84 60       	ori	r24, 0x04	; 4
     5ea:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable global interrupts
     5ec:	78 94       	sei
	
	uint8_t receivedUSARTData;
	
	RSSI.measuring = NOT_MEASURING;
     5ee:	e5 ea       	ldi	r30, 0xA5	; 165
     5f0:	f0 e2       	ldi	r31, 0x20	; 32
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	81 83       	std	Z+1, r24	; 0x01
	RSSI.timeDifference = 0;
     5f6:	12 82       	std	Z+2, r1	; 0x02
     5f8:	13 82       	std	Z+3, r1	; 0x03
	RSSI.sampleCount = 0;
     5fa:	16 82       	std	Z+6, r1	; 0x06
     5fc:	17 82       	std	Z+7, r1	; 0x07
	
	
	//Init string with basic documentation
	SendStringPC((char *)"#[INIT ROSS PDB]\n\r");
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e2       	ldi	r25, 0x20	; 32
     602:	0e 94 80 03 	call	0x700	; 0x700 <_Z12SendStringPCPc>
	SendStringPC((char *)"#Firmware version ");
     606:	83 e1       	ldi	r24, 0x13	; 19
     608:	90 e2       	ldi	r25, 0x20	; 32
     60a:	0e 94 80 03 	call	0x700	; 0x700 <_Z12SendStringPCPc>
	SendStringPC((char *)FIRMWARE_VERSION_STR);
     60e:	86 e2       	ldi	r24, 0x26	; 38
     610:	90 e2       	ldi	r25, 0x20	; 32
     612:	0e 94 80 03 	call	0x700	; 0x700 <_Z12SendStringPCPc>
	SendStringPC((char *)"\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr \n\r");
     616:	89 e2       	ldi	r24, 0x29	; 41
     618:	90 e2       	ldi	r25, 0x20	; 32
     61a:	0e 94 80 03 	call	0x700	; 0x700 <_Z12SendStringPCPc>
	
	ERROR_CLR();
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	80 93 46 06 	sts	0x0646, r24
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     624:	c0 ec       	ldi	r28, 0xC0	; 192
     626:	d8 e0       	ldi	r29, 0x08	; 8
			receivedUSARTData = USART_GetChar(&COMP_USART);
			if(receivedUSARTData == 'y')
				REAR_RELAY_SET();
			else if(receivedUSARTData == 'n')
				REAR_RELAY_CLR();
     628:	00 e4       	ldi	r16, 0x40	; 64
     62a:	16 e0       	ldi	r17, 0x06	; 6
     62c:	68 94       	set
     62e:	55 24       	eor	r5, r5
     630:	55 f8       	bld	r5, 5
		}		
				
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
			broadcastStatus = 0;
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     632:	e1 2c       	mov	r14, r1
     634:	68 94       	set
     636:	ff 24       	eor	r15, r15
     638:	f3 f8       	bld	r15, 3
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
				TCC4.PER = TC_1024_100MS;  //100mS delay
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
     63a:	0f 2e       	mov	r0, r31
     63c:	f9 e0       	ldi	r31, 0x09	; 9
     63e:	cf 2e       	mov	r12, r31
     640:	fd e3       	ldi	r31, 0x3D	; 61
     642:	df 2e       	mov	r13, r31
     644:	f0 2d       	mov	r31, r0
			
			SendStringPC((char *)"\n\r");
	
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
				TCC4.PER = TC_1024_100MS;  //100mS delay
     646:	0f 2e       	mov	r0, r31
     648:	f5 e3       	ldi	r31, 0x35	; 53
     64a:	6f 2e       	mov	r6, r31
     64c:	fc e0       	ldi	r31, 0x0C	; 12
     64e:	7f 2e       	mov	r7, r31
     650:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     652:	8f e3       	ldi	r24, 0x3F	; 63
     654:	9f e1       	ldi	r25, 0x1F	; 31
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <main+0x96>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0x9c>
     65c:	00 00       	nop
    {

		_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	88 23       	and	r24, r24
     662:	54 f4       	brge	.+20     	; 0x678 <main+0xb8>
			receivedUSARTData = USART_GetChar(&COMP_USART);
     664:	88 81       	ld	r24, Y
			if(receivedUSARTData == 'y')
     666:	89 37       	cpi	r24, 0x79	; 121
     668:	19 f4       	brne	.+6      	; 0x670 <main+0xb0>
				REAR_RELAY_SET();
     66a:	f8 01       	movw	r30, r16
     66c:	55 82       	std	Z+5, r5	; 0x05
     66e:	04 c0       	rjmp	.+8      	; 0x678 <main+0xb8>
			else if(receivedUSARTData == 'n')
     670:	8e 36       	cpi	r24, 0x6E	; 110
     672:	11 f4       	brne	.+4      	; 0x678 <main+0xb8>
				REAR_RELAY_CLR();
     674:	f8 01       	movw	r30, r16
     676:	56 82       	std	Z+6, r5	; 0x06
		}		
				
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
     678:	80 91 a4 20 	lds	r24, 0x20A4
     67c:	88 23       	and	r24, r24
     67e:	49 f3       	breq	.-46     	; 0x652 <main+0x92>
			broadcastStatus = 0;
     680:	10 92 a4 20 	sts	0x20A4, r1
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     684:	f7 01       	movw	r30, r14
     686:	10 a2       	std	Z+32, r1	; 0x20
     688:	11 a2       	std	Z+33, r1	; 0x21
							//have a consistent report time. (We don't want to throw
							//out the accuracy of the TC)
			
			//Calculated desired output values
			double EBoxTemp = getEBoxTemperature();
     68a:	0e 94 1c 02 	call	0x438	; 0x438 <_Z18getEBoxTemperaturev>
     68e:	4b 01       	movw	r8, r22
     690:	5c 01       	movw	r10, r24
			double electronicsBatteryVoltage = getElectronicsBatteryVoltage();
     692:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z28getElectronicsBatteryVoltagev>
			
			//Actually output the desired values
			//Not the most elegant code in the world, but it works...
			
			//Send the battery voltage
			SendFloatPC(electronicsBatteryVoltage);
     696:	0e 94 90 03 	call	0x720	; 0x720 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     69a:	82 e9       	ldi	r24, 0x92	; 146
     69c:	90 e2       	ldi	r25, 0x20	; 32
     69e:	0e 94 80 03 	call	0x700	; 0x700 <_Z12SendStringPCPc>
			//Send the rear battery voltage
			SendFloatPC(zero);
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	cb 01       	movw	r24, r22
     6a8:	0e 94 90 03 	call	0x720	; 0x720 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     6ac:	82 e9       	ldi	r24, 0x92	; 146
     6ae:	90 e2       	ldi	r25, 0x20	; 32
     6b0:	0e 94 80 03 	call	0x700	; 0x700 <_Z12SendStringPCPc>
			//Send the EBox Temperature
			SendFloatPC(EBoxTemp);
     6b4:	c5 01       	movw	r24, r10
     6b6:	b4 01       	movw	r22, r8
     6b8:	0e 94 90 03 	call	0x720	; 0x720 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     6bc:	82 e9       	ldi	r24, 0x92	; 146
     6be:	90 e2       	ldi	r25, 0x20	; 32
     6c0:	0e 94 80 03 	call	0x700	; 0x700 <_Z12SendStringPCPc>
			//Send 5v_SYS Curr
			SendFloatPC(zero);
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	cb 01       	movw	r24, r22
     6ca:	0e 94 90 03 	call	0x720	; 0x720 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     6ce:	82 e9       	ldi	r24, 0x92	; 146
     6d0:	90 e2       	ldi	r25, 0x20	; 32
     6d2:	0e 94 80 03 	call	0x700	; 0x700 <_Z12SendStringPCPc>
			//Send 5v_Comp Curr
			SendFloatPC(zero);
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	cb 01       	movw	r24, r22
     6dc:	0e 94 90 03 	call	0x720	; 0x720 <_Z11SendFloatPCd>
			SendStringPC((char *)"\tRSSI Count Value: ");
			SendNumPC(RSSI.countDifference);
			
			*/
			
			SendStringPC((char *)"\n\r");
     6e0:	8f e8       	ldi	r24, 0x8F	; 143
     6e2:	90 e2       	ldi	r25, 0x20	; 32
     6e4:	0e 94 80 03 	call	0x700	; 0x700 <_Z12SendStringPCPc>
	
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
     6e8:	f8 01       	movw	r30, r16
     6ea:	80 85       	ldd	r24, Z+8	; 0x08
     6ec:	83 fd       	sbrc	r24, 3
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <main+0x138>
				TCC4.PER = TC_1024_100MS;  //100mS delay
     6f0:	f7 01       	movw	r30, r14
     6f2:	66 a2       	std	Z+38, r6	; 0x26
     6f4:	77 a2       	std	Z+39, r7	; 0x27
     6f6:	ad cf       	rjmp	.-166    	; 0x652 <main+0x92>
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
     6f8:	f7 01       	movw	r30, r14
     6fa:	c6 a2       	std	Z+38, r12	; 0x26
     6fc:	d7 a2       	std	Z+39, r13	; 0x27
     6fe:	a9 cf       	rjmp	.-174    	; 0x652 <main+0x92>

00000700 <_Z12SendStringPCPc>:
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     700:	fc 01       	movw	r30, r24
     702:	20 81       	ld	r18, Z
     704:	22 23       	and	r18, r18
     706:	59 f0       	breq	.+22     	; 0x71e <_Z12SendStringPCPc+0x1e>
     708:	dc 01       	movw	r26, r24
     70a:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
     70c:	e0 ec       	ldi	r30, 0xC0	; 192
     70e:	f8 e0       	ldi	r31, 0x08	; 8
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	95 ff       	sbrs	r25, 5
     714:	fd cf       	rjmp	.-6      	; 0x710 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
     716:	20 83       	st	Z, r18
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     718:	2d 91       	ld	r18, X+
     71a:	21 11       	cpse	r18, r1
     71c:	f9 cf       	rjmp	.-14     	; 0x710 <_Z12SendStringPCPc+0x10>
     71e:	08 95       	ret

00000720 <_Z11SendFloatPCd>:
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
}

void SendFloatPC(double numToSend){
     720:	8f 92       	push	r8
     722:	9f 92       	push	r9
     724:	af 92       	push	r10
     726:	bf 92       	push	r11
     728:	cf 92       	push	r12
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	c4 56       	subi	r28, 0x64	; 100
     73e:	d1 09       	sbc	r29, r1
     740:	cd bf       	out	0x3d, r28	; 61
     742:	de bf       	out	0x3e, r29	; 62
     744:	4b 01       	movw	r8, r22
     746:	5c 01       	movw	r10, r24
	char buffer[100];
	
	int d1 = numToSend;
     748:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fixsfsi>
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24
	float f2 = numToSend - d1;
     750:	07 2e       	mov	r0, r23
     752:	00 0c       	add	r0, r0
     754:	88 0b       	sbc	r24, r24
     756:	99 0b       	sbc	r25, r25
     758:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatsisf>
     75c:	9b 01       	movw	r18, r22
     75e:	ac 01       	movw	r20, r24
     760:	c5 01       	movw	r24, r10
     762:	b4 01       	movw	r22, r8
     764:	0e 94 01 04 	call	0x802	; 0x802 <__subsf3>
	int d2 = trunc(f2 * 10000);
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e4       	ldi	r19, 0x40	; 64
     76c:	4c e1       	ldi	r20, 0x1C	; 28
     76e:	56 e4       	ldi	r21, 0x46	; 70
     770:	0e 94 a4 05 	call	0xb48	; 0xb48 <__mulsf3>
     774:	0e 94 11 06 	call	0xc22	; 0xc22 <trunc>
     778:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fixsfsi>
	
	sprintf(buffer, "%d.%04d", d1, abs(d2));
     77c:	9b 01       	movw	r18, r22
     77e:	77 23       	and	r23, r23
     780:	24 f4       	brge	.+8      	; 0x78a <_Z11SendFloatPCd+0x6a>
     782:	22 27       	eor	r18, r18
     784:	33 27       	eor	r19, r19
     786:	26 1b       	sub	r18, r22
     788:	37 0b       	sbc	r19, r23
     78a:	3f 93       	push	r19
     78c:	2f 93       	push	r18
     78e:	df 92       	push	r13
     790:	cf 92       	push	r12
     792:	84 e9       	ldi	r24, 0x94	; 148
     794:	90 e2       	ldi	r25, 0x20	; 32
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	8e 01       	movw	r16, r28
     79c:	0f 5f       	subi	r16, 0xFF	; 255
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	1f 93       	push	r17
     7a2:	0f 93       	push	r16
     7a4:	0e 94 f3 06 	call	0xde6	; 0xde6 <sprintf>
	
	//sprintf(buffer, "%f", numToSend);
	SendStringPC(buffer);
     7a8:	c8 01       	movw	r24, r16
     7aa:	0e 94 80 03 	call	0x700	; 0x700 <_Z12SendStringPCPc>
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	de bf       	out	0x3e, r29	; 62
}
     7b2:	cc 59       	subi	r28, 0x9C	; 156
     7b4:	df 4f       	sbci	r29, 0xFF	; 255
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	08 95       	ret

000007d4 <_Z14configureUSARTv>:

void configureUSART(void){
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
     7d4:	e0 e4       	ldi	r30, 0x40	; 64
     7d6:	f6 e0       	ldi	r31, 0x06	; 6
     7d8:	80 e8       	ldi	r24, 0x80	; 128
     7da:	81 83       	std	Z+1, r24	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	82 83       	std	Z+2, r24	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
     7e0:	86 85       	ldd	r24, Z+14	; 0x0e
     7e2:	80 61       	ori	r24, 0x10	; 16
     7e4:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     7e6:	e0 ec       	ldi	r30, 0xC0	; 192
     7e8:	f8 e0       	ldi	r31, 0x08	; 8
     7ea:	83 e0       	ldi	r24, 0x03	; 3
     7ec:	84 83       	std	Z+4, r24	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
     7ee:	82 e2       	ldi	r24, 0x22	; 34
     7f0:	86 83       	std	Z+6, r24	; 0x06
     7f2:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
     7f4:	83 81       	ldd	r24, Z+3	; 0x03
     7f6:	80 61       	ori	r24, 0x10	; 16
     7f8:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
     7fa:	83 81       	ldd	r24, Z+3	; 0x03
     7fc:	88 60       	ori	r24, 0x08	; 8
     7fe:	83 83       	std	Z+3, r24	; 0x03
     800:	08 95       	ret

00000802 <__subsf3>:
     802:	50 58       	subi	r21, 0x80	; 128

00000804 <__addsf3>:
     804:	bb 27       	eor	r27, r27
     806:	aa 27       	eor	r26, r26
     808:	0e 94 19 04 	call	0x832	; 0x832 <__addsf3x>
     80c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_round>
     810:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_pscA>
     814:	38 f0       	brcs	.+14     	; 0x824 <__addsf3+0x20>
     816:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_pscB>
     81a:	20 f0       	brcs	.+8      	; 0x824 <__addsf3+0x20>
     81c:	39 f4       	brne	.+14     	; 0x82c <__addsf3+0x28>
     81e:	9f 3f       	cpi	r25, 0xFF	; 255
     820:	19 f4       	brne	.+6      	; 0x828 <__addsf3+0x24>
     822:	26 f4       	brtc	.+8      	; 0x82c <__addsf3+0x28>
     824:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_nan>
     828:	0e f4       	brtc	.+2      	; 0x82c <__addsf3+0x28>
     82a:	e0 95       	com	r30
     82c:	e7 fb       	bst	r30, 7
     82e:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_inf>

00000832 <__addsf3x>:
     832:	e9 2f       	mov	r30, r25
     834:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__fp_split3>
     838:	58 f3       	brcs	.-42     	; 0x810 <__addsf3+0xc>
     83a:	ba 17       	cp	r27, r26
     83c:	62 07       	cpc	r22, r18
     83e:	73 07       	cpc	r23, r19
     840:	84 07       	cpc	r24, r20
     842:	95 07       	cpc	r25, r21
     844:	20 f0       	brcs	.+8      	; 0x84e <__addsf3x+0x1c>
     846:	79 f4       	brne	.+30     	; 0x866 <__addsf3x+0x34>
     848:	a6 f5       	brtc	.+104    	; 0x8b2 <__addsf3x+0x80>
     84a:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_zero>
     84e:	0e f4       	brtc	.+2      	; 0x852 <__addsf3x+0x20>
     850:	e0 95       	com	r30
     852:	0b 2e       	mov	r0, r27
     854:	ba 2f       	mov	r27, r26
     856:	a0 2d       	mov	r26, r0
     858:	0b 01       	movw	r0, r22
     85a:	b9 01       	movw	r22, r18
     85c:	90 01       	movw	r18, r0
     85e:	0c 01       	movw	r0, r24
     860:	ca 01       	movw	r24, r20
     862:	a0 01       	movw	r20, r0
     864:	11 24       	eor	r1, r1
     866:	ff 27       	eor	r31, r31
     868:	59 1b       	sub	r21, r25
     86a:	99 f0       	breq	.+38     	; 0x892 <__addsf3x+0x60>
     86c:	59 3f       	cpi	r21, 0xF9	; 249
     86e:	50 f4       	brcc	.+20     	; 0x884 <__addsf3x+0x52>
     870:	50 3e       	cpi	r21, 0xE0	; 224
     872:	68 f1       	brcs	.+90     	; 0x8ce <__addsf3x+0x9c>
     874:	1a 16       	cp	r1, r26
     876:	f0 40       	sbci	r31, 0x00	; 0
     878:	a2 2f       	mov	r26, r18
     87a:	23 2f       	mov	r18, r19
     87c:	34 2f       	mov	r19, r20
     87e:	44 27       	eor	r20, r20
     880:	58 5f       	subi	r21, 0xF8	; 248
     882:	f3 cf       	rjmp	.-26     	; 0x86a <__addsf3x+0x38>
     884:	46 95       	lsr	r20
     886:	37 95       	ror	r19
     888:	27 95       	ror	r18
     88a:	a7 95       	ror	r26
     88c:	f0 40       	sbci	r31, 0x00	; 0
     88e:	53 95       	inc	r21
     890:	c9 f7       	brne	.-14     	; 0x884 <__addsf3x+0x52>
     892:	7e f4       	brtc	.+30     	; 0x8b2 <__addsf3x+0x80>
     894:	1f 16       	cp	r1, r31
     896:	ba 0b       	sbc	r27, r26
     898:	62 0b       	sbc	r22, r18
     89a:	73 0b       	sbc	r23, r19
     89c:	84 0b       	sbc	r24, r20
     89e:	ba f0       	brmi	.+46     	; 0x8ce <__addsf3x+0x9c>
     8a0:	91 50       	subi	r25, 0x01	; 1
     8a2:	a1 f0       	breq	.+40     	; 0x8cc <__addsf3x+0x9a>
     8a4:	ff 0f       	add	r31, r31
     8a6:	bb 1f       	adc	r27, r27
     8a8:	66 1f       	adc	r22, r22
     8aa:	77 1f       	adc	r23, r23
     8ac:	88 1f       	adc	r24, r24
     8ae:	c2 f7       	brpl	.-16     	; 0x8a0 <__addsf3x+0x6e>
     8b0:	0e c0       	rjmp	.+28     	; 0x8ce <__addsf3x+0x9c>
     8b2:	ba 0f       	add	r27, r26
     8b4:	62 1f       	adc	r22, r18
     8b6:	73 1f       	adc	r23, r19
     8b8:	84 1f       	adc	r24, r20
     8ba:	48 f4       	brcc	.+18     	; 0x8ce <__addsf3x+0x9c>
     8bc:	87 95       	ror	r24
     8be:	77 95       	ror	r23
     8c0:	67 95       	ror	r22
     8c2:	b7 95       	ror	r27
     8c4:	f7 95       	ror	r31
     8c6:	9e 3f       	cpi	r25, 0xFE	; 254
     8c8:	08 f0       	brcs	.+2      	; 0x8cc <__addsf3x+0x9a>
     8ca:	b0 cf       	rjmp	.-160    	; 0x82c <__addsf3+0x28>
     8cc:	93 95       	inc	r25
     8ce:	88 0f       	add	r24, r24
     8d0:	08 f0       	brcs	.+2      	; 0x8d4 <__addsf3x+0xa2>
     8d2:	99 27       	eor	r25, r25
     8d4:	ee 0f       	add	r30, r30
     8d6:	97 95       	ror	r25
     8d8:	87 95       	ror	r24
     8da:	08 95       	ret

000008dc <__divsf3>:
     8dc:	0e 94 82 04 	call	0x904	; 0x904 <__divsf3x>
     8e0:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_round>
     8e4:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_pscB>
     8e8:	58 f0       	brcs	.+22     	; 0x900 <__divsf3+0x24>
     8ea:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_pscA>
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__divsf3+0x24>
     8f0:	29 f4       	brne	.+10     	; 0x8fc <__divsf3+0x20>
     8f2:	5f 3f       	cpi	r21, 0xFF	; 255
     8f4:	29 f0       	breq	.+10     	; 0x900 <__divsf3+0x24>
     8f6:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_inf>
     8fa:	51 11       	cpse	r21, r1
     8fc:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_szero>
     900:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_nan>

00000904 <__divsf3x>:
     904:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__fp_split3>
     908:	68 f3       	brcs	.-38     	; 0x8e4 <__divsf3+0x8>

0000090a <__divsf3_pse>:
     90a:	99 23       	and	r25, r25
     90c:	b1 f3       	breq	.-20     	; 0x8fa <__divsf3+0x1e>
     90e:	55 23       	and	r21, r21
     910:	91 f3       	breq	.-28     	; 0x8f6 <__divsf3+0x1a>
     912:	95 1b       	sub	r25, r21
     914:	55 0b       	sbc	r21, r21
     916:	bb 27       	eor	r27, r27
     918:	aa 27       	eor	r26, r26
     91a:	62 17       	cp	r22, r18
     91c:	73 07       	cpc	r23, r19
     91e:	84 07       	cpc	r24, r20
     920:	38 f0       	brcs	.+14     	; 0x930 <__divsf3_pse+0x26>
     922:	9f 5f       	subi	r25, 0xFF	; 255
     924:	5f 4f       	sbci	r21, 0xFF	; 255
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	44 1f       	adc	r20, r20
     92c:	aa 1f       	adc	r26, r26
     92e:	a9 f3       	breq	.-22     	; 0x91a <__divsf3_pse+0x10>
     930:	35 d0       	rcall	.+106    	; 0x99c <__divsf3_pse+0x92>
     932:	0e 2e       	mov	r0, r30
     934:	3a f0       	brmi	.+14     	; 0x944 <__divsf3_pse+0x3a>
     936:	e0 e8       	ldi	r30, 0x80	; 128
     938:	32 d0       	rcall	.+100    	; 0x99e <__divsf3_pse+0x94>
     93a:	91 50       	subi	r25, 0x01	; 1
     93c:	50 40       	sbci	r21, 0x00	; 0
     93e:	e6 95       	lsr	r30
     940:	00 1c       	adc	r0, r0
     942:	ca f7       	brpl	.-14     	; 0x936 <__divsf3_pse+0x2c>
     944:	2b d0       	rcall	.+86     	; 0x99c <__divsf3_pse+0x92>
     946:	fe 2f       	mov	r31, r30
     948:	29 d0       	rcall	.+82     	; 0x99c <__divsf3_pse+0x92>
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
     94e:	88 1f       	adc	r24, r24
     950:	bb 1f       	adc	r27, r27
     952:	26 17       	cp	r18, r22
     954:	37 07       	cpc	r19, r23
     956:	48 07       	cpc	r20, r24
     958:	ab 07       	cpc	r26, r27
     95a:	b0 e8       	ldi	r27, 0x80	; 128
     95c:	09 f0       	breq	.+2      	; 0x960 <__divsf3_pse+0x56>
     95e:	bb 0b       	sbc	r27, r27
     960:	80 2d       	mov	r24, r0
     962:	bf 01       	movw	r22, r30
     964:	ff 27       	eor	r31, r31
     966:	93 58       	subi	r25, 0x83	; 131
     968:	5f 4f       	sbci	r21, 0xFF	; 255
     96a:	3a f0       	brmi	.+14     	; 0x97a <__divsf3_pse+0x70>
     96c:	9e 3f       	cpi	r25, 0xFE	; 254
     96e:	51 05       	cpc	r21, r1
     970:	78 f0       	brcs	.+30     	; 0x990 <__divsf3_pse+0x86>
     972:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_inf>
     976:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_szero>
     97a:	5f 3f       	cpi	r21, 0xFF	; 255
     97c:	e4 f3       	brlt	.-8      	; 0x976 <__divsf3_pse+0x6c>
     97e:	98 3e       	cpi	r25, 0xE8	; 232
     980:	d4 f3       	brlt	.-12     	; 0x976 <__divsf3_pse+0x6c>
     982:	86 95       	lsr	r24
     984:	77 95       	ror	r23
     986:	67 95       	ror	r22
     988:	b7 95       	ror	r27
     98a:	f7 95       	ror	r31
     98c:	9f 5f       	subi	r25, 0xFF	; 255
     98e:	c9 f7       	brne	.-14     	; 0x982 <__divsf3_pse+0x78>
     990:	88 0f       	add	r24, r24
     992:	91 1d       	adc	r25, r1
     994:	96 95       	lsr	r25
     996:	87 95       	ror	r24
     998:	97 f9       	bld	r25, 7
     99a:	08 95       	ret
     99c:	e1 e0       	ldi	r30, 0x01	; 1
     99e:	66 0f       	add	r22, r22
     9a0:	77 1f       	adc	r23, r23
     9a2:	88 1f       	adc	r24, r24
     9a4:	bb 1f       	adc	r27, r27
     9a6:	62 17       	cp	r22, r18
     9a8:	73 07       	cpc	r23, r19
     9aa:	84 07       	cpc	r24, r20
     9ac:	ba 07       	cpc	r27, r26
     9ae:	20 f0       	brcs	.+8      	; 0x9b8 <__divsf3_pse+0xae>
     9b0:	62 1b       	sub	r22, r18
     9b2:	73 0b       	sbc	r23, r19
     9b4:	84 0b       	sbc	r24, r20
     9b6:	ba 0b       	sbc	r27, r26
     9b8:	ee 1f       	adc	r30, r30
     9ba:	88 f7       	brcc	.-30     	; 0x99e <__divsf3_pse+0x94>
     9bc:	e0 95       	com	r30
     9be:	08 95       	ret

000009c0 <__fixsfsi>:
     9c0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fixunssfsi>
     9c4:	68 94       	set
     9c6:	b1 11       	cpse	r27, r1
     9c8:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_szero>
     9cc:	08 95       	ret

000009ce <__fixunssfsi>:
     9ce:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_splitA>
     9d2:	88 f0       	brcs	.+34     	; 0x9f6 <__fixunssfsi+0x28>
     9d4:	9f 57       	subi	r25, 0x7F	; 127
     9d6:	98 f0       	brcs	.+38     	; 0x9fe <__fixunssfsi+0x30>
     9d8:	b9 2f       	mov	r27, r25
     9da:	99 27       	eor	r25, r25
     9dc:	b7 51       	subi	r27, 0x17	; 23
     9de:	b0 f0       	brcs	.+44     	; 0xa0c <__fixunssfsi+0x3e>
     9e0:	e1 f0       	breq	.+56     	; 0xa1a <__fixunssfsi+0x4c>
     9e2:	66 0f       	add	r22, r22
     9e4:	77 1f       	adc	r23, r23
     9e6:	88 1f       	adc	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	1a f0       	brmi	.+6      	; 0x9f2 <__fixunssfsi+0x24>
     9ec:	ba 95       	dec	r27
     9ee:	c9 f7       	brne	.-14     	; 0x9e2 <__fixunssfsi+0x14>
     9f0:	14 c0       	rjmp	.+40     	; 0xa1a <__fixunssfsi+0x4c>
     9f2:	b1 30       	cpi	r27, 0x01	; 1
     9f4:	91 f0       	breq	.+36     	; 0xa1a <__fixunssfsi+0x4c>
     9f6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_zero>
     9fa:	b1 e0       	ldi	r27, 0x01	; 1
     9fc:	08 95       	ret
     9fe:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_zero>
     a02:	67 2f       	mov	r22, r23
     a04:	78 2f       	mov	r23, r24
     a06:	88 27       	eor	r24, r24
     a08:	b8 5f       	subi	r27, 0xF8	; 248
     a0a:	39 f0       	breq	.+14     	; 0xa1a <__fixunssfsi+0x4c>
     a0c:	b9 3f       	cpi	r27, 0xF9	; 249
     a0e:	cc f3       	brlt	.-14     	; 0xa02 <__fixunssfsi+0x34>
     a10:	86 95       	lsr	r24
     a12:	77 95       	ror	r23
     a14:	67 95       	ror	r22
     a16:	b3 95       	inc	r27
     a18:	d9 f7       	brne	.-10     	; 0xa10 <__fixunssfsi+0x42>
     a1a:	3e f4       	brtc	.+14     	; 0xa2a <__fixunssfsi+0x5c>
     a1c:	90 95       	com	r25
     a1e:	80 95       	com	r24
     a20:	70 95       	com	r23
     a22:	61 95       	neg	r22
     a24:	7f 4f       	sbci	r23, 0xFF	; 255
     a26:	8f 4f       	sbci	r24, 0xFF	; 255
     a28:	9f 4f       	sbci	r25, 0xFF	; 255
     a2a:	08 95       	ret

00000a2c <__floatunsisf>:
     a2c:	e8 94       	clt
     a2e:	09 c0       	rjmp	.+18     	; 0xa42 <__floatsisf+0x12>

00000a30 <__floatsisf>:
     a30:	97 fb       	bst	r25, 7
     a32:	3e f4       	brtc	.+14     	; 0xa42 <__floatsisf+0x12>
     a34:	90 95       	com	r25
     a36:	80 95       	com	r24
     a38:	70 95       	com	r23
     a3a:	61 95       	neg	r22
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	8f 4f       	sbci	r24, 0xFF	; 255
     a40:	9f 4f       	sbci	r25, 0xFF	; 255
     a42:	99 23       	and	r25, r25
     a44:	a9 f0       	breq	.+42     	; 0xa70 <__floatsisf+0x40>
     a46:	f9 2f       	mov	r31, r25
     a48:	96 e9       	ldi	r25, 0x96	; 150
     a4a:	bb 27       	eor	r27, r27
     a4c:	93 95       	inc	r25
     a4e:	f6 95       	lsr	r31
     a50:	87 95       	ror	r24
     a52:	77 95       	ror	r23
     a54:	67 95       	ror	r22
     a56:	b7 95       	ror	r27
     a58:	f1 11       	cpse	r31, r1
     a5a:	f8 cf       	rjmp	.-16     	; 0xa4c <__floatsisf+0x1c>
     a5c:	fa f4       	brpl	.+62     	; 0xa9c <__floatsisf+0x6c>
     a5e:	bb 0f       	add	r27, r27
     a60:	11 f4       	brne	.+4      	; 0xa66 <__floatsisf+0x36>
     a62:	60 ff       	sbrs	r22, 0
     a64:	1b c0       	rjmp	.+54     	; 0xa9c <__floatsisf+0x6c>
     a66:	6f 5f       	subi	r22, 0xFF	; 255
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	8f 4f       	sbci	r24, 0xFF	; 255
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
     a6e:	16 c0       	rjmp	.+44     	; 0xa9c <__floatsisf+0x6c>
     a70:	88 23       	and	r24, r24
     a72:	11 f0       	breq	.+4      	; 0xa78 <__floatsisf+0x48>
     a74:	96 e9       	ldi	r25, 0x96	; 150
     a76:	11 c0       	rjmp	.+34     	; 0xa9a <__floatsisf+0x6a>
     a78:	77 23       	and	r23, r23
     a7a:	21 f0       	breq	.+8      	; 0xa84 <__floatsisf+0x54>
     a7c:	9e e8       	ldi	r25, 0x8E	; 142
     a7e:	87 2f       	mov	r24, r23
     a80:	76 2f       	mov	r23, r22
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <__floatsisf+0x5e>
     a84:	66 23       	and	r22, r22
     a86:	71 f0       	breq	.+28     	; 0xaa4 <__floatsisf+0x74>
     a88:	96 e8       	ldi	r25, 0x86	; 134
     a8a:	86 2f       	mov	r24, r22
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	2a f0       	brmi	.+10     	; 0xa9c <__floatsisf+0x6c>
     a92:	9a 95       	dec	r25
     a94:	66 0f       	add	r22, r22
     a96:	77 1f       	adc	r23, r23
     a98:	88 1f       	adc	r24, r24
     a9a:	da f7       	brpl	.-10     	; 0xa92 <__floatsisf+0x62>
     a9c:	88 0f       	add	r24, r24
     a9e:	96 95       	lsr	r25
     aa0:	87 95       	ror	r24
     aa2:	97 f9       	bld	r25, 7
     aa4:	08 95       	ret

00000aa6 <__fp_inf>:
     aa6:	97 f9       	bld	r25, 7
     aa8:	9f 67       	ori	r25, 0x7F	; 127
     aaa:	80 e8       	ldi	r24, 0x80	; 128
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	08 95       	ret

00000ab2 <__fp_nan>:
     ab2:	9f ef       	ldi	r25, 0xFF	; 255
     ab4:	80 ec       	ldi	r24, 0xC0	; 192
     ab6:	08 95       	ret

00000ab8 <__fp_pscA>:
     ab8:	00 24       	eor	r0, r0
     aba:	0a 94       	dec	r0
     abc:	16 16       	cp	r1, r22
     abe:	17 06       	cpc	r1, r23
     ac0:	18 06       	cpc	r1, r24
     ac2:	09 06       	cpc	r0, r25
     ac4:	08 95       	ret

00000ac6 <__fp_pscB>:
     ac6:	00 24       	eor	r0, r0
     ac8:	0a 94       	dec	r0
     aca:	12 16       	cp	r1, r18
     acc:	13 06       	cpc	r1, r19
     ace:	14 06       	cpc	r1, r20
     ad0:	05 06       	cpc	r0, r21
     ad2:	08 95       	ret

00000ad4 <__fp_round>:
     ad4:	09 2e       	mov	r0, r25
     ad6:	03 94       	inc	r0
     ad8:	00 0c       	add	r0, r0
     ada:	11 f4       	brne	.+4      	; 0xae0 <__fp_round+0xc>
     adc:	88 23       	and	r24, r24
     ade:	52 f0       	brmi	.+20     	; 0xaf4 <__fp_round+0x20>
     ae0:	bb 0f       	add	r27, r27
     ae2:	40 f4       	brcc	.+16     	; 0xaf4 <__fp_round+0x20>
     ae4:	bf 2b       	or	r27, r31
     ae6:	11 f4       	brne	.+4      	; 0xaec <__fp_round+0x18>
     ae8:	60 ff       	sbrs	r22, 0
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <__fp_round+0x20>
     aec:	6f 5f       	subi	r22, 0xFF	; 255
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	8f 4f       	sbci	r24, 0xFF	; 255
     af2:	9f 4f       	sbci	r25, 0xFF	; 255
     af4:	08 95       	ret

00000af6 <__fp_split3>:
     af6:	57 fd       	sbrc	r21, 7
     af8:	90 58       	subi	r25, 0x80	; 128
     afa:	44 0f       	add	r20, r20
     afc:	55 1f       	adc	r21, r21
     afe:	59 f0       	breq	.+22     	; 0xb16 <__fp_splitA+0x10>
     b00:	5f 3f       	cpi	r21, 0xFF	; 255
     b02:	71 f0       	breq	.+28     	; 0xb20 <__fp_splitA+0x1a>
     b04:	47 95       	ror	r20

00000b06 <__fp_splitA>:
     b06:	88 0f       	add	r24, r24
     b08:	97 fb       	bst	r25, 7
     b0a:	99 1f       	adc	r25, r25
     b0c:	61 f0       	breq	.+24     	; 0xb26 <__fp_splitA+0x20>
     b0e:	9f 3f       	cpi	r25, 0xFF	; 255
     b10:	79 f0       	breq	.+30     	; 0xb30 <__fp_splitA+0x2a>
     b12:	87 95       	ror	r24
     b14:	08 95       	ret
     b16:	12 16       	cp	r1, r18
     b18:	13 06       	cpc	r1, r19
     b1a:	14 06       	cpc	r1, r20
     b1c:	55 1f       	adc	r21, r21
     b1e:	f2 cf       	rjmp	.-28     	; 0xb04 <__fp_split3+0xe>
     b20:	46 95       	lsr	r20
     b22:	f1 df       	rcall	.-30     	; 0xb06 <__fp_splitA>
     b24:	08 c0       	rjmp	.+16     	; 0xb36 <__fp_splitA+0x30>
     b26:	16 16       	cp	r1, r22
     b28:	17 06       	cpc	r1, r23
     b2a:	18 06       	cpc	r1, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	f1 cf       	rjmp	.-30     	; 0xb12 <__fp_splitA+0xc>
     b30:	86 95       	lsr	r24
     b32:	71 05       	cpc	r23, r1
     b34:	61 05       	cpc	r22, r1
     b36:	08 94       	sec
     b38:	08 95       	ret

00000b3a <__fp_zero>:
     b3a:	e8 94       	clt

00000b3c <__fp_szero>:
     b3c:	bb 27       	eor	r27, r27
     b3e:	66 27       	eor	r22, r22
     b40:	77 27       	eor	r23, r23
     b42:	cb 01       	movw	r24, r22
     b44:	97 f9       	bld	r25, 7
     b46:	08 95       	ret

00000b48 <__mulsf3>:
     b48:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__mulsf3x>
     b4c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_round>
     b50:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_pscA>
     b54:	38 f0       	brcs	.+14     	; 0xb64 <__mulsf3+0x1c>
     b56:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_pscB>
     b5a:	20 f0       	brcs	.+8      	; 0xb64 <__mulsf3+0x1c>
     b5c:	95 23       	and	r25, r21
     b5e:	11 f0       	breq	.+4      	; 0xb64 <__mulsf3+0x1c>
     b60:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_inf>
     b64:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_nan>
     b68:	11 24       	eor	r1, r1
     b6a:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_szero>

00000b6e <__mulsf3x>:
     b6e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__fp_split3>
     b72:	70 f3       	brcs	.-36     	; 0xb50 <__mulsf3+0x8>

00000b74 <__mulsf3_pse>:
     b74:	95 9f       	mul	r25, r21
     b76:	c1 f3       	breq	.-16     	; 0xb68 <__mulsf3+0x20>
     b78:	95 0f       	add	r25, r21
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	55 1f       	adc	r21, r21
     b7e:	62 9f       	mul	r22, r18
     b80:	f0 01       	movw	r30, r0
     b82:	72 9f       	mul	r23, r18
     b84:	bb 27       	eor	r27, r27
     b86:	f0 0d       	add	r31, r0
     b88:	b1 1d       	adc	r27, r1
     b8a:	63 9f       	mul	r22, r19
     b8c:	aa 27       	eor	r26, r26
     b8e:	f0 0d       	add	r31, r0
     b90:	b1 1d       	adc	r27, r1
     b92:	aa 1f       	adc	r26, r26
     b94:	64 9f       	mul	r22, r20
     b96:	66 27       	eor	r22, r22
     b98:	b0 0d       	add	r27, r0
     b9a:	a1 1d       	adc	r26, r1
     b9c:	66 1f       	adc	r22, r22
     b9e:	82 9f       	mul	r24, r18
     ba0:	22 27       	eor	r18, r18
     ba2:	b0 0d       	add	r27, r0
     ba4:	a1 1d       	adc	r26, r1
     ba6:	62 1f       	adc	r22, r18
     ba8:	73 9f       	mul	r23, r19
     baa:	b0 0d       	add	r27, r0
     bac:	a1 1d       	adc	r26, r1
     bae:	62 1f       	adc	r22, r18
     bb0:	83 9f       	mul	r24, r19
     bb2:	a0 0d       	add	r26, r0
     bb4:	61 1d       	adc	r22, r1
     bb6:	22 1f       	adc	r18, r18
     bb8:	74 9f       	mul	r23, r20
     bba:	33 27       	eor	r19, r19
     bbc:	a0 0d       	add	r26, r0
     bbe:	61 1d       	adc	r22, r1
     bc0:	23 1f       	adc	r18, r19
     bc2:	84 9f       	mul	r24, r20
     bc4:	60 0d       	add	r22, r0
     bc6:	21 1d       	adc	r18, r1
     bc8:	82 2f       	mov	r24, r18
     bca:	76 2f       	mov	r23, r22
     bcc:	6a 2f       	mov	r22, r26
     bce:	11 24       	eor	r1, r1
     bd0:	9f 57       	subi	r25, 0x7F	; 127
     bd2:	50 40       	sbci	r21, 0x00	; 0
     bd4:	9a f0       	brmi	.+38     	; 0xbfc <__mulsf3_pse+0x88>
     bd6:	f1 f0       	breq	.+60     	; 0xc14 <__mulsf3_pse+0xa0>
     bd8:	88 23       	and	r24, r24
     bda:	4a f0       	brmi	.+18     	; 0xbee <__mulsf3_pse+0x7a>
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	bb 1f       	adc	r27, r27
     be2:	66 1f       	adc	r22, r22
     be4:	77 1f       	adc	r23, r23
     be6:	88 1f       	adc	r24, r24
     be8:	91 50       	subi	r25, 0x01	; 1
     bea:	50 40       	sbci	r21, 0x00	; 0
     bec:	a9 f7       	brne	.-22     	; 0xbd8 <__mulsf3_pse+0x64>
     bee:	9e 3f       	cpi	r25, 0xFE	; 254
     bf0:	51 05       	cpc	r21, r1
     bf2:	80 f0       	brcs	.+32     	; 0xc14 <__mulsf3_pse+0xa0>
     bf4:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_inf>
     bf8:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_szero>
     bfc:	5f 3f       	cpi	r21, 0xFF	; 255
     bfe:	e4 f3       	brlt	.-8      	; 0xbf8 <__mulsf3_pse+0x84>
     c00:	98 3e       	cpi	r25, 0xE8	; 232
     c02:	d4 f3       	brlt	.-12     	; 0xbf8 <__mulsf3_pse+0x84>
     c04:	86 95       	lsr	r24
     c06:	77 95       	ror	r23
     c08:	67 95       	ror	r22
     c0a:	b7 95       	ror	r27
     c0c:	f7 95       	ror	r31
     c0e:	e7 95       	ror	r30
     c10:	9f 5f       	subi	r25, 0xFF	; 255
     c12:	c1 f7       	brne	.-16     	; 0xc04 <__mulsf3_pse+0x90>
     c14:	fe 2b       	or	r31, r30
     c16:	88 0f       	add	r24, r24
     c18:	91 1d       	adc	r25, r1
     c1a:	96 95       	lsr	r25
     c1c:	87 95       	ror	r24
     c1e:	97 f9       	bld	r25, 7
     c20:	08 95       	ret

00000c22 <trunc>:
     c22:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fp_trunc>
     c26:	30 f0       	brcs	.+12     	; 0xc34 <trunc+0x12>
     c28:	9f 37       	cpi	r25, 0x7F	; 127
     c2a:	10 f4       	brcc	.+4      	; 0xc30 <trunc+0xe>
     c2c:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_szero>
     c30:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_mintl>
     c34:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_mpack>

00000c38 <__fp_mintl>:
     c38:	88 23       	and	r24, r24
     c3a:	71 f4       	brne	.+28     	; 0xc58 <__fp_mintl+0x20>
     c3c:	77 23       	and	r23, r23
     c3e:	21 f0       	breq	.+8      	; 0xc48 <__fp_mintl+0x10>
     c40:	98 50       	subi	r25, 0x08	; 8
     c42:	87 2b       	or	r24, r23
     c44:	76 2f       	mov	r23, r22
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <__fp_mintl+0x1e>
     c48:	66 23       	and	r22, r22
     c4a:	11 f4       	brne	.+4      	; 0xc50 <__fp_mintl+0x18>
     c4c:	99 27       	eor	r25, r25
     c4e:	0d c0       	rjmp	.+26     	; 0xc6a <__fp_mintl+0x32>
     c50:	90 51       	subi	r25, 0x10	; 16
     c52:	86 2b       	or	r24, r22
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	2a f0       	brmi	.+10     	; 0xc64 <__fp_mintl+0x2c>
     c5a:	9a 95       	dec	r25
     c5c:	66 0f       	add	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	88 1f       	adc	r24, r24
     c62:	da f7       	brpl	.-10     	; 0xc5a <__fp_mintl+0x22>
     c64:	88 0f       	add	r24, r24
     c66:	96 95       	lsr	r25
     c68:	87 95       	ror	r24
     c6a:	97 f9       	bld	r25, 7
     c6c:	08 95       	ret

00000c6e <__fp_mpack>:
     c6e:	9f 3f       	cpi	r25, 0xFF	; 255
     c70:	31 f0       	breq	.+12     	; 0xc7e <__fp_mpack_finite+0xc>

00000c72 <__fp_mpack_finite>:
     c72:	91 50       	subi	r25, 0x01	; 1
     c74:	20 f4       	brcc	.+8      	; 0xc7e <__fp_mpack_finite+0xc>
     c76:	87 95       	ror	r24
     c78:	77 95       	ror	r23
     c7a:	67 95       	ror	r22
     c7c:	b7 95       	ror	r27
     c7e:	88 0f       	add	r24, r24
     c80:	91 1d       	adc	r25, r1
     c82:	96 95       	lsr	r25
     c84:	87 95       	ror	r24
     c86:	97 f9       	bld	r25, 7
     c88:	08 95       	ret

00000c8a <__fp_trunc>:
     c8a:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_splitA>
     c8e:	a0 f0       	brcs	.+40     	; 0xcb8 <__fp_trunc+0x2e>
     c90:	be e7       	ldi	r27, 0x7E	; 126
     c92:	b9 17       	cp	r27, r25
     c94:	88 f4       	brcc	.+34     	; 0xcb8 <__fp_trunc+0x2e>
     c96:	bb 27       	eor	r27, r27
     c98:	9f 38       	cpi	r25, 0x8F	; 143
     c9a:	60 f4       	brcc	.+24     	; 0xcb4 <__fp_trunc+0x2a>
     c9c:	16 16       	cp	r1, r22
     c9e:	b1 1d       	adc	r27, r1
     ca0:	67 2f       	mov	r22, r23
     ca2:	78 2f       	mov	r23, r24
     ca4:	88 27       	eor	r24, r24
     ca6:	98 5f       	subi	r25, 0xF8	; 248
     ca8:	f7 cf       	rjmp	.-18     	; 0xc98 <__fp_trunc+0xe>
     caa:	86 95       	lsr	r24
     cac:	77 95       	ror	r23
     cae:	67 95       	ror	r22
     cb0:	b1 1d       	adc	r27, r1
     cb2:	93 95       	inc	r25
     cb4:	96 39       	cpi	r25, 0x96	; 150
     cb6:	c8 f3       	brcs	.-14     	; 0xcaa <__fp_trunc+0x20>
     cb8:	08 95       	ret

00000cba <__udivmodsi4>:
     cba:	a1 e2       	ldi	r26, 0x21	; 33
     cbc:	1a 2e       	mov	r1, r26
     cbe:	aa 1b       	sub	r26, r26
     cc0:	bb 1b       	sub	r27, r27
     cc2:	fd 01       	movw	r30, r26
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <__udivmodsi4_ep>

00000cc6 <__udivmodsi4_loop>:
     cc6:	aa 1f       	adc	r26, r26
     cc8:	bb 1f       	adc	r27, r27
     cca:	ee 1f       	adc	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	a2 17       	cp	r26, r18
     cd0:	b3 07       	cpc	r27, r19
     cd2:	e4 07       	cpc	r30, r20
     cd4:	f5 07       	cpc	r31, r21
     cd6:	20 f0       	brcs	.+8      	; 0xce0 <__udivmodsi4_ep>
     cd8:	a2 1b       	sub	r26, r18
     cda:	b3 0b       	sbc	r27, r19
     cdc:	e4 0b       	sbc	r30, r20
     cde:	f5 0b       	sbc	r31, r21

00000ce0 <__udivmodsi4_ep>:
     ce0:	66 1f       	adc	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	88 1f       	adc	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	1a 94       	dec	r1
     cea:	69 f7       	brne	.-38     	; 0xcc6 <__udivmodsi4_loop>
     cec:	60 95       	com	r22
     cee:	70 95       	com	r23
     cf0:	80 95       	com	r24
     cf2:	90 95       	com	r25
     cf4:	9b 01       	movw	r18, r22
     cf6:	ac 01       	movw	r20, r24
     cf8:	bd 01       	movw	r22, r26
     cfa:	cf 01       	movw	r24, r30
     cfc:	08 95       	ret

00000cfe <__umoddi3>:
     cfe:	68 94       	set
     d00:	01 c0       	rjmp	.+2      	; 0xd04 <__udivdi3_umoddi3>

00000d02 <__udivdi3>:
     d02:	e8 94       	clt

00000d04 <__udivdi3_umoddi3>:
     d04:	8f 92       	push	r8
     d06:	9f 92       	push	r9
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__udivmod64>
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	08 95       	ret

00000d1a <__udivmod64>:
     d1a:	88 24       	eor	r8, r8
     d1c:	99 24       	eor	r9, r9
     d1e:	f4 01       	movw	r30, r8
     d20:	e4 01       	movw	r28, r8
     d22:	b0 e4       	ldi	r27, 0x40	; 64
     d24:	9f 93       	push	r25
     d26:	aa 27       	eor	r26, r26
     d28:	9a 15       	cp	r25, r10
     d2a:	8b 04       	cpc	r8, r11
     d2c:	9c 04       	cpc	r9, r12
     d2e:	ed 05       	cpc	r30, r13
     d30:	fe 05       	cpc	r31, r14
     d32:	cf 05       	cpc	r28, r15
     d34:	d0 07       	cpc	r29, r16
     d36:	a1 07       	cpc	r26, r17
     d38:	98 f4       	brcc	.+38     	; 0xd60 <__udivmod64+0x46>
     d3a:	ad 2f       	mov	r26, r29
     d3c:	dc 2f       	mov	r29, r28
     d3e:	cf 2f       	mov	r28, r31
     d40:	fe 2f       	mov	r31, r30
     d42:	e9 2d       	mov	r30, r9
     d44:	98 2c       	mov	r9, r8
     d46:	89 2e       	mov	r8, r25
     d48:	98 2f       	mov	r25, r24
     d4a:	87 2f       	mov	r24, r23
     d4c:	76 2f       	mov	r23, r22
     d4e:	65 2f       	mov	r22, r21
     d50:	54 2f       	mov	r21, r20
     d52:	43 2f       	mov	r20, r19
     d54:	32 2f       	mov	r19, r18
     d56:	22 27       	eor	r18, r18
     d58:	b8 50       	subi	r27, 0x08	; 8
     d5a:	31 f7       	brne	.-52     	; 0xd28 <__udivmod64+0xe>
     d5c:	bf 91       	pop	r27
     d5e:	27 c0       	rjmp	.+78     	; 0xdae <__udivmod64+0x94>
     d60:	1b 2e       	mov	r1, r27
     d62:	bf 91       	pop	r27
     d64:	bb 27       	eor	r27, r27
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	44 1f       	adc	r20, r20
     d6c:	55 1f       	adc	r21, r21
     d6e:	66 1f       	adc	r22, r22
     d70:	77 1f       	adc	r23, r23
     d72:	88 1f       	adc	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	88 1c       	adc	r8, r8
     d78:	99 1c       	adc	r9, r9
     d7a:	ee 1f       	adc	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	cc 1f       	adc	r28, r28
     d80:	dd 1f       	adc	r29, r29
     d82:	aa 1f       	adc	r26, r26
     d84:	bb 1f       	adc	r27, r27
     d86:	8a 14       	cp	r8, r10
     d88:	9b 04       	cpc	r9, r11
     d8a:	ec 05       	cpc	r30, r12
     d8c:	fd 05       	cpc	r31, r13
     d8e:	ce 05       	cpc	r28, r14
     d90:	df 05       	cpc	r29, r15
     d92:	a0 07       	cpc	r26, r16
     d94:	b1 07       	cpc	r27, r17
     d96:	48 f0       	brcs	.+18     	; 0xdaa <__udivmod64+0x90>
     d98:	8a 18       	sub	r8, r10
     d9a:	9b 08       	sbc	r9, r11
     d9c:	ec 09       	sbc	r30, r12
     d9e:	fd 09       	sbc	r31, r13
     da0:	ce 09       	sbc	r28, r14
     da2:	df 09       	sbc	r29, r15
     da4:	a0 0b       	sbc	r26, r16
     da6:	b1 0b       	sbc	r27, r17
     da8:	21 60       	ori	r18, 0x01	; 1
     daa:	1a 94       	dec	r1
     dac:	e1 f6       	brne	.-72     	; 0xd66 <__udivmod64+0x4c>
     dae:	2e f4       	brtc	.+10     	; 0xdba <__udivmod64+0xa0>
     db0:	94 01       	movw	r18, r8
     db2:	af 01       	movw	r20, r30
     db4:	be 01       	movw	r22, r28
     db6:	cd 01       	movw	r24, r26
     db8:	00 0c       	add	r0, r0
     dba:	08 95       	ret

00000dbc <__adddi3>:
     dbc:	2a 0d       	add	r18, r10
     dbe:	3b 1d       	adc	r19, r11
     dc0:	4c 1d       	adc	r20, r12
     dc2:	5d 1d       	adc	r21, r13
     dc4:	6e 1d       	adc	r22, r14
     dc6:	7f 1d       	adc	r23, r15
     dc8:	80 1f       	adc	r24, r16
     dca:	91 1f       	adc	r25, r17
     dcc:	08 95       	ret

00000dce <__adddi3_s8>:
     dce:	00 24       	eor	r0, r0
     dd0:	a7 fd       	sbrc	r26, 7
     dd2:	00 94       	com	r0
     dd4:	2a 0f       	add	r18, r26
     dd6:	30 1d       	adc	r19, r0
     dd8:	40 1d       	adc	r20, r0
     dda:	50 1d       	adc	r21, r0
     ddc:	60 1d       	adc	r22, r0
     dde:	70 1d       	adc	r23, r0
     de0:	80 1d       	adc	r24, r0
     de2:	90 1d       	adc	r25, r0
     de4:	08 95       	ret

00000de6 <sprintf>:
     de6:	ae e0       	ldi	r26, 0x0E	; 14
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e9 ef       	ldi	r30, 0xF9	; 249
     dec:	f6 e0       	ldi	r31, 0x06	; 6
     dee:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__prologue_saves__+0x1c>
     df2:	0d 89       	ldd	r16, Y+21	; 0x15
     df4:	1e 89       	ldd	r17, Y+22	; 0x16
     df6:	86 e0       	ldi	r24, 0x06	; 6
     df8:	8c 83       	std	Y+4, r24	; 0x04
     dfa:	09 83       	std	Y+1, r16	; 0x01
     dfc:	1a 83       	std	Y+2, r17	; 0x02
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	9f e7       	ldi	r25, 0x7F	; 127
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	9e 83       	std	Y+6, r25	; 0x06
     e06:	ae 01       	movw	r20, r28
     e08:	47 5e       	subi	r20, 0xE7	; 231
     e0a:	5f 4f       	sbci	r21, 0xFF	; 255
     e0c:	6f 89       	ldd	r22, Y+23	; 0x17
     e0e:	78 8d       	ldd	r23, Y+24	; 0x18
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 16 07 	call	0xe2c	; 0xe2c <vfprintf>
     e18:	2f 81       	ldd	r18, Y+7	; 0x07
     e1a:	38 85       	ldd	r19, Y+8	; 0x08
     e1c:	f8 01       	movw	r30, r16
     e1e:	e2 0f       	add	r30, r18
     e20:	f3 1f       	adc	r31, r19
     e22:	10 82       	st	Z, r1
     e24:	2e 96       	adiw	r28, 0x0e	; 14
     e26:	e4 e0       	ldi	r30, 0x04	; 4
     e28:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__epilogue_restores__+0x1c>

00000e2c <vfprintf>:
     e2c:	ac e0       	ldi	r26, 0x0C	; 12
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	ec e1       	ldi	r30, 0x1C	; 28
     e32:	f7 e0       	ldi	r31, 0x07	; 7
     e34:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__prologue_saves__>
     e38:	7c 01       	movw	r14, r24
     e3a:	6b 01       	movw	r12, r22
     e3c:	8a 01       	movw	r16, r20
     e3e:	fc 01       	movw	r30, r24
     e40:	16 82       	std	Z+6, r1	; 0x06
     e42:	17 82       	std	Z+7, r1	; 0x07
     e44:	83 81       	ldd	r24, Z+3	; 0x03
     e46:	81 ff       	sbrs	r24, 1
     e48:	bd c1       	rjmp	.+890    	; 0x11c4 <vfprintf+0x398>
     e4a:	ce 01       	movw	r24, r28
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	4c 01       	movw	r8, r24
     e50:	f7 01       	movw	r30, r14
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	f6 01       	movw	r30, r12
     e56:	93 fd       	sbrc	r25, 3
     e58:	85 91       	lpm	r24, Z+
     e5a:	93 ff       	sbrs	r25, 3
     e5c:	81 91       	ld	r24, Z+
     e5e:	6f 01       	movw	r12, r30
     e60:	88 23       	and	r24, r24
     e62:	09 f4       	brne	.+2      	; 0xe66 <vfprintf+0x3a>
     e64:	ab c1       	rjmp	.+854    	; 0x11bc <vfprintf+0x390>
     e66:	85 32       	cpi	r24, 0x25	; 37
     e68:	39 f4       	brne	.+14     	; 0xe78 <vfprintf+0x4c>
     e6a:	93 fd       	sbrc	r25, 3
     e6c:	85 91       	lpm	r24, Z+
     e6e:	93 ff       	sbrs	r25, 3
     e70:	81 91       	ld	r24, Z+
     e72:	6f 01       	movw	r12, r30
     e74:	85 32       	cpi	r24, 0x25	; 37
     e76:	29 f4       	brne	.+10     	; 0xe82 <vfprintf+0x56>
     e78:	b7 01       	movw	r22, r14
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <fputc>
     e80:	e7 cf       	rjmp	.-50     	; 0xe50 <vfprintf+0x24>
     e82:	51 2c       	mov	r5, r1
     e84:	31 2c       	mov	r3, r1
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	20 32       	cpi	r18, 0x20	; 32
     e8a:	a0 f4       	brcc	.+40     	; 0xeb4 <vfprintf+0x88>
     e8c:	8b 32       	cpi	r24, 0x2B	; 43
     e8e:	69 f0       	breq	.+26     	; 0xeaa <vfprintf+0x7e>
     e90:	30 f4       	brcc	.+12     	; 0xe9e <vfprintf+0x72>
     e92:	80 32       	cpi	r24, 0x20	; 32
     e94:	59 f0       	breq	.+22     	; 0xeac <vfprintf+0x80>
     e96:	83 32       	cpi	r24, 0x23	; 35
     e98:	69 f4       	brne	.+26     	; 0xeb4 <vfprintf+0x88>
     e9a:	20 61       	ori	r18, 0x10	; 16
     e9c:	2c c0       	rjmp	.+88     	; 0xef6 <vfprintf+0xca>
     e9e:	8d 32       	cpi	r24, 0x2D	; 45
     ea0:	39 f0       	breq	.+14     	; 0xeb0 <vfprintf+0x84>
     ea2:	80 33       	cpi	r24, 0x30	; 48
     ea4:	39 f4       	brne	.+14     	; 0xeb4 <vfprintf+0x88>
     ea6:	21 60       	ori	r18, 0x01	; 1
     ea8:	26 c0       	rjmp	.+76     	; 0xef6 <vfprintf+0xca>
     eaa:	22 60       	ori	r18, 0x02	; 2
     eac:	24 60       	ori	r18, 0x04	; 4
     eae:	23 c0       	rjmp	.+70     	; 0xef6 <vfprintf+0xca>
     eb0:	28 60       	ori	r18, 0x08	; 8
     eb2:	21 c0       	rjmp	.+66     	; 0xef6 <vfprintf+0xca>
     eb4:	27 fd       	sbrc	r18, 7
     eb6:	27 c0       	rjmp	.+78     	; 0xf06 <vfprintf+0xda>
     eb8:	30 ed       	ldi	r19, 0xD0	; 208
     eba:	38 0f       	add	r19, r24
     ebc:	3a 30       	cpi	r19, 0x0A	; 10
     ebe:	78 f4       	brcc	.+30     	; 0xede <vfprintf+0xb2>
     ec0:	26 ff       	sbrs	r18, 6
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <vfprintf+0xa4>
     ec4:	fa e0       	ldi	r31, 0x0A	; 10
     ec6:	5f 9e       	mul	r5, r31
     ec8:	30 0d       	add	r19, r0
     eca:	11 24       	eor	r1, r1
     ecc:	53 2e       	mov	r5, r19
     ece:	13 c0       	rjmp	.+38     	; 0xef6 <vfprintf+0xca>
     ed0:	8a e0       	ldi	r24, 0x0A	; 10
     ed2:	38 9e       	mul	r3, r24
     ed4:	30 0d       	add	r19, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	33 2e       	mov	r3, r19
     eda:	20 62       	ori	r18, 0x20	; 32
     edc:	0c c0       	rjmp	.+24     	; 0xef6 <vfprintf+0xca>
     ede:	8e 32       	cpi	r24, 0x2E	; 46
     ee0:	21 f4       	brne	.+8      	; 0xeea <vfprintf+0xbe>
     ee2:	26 fd       	sbrc	r18, 6
     ee4:	6b c1       	rjmp	.+726    	; 0x11bc <vfprintf+0x390>
     ee6:	20 64       	ori	r18, 0x40	; 64
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <vfprintf+0xca>
     eea:	8c 36       	cpi	r24, 0x6C	; 108
     eec:	11 f4       	brne	.+4      	; 0xef2 <vfprintf+0xc6>
     eee:	20 68       	ori	r18, 0x80	; 128
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <vfprintf+0xca>
     ef2:	88 36       	cpi	r24, 0x68	; 104
     ef4:	41 f4       	brne	.+16     	; 0xf06 <vfprintf+0xda>
     ef6:	f6 01       	movw	r30, r12
     ef8:	93 fd       	sbrc	r25, 3
     efa:	85 91       	lpm	r24, Z+
     efc:	93 ff       	sbrs	r25, 3
     efe:	81 91       	ld	r24, Z+
     f00:	6f 01       	movw	r12, r30
     f02:	81 11       	cpse	r24, r1
     f04:	c1 cf       	rjmp	.-126    	; 0xe88 <vfprintf+0x5c>
     f06:	98 2f       	mov	r25, r24
     f08:	9f 7d       	andi	r25, 0xDF	; 223
     f0a:	95 54       	subi	r25, 0x45	; 69
     f0c:	93 30       	cpi	r25, 0x03	; 3
     f0e:	28 f4       	brcc	.+10     	; 0xf1a <vfprintf+0xee>
     f10:	0c 5f       	subi	r16, 0xFC	; 252
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	ff e3       	ldi	r31, 0x3F	; 63
     f16:	f9 83       	std	Y+1, r31	; 0x01
     f18:	0d c0       	rjmp	.+26     	; 0xf34 <vfprintf+0x108>
     f1a:	83 36       	cpi	r24, 0x63	; 99
     f1c:	31 f0       	breq	.+12     	; 0xf2a <vfprintf+0xfe>
     f1e:	83 37       	cpi	r24, 0x73	; 115
     f20:	71 f0       	breq	.+28     	; 0xf3e <vfprintf+0x112>
     f22:	83 35       	cpi	r24, 0x53	; 83
     f24:	09 f0       	breq	.+2      	; 0xf28 <vfprintf+0xfc>
     f26:	5b c0       	rjmp	.+182    	; 0xfde <vfprintf+0x1b2>
     f28:	22 c0       	rjmp	.+68     	; 0xf6e <vfprintf+0x142>
     f2a:	f8 01       	movw	r30, r16
     f2c:	80 81       	ld	r24, Z
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	0e 5f       	subi	r16, 0xFE	; 254
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	44 24       	eor	r4, r4
     f36:	43 94       	inc	r4
     f38:	51 2c       	mov	r5, r1
     f3a:	54 01       	movw	r10, r8
     f3c:	15 c0       	rjmp	.+42     	; 0xf68 <vfprintf+0x13c>
     f3e:	38 01       	movw	r6, r16
     f40:	f2 e0       	ldi	r31, 0x02	; 2
     f42:	6f 0e       	add	r6, r31
     f44:	71 1c       	adc	r7, r1
     f46:	f8 01       	movw	r30, r16
     f48:	a0 80       	ld	r10, Z
     f4a:	b1 80       	ldd	r11, Z+1	; 0x01
     f4c:	26 ff       	sbrs	r18, 6
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <vfprintf+0x12a>
     f50:	65 2d       	mov	r22, r5
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <vfprintf+0x12e>
     f56:	6f ef       	ldi	r22, 0xFF	; 255
     f58:	7f ef       	ldi	r23, 0xFF	; 255
     f5a:	c5 01       	movw	r24, r10
     f5c:	2c 87       	std	Y+12, r18	; 0x0c
     f5e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <strnlen>
     f62:	2c 01       	movw	r4, r24
     f64:	83 01       	movw	r16, r6
     f66:	2c 85       	ldd	r18, Y+12	; 0x0c
     f68:	2f 77       	andi	r18, 0x7F	; 127
     f6a:	22 2e       	mov	r2, r18
     f6c:	17 c0       	rjmp	.+46     	; 0xf9c <vfprintf+0x170>
     f6e:	38 01       	movw	r6, r16
     f70:	f2 e0       	ldi	r31, 0x02	; 2
     f72:	6f 0e       	add	r6, r31
     f74:	71 1c       	adc	r7, r1
     f76:	f8 01       	movw	r30, r16
     f78:	a0 80       	ld	r10, Z
     f7a:	b1 80       	ldd	r11, Z+1	; 0x01
     f7c:	26 ff       	sbrs	r18, 6
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <vfprintf+0x15a>
     f80:	65 2d       	mov	r22, r5
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <vfprintf+0x15e>
     f86:	6f ef       	ldi	r22, 0xFF	; 255
     f88:	7f ef       	ldi	r23, 0xFF	; 255
     f8a:	c5 01       	movw	r24, r10
     f8c:	2c 87       	std	Y+12, r18	; 0x0c
     f8e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <strnlen_P>
     f92:	2c 01       	movw	r4, r24
     f94:	2c 85       	ldd	r18, Y+12	; 0x0c
     f96:	20 68       	ori	r18, 0x80	; 128
     f98:	22 2e       	mov	r2, r18
     f9a:	83 01       	movw	r16, r6
     f9c:	23 fc       	sbrc	r2, 3
     f9e:	1b c0       	rjmp	.+54     	; 0xfd6 <vfprintf+0x1aa>
     fa0:	83 2d       	mov	r24, r3
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	48 16       	cp	r4, r24
     fa6:	59 06       	cpc	r5, r25
     fa8:	b0 f4       	brcc	.+44     	; 0xfd6 <vfprintf+0x1aa>
     faa:	b7 01       	movw	r22, r14
     fac:	80 e2       	ldi	r24, 0x20	; 32
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 fe 08 	call	0x11fc	; 0x11fc <fputc>
     fb4:	3a 94       	dec	r3
     fb6:	f4 cf       	rjmp	.-24     	; 0xfa0 <vfprintf+0x174>
     fb8:	f5 01       	movw	r30, r10
     fba:	27 fc       	sbrc	r2, 7
     fbc:	85 91       	lpm	r24, Z+
     fbe:	27 fe       	sbrs	r2, 7
     fc0:	81 91       	ld	r24, Z+
     fc2:	5f 01       	movw	r10, r30
     fc4:	b7 01       	movw	r22, r14
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <fputc>
     fcc:	31 10       	cpse	r3, r1
     fce:	3a 94       	dec	r3
     fd0:	f1 e0       	ldi	r31, 0x01	; 1
     fd2:	4f 1a       	sub	r4, r31
     fd4:	51 08       	sbc	r5, r1
     fd6:	41 14       	cp	r4, r1
     fd8:	51 04       	cpc	r5, r1
     fda:	71 f7       	brne	.-36     	; 0xfb8 <vfprintf+0x18c>
     fdc:	e5 c0       	rjmp	.+458    	; 0x11a8 <vfprintf+0x37c>
     fde:	84 36       	cpi	r24, 0x64	; 100
     fe0:	11 f0       	breq	.+4      	; 0xfe6 <vfprintf+0x1ba>
     fe2:	89 36       	cpi	r24, 0x69	; 105
     fe4:	39 f5       	brne	.+78     	; 0x1034 <vfprintf+0x208>
     fe6:	f8 01       	movw	r30, r16
     fe8:	27 ff       	sbrs	r18, 7
     fea:	07 c0       	rjmp	.+14     	; 0xffa <vfprintf+0x1ce>
     fec:	60 81       	ld	r22, Z
     fee:	71 81       	ldd	r23, Z+1	; 0x01
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	0c 5f       	subi	r16, 0xFC	; 252
     ff6:	1f 4f       	sbci	r17, 0xFF	; 255
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <vfprintf+0x1de>
     ffa:	60 81       	ld	r22, Z
     ffc:	71 81       	ldd	r23, Z+1	; 0x01
     ffe:	07 2e       	mov	r0, r23
    1000:	00 0c       	add	r0, r0
    1002:	88 0b       	sbc	r24, r24
    1004:	99 0b       	sbc	r25, r25
    1006:	0e 5f       	subi	r16, 0xFE	; 254
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	2f 76       	andi	r18, 0x6F	; 111
    100c:	72 2e       	mov	r7, r18
    100e:	97 ff       	sbrs	r25, 7
    1010:	09 c0       	rjmp	.+18     	; 0x1024 <vfprintf+0x1f8>
    1012:	90 95       	com	r25
    1014:	80 95       	com	r24
    1016:	70 95       	com	r23
    1018:	61 95       	neg	r22
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8f 4f       	sbci	r24, 0xFF	; 255
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	20 68       	ori	r18, 0x80	; 128
    1022:	72 2e       	mov	r7, r18
    1024:	2a e0       	ldi	r18, 0x0A	; 10
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	a4 01       	movw	r20, r8
    102a:	0e 94 36 09 	call	0x126c	; 0x126c <__ultoa_invert>
    102e:	a8 2e       	mov	r10, r24
    1030:	a8 18       	sub	r10, r8
    1032:	44 c0       	rjmp	.+136    	; 0x10bc <vfprintf+0x290>
    1034:	85 37       	cpi	r24, 0x75	; 117
    1036:	29 f4       	brne	.+10     	; 0x1042 <vfprintf+0x216>
    1038:	2f 7e       	andi	r18, 0xEF	; 239
    103a:	b2 2e       	mov	r11, r18
    103c:	2a e0       	ldi	r18, 0x0A	; 10
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	25 c0       	rjmp	.+74     	; 0x108c <vfprintf+0x260>
    1042:	f2 2f       	mov	r31, r18
    1044:	f9 7f       	andi	r31, 0xF9	; 249
    1046:	bf 2e       	mov	r11, r31
    1048:	8f 36       	cpi	r24, 0x6F	; 111
    104a:	c1 f0       	breq	.+48     	; 0x107c <vfprintf+0x250>
    104c:	18 f4       	brcc	.+6      	; 0x1054 <vfprintf+0x228>
    104e:	88 35       	cpi	r24, 0x58	; 88
    1050:	79 f0       	breq	.+30     	; 0x1070 <vfprintf+0x244>
    1052:	b4 c0       	rjmp	.+360    	; 0x11bc <vfprintf+0x390>
    1054:	80 37       	cpi	r24, 0x70	; 112
    1056:	19 f0       	breq	.+6      	; 0x105e <vfprintf+0x232>
    1058:	88 37       	cpi	r24, 0x78	; 120
    105a:	21 f0       	breq	.+8      	; 0x1064 <vfprintf+0x238>
    105c:	af c0       	rjmp	.+350    	; 0x11bc <vfprintf+0x390>
    105e:	2f 2f       	mov	r18, r31
    1060:	20 61       	ori	r18, 0x10	; 16
    1062:	b2 2e       	mov	r11, r18
    1064:	b4 fe       	sbrs	r11, 4
    1066:	0d c0       	rjmp	.+26     	; 0x1082 <vfprintf+0x256>
    1068:	8b 2d       	mov	r24, r11
    106a:	84 60       	ori	r24, 0x04	; 4
    106c:	b8 2e       	mov	r11, r24
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <vfprintf+0x256>
    1070:	24 ff       	sbrs	r18, 4
    1072:	0a c0       	rjmp	.+20     	; 0x1088 <vfprintf+0x25c>
    1074:	9f 2f       	mov	r25, r31
    1076:	96 60       	ori	r25, 0x06	; 6
    1078:	b9 2e       	mov	r11, r25
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <vfprintf+0x25c>
    107c:	28 e0       	ldi	r18, 0x08	; 8
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	05 c0       	rjmp	.+10     	; 0x108c <vfprintf+0x260>
    1082:	20 e1       	ldi	r18, 0x10	; 16
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <vfprintf+0x260>
    1088:	20 e1       	ldi	r18, 0x10	; 16
    108a:	32 e0       	ldi	r19, 0x02	; 2
    108c:	f8 01       	movw	r30, r16
    108e:	b7 fe       	sbrs	r11, 7
    1090:	07 c0       	rjmp	.+14     	; 0x10a0 <vfprintf+0x274>
    1092:	60 81       	ld	r22, Z
    1094:	71 81       	ldd	r23, Z+1	; 0x01
    1096:	82 81       	ldd	r24, Z+2	; 0x02
    1098:	93 81       	ldd	r25, Z+3	; 0x03
    109a:	0c 5f       	subi	r16, 0xFC	; 252
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <vfprintf+0x280>
    10a0:	60 81       	ld	r22, Z
    10a2:	71 81       	ldd	r23, Z+1	; 0x01
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 5f       	subi	r16, 0xFE	; 254
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	a4 01       	movw	r20, r8
    10ae:	0e 94 36 09 	call	0x126c	; 0x126c <__ultoa_invert>
    10b2:	a8 2e       	mov	r10, r24
    10b4:	a8 18       	sub	r10, r8
    10b6:	fb 2d       	mov	r31, r11
    10b8:	ff 77       	andi	r31, 0x7F	; 127
    10ba:	7f 2e       	mov	r7, r31
    10bc:	76 fe       	sbrs	r7, 6
    10be:	0b c0       	rjmp	.+22     	; 0x10d6 <vfprintf+0x2aa>
    10c0:	37 2d       	mov	r19, r7
    10c2:	3e 7f       	andi	r19, 0xFE	; 254
    10c4:	a5 14       	cp	r10, r5
    10c6:	50 f4       	brcc	.+20     	; 0x10dc <vfprintf+0x2b0>
    10c8:	74 fe       	sbrs	r7, 4
    10ca:	0a c0       	rjmp	.+20     	; 0x10e0 <vfprintf+0x2b4>
    10cc:	72 fc       	sbrc	r7, 2
    10ce:	08 c0       	rjmp	.+16     	; 0x10e0 <vfprintf+0x2b4>
    10d0:	37 2d       	mov	r19, r7
    10d2:	3e 7e       	andi	r19, 0xEE	; 238
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <vfprintf+0x2b4>
    10d6:	ba 2c       	mov	r11, r10
    10d8:	37 2d       	mov	r19, r7
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <vfprintf+0x2b6>
    10dc:	ba 2c       	mov	r11, r10
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <vfprintf+0x2b6>
    10e0:	b5 2c       	mov	r11, r5
    10e2:	34 ff       	sbrs	r19, 4
    10e4:	0d c0       	rjmp	.+26     	; 0x1100 <vfprintf+0x2d4>
    10e6:	fe 01       	movw	r30, r28
    10e8:	ea 0d       	add	r30, r10
    10ea:	f1 1d       	adc	r31, r1
    10ec:	80 81       	ld	r24, Z
    10ee:	80 33       	cpi	r24, 0x30	; 48
    10f0:	11 f4       	brne	.+4      	; 0x10f6 <vfprintf+0x2ca>
    10f2:	39 7e       	andi	r19, 0xE9	; 233
    10f4:	09 c0       	rjmp	.+18     	; 0x1108 <vfprintf+0x2dc>
    10f6:	32 ff       	sbrs	r19, 2
    10f8:	06 c0       	rjmp	.+12     	; 0x1106 <vfprintf+0x2da>
    10fa:	b3 94       	inc	r11
    10fc:	b3 94       	inc	r11
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <vfprintf+0x2dc>
    1100:	83 2f       	mov	r24, r19
    1102:	86 78       	andi	r24, 0x86	; 134
    1104:	09 f0       	breq	.+2      	; 0x1108 <vfprintf+0x2dc>
    1106:	b3 94       	inc	r11
    1108:	33 fd       	sbrc	r19, 3
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <vfprintf+0x306>
    110c:	30 ff       	sbrs	r19, 0
    110e:	06 c0       	rjmp	.+12     	; 0x111c <vfprintf+0x2f0>
    1110:	5a 2c       	mov	r5, r10
    1112:	b3 14       	cp	r11, r3
    1114:	18 f4       	brcc	.+6      	; 0x111c <vfprintf+0x2f0>
    1116:	53 0c       	add	r5, r3
    1118:	5b 18       	sub	r5, r11
    111a:	b3 2c       	mov	r11, r3
    111c:	b3 14       	cp	r11, r3
    111e:	68 f4       	brcc	.+26     	; 0x113a <vfprintf+0x30e>
    1120:	b7 01       	movw	r22, r14
    1122:	80 e2       	ldi	r24, 0x20	; 32
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	3c 87       	std	Y+12, r19	; 0x0c
    1128:	0e 94 fe 08 	call	0x11fc	; 0x11fc <fputc>
    112c:	b3 94       	inc	r11
    112e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1130:	f5 cf       	rjmp	.-22     	; 0x111c <vfprintf+0x2f0>
    1132:	b3 14       	cp	r11, r3
    1134:	10 f4       	brcc	.+4      	; 0x113a <vfprintf+0x30e>
    1136:	3b 18       	sub	r3, r11
    1138:	01 c0       	rjmp	.+2      	; 0x113c <vfprintf+0x310>
    113a:	31 2c       	mov	r3, r1
    113c:	34 ff       	sbrs	r19, 4
    113e:	12 c0       	rjmp	.+36     	; 0x1164 <vfprintf+0x338>
    1140:	b7 01       	movw	r22, r14
    1142:	80 e3       	ldi	r24, 0x30	; 48
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	3c 87       	std	Y+12, r19	; 0x0c
    1148:	0e 94 fe 08 	call	0x11fc	; 0x11fc <fputc>
    114c:	3c 85       	ldd	r19, Y+12	; 0x0c
    114e:	32 ff       	sbrs	r19, 2
    1150:	17 c0       	rjmp	.+46     	; 0x1180 <vfprintf+0x354>
    1152:	31 fd       	sbrc	r19, 1
    1154:	03 c0       	rjmp	.+6      	; 0x115c <vfprintf+0x330>
    1156:	88 e7       	ldi	r24, 0x78	; 120
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <vfprintf+0x334>
    115c:	88 e5       	ldi	r24, 0x58	; 88
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	b7 01       	movw	r22, r14
    1162:	0c c0       	rjmp	.+24     	; 0x117c <vfprintf+0x350>
    1164:	83 2f       	mov	r24, r19
    1166:	86 78       	andi	r24, 0x86	; 134
    1168:	59 f0       	breq	.+22     	; 0x1180 <vfprintf+0x354>
    116a:	31 ff       	sbrs	r19, 1
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <vfprintf+0x346>
    116e:	8b e2       	ldi	r24, 0x2B	; 43
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <vfprintf+0x348>
    1172:	80 e2       	ldi	r24, 0x20	; 32
    1174:	37 fd       	sbrc	r19, 7
    1176:	8d e2       	ldi	r24, 0x2D	; 45
    1178:	b7 01       	movw	r22, r14
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <fputc>
    1180:	a5 14       	cp	r10, r5
    1182:	38 f4       	brcc	.+14     	; 0x1192 <vfprintf+0x366>
    1184:	b7 01       	movw	r22, r14
    1186:	80 e3       	ldi	r24, 0x30	; 48
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <fputc>
    118e:	5a 94       	dec	r5
    1190:	f7 cf       	rjmp	.-18     	; 0x1180 <vfprintf+0x354>
    1192:	aa 94       	dec	r10
    1194:	f4 01       	movw	r30, r8
    1196:	ea 0d       	add	r30, r10
    1198:	f1 1d       	adc	r31, r1
    119a:	80 81       	ld	r24, Z
    119c:	b7 01       	movw	r22, r14
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 fe 08 	call	0x11fc	; 0x11fc <fputc>
    11a4:	a1 10       	cpse	r10, r1
    11a6:	f5 cf       	rjmp	.-22     	; 0x1192 <vfprintf+0x366>
    11a8:	33 20       	and	r3, r3
    11aa:	09 f4       	brne	.+2      	; 0x11ae <vfprintf+0x382>
    11ac:	51 ce       	rjmp	.-862    	; 0xe50 <vfprintf+0x24>
    11ae:	b7 01       	movw	r22, r14
    11b0:	80 e2       	ldi	r24, 0x20	; 32
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 fe 08 	call	0x11fc	; 0x11fc <fputc>
    11b8:	3a 94       	dec	r3
    11ba:	f6 cf       	rjmp	.-20     	; 0x11a8 <vfprintf+0x37c>
    11bc:	f7 01       	movw	r30, r14
    11be:	86 81       	ldd	r24, Z+6	; 0x06
    11c0:	97 81       	ldd	r25, Z+7	; 0x07
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0x39c>
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	9f ef       	ldi	r25, 0xFF	; 255
    11c8:	2c 96       	adiw	r28, 0x0c	; 12
    11ca:	e2 e1       	ldi	r30, 0x12	; 18
    11cc:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__epilogue_restores__>

000011d0 <strnlen_P>:
    11d0:	fc 01       	movw	r30, r24
    11d2:	05 90       	lpm	r0, Z+
    11d4:	61 50       	subi	r22, 0x01	; 1
    11d6:	70 40       	sbci	r23, 0x00	; 0
    11d8:	01 10       	cpse	r0, r1
    11da:	d8 f7       	brcc	.-10     	; 0x11d2 <strnlen_P+0x2>
    11dc:	80 95       	com	r24
    11de:	90 95       	com	r25
    11e0:	8e 0f       	add	r24, r30
    11e2:	9f 1f       	adc	r25, r31
    11e4:	08 95       	ret

000011e6 <strnlen>:
    11e6:	fc 01       	movw	r30, r24
    11e8:	61 50       	subi	r22, 0x01	; 1
    11ea:	70 40       	sbci	r23, 0x00	; 0
    11ec:	01 90       	ld	r0, Z+
    11ee:	01 10       	cpse	r0, r1
    11f0:	d8 f7       	brcc	.-10     	; 0x11e8 <strnlen+0x2>
    11f2:	80 95       	com	r24
    11f4:	90 95       	com	r25
    11f6:	8e 0f       	add	r24, r30
    11f8:	9f 1f       	adc	r25, r31
    11fa:	08 95       	ret

000011fc <fputc>:
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	fb 01       	movw	r30, r22
    1206:	23 81       	ldd	r18, Z+3	; 0x03
    1208:	21 fd       	sbrc	r18, 1
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <fputc+0x16>
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	9f ef       	ldi	r25, 0xFF	; 255
    1210:	28 c0       	rjmp	.+80     	; 0x1262 <fputc+0x66>
    1212:	22 ff       	sbrs	r18, 2
    1214:	16 c0       	rjmp	.+44     	; 0x1242 <fputc+0x46>
    1216:	46 81       	ldd	r20, Z+6	; 0x06
    1218:	57 81       	ldd	r21, Z+7	; 0x07
    121a:	24 81       	ldd	r18, Z+4	; 0x04
    121c:	35 81       	ldd	r19, Z+5	; 0x05
    121e:	42 17       	cp	r20, r18
    1220:	53 07       	cpc	r21, r19
    1222:	44 f4       	brge	.+16     	; 0x1234 <fputc+0x38>
    1224:	a0 81       	ld	r26, Z
    1226:	b1 81       	ldd	r27, Z+1	; 0x01
    1228:	9d 01       	movw	r18, r26
    122a:	2f 5f       	subi	r18, 0xFF	; 255
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	20 83       	st	Z, r18
    1230:	31 83       	std	Z+1, r19	; 0x01
    1232:	8c 93       	st	X, r24
    1234:	26 81       	ldd	r18, Z+6	; 0x06
    1236:	37 81       	ldd	r19, Z+7	; 0x07
    1238:	2f 5f       	subi	r18, 0xFF	; 255
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	26 83       	std	Z+6, r18	; 0x06
    123e:	37 83       	std	Z+7, r19	; 0x07
    1240:	10 c0       	rjmp	.+32     	; 0x1262 <fputc+0x66>
    1242:	eb 01       	movw	r28, r22
    1244:	09 2f       	mov	r16, r25
    1246:	18 2f       	mov	r17, r24
    1248:	00 84       	ldd	r0, Z+8	; 0x08
    124a:	f1 85       	ldd	r31, Z+9	; 0x09
    124c:	e0 2d       	mov	r30, r0
    124e:	09 95       	icall
    1250:	89 2b       	or	r24, r25
    1252:	e1 f6       	brne	.-72     	; 0x120c <fputc+0x10>
    1254:	8e 81       	ldd	r24, Y+6	; 0x06
    1256:	9f 81       	ldd	r25, Y+7	; 0x07
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	8e 83       	std	Y+6, r24	; 0x06
    125c:	9f 83       	std	Y+7, r25	; 0x07
    125e:	81 2f       	mov	r24, r17
    1260:	90 2f       	mov	r25, r16
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	08 95       	ret

0000126c <__ultoa_invert>:
    126c:	fa 01       	movw	r30, r20
    126e:	aa 27       	eor	r26, r26
    1270:	28 30       	cpi	r18, 0x08	; 8
    1272:	51 f1       	breq	.+84     	; 0x12c8 <__ultoa_invert+0x5c>
    1274:	20 31       	cpi	r18, 0x10	; 16
    1276:	81 f1       	breq	.+96     	; 0x12d8 <__ultoa_invert+0x6c>
    1278:	e8 94       	clt
    127a:	6f 93       	push	r22
    127c:	6e 7f       	andi	r22, 0xFE	; 254
    127e:	6e 5f       	subi	r22, 0xFE	; 254
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	8f 4f       	sbci	r24, 0xFF	; 255
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	af 4f       	sbci	r26, 0xFF	; 255
    1288:	b1 e0       	ldi	r27, 0x01	; 1
    128a:	3e d0       	rcall	.+124    	; 0x1308 <__ultoa_invert+0x9c>
    128c:	b4 e0       	ldi	r27, 0x04	; 4
    128e:	3c d0       	rcall	.+120    	; 0x1308 <__ultoa_invert+0x9c>
    1290:	67 0f       	add	r22, r23
    1292:	78 1f       	adc	r23, r24
    1294:	89 1f       	adc	r24, r25
    1296:	9a 1f       	adc	r25, r26
    1298:	a1 1d       	adc	r26, r1
    129a:	68 0f       	add	r22, r24
    129c:	79 1f       	adc	r23, r25
    129e:	8a 1f       	adc	r24, r26
    12a0:	91 1d       	adc	r25, r1
    12a2:	a1 1d       	adc	r26, r1
    12a4:	6a 0f       	add	r22, r26
    12a6:	71 1d       	adc	r23, r1
    12a8:	81 1d       	adc	r24, r1
    12aa:	91 1d       	adc	r25, r1
    12ac:	a1 1d       	adc	r26, r1
    12ae:	20 d0       	rcall	.+64     	; 0x12f0 <__ultoa_invert+0x84>
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <__ultoa_invert+0x48>
    12b2:	68 94       	set
    12b4:	3f 91       	pop	r19
    12b6:	2a e0       	ldi	r18, 0x0A	; 10
    12b8:	26 9f       	mul	r18, r22
    12ba:	11 24       	eor	r1, r1
    12bc:	30 19       	sub	r19, r0
    12be:	30 5d       	subi	r19, 0xD0	; 208
    12c0:	31 93       	st	Z+, r19
    12c2:	de f6       	brtc	.-74     	; 0x127a <__ultoa_invert+0xe>
    12c4:	cf 01       	movw	r24, r30
    12c6:	08 95       	ret
    12c8:	46 2f       	mov	r20, r22
    12ca:	47 70       	andi	r20, 0x07	; 7
    12cc:	40 5d       	subi	r20, 0xD0	; 208
    12ce:	41 93       	st	Z+, r20
    12d0:	b3 e0       	ldi	r27, 0x03	; 3
    12d2:	0f d0       	rcall	.+30     	; 0x12f2 <__ultoa_invert+0x86>
    12d4:	c9 f7       	brne	.-14     	; 0x12c8 <__ultoa_invert+0x5c>
    12d6:	f6 cf       	rjmp	.-20     	; 0x12c4 <__ultoa_invert+0x58>
    12d8:	46 2f       	mov	r20, r22
    12da:	4f 70       	andi	r20, 0x0F	; 15
    12dc:	40 5d       	subi	r20, 0xD0	; 208
    12de:	4a 33       	cpi	r20, 0x3A	; 58
    12e0:	18 f0       	brcs	.+6      	; 0x12e8 <__ultoa_invert+0x7c>
    12e2:	49 5d       	subi	r20, 0xD9	; 217
    12e4:	31 fd       	sbrc	r19, 1
    12e6:	40 52       	subi	r20, 0x20	; 32
    12e8:	41 93       	st	Z+, r20
    12ea:	02 d0       	rcall	.+4      	; 0x12f0 <__ultoa_invert+0x84>
    12ec:	a9 f7       	brne	.-22     	; 0x12d8 <__ultoa_invert+0x6c>
    12ee:	ea cf       	rjmp	.-44     	; 0x12c4 <__ultoa_invert+0x58>
    12f0:	b4 e0       	ldi	r27, 0x04	; 4
    12f2:	a6 95       	lsr	r26
    12f4:	97 95       	ror	r25
    12f6:	87 95       	ror	r24
    12f8:	77 95       	ror	r23
    12fa:	67 95       	ror	r22
    12fc:	ba 95       	dec	r27
    12fe:	c9 f7       	brne	.-14     	; 0x12f2 <__ultoa_invert+0x86>
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	61 05       	cpc	r22, r1
    1304:	71 05       	cpc	r23, r1
    1306:	08 95       	ret
    1308:	9b 01       	movw	r18, r22
    130a:	ac 01       	movw	r20, r24
    130c:	0a 2e       	mov	r0, r26
    130e:	06 94       	lsr	r0
    1310:	57 95       	ror	r21
    1312:	47 95       	ror	r20
    1314:	37 95       	ror	r19
    1316:	27 95       	ror	r18
    1318:	ba 95       	dec	r27
    131a:	c9 f7       	brne	.-14     	; 0x130e <__ultoa_invert+0xa2>
    131c:	62 0f       	add	r22, r18
    131e:	73 1f       	adc	r23, r19
    1320:	84 1f       	adc	r24, r20
    1322:	95 1f       	adc	r25, r21
    1324:	a0 1d       	adc	r26, r0
    1326:	08 95       	ret

00001328 <__prologue_saves__>:
    1328:	2f 92       	push	r2
    132a:	3f 92       	push	r3
    132c:	4f 92       	push	r4
    132e:	5f 92       	push	r5
    1330:	6f 92       	push	r6
    1332:	7f 92       	push	r7
    1334:	8f 92       	push	r8
    1336:	9f 92       	push	r9
    1338:	af 92       	push	r10
    133a:	bf 92       	push	r11
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	ca 1b       	sub	r28, r26
    1352:	db 0b       	sbc	r29, r27
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	09 94       	ijmp

0000135a <__epilogue_restores__>:
    135a:	2a 88       	ldd	r2, Y+18	; 0x12
    135c:	39 88       	ldd	r3, Y+17	; 0x11
    135e:	48 88       	ldd	r4, Y+16	; 0x10
    1360:	5f 84       	ldd	r5, Y+15	; 0x0f
    1362:	6e 84       	ldd	r6, Y+14	; 0x0e
    1364:	7d 84       	ldd	r7, Y+13	; 0x0d
    1366:	8c 84       	ldd	r8, Y+12	; 0x0c
    1368:	9b 84       	ldd	r9, Y+11	; 0x0b
    136a:	aa 84       	ldd	r10, Y+10	; 0x0a
    136c:	b9 84       	ldd	r11, Y+9	; 0x09
    136e:	c8 84       	ldd	r12, Y+8	; 0x08
    1370:	df 80       	ldd	r13, Y+7	; 0x07
    1372:	ee 80       	ldd	r14, Y+6	; 0x06
    1374:	fd 80       	ldd	r15, Y+5	; 0x05
    1376:	0c 81       	ldd	r16, Y+4	; 0x04
    1378:	1b 81       	ldd	r17, Y+3	; 0x03
    137a:	aa 81       	ldd	r26, Y+2	; 0x02
    137c:	b9 81       	ldd	r27, Y+1	; 0x01
    137e:	ce 0f       	add	r28, r30
    1380:	d1 1d       	adc	r29, r1
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	ed 01       	movw	r28, r26
    1388:	08 95       	ret

0000138a <_exit>:
    138a:	f8 94       	cli

0000138c <__stop_program>:
    138c:	ff cf       	rjmp	.-2      	; 0x138c <__stop_program>
