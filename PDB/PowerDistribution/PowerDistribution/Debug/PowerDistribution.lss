
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003fa  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000161  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001eb  00000000  00000000  00000797  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f6  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  bc:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <_Z6initIOv>:
	
}
 
void initIO(void){
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
  c4:	e0 e4       	ldi	r30, 0x40	; 64
  c6:	f6 e0       	ldi	r31, 0x06	; 6
  c8:	92 e0       	ldi	r25, 0x02	; 2
  ca:	91 83       	std	Z+1, r25	; 0x01
	PORTC.DIRSET = PIN0_bm;
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	81 83       	std	Z+1, r24	; 0x01
	
	//Initialize output values
	STATUS_CLR();
  d4:	26 83       	std	Z+6, r18	; 0x06
	ERROR_CLR();
  d6:	96 83       	std	Z+6, r25	; 0x06
	
	REAR_RELAY_CLR();
  d8:	86 83       	std	Z+6, r24	; 0x06
  da:	08 95       	ret

000000dc <_Z25configure32MhzInternalOscv>:
		
}

void configure32MhzInternalOsc()
{
	OSC_CTRL |= OSC_RC32MEN_bm; //Setup 32Mhz crystal
  dc:	e0 e5       	ldi	r30, 0x50	; 80
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm));
  e6:	e1 e5       	ldi	r30, 0x51	; 81
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	81 ff       	sbrs	r24, 1
  ee:	fd cf       	rjmp	.-6      	; 0xea <_Z25configure32MhzInternalOscv+0xe>
	
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
  f0:	88 ed       	ldi	r24, 0xD8	; 216
  f2:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 40 00 	sts	0x0040, r24
  fa:	08 95       	ret

000000fc <main>:
void configureExternalOscillator();
void configure32MhzInternalOsc();

int main(void)
{
	initIO();
  fc:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z6initIOv>
	//configureExternalOscillator();
	configure32MhzInternalOsc();
 100:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z25configure32MhzInternalOscv>
	
    while (1) 
    {
		_delay_ms(500);
		
		STATUS_CLR();
 104:	e0 e4       	ldi	r30, 0x40	; 64
 106:	f6 e0       	ldi	r31, 0x06	; 6
 108:	91 e0       	ldi	r25, 0x01	; 1
		ERROR_SET();
 10a:	82 e0       	ldi	r24, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	33 ed       	ldi	r19, 0xD3	; 211
 110:	40 e3       	ldi	r20, 0x30	; 48
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	40 40       	sbci	r20, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x16>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x20>
 11c:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(500);
		
		STATUS_CLR();
 11e:	96 83       	std	Z+6, r25	; 0x06
		ERROR_SET();
 120:	85 83       	std	Z+5, r24	; 0x05
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	33 ed       	ldi	r19, 0xD3	; 211
 126:	40 e3       	ldi	r20, 0x30	; 48
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
 12c:	40 40       	sbci	r20, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x2c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x36>
 132:	00 00       	nop
		
		_delay_ms(500);
		
		STATUS_SET();
 134:	95 83       	std	Z+5, r25	; 0x05
		ERROR_CLR();
 136:	86 83       	std	Z+6, r24	; 0x06
//Function Prototypes
void initIO();
void configureExternalOscillator();
void configure32MhzInternalOsc();

int main(void)
 138:	e9 cf       	rjmp	.-46     	; 0x10c <main+0x10>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
