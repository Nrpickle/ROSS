
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  0000025c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070e  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029d  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025e  00000000  00000000  00000d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c4  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fc  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	ec e5       	ldi	r30, 0x5C	; 92
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 30       	cpi	r26, 0x04	; 4
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	20 e2       	ldi	r18, 0x20	; 32
  d0:	a4 e0       	ldi	r26, 0x04	; 4
  d2:	b0 e2       	ldi	r27, 0x20	; 32
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 30       	cpi	r26, 0x04	; 4
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  e2:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z6initIOv>:
	
}
 
void initIO(void){
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
  ea:	e0 e4       	ldi	r30, 0x40	; 64
  ec:	f6 e0       	ldi	r31, 0x06	; 6
  ee:	92 e0       	ldi	r25, 0x02	; 2
  f0:	91 83       	std	Z+1, r25	; 0x01
	PORTC.DIRSET = PIN0_bm;
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	81 83       	std	Z+1, r24	; 0x01
	
	//Initialize output values
	STATUS_CLR();
  fa:	26 83       	std	Z+6, r18	; 0x06
	ERROR_CLR();
  fc:	96 83       	std	Z+6, r25	; 0x06
	
	REAR_RELAY_CLR();
  fe:	86 83       	std	Z+6, r24	; 0x06
 100:	08 95       	ret

00000102 <_Z25configure32MhzInternalOscv>:
		
}

void configure32MhzInternalOsc()
{
	OSC_CTRL |= OSC_RC32MEN_bm; //Setup 32Mhz crystal
 102:	e0 e5       	ldi	r30, 0x50	; 80
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm));
 10c:	e1 e5       	ldi	r30, 0x51	; 81
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 ff       	sbrs	r24, 1
 114:	fd cf       	rjmp	.-6      	; 0x110 <_Z25configure32MhzInternalOscv+0xe>
	
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
 116:	88 ed       	ldi	r24, 0xD8	; 216
 118:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 40 00 	sts	0x0040, r24
 120:	08 95       	ret

00000122 <_Z14configureUSARTv>:
	
}

void configureUSART(void){
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
 122:	e0 e4       	ldi	r30, 0x40	; 64
 124:	f6 e0       	ldi	r31, 0x06	; 6
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	81 83       	std	Z+1, r24	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
 12a:	80 e4       	ldi	r24, 0x40	; 64
 12c:	82 83       	std	Z+2, r24	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
 12e:	86 85       	ldd	r24, Z+14	; 0x0e
 130:	80 61       	ori	r24, 0x10	; 16
 132:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 134:	e0 ec       	ldi	r30, 0xC0	; 192
 136:	f8 e0       	ldi	r31, 0x08	; 8
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	84 83       	std	Z+4, r24	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
 13c:	82 e2       	ldi	r24, 0x22	; 34
 13e:	86 83       	std	Z+6, r24	; 0x06
 140:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
 142:	83 81       	ldd	r24, Z+3	; 0x03
 144:	80 61       	ori	r24, 0x10	; 16
 146:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
 148:	83 81       	ldd	r24, Z+3	; 0x03
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	83 83       	std	Z+3, r24	; 0x03
 14e:	08 95       	ret

00000150 <_Z12SendStringPCPc>:
}

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 150:	fc 01       	movw	r30, r24
 152:	20 81       	ld	r18, Z
 154:	22 23       	and	r18, r18
 156:	59 f0       	breq	.+22     	; 0x16e <_Z12SendStringPCPc+0x1e>
 158:	dc 01       	movw	r26, r24
 15a:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
 15c:	e0 ec       	ldi	r30, 0xC0	; 192
 15e:	f8 e0       	ldi	r31, 0x08	; 8
 160:	91 81       	ldd	r25, Z+1	; 0x01
 162:	95 ff       	sbrs	r25, 5
 164:	fd cf       	rjmp	.-6      	; 0x160 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
 166:	20 83       	st	Z, r18
	USART_Tx_Enable(&COMP_USART);
}

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 168:	2d 91       	ld	r18, X+
 16a:	21 11       	cpse	r18, r1
 16c:	f9 cf       	rjmp	.-14     	; 0x160 <_Z12SendStringPCPc+0x10>
 16e:	08 95       	ret

00000170 <_Z9SendNumPCj>:
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
		USART_PutChar(&COMP_USART, stufftosend[i]);
	}
}

void SendNumPC(uint16_t numToSend){
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	64 97       	sbiw	r28, 0x14	; 20
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 17e:	4a e0       	ldi	r20, 0x0A	; 10
 180:	be 01       	movw	r22, r28
 182:	6f 5f       	subi	r22, 0xFF	; 255
 184:	7f 4f       	sbci	r23, 0xFF	; 255
 186:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	0e 94 a8 00 	call	0x150	; 0x150 <_Z12SendStringPCPc>
 192:	64 96       	adiw	r28, 0x14	; 20
 194:	cd bf       	out	0x3d, r28	; 61
 196:	de bf       	out	0x3e, r29	; 62
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <main>:
uint8_t receivedData;


int main(void)
{
	initIO();
 19e:	0e 94 75 00 	call	0xea	; 0xea <_Z6initIOv>
	//configureExternalOscillator();
	configure32MhzInternalOsc();
 1a2:	0e 94 81 00 	call	0x102	; 0x102 <_Z25configure32MhzInternalOscv>
	configureUSART();
 1a6:	0e 94 91 00 	call	0x122	; 0x122 <_Z14configureUSARTv>
	
	uint16_t counter = 0;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
	
    while (1) 
    {
		_delay_ms(1);
		
		STATUS_CLR();
 1ae:	c0 e4       	ldi	r28, 0x40	; 64
 1b0:	d6 e0       	ldi	r29, 0x06	; 6
 1b2:	01 e0       	ldi	r16, 0x01	; 1
		ERROR_SET();
 1b4:	12 e0       	ldi	r17, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	ef e3       	ldi	r30, 0x3F	; 63
 1b8:	ff e1       	ldi	r31, 0x1F	; 31
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0x1c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x22>
 1c0:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(1);
		
		STATUS_CLR();
 1c2:	0e 83       	std	Y+6, r16	; 0x06
		ERROR_SET();
 1c4:	1d 83       	std	Y+5, r17	; 0x05
 1c6:	ef e3       	ldi	r30, 0x3F	; 63
 1c8:	ff e1       	ldi	r31, 0x1F	; 31
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x2c>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x32>
 1d0:	00 00       	nop
		
		_delay_ms(1);
		
		STATUS_SET();
 1d2:	0d 83       	std	Y+5, r16	; 0x05
		ERROR_CLR();
 1d4:	1e 83       	std	Y+6, r17	; 0x06
		
		SendNumPC(counter++);
 1d6:	7c 01       	movw	r14, r24
 1d8:	ff ef       	ldi	r31, 0xFF	; 255
 1da:	ef 1a       	sub	r14, r31
 1dc:	ff 0a       	sbc	r15, r31
 1de:	0e 94 b8 00 	call	0x170	; 0x170 <_Z9SendNumPCj>
		SendStringPC("\n\r");
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e2       	ldi	r25, 0x20	; 32
 1e6:	0e 94 a8 00 	call	0x150	; 0x150 <_Z12SendStringPCPc>
		_delay_ms(1);
		
		STATUS_SET();
		ERROR_CLR();
		
		SendNumPC(counter++);
 1ea:	c7 01       	movw	r24, r14
		SendStringPC("\n\r");

    }
 1ec:	e4 cf       	rjmp	.-56     	; 0x1b6 <main+0x18>

000001ee <__itoa_ncheck>:
 1ee:	bb 27       	eor	r27, r27
 1f0:	4a 30       	cpi	r20, 0x0A	; 10
 1f2:	31 f4       	brne	.+12     	; 0x200 <__itoa_ncheck+0x12>
 1f4:	99 23       	and	r25, r25
 1f6:	22 f4       	brpl	.+8      	; 0x200 <__itoa_ncheck+0x12>
 1f8:	bd e2       	ldi	r27, 0x2D	; 45
 1fa:	90 95       	com	r25
 1fc:	81 95       	neg	r24
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	0c 94 03 01 	jmp	0x206	; 0x206 <__utoa_common>

00000204 <__utoa_ncheck>:
 204:	bb 27       	eor	r27, r27

00000206 <__utoa_common>:
 206:	fb 01       	movw	r30, r22
 208:	55 27       	eor	r21, r21
 20a:	aa 27       	eor	r26, r26
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	aa 1f       	adc	r26, r26
 212:	a4 17       	cp	r26, r20
 214:	10 f0       	brcs	.+4      	; 0x21a <__utoa_common+0x14>
 216:	a4 1b       	sub	r26, r20
 218:	83 95       	inc	r24
 21a:	50 51       	subi	r21, 0x10	; 16
 21c:	b9 f7       	brne	.-18     	; 0x20c <__utoa_common+0x6>
 21e:	a0 5d       	subi	r26, 0xD0	; 208
 220:	aa 33       	cpi	r26, 0x3A	; 58
 222:	08 f0       	brcs	.+2      	; 0x226 <__utoa_common+0x20>
 224:	a9 5d       	subi	r26, 0xD9	; 217
 226:	a1 93       	st	Z+, r26
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	79 f7       	brne	.-34     	; 0x20a <__utoa_common+0x4>
 22c:	b1 11       	cpse	r27, r1
 22e:	b1 93       	st	Z+, r27
 230:	11 92       	st	Z+, r1
 232:	cb 01       	movw	r24, r22
 234:	0c 94 1c 01 	jmp	0x238	; 0x238 <strrev>

00000238 <strrev>:
 238:	dc 01       	movw	r26, r24
 23a:	fc 01       	movw	r30, r24
 23c:	67 2f       	mov	r22, r23
 23e:	71 91       	ld	r23, Z+
 240:	77 23       	and	r23, r23
 242:	e1 f7       	brne	.-8      	; 0x23c <strrev+0x4>
 244:	32 97       	sbiw	r30, 0x02	; 2
 246:	04 c0       	rjmp	.+8      	; 0x250 <strrev+0x18>
 248:	7c 91       	ld	r23, X
 24a:	6d 93       	st	X+, r22
 24c:	70 83       	st	Z, r23
 24e:	62 91       	ld	r22, -Z
 250:	ae 17       	cp	r26, r30
 252:	bf 07       	cpc	r27, r31
 254:	c8 f3       	brcs	.-14     	; 0x248 <strrev+0x10>
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
