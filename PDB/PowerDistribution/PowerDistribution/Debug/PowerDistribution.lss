
PowerDistribution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000165c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00802000  0000165c  000016f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008020b4  008020b4  000017a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000407b  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e7  00000000  00000000  000059db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073c  00000000  00000000  000062c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  00006a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002215  00000000  00000000  00006dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a5b  00000000  00000000  00009001  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00009a5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_7>
      20:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_8>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_12>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_18>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_30>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_35>
      90:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_36>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_38>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	cd bf       	out	0x3d, r28	; 61
      b4:	df e2       	ldi	r29, 0x2F	; 47
      b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
      b8:	10 e2       	ldi	r17, 0x20	; 32
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b0 e2       	ldi	r27, 0x20	; 32
      be:	ec e5       	ldi	r30, 0x5C	; 92
      c0:	f6 e1       	ldi	r31, 0x16	; 22
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a4 3b       	cpi	r26, 0xB4	; 180
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	20 e2       	ldi	r18, 0x20	; 32
      d0:	a4 eb       	ldi	r26, 0xB4	; 180
      d2:	b0 e2       	ldi	r27, 0x20	; 32
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	af 3c       	cpi	r26, 0xCF	; 207
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 8e 03 	call	0x71c	; 0x71c <main>
      e2:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z27configureExternalOscillatorv>:

void configureExternalOscillator(){
	int temp = 0;																			//Temporary variable for helping avoid 4 clock cycle limitation when updating secure registers
		
	//Enable external 4MHz oscillator
	OSC.XOSCCTRL = (OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_16KCLK_gc);						//Set external oscillator to be between 2 and 9 MHz and select it
      ea:	e0 e5       	ldi	r30, 0x50	; 80
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	8b e4       	ldi	r24, 0x4B	; 75
      f0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm;																//Enable the external oscillator
      f2:	80 81       	ld	r24, Z
      f4:	88 60       	ori	r24, 0x08	; 8
      f6:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm)){ERROR_SET();};									//While the external oscillator is not ready, set the error led
      f8:	81 81       	ldd	r24, Z+1	; 0x01
      fa:	83 fd       	sbrc	r24, 3
      fc:	09 c0       	rjmp	.+18     	; 0x110 <_Z27configureExternalOscillatorv+0x26>
      fe:	a0 e4       	ldi	r26, 0x40	; 64
     100:	b6 e0       	ldi	r27, 0x06	; 6
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	15 96       	adiw	r26, 0x05	; 5
     106:	9c 93       	st	X, r25
     108:	15 97       	sbiw	r26, 0x05	; 5
     10a:	81 81       	ldd	r24, Z+1	; 0x01
     10c:	83 ff       	sbrs	r24, 3
     10e:	fa cf       	rjmp	.-12     	; 0x104 <_Z27configureExternalOscillatorv+0x1a>
	ERROR_CLR();																			//Clear the error led if the external oscillator has stabilized
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	80 93 46 06 	sts	0x0646, r24
		
	//Enable phase locked loop to multiply external oscillator by 8 to get 32MHz
	temp = ((OSC_PLLSRC_XOSC_gc & OSC_PLLSRC_gm) | (OSC_PLLFAC_gm & 8));					//Set the external oscillator as the clock source for the pll and set to multiply by 8
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the pll control settings
     116:	88 ed       	ldi	r24, 0xD8	; 216
     118:	84 bf       	out	0x34, r24	; 52
	OSC.PLLCTRL = temp;																		//Write pll control settings to register
     11a:	e0 e5       	ldi	r30, 0x50	; 80
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	88 ec       	ldi	r24, 0xC8	; 200
     120:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= OSC_PLLEN_bm;																//Enable the pll
     122:	80 81       	ld	r24, Z
     124:	80 61       	ori	r24, 0x10	; 16
     126:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm)){ERROR_SET();};										//While the pll is not ready, set the error led
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	84 fd       	sbrc	r24, 4
     12c:	09 c0       	rjmp	.+18     	; 0x140 <_Z27configureExternalOscillatorv+0x56>
     12e:	a0 e4       	ldi	r26, 0x40	; 64
     130:	b6 e0       	ldi	r27, 0x06	; 6
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	15 96       	adiw	r26, 0x05	; 5
     136:	9c 93       	st	X, r25
     138:	15 97       	sbiw	r26, 0x05	; 5
     13a:	81 81       	ldd	r24, Z+1	; 0x01
     13c:	84 ff       	sbrs	r24, 4
     13e:	fa cf       	rjmp	.-12     	; 0x134 <_Z27configureExternalOscillatorv+0x4a>
	ERROR_CLR();																			//Disable the error led if successfully stabilized
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	80 93 46 06 	sts	0x0646, r24
		
	//Set system pll clock divisions and set up as source for all system clocks
	temp = ((CLK_PSADIV_gm & CLK_PSADIV_1_gc) | (CLK_PSBCDIV_gm & CLK_PSBCDIV_1_1_gc));		//Set system to use pll divided by 1 (no division)
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the clock source division setting
     146:	88 ed       	ldi	r24, 0xD8	; 216
     148:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write division settings to register
     14a:	e0 e4       	ldi	r30, 0x40	; 64
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	10 82       	st	Z, r1
		
	temp = CLK_SCLKSEL_PLL_gc;																//Set pll as system clock source
	CCP = CCP_IOREG_gc;																		//Disable register security so we can update the system clock
     150:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = temp;																		//Write clock source settings to register
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	80 83       	st	Z, r24
     156:	08 95       	ret

00000158 <_Z11configureIOv>:
	
	
}

void configureIO(void){
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	//Set STATUS and ERROR LEDs to be outputs
	PORTC.DIRSET = PIN1_bm;
     15c:	e0 e4       	ldi	r30, 0x40	; 64
     15e:	f6 e0       	ldi	r31, 0x06	; 6
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = PIN0_bm;
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	91 83       	std	Z+1, r25	; 0x01
	
	//Set the Relay Pin to be an output
	PORTC.DIRSET = PIN5_bm;
     168:	20 e2       	ldi	r18, 0x20	; 32
     16a:	21 83       	std	Z+1, r18	; 0x01
	
	//Set the settings switches to be inputs
	PORTC.DIRCLR = PIN2_bm;
     16c:	34 e0       	ldi	r19, 0x04	; 4
     16e:	32 83       	std	Z+2, r19	; 0x02
	PORTC.DIRCLR = PIN3_bm;
     170:	48 e0       	ldi	r20, 0x08	; 8
     172:	42 83       	std	Z+2, r20	; 0x02
	
	//Set pullups on the switches
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
     174:	48 e1       	ldi	r20, 0x18	; 24
     176:	42 8b       	std	Z+18, r20	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
     178:	43 8b       	std	Z+19, r20	; 0x13
	
	//SET ADC Pints to be inputs
	PORTA.DIRCLR = PIN0_bm;  //2.5v ref (AFREF Pin)
     17a:	c0 e0       	ldi	r28, 0x00	; 0
     17c:	d6 e0       	ldi	r29, 0x06	; 6
     17e:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = PIN1_bm;  //Ground reference
     180:	8a 83       	std	Y+2, r24	; 0x02
	PORTD.DIRCLR = PIN0_bm;  //Temp-Sensor Pin
     182:	a0 e6       	ldi	r26, 0x60	; 96
     184:	b6 e0       	ldi	r27, 0x06	; 6
     186:	12 96       	adiw	r26, 0x02	; 2
     188:	9c 93       	st	X, r25
     18a:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN1_bm;  //Voltage Sense - Electronics Battery
     18c:	12 96       	adiw	r26, 0x02	; 2
     18e:	8c 93       	st	X, r24
     190:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRCLR = PIN2_bm;  //Voltage Sense - Rear Battery
     192:	12 96       	adiw	r26, 0x02	; 2
     194:	3c 93       	st	X, r19
     196:	12 97       	sbiw	r26, 0x02	; 2
	
	//Setup the RSSI input
	PORTA.DIRCLR = PIN2_bm;				//Set the RSSI pin to be an input
     198:	3a 83       	std	Y+2, r19	; 0x02
	//PORTA.INTCTRL = PMIC_MEDLVLEN_bm;	//Set PORTA's interrupt to be medium level
	//PORTA.INTMASK = PIN2_bm;			//Configure the RSSI pin to be an interrupt
	//PORTA.PIN2CTRL |=  PORT_ISC_BOTHEDGES_gc;	//Configure the interrupt to trigger on both edges
	
	//Setup the steering signal I/O
	PORTD.DIRCLR = PIN4_bm;  //Set the STEER_SIG_3v3 pin as an input
     19a:	30 e1       	ldi	r19, 0x10	; 16
     19c:	12 96       	adiw	r26, 0x02	; 2
     19e:	3c 93       	st	X, r19
     1a0:	12 97       	sbiw	r26, 0x02	; 2
	PORTD.DIRSET = PIN5_bm;	 //Set the STEER_SIG_3v3_PROCESSED pin to be an output
     1a2:	11 96       	adiw	r26, 0x01	; 1
     1a4:	2c 93       	st	X, r18
     1a6:	11 97       	sbiw	r26, 0x01	; 1

	//Setup steering control PWM interrupts
	PORTD.INTCTRL  = PMIC_MEDLVLEN_bm;	//Set PORTC's interrupt to be medium level
     1a8:	19 96       	adiw	r26, 0x09	; 9
     1aa:	8c 93       	st	X, r24
     1ac:	19 97       	sbiw	r26, 0x09	; 9
	PORTD.INTMASK  = PIN4_bm;			//Configure the PWM input pin as an interrupt
     1ae:	1a 96       	adiw	r26, 0x0a	; 10
     1b0:	3c 93       	st	X, r19
     1b2:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.PIN4CTRL = PORT_ISC_RISING_gc;  //Init the pin as a rising edge interrupt only
     1b4:	54 96       	adiw	r26, 0x14	; 20
     1b6:	9c 93       	st	X, r25
     1b8:	54 97       	sbiw	r26, 0x14	; 20
	
	//DONT FORGET TO CLEAR THE FLAG IN INTFLAGS	
	
	//Initialize output values
	STATUS_CLR();
     1ba:	96 83       	std	Z+6, r25	; 0x06
	ERROR_CLR();
     1bc:	86 83       	std	Z+6, r24	; 0x06
	
	REAR_RELAY_CLR();
     1be:	26 83       	std	Z+6, r18	; 0x06
	
	STEER_SIG_CLR();	
     1c0:	16 96       	adiw	r26, 0x06	; 6
     1c2:	2c 93       	st	X, r18
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <__vector_35>:
*/
/*
If measuring ______/----- just happened

*/
ISR(PORTD_INT_vect){
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	11 24       	eor	r1, r1
     1d4:	8f 93       	push	r24
     1d6:	9f 93       	push	r25
     1d8:	af 93       	push	r26
     1da:	bf 93       	push	r27
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	ef 93       	push	r30
     1e2:	ff 93       	push	r31
	ERROR_TOGGLE();
     1e4:	80 91 44 06 	lds	r24, 0x0644
     1e8:	81 fd       	sbrc	r24, 1
     1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <__vector_35+0x2a>
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	80 93 45 06 	sts	0x0645, r24
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <__vector_35+0x30>
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	80 93 46 06 	sts	0x0646, r24
	PORTD.INTFLAGS = PIN4_bm;
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	80 93 6c 06 	sts	0x066C, r24

	
	if(PWMMeasuringStatus == NOT_MEASURING){  //We encountered the first part of the wave
     200:	80 91 00 20 	lds	r24, 0x2000
     204:	81 30       	cpi	r24, 0x01	; 1
     206:	81 f4       	brne	.+32     	; 0x228 <__vector_35+0x5e>
		TCC5.CNT = 0;	//Start counting
     208:	10 92 60 08 	sts	0x0860, r1
     20c:	10 92 61 08 	sts	0x0861, r1
		PWMMeasuringStatus = MEASURING;
     210:	10 92 00 20 	sts	0x2000, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     214:	87 ec       	ldi	r24, 0xC7	; 199
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <__vector_35+0x4e>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <__vector_35+0x54>
     21e:	00 00       	nop
		
		_delay_us(25);  //Delay ~6-7 clock cycles
		
		PORTD.PIN4CTRL = PORT_ISC_FALLING_gc; //Set the interrupt to wait for a falling wave (end of signal)
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	80 93 74 06 	sts	0x0674, r24
     226:	19 c0       	rjmp	.+50     	; 0x25a <__vector_35+0x90>
	}
	else { //We finished encountering the wave (process the data)
		longTemp = TCC5.CNT;
     228:	80 91 60 08 	lds	r24, 0x0860
     22c:	90 91 61 08 	lds	r25, 0x0861
     230:	80 93 b4 20 	sts	0x20B4, r24
     234:	90 93 b5 20 	sts	0x20B5, r25
     238:	10 92 b6 20 	sts	0x20B6, r1
     23c:	10 92 b7 20 	sts	0x20B7, r1
     240:	10 92 b8 20 	sts	0x20B8, r1
     244:	10 92 b9 20 	sts	0x20B9, r1
     248:	10 92 ba 20 	sts	0x20BA, r1
     24c:	10 92 bb 20 	sts	0x20BB, r1
		PWMMeasuringStatus = NOT_MEASURING;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 00 20 	sts	0x2000, r24
		
		PORTD.PIN4CTRL = PORT_ISC_RISING_gc; 
     256:	80 93 74 06 	sts	0x0674, r24
	}
	
}
     25a:	ff 91       	pop	r31
     25c:	ef 91       	pop	r30
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	bf 91       	pop	r27
     264:	af 91       	pop	r26
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	0f 90       	pop	r0
     270:	1f 90       	pop	r1
     272:	18 95       	reti

00000274 <__vector_30>:

//This function will be called on the edges of the RSSI signal 
//*CURRENTLY DISABLED*
ISR(PORTA_INT_vect){
     274:	1f 92       	push	r1
     276:	0f 92       	push	r0
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	0f 92       	push	r0
     27c:	11 24       	eor	r1, r1
     27e:	8f 93       	push	r24
     280:	9f 93       	push	r25
     282:	ef 93       	push	r30
     284:	ff 93       	push	r31
	cli();
     286:	f8 94       	cli
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	80 93 0c 06 	sts	0x060C, r24
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
     28e:	80 91 c6 20 	lds	r24, 0x20C6
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	61 f4       	brne	.+24     	; 0x2ae <__vector_30+0x3a>
     296:	80 91 08 06 	lds	r24, 0x0608
     29a:	82 fd       	sbrc	r24, 2
     29c:	0b c0       	rjmp	.+22     	; 0x2b4 <__vector_30+0x40>
     29e:	1f c0       	rjmp	.+62     	; 0x2de <__vector_30+0x6a>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     2a0:	80 91 08 06 	lds	r24, 0x0608
     2a4:	82 ff       	sbrs	r24, 2
     2a6:	0d c0       	rjmp	.+26     	; 0x2c2 <__vector_30+0x4e>
     2a8:	1a c0       	rjmp	.+52     	; 0x2de <__vector_30+0x6a>
		ERROR_SET();
	}
	
	
	//_delay_us(200);
	sei();
     2aa:	78 94       	sei
     2ac:	1c c0       	rjmp	.+56     	; 0x2e6 <__vector_30+0x72>
		RTC.CNT = 0;		//We want to start counting the counter now
		RSSI.measuring = MEASURING;
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
     2ae:	88 23       	and	r24, r24
     2b0:	b9 f3       	breq	.-18     	; 0x2a0 <__vector_30+0x2c>
     2b2:	15 c0       	rjmp	.+42     	; 0x2de <__vector_30+0x6a>
	cli();
	
	PORTA.INTFLAGS = PIN2_bm;  //Reset the interrupt flag for this pin
	
	if(RSSI.measuring == NOT_MEASURING && READ_RSSI_PIN()){   //We detected one of these ____/---
		RTC.CNT = 0;		//We want to start counting the counter now
     2b4:	10 92 08 04 	sts	0x0408, r1
     2b8:	10 92 09 04 	sts	0x0409, r1
		RSSI.measuring = MEASURING;
     2bc:	10 92 c6 20 	sts	0x20C6, r1
     2c0:	f4 cf       	rjmp	.-24     	; 0x2aa <__vector_30+0x36>
		

	}
	else if (RSSI.measuring == MEASURING && !READ_RSSI_PIN()){  //That means we are at this point ---\____
		RSSI.countDifference = RTC.CNT;
     2c2:	80 91 08 04 	lds	r24, 0x0408
     2c6:	90 91 09 04 	lds	r25, 0x0409
     2ca:	e5 ec       	ldi	r30, 0xC5	; 197
     2cc:	f0 e2       	ldi	r31, 0x20	; 32
     2ce:	84 83       	std	Z+4, r24	; 0x04
     2d0:	95 83       	std	Z+5, r25	; 0x05
		
		RSSI.sampleCount++;
     2d2:	86 81       	ldd	r24, Z+6	; 0x06
     2d4:	97 81       	ldd	r25, Z+7	; 0x07
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	86 83       	std	Z+6, r24	; 0x06
     2da:	97 83       	std	Z+7, r25	; 0x07
     2dc:	e6 cf       	rjmp	.-52     	; 0x2aa <__vector_30+0x36>
	}
	else {
		ERROR_SET();
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	80 93 45 06 	sts	0x0645, r24
     2e4:	e2 cf       	rjmp	.-60     	; 0x2aa <__vector_30+0x36>
	}
	
	
	//_delay_us(200);
	sei();
}
     2e6:	ff 91       	pop	r31
     2e8:	ef 91       	pop	r30
     2ea:	9f 91       	pop	r25
     2ec:	8f 91       	pop	r24
     2ee:	0f 90       	pop	r0
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	0f 90       	pop	r0
     2f4:	1f 90       	pop	r1
     2f6:	18 95       	reti

000002f8 <_Z21configureTimerCounterv>:
1S    = 0x7A12

*/
void configureTimerCounter(){
	//Configure the accurate reporting timer
	TCC4.CTRLA = TC45_CLKSEL_DIV1024_gc;	//Configure a 1024 prescaler (we want very broad timing here, exact precision isn't required)
     2f8:	e0 e0       	ldi	r30, 0x00	; 0
     2fa:	f8 e0       	ldi	r31, 0x08	; 8
     2fc:	87 e0       	ldi	r24, 0x07	; 7
     2fe:	80 83       	st	Z, r24
	TCC4.PER = TC_1024_500MS;               //500mS delay
     300:	89 e0       	ldi	r24, 0x09	; 9
     302:	9d e3       	ldi	r25, 0x3D	; 61
     304:	86 a3       	std	Z+38, r24	; 0x26
     306:	97 a3       	std	Z+39, r25	; 0x27
											//Default delay value. Reference pre-calculated table up above for more information
	TCC4.CTRLB = TC45_WGMODE_NORMAL_gc;		//Configure the timer for Normal mode operation
     308:	11 82       	std	Z+1, r1	; 0x01
	TCC4.INTCTRLA = TC45_OVFINTLVL_LO_gc;	//Set a low priority overflow interrupt
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	86 83       	std	Z+6, r24	; 0x06

	//Configure the PWM sense module
	//Input capture described on (168)
	TCC5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     30e:	e0 e4       	ldi	r30, 0x40	; 64
     310:	f8 e0       	ldi	r31, 0x08	; 8
     312:	85 e0       	ldi	r24, 0x05	; 5
     314:	80 83       	st	Z, r24
	TCC5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     316:	11 82       	std	Z+1, r1	; 0x01
	TCC5.PER   = 12000;						//This is set to be 20% longer than the 20mS cycle should be
     318:	20 ee       	ldi	r18, 0xE0	; 224
     31a:	3e e2       	ldi	r19, 0x2E	; 46
     31c:	26 a3       	std	Z+38, r18	; 0x26
     31e:	37 a3       	std	Z+39, r19	; 0x27
	
	//Is the following necessary?
	TCC5.INTCTRLA = TC45_OVFINTLVL_MED_gc;	//Set a medium priority overflow interrupt (we want the PWM generation to remain stable)
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	96 83       	std	Z+6, r25	; 0x06
											//as it will only take a few clock cycles compared to this interrupt
	
	//Configure the PWM generation module
	TCD5.CTRLA = TC45_CLKSEL_DIV64_gc;		//Configure a 64 prescaler (will count ~10,000 in 20mS)
     324:	e0 e4       	ldi	r30, 0x40	; 64
     326:	f9 e0       	ldi	r31, 0x09	; 9
     328:	80 83       	st	Z, r24
	TCD5.CTRLB = TC45_WGMODE_NORMAL_gc;		//Normal operation
     32a:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PER   = 10000;						//We want to establish a 50Hz control loop here (20ms period)
     32c:	80 e1       	ldi	r24, 0x10	; 16
     32e:	97 e2       	ldi	r25, 0x27	; 39
     330:	86 a3       	std	Z+38, r24	; 0x26
     332:	97 a3       	std	Z+39, r25	; 0x27
	TCD5.INTCTRLA = TC45_OVFINTLVL_HI_gc;	//Set a high priority overflow interrupt
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	86 83       	std	Z+6, r24	; 0x06
	TCD5.INTCTRLB = TC45_CCAINTLVL_HI_gc;   
     338:	87 83       	std	Z+7, r24	; 0x07
	
	TCD5.CCA = 950;		//Initial value for compare
     33a:	86 eb       	ldi	r24, 0xB6	; 182
     33c:	93 e0       	ldi	r25, 0x03	; 3
     33e:	80 a7       	std	Z+40, r24	; 0x28
     340:	91 a7       	std	Z+41, r25	; 0x29
     342:	08 95       	ret

00000344 <__vector_18>:
}


ISR (TCC5_OVF_vect){
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	8f 93       	push	r24
     350:	ef 93       	push	r30
     352:	ff 93       	push	r31
	TCC5.INTFLAGS |= 0b1;  //Reset interrupt flag
     354:	e0 e4       	ldi	r30, 0x40	; 64
     356:	f8 e0       	ldi	r31, 0x08	; 8
     358:	84 85       	ldd	r24, Z+12	; 0x0c
     35a:	81 60       	ori	r24, 0x01	; 1
     35c:	84 87       	std	Z+12, r24	; 0x0c
}
     35e:	ff 91       	pop	r31
     360:	ef 91       	pop	r30
     362:	8f 91       	pop	r24
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <__vector_38>:
/*
Compare vector A for the PWM generation module
This situation ------\______

*/
ISR (TCD5_CCA_vect){
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	8f 93       	push	r24
	STEER_SIG_CLR();
     37a:	80 e2       	ldi	r24, 0x20	; 32
     37c:	80 93 66 06 	sts	0x0666, r24
	//STATUS_SET();
}
     380:	8f 91       	pop	r24
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <__vector_36>:
This situation: _____/-----

*/


ISR (TCD5_OVF_vect){
     38c:	1f 92       	push	r1
     38e:	0f 92       	push	r0
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	0f 92       	push	r0
     394:	11 24       	eor	r1, r1
     396:	8f 93       	push	r24
     398:	ef 93       	push	r30
     39a:	ff 93       	push	r31
	STEER_SIG_SET();
     39c:	80 e2       	ldi	r24, 0x20	; 32
     39e:	80 93 65 06 	sts	0x0665, r24
	
	TCD5.INTFLAGS |= 0b1;
     3a2:	e0 e4       	ldi	r30, 0x40	; 64
     3a4:	f9 e0       	ldi	r31, 0x09	; 9
     3a6:	84 85       	ldd	r24, Z+12	; 0x0c
     3a8:	81 60       	ori	r24, 0x01	; 1
     3aa:	84 87       	std	Z+12, r24	; 0x0c
	
	TCD5.CNT = 0;
     3ac:	10 a2       	std	Z+32, r1	; 0x20
     3ae:	11 a2       	std	Z+33, r1	; 0x21
}
     3b0:	ff 91       	pop	r31
     3b2:	ef 91       	pop	r30
     3b4:	8f 91       	pop	r24
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_12>:

//Handles compare vector for T/C 4
ISR (TCC4_OVF_vect){
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	ef 93       	push	r30
     3de:	ff 93       	push	r31
	++longCounter;
     3e0:	20 91 bc 20 	lds	r18, 0x20BC
     3e4:	30 91 bd 20 	lds	r19, 0x20BD
     3e8:	40 91 be 20 	lds	r20, 0x20BE
     3ec:	50 91 bf 20 	lds	r21, 0x20BF
     3f0:	60 91 c0 20 	lds	r22, 0x20C0
     3f4:	70 91 c1 20 	lds	r23, 0x20C1
     3f8:	80 91 c2 20 	lds	r24, 0x20C2
     3fc:	90 91 c3 20 	lds	r25, 0x20C3
     400:	a1 e0       	ldi	r26, 0x01	; 1
     402:	0e 94 19 08 	call	0x1032	; 0x1032 <__adddi3_s8>
     406:	20 93 bc 20 	sts	0x20BC, r18
     40a:	30 93 bd 20 	sts	0x20BD, r19
     40e:	40 93 be 20 	sts	0x20BE, r20
     412:	50 93 bf 20 	sts	0x20BF, r21
     416:	60 93 c0 20 	sts	0x20C0, r22
     41a:	70 93 c1 20 	sts	0x20C1, r23
     41e:	80 93 c2 20 	sts	0x20C2, r24
     422:	90 93 c3 20 	sts	0x20C3, r25
	
	TCC4.INTFLAGS |= 0b1;  //Reset overflow interrupt
     426:	e0 e0       	ldi	r30, 0x00	; 0
     428:	f8 e0       	ldi	r31, 0x08	; 8
     42a:	84 85       	ldd	r24, Z+12	; 0x0c
     42c:	81 60       	ori	r24, 0x01	; 1
     42e:	84 87       	std	Z+12, r24	; 0x0c
	
	broadcastStatus = 1;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	80 93 c4 20 	sts	0x20C4, r24
}
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	af 91       	pop	r26
     43c:	9f 91       	pop	r25
     43e:	8f 91       	pop	r24
     440:	7f 91       	pop	r23
     442:	6f 91       	pop	r22
     444:	5f 91       	pop	r21
     446:	4f 91       	pop	r20
     448:	3f 91       	pop	r19
     44a:	2f 91       	pop	r18
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <_Z12configureRTCv>:

/*
The real time clock is configured to handle XTend RSSI Interpret
*/
void configureRTC(){
	RTC.CTRL = RTC_CORREN_bm | RTC_PRESCALER_DIV1_gc;		//Enable the RTC correction process, and the RTC itself with no prescaler
     456:	e0 e0       	ldi	r30, 0x00	; 0
     458:	f4 e0       	ldi	r31, 0x04	; 4
     45a:	89 e0       	ldi	r24, 0x09	; 9
     45c:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_COMPINTLVL_LO_gc | RTC_OVFINTLVL_LO_gc; //Enable the overflow and 
     45e:	85 e0       	ldi	r24, 0x05	; 5
     460:	82 83       	std	Z+2, r24	; 0x02
	
    OSC.CTRL |= OSC_RC32KEN_bm;								//Enable the 32.768kHz internal oscillator
     462:	a0 e5       	ldi	r26, 0x50	; 80
     464:	b0 e0       	ldi	r27, 0x00	; 0
     466:	8c 91       	ld	r24, X
     468:	84 60       	ori	r24, 0x04	; 4
     46a:	8c 93       	st	X, r24
     46c:	8f e7       	ldi	r24, 0x7F	; 127
     46e:	9c e0       	ldi	r25, 0x0C	; 12
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <_Z12configureRTCv+0x1a>
     474:	00 c0       	rjmp	.+0      	; 0x476 <_Z12configureRTCv+0x20>
     476:	00 00       	nop
	
	_delay_us(400);											//Wait for the oscillator to stabalize.
	
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC32_gc;					//Set the RTC input as the 32.768kHz internal oscillator
     478:	a0 e4       	ldi	r26, 0x40	; 64
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	8c e0       	ldi	r24, 0x0C	; 12
     47e:	13 96       	adiw	r26, 0x03	; 3
     480:	8c 93       	st	X, r24
     482:	13 97       	sbiw	r26, 0x03	; 3
	CLK.RTCCTRL |= CLK_RTCEN_bm;							//Enable the clock input
     484:	13 96       	adiw	r26, 0x03	; 3
     486:	8c 91       	ld	r24, X
     488:	13 97       	sbiw	r26, 0x03	; 3
     48a:	81 60       	ori	r24, 0x01	; 1
     48c:	13 96       	adiw	r26, 0x03	; 3
     48e:	8c 93       	st	X, r24
	
	//Testing setup code
	RTC.COMP = 16384; //~1 second? Assuming 32.768 KHz
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e4       	ldi	r25, 0x40	; 64
     494:	84 87       	std	Z+12, r24	; 0x0c
     496:	95 87       	std	Z+13, r25	; 0x0d
	RTC.PER = 0xFF00;  //No tengo nuguien idea
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	9f ef       	ldi	r25, 0xFF	; 255
     49c:	82 87       	std	Z+10, r24	; 0x0a
     49e:	93 87       	std	Z+11, r25	; 0x0b
     4a0:	08 95       	ret

000004a2 <__vector_7>:

}

ISR(RTC_OVF_vect){
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
	
}
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <__vector_8>:

ISR(RTC_COMP_vect){
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	8f 93       	push	r24
     4c2:	ef 93       	push	r30
     4c4:	ff 93       	push	r31
	
	RTC.CNT = 0;
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	f4 e0       	ldi	r31, 0x04	; 4
     4ca:	10 86       	std	Z+8, r1	; 0x08
     4cc:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTFLAGS = 0x02;
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	83 83       	std	Z+3, r24	; 0x03
	
	RSSI.countDifference = 0;
     4d2:	10 92 c9 20 	sts	0x20C9, r1
     4d6:	10 92 ca 20 	sts	0x20CA, r1
}
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	8f 91       	pop	r24
     4e0:	0f 90       	pop	r0
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	0f 90       	pop	r0
     4e6:	1f 90       	pop	r1
     4e8:	18 95       	reti

000004ea <_Z12configureXCLv>:

void configureXCL(){
     4ea:	08 95       	ret

000004ec <_Z19ReadCalibrationByteh>:
/* Read NVM signature. From http://www.avrfreaks.net/forum/xmega-production-signature-row */
uint8_t ReadCalibrationByte( uint8_t index ){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     4ec:	aa ec       	ldi	r26, 0xCA	; 202
     4ee:	b1 e0       	ldi	r27, 0x01	; 1
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     4f4:	e8 2f       	mov	r30, r24
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     4fa:	1c 92       	st	X, r1

	return( result );
}
     4fc:	08 95       	ret

000004fe <_Z13configureADCsv>:

#include "config.h"

extern RSSI_type RSSI;

void configureADCs(){
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
	// Batt Input Voltage
	// Halve Input
	//Set to single ended input
	//Set to 12-bit mode
		
	ADCA.CTRLB = (ADC_RESOLUTION_MT12BIT_gc | ADC_CONMODE_bm);	//Sets resolution to 12 bit and sets conversion mode to signed
     502:	c0 e0       	ldi	r28, 0x00	; 0
     504:	d2 e0       	ldi	r29, 0x02	; 2
     506:	82 e1       	ldi	r24, 0x12	; 18
     508:	89 83       	std	Y+1, r24	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;                              //Reference the "rail splitter" 2.5v reference
     50a:	80 e2       	ldi	r24, 0x20	; 32
     50c:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; //Disable events
     50e:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
     510:	87 e0       	ldi	r24, 0x07	; 7
     512:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
     514:	80 e2       	ldi	r24, 0x20	; 32
     516:	0e 94 76 02 	call	0x4ec	; 0x4ec <_Z19ReadCalibrationByteh>
     51a:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
     51c:	81 e2       	ldi	r24, 0x21	; 33
     51e:	0e 94 76 02 	call	0x4ec	; 0x4ec <_Z19ReadCalibrationByteh>
     522:	8d 87       	std	Y+13, r24	; 0x0d
     524:	8f e7       	ldi	r24, 0x7F	; 127
     526:	9c e0       	ldi	r25, 0x0C	; 12
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <_Z13configureADCsv+0x2a>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <_Z13configureADCsv+0x30>
     52e:	00 00       	nop
	_delay_us(400);
	//ADCA.CH0.AVGCTRL = ADC_SAMPNUM_256X_gc;
	ADCA.CH0.CTRL = (ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAINL_gc);
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	88 a3       	std	Y+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);  //Init the ADC MUX to use the PIN8 input
     534:	81 e4       	ldi	r24, 0x41	; 65
     536:	89 a3       	std	Y+33, r24	; 0x21
																	 //and set the negative input to the GND
																     //reference on PORTA PIN1
	ADCA.CH0.INTCTRL = 0; // Set COMPLETE interrupts
     538:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	88 83       	st	Y, r24
	//_delay_ms(1);
	//ADCA.CH0.CTRL = ADC_CH_START_bm;
	//
	//ADCA.CTRLA |= ADC_CH8START_bm;
	*/	
}	
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <_Z23sampleTempSensorVoltagev>:




int16_t sampleTempSensorVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEGL_PIN1_gc);//ADC_CH_MUXNEG0_bm);
     544:	e0 e0       	ldi	r30, 0x00	; 0
     546:	f2 e0       	ldi	r31, 0x02	; 2
     548:	81 e4       	ldi	r24, 0x41	; 65
     54a:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     54c:	80 a1       	ldd	r24, Z+32	; 0x20
     54e:	80 68       	ori	r24, 0x80	; 128
     550:	80 a3       	std	Z+32, r24	; 0x20
     552:	8f e7       	ldi	r24, 0x7F	; 127
     554:	9c e0       	ldi	r25, 0x0C	; 12
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <_Z23sampleTempSensorVoltagev+0x12>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <_Z23sampleTempSensorVoltagev+0x18>
     55c:	00 00       	nop
	
	_delay_us(400);
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 8)) != (1U << 8)); // (1U << n) where n is the adc channel, so zero for this one
	
	while(!(ADCA.INTFLAGS & (1 << 0)));
     55e:	86 81       	ldd	r24, Z+6	; 0x06
     560:	80 ff       	sbrs	r24, 0
     562:	fd cf       	rjmp	.-6      	; 0x55e <_Z23sampleTempSensorVoltagev+0x1a>
	ADCA.INTFLAGS = (1 << 0);
     564:	e0 e0       	ldi	r30, 0x00	; 0
     566:	f2 e0       	ldi	r31, 0x02	; 2
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     56c:	84 a1       	ldd	r24, Z+36	; 0x24
     56e:	95 a1       	ldd	r25, Z+37	; 0x25
}
     570:	08 95       	ret

00000572 <_Z20sampleBatteryVoltagev>:

int16_t sampleBatteryVoltage(void){
	ADCA.CH0.MUXCTRL = (ADC_CH_MUXPOS_PIN9_gc | ADC_CH_MUXNEGL_PIN1_gc); //PIN for batt voltage sense
     572:	e0 e0       	ldi	r30, 0x00	; 0
     574:	f2 e0       	ldi	r31, 0x02	; 2
     576:	89 e4       	ldi	r24, 0x49	; 73
     578:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
     57a:	80 a1       	ldd	r24, Z+32	; 0x20
     57c:	80 68       	ori	r24, 0x80	; 128
     57e:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(((ADCA.INTFLAGS >> ADC_CH0IF_bp) & (1U << 0)) != (1U << 0)); // (1U << n) where n is the adc channel, so zero for this one
	//ADCA.INTFLAGS = ((1U << 0) << ADC_CH0IF_bp);
	while(!(ADCA.INTFLAGS & (1 << 0)));
     580:	86 81       	ldd	r24, Z+6	; 0x06
     582:	80 ff       	sbrs	r24, 0
     584:	fd cf       	rjmp	.-6      	; 0x580 <_Z20sampleBatteryVoltagev+0xe>
	ADCA.INTFLAGS = (1 << 0);
     586:	e0 e0       	ldi	r30, 0x00	; 0
     588:	f2 e0       	ldi	r31, 0x02	; 2
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	86 83       	std	Z+6, r24	; 0x06
	
	return 	ADCA.CH0.RES;
     58e:	84 a1       	ldd	r24, Z+36	; 0x24
     590:	95 a1       	ldd	r25, Z+37	; 0x25
}
     592:	08 95       	ret

00000594 <_Z18getEBoxTemperaturev>:

double getEBoxTemperature(){
     594:	2f 92       	push	r2
     596:	3f 92       	push	r3
     598:	4f 92       	push	r4
     59a:	5f 92       	push	r5
     59c:	6f 92       	push	r6
     59e:	7f 92       	push	r7
     5a0:	8f 92       	push	r8
     5a2:	9f 92       	push	r9
     5a4:	af 92       	push	r10
     5a6:	bf 92       	push	r11
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	0f 2e       	mov	r0, r31
     5ba:	f4 e6       	ldi	r31, 0x64	; 100
     5bc:	6f 2e       	mov	r6, r31
     5be:	71 2c       	mov	r7, r1
     5c0:	f0 2d       	mov	r31, r0
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
     5c2:	41 2c       	mov	r4, r1
     5c4:	51 2c       	mov	r5, r1
     5c6:	81 2c       	mov	r8, r1
     5c8:	91 2c       	mov	r9, r1
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
     5cc:	c0 e0       	ldi	r28, 0x00	; 0
     5ce:	21 2c       	mov	r2, r1
     5d0:	31 2c       	mov	r3, r1
	for(int i = 0; i < avgVal; ++i){
		sum += sampleTempSensorVoltage();
     5d2:	0e 94 a2 02 	call	0x544	; 0x544 <_Z23sampleTempSensorVoltagev>
     5d6:	b9 2e       	mov	r11, r25
     5d8:	a8 2e       	mov	r10, r24
     5da:	19 2f       	mov	r17, r25
     5dc:	11 0f       	add	r17, r17
     5de:	11 0b       	sbc	r17, r17
     5e0:	24 2d       	mov	r18, r4
     5e2:	35 2d       	mov	r19, r5
     5e4:	48 2d       	mov	r20, r8
     5e6:	59 2d       	mov	r21, r9
     5e8:	6d 2f       	mov	r22, r29
     5ea:	7c 2f       	mov	r23, r28
     5ec:	82 2d       	mov	r24, r2
     5ee:	93 2d       	mov	r25, r3
     5f0:	c1 2e       	mov	r12, r17
     5f2:	d1 2e       	mov	r13, r17
     5f4:	e1 2e       	mov	r14, r17
     5f6:	f1 2e       	mov	r15, r17
     5f8:	01 2f       	mov	r16, r17
     5fa:	0e 94 10 08 	call	0x1020	; 0x1020 <__adddi3>
     5fe:	42 2e       	mov	r4, r18
     600:	53 2e       	mov	r5, r19
     602:	84 2e       	mov	r8, r20
     604:	95 2e       	mov	r9, r21
     606:	d6 2f       	mov	r29, r22
     608:	c7 2f       	mov	r28, r23
     60a:	28 2e       	mov	r2, r24
     60c:	39 2e       	mov	r3, r25
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	68 1a       	sub	r6, r24
     612:	71 08       	sbc	r7, r1
double getEBoxTemperature(){
	
	int avgVal = 100;
	uint16_t temperature = 0;
	uint64_t sum = 0;
	for(int i = 0; i < avgVal; ++i){
     614:	f1 f6       	brne	.-68     	; 0x5d2 <_Z18getEBoxTemperaturev+0x3e>
		sum += sampleTempSensorVoltage();
	}
	temperature = sum / avgVal;
     616:	0f 2e       	mov	r0, r31
     618:	f4 e6       	ldi	r31, 0x64	; 100
     61a:	af 2e       	mov	r10, r31
     61c:	f0 2d       	mov	r31, r0
     61e:	b1 2c       	mov	r11, r1
     620:	c1 2c       	mov	r12, r1
     622:	d1 2c       	mov	r13, r1
     624:	e1 2c       	mov	r14, r1
     626:	f1 2c       	mov	r15, r1
     628:	00 e0       	ldi	r16, 0x00	; 0
     62a:	10 e0       	ldi	r17, 0x00	; 0
     62c:	24 2d       	mov	r18, r4
     62e:	35 2d       	mov	r19, r5
     630:	48 2d       	mov	r20, r8
     632:	59 2d       	mov	r21, r9
     634:	6d 2f       	mov	r22, r29
     636:	7c 2f       	mov	r23, r28
     638:	82 2d       	mov	r24, r2
     63a:	93 2d       	mov	r25, r3
     63c:	0e 94 b3 07 	call	0xf66	; 0xf66 <__udivdi3>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     640:	62 2f       	mov	r22, r18
     642:	73 2f       	mov	r23, r19
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 48 06 	call	0xc90	; 0xc90 <__floatunsisf>
     64c:	29 e8       	ldi	r18, 0x89	; 137
     64e:	3d e0       	ldi	r19, 0x0D	; 13
     650:	4d e9       	ldi	r20, 0x9D	; 157
     652:	5a e3       	ldi	r21, 0x3A	; 58
     654:	0e 94 d6 06 	call	0xdac	; 0xdac <__mulsf3>
     658:	24 e6       	ldi	r18, 0x64	; 100
     65a:	37 e6       	ldi	r19, 0x67	; 103
     65c:	49 e1       	ldi	r20, 0x19	; 25
     65e:	5b e3       	ldi	r21, 0x3B	; 59
     660:	0e 94 34 05 	call	0xa68	; 0xa68 <__addsf3>
	
	#ifdef TMP36
		temperatureFloat = 100.0 * temperatureVoltage - 50.0;
	#endif
	#ifdef TMP37
		temperatureFloat = 50.0 * temperatureVoltage;
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	48 e4       	ldi	r20, 0x48	; 72
     66a:	52 e4       	ldi	r21, 0x42	; 66
     66c:	0e 94 d6 06 	call	0xdac	; 0xdac <__mulsf3>
	#endif
	
	return temperatureFloat;
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	bf 90       	pop	r11
     682:	af 90       	pop	r10
     684:	9f 90       	pop	r9
     686:	8f 90       	pop	r8
     688:	7f 90       	pop	r7
     68a:	6f 90       	pop	r6
     68c:	5f 90       	pop	r5
     68e:	4f 90       	pop	r4
     690:	3f 90       	pop	r3
     692:	2f 90       	pop	r2
     694:	08 95       	ret

00000696 <_Z28getElectronicsBatteryVoltagev>:

double getElectronicsBatteryVoltage(){
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	c2 e3       	ldi	r28, 0x32	; 50
     6a4:	d0 e0       	ldi	r29, 0x00	; 0

	int avgVal = 50;
	uint32_t sum = 0;
     6a6:	c1 2c       	mov	r12, r1
     6a8:	d1 2c       	mov	r13, r1
     6aa:	76 01       	movw	r14, r12
	
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
     6ac:	0e 94 b9 02 	call	0x572	; 0x572 <_Z20sampleBatteryVoltagev>
     6b0:	09 2e       	mov	r0, r25
     6b2:	00 0c       	add	r0, r0
     6b4:	aa 0b       	sbc	r26, r26
     6b6:	bb 0b       	sbc	r27, r27
     6b8:	c8 0e       	add	r12, r24
     6ba:	d9 1e       	adc	r13, r25
     6bc:	ea 1e       	adc	r14, r26
     6be:	fb 1e       	adc	r15, r27
     6c0:	21 97       	sbiw	r28, 0x01	; 1
double getElectronicsBatteryVoltage(){

	int avgVal = 50;
	uint32_t sum = 0;
	
	for(int i = 0; i < avgVal; ++i){
     6c2:	a1 f7       	brne	.-24     	; 0x6ac <_Z28getElectronicsBatteryVoltagev+0x16>
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
     6c4:	c7 01       	movw	r24, r14
     6c6:	b6 01       	movw	r22, r12
     6c8:	22 e3       	ldi	r18, 0x32	; 50
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__udivmodsi4>

//Secret sauce
double ADCCountToVoltage(uint16_t adcCount){
  
  //Testing and comparing voltages to corresponding count values resulted in this fun function:
  return adcCount * 0.0011982182628062362 + 0.0023407572383072894; //I figure the compiler will trim off what it can't actually use...
     6d4:	b9 01       	movw	r22, r18
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 48 06 	call	0xc90	; 0xc90 <__floatunsisf>
     6de:	29 e8       	ldi	r18, 0x89	; 137
     6e0:	3d e0       	ldi	r19, 0x0D	; 13
     6e2:	4d e9       	ldi	r20, 0x9D	; 157
     6e4:	5a e3       	ldi	r21, 0x3A	; 58
     6e6:	0e 94 d6 06 	call	0xdac	; 0xdac <__mulsf3>
     6ea:	24 e6       	ldi	r18, 0x64	; 100
     6ec:	37 e6       	ldi	r19, 0x67	; 103
     6ee:	49 e1       	ldi	r20, 0x19	; 25
     6f0:	5b e3       	ldi	r21, 0x3B	; 59
     6f2:	0e 94 34 05 	call	0xa68	; 0xa68 <__addsf3>
	for(int i = 0; i < avgVal; ++i){
		sum += sampleBatteryVoltage();
	}
	uint16_t electronicsVoltageCount = sum / avgVal;
	double electronicsVoltage = ADCCountToVoltage(electronicsVoltageCount);
	double calculatedElectronicsVoltage =  (electronicsVoltage / .56) + (10.0 - .05);
     6f6:	29 e2       	ldi	r18, 0x29	; 41
     6f8:	3c e5       	ldi	r19, 0x5C	; 92
     6fa:	4f e0       	ldi	r20, 0x0F	; 15
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	0e 94 a0 05 	call	0xb40	; 0xb40 <__divsf3>
     702:	23 e3       	ldi	r18, 0x33	; 51
     704:	33 e3       	ldi	r19, 0x33	; 51
     706:	4f e1       	ldi	r20, 0x1F	; 31
     708:	51 e4       	ldi	r21, 0x41	; 65
     70a:	0e 94 34 05 	call	0xa68	; 0xa68 <__addsf3>

	return calculatedElectronicsVoltage;
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	08 95       	ret

0000071c <main>:
//Global Variables *gasp*
volatile int toggle = 0;
volatile int temp = 1000;

int main(void)
{
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	28 97       	sbiw	r28, 0x08	; 8
     726:	cd bf       	out	0x3d, r28	; 61
     728:	de bf       	out	0x3e, r29	; 62
	configureIO();
     72a:	0e 94 ac 00 	call	0x158	; 0x158 <_Z11configureIOv>
	configureExternalOscillator();
     72e:	0e 94 75 00 	call	0xea	; 0xea <_Z27configureExternalOscillatorv>
	configureUSART();					//Set up for 57600 Baud
     732:	0e 94 1c 05 	call	0xa38	; 0xa38 <_Z14configureUSARTv>
	configureTimerCounter();
     736:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z21configureTimerCounterv>
	configureADCs();
     73a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_Z13configureADCsv>
	configureRTC();
     73e:	0e 94 2b 02 	call	0x456	; 0x456 <_Z12configureRTCv>
	configureXCL();
     742:	0e 94 75 02 	call	0x4ea	; 0x4ea <_Z12configureXCLv>
	
	LOW_LEVEL_INTERRUPTS_ENABLE();
     746:	e0 ea       	ldi	r30, 0xA0	; 160
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	82 81       	ldd	r24, Z+2	; 0x02
     74c:	81 60       	ori	r24, 0x01	; 1
     74e:	82 83       	std	Z+2, r24	; 0x02
	MED_LEVEL_INTERRUPTS_ENABLE();
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	82 60       	ori	r24, 0x02	; 2
     754:	82 83       	std	Z+2, r24	; 0x02
	HIGH_LEVEL_INTERRUPTS_ENABLE();
     756:	82 81       	ldd	r24, Z+2	; 0x02
     758:	84 60       	ori	r24, 0x04	; 4
     75a:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable global interrupts
     75c:	78 94       	sei
	
	uint8_t receivedUSARTData;
	
	RSSI.measuring = NOT_MEASURING;
     75e:	e5 ec       	ldi	r30, 0xC5	; 197
     760:	f0 e2       	ldi	r31, 0x20	; 32
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	81 83       	std	Z+1, r24	; 0x01
	RSSI.timeDifference = 0;
     766:	12 82       	std	Z+2, r1	; 0x02
     768:	13 82       	std	Z+3, r1	; 0x03
	RSSI.sampleCount = 0;
     76a:	16 82       	std	Z+6, r1	; 0x06
     76c:	17 82       	std	Z+7, r1	; 0x07

	//Init string with basic documentation
	SendStringPC((char *)"#[INIT ROSS PDB]\n\r");
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	90 e2       	ldi	r25, 0x20	; 32
     772:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
	SendStringPC((char *)"#Firmware version ");
     776:	86 e1       	ldi	r24, 0x16	; 22
     778:	90 e2       	ldi	r25, 0x20	; 32
     77a:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
	SendStringPC((char *)FIRMWARE_VERSION_STR);
     77e:	89 e2       	ldi	r24, 0x29	; 41
     780:	90 e2       	ldi	r25, 0x20	; 32
     782:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
	SendStringPC((char *)"\n\r#Msg format: Electronics Batt Volt | Rear Batt Volt | Ebox Temperature | 5v_SYS Curr | 5v_Comp Curr \n\r");
     786:	8c e2       	ldi	r24, 0x2C	; 44
     788:	90 e2       	ldi	r25, 0x20	; 32
     78a:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
		//_delay_us(20000);

		//_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     78e:	0f 2e       	mov	r0, r31
     790:	f0 ec       	ldi	r31, 0xC0	; 192
     792:	4f 2e       	mov	r4, r31
     794:	f8 e0       	ldi	r31, 0x08	; 8
     796:	5f 2e       	mov	r5, r31
     798:	f0 2d       	mov	r31, r0
			receivedUSARTData = USART_GetChar(&COMP_USART);
			if(receivedUSARTData == 'y')
				REAR_RELAY_SET();
			else if(receivedUSARTData == 'n')
				REAR_RELAY_CLR();
     79a:	00 e4       	ldi	r16, 0x40	; 64
     79c:	16 e0       	ldi	r17, 0x06	; 6
     79e:	68 94       	set
     7a0:	dd 24       	eor	r13, r13
     7a2:	d5 f8       	bld	r13, 5
		}		
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
			broadcastStatus = 0;
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     7a4:	e1 2c       	mov	r14, r1
     7a6:	68 94       	set
     7a8:	ff 24       	eor	r15, r15
     7aa:	f3 f8       	bld	r15, 3
			double electronicsBatteryVoltage = getElectronicsBatteryVoltage();
			double zero = 0.0;
			
			temp = temp + 50;
			if (temp >= 2000)
				temp = 1000;
     7ac:	0f 2e       	mov	r0, r31
     7ae:	f8 ee       	ldi	r31, 0xE8	; 232
     7b0:	6f 2e       	mov	r6, r31
     7b2:	f3 e0       	ldi	r31, 0x03	; 3
     7b4:	7f 2e       	mov	r7, r31
     7b6:	f0 2d       	mov	r31, r0
			
			TC_PWM_SET(temp);
     7b8:	0f 2e       	mov	r0, r31
     7ba:	f0 e4       	ldi	r31, 0x40	; 64
     7bc:	2f 2e       	mov	r2, r31
     7be:	f9 e0       	ldi	r31, 0x09	; 9
     7c0:	3f 2e       	mov	r3, r31
     7c2:	f0 2d       	mov	r31, r0
			
			STATUS_TOGGLE();
     7c4:	cc 24       	eor	r12, r12
     7c6:	c3 94       	inc	r12
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
				TCC4.PER = TC_1024_100MS;  //100mS delay
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f9 e0       	ldi	r31, 0x09	; 9
     7cc:	8f 2e       	mov	r8, r31
     7ce:	fd e3       	ldi	r31, 0x3D	; 61
     7d0:	9f 2e       	mov	r9, r31
     7d2:	f0 2d       	mov	r31, r0
			//Newline
			SendStringPC((char *)"\n\r");
	
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
				TCC4.PER = TC_1024_100MS;  //100mS delay
     7d4:	0f 2e       	mov	r0, r31
     7d6:	f5 e3       	ldi	r31, 0x35	; 53
     7d8:	af 2e       	mov	r10, r31
     7da:	fc e0       	ldi	r31, 0x0C	; 12
     7dc:	bf 2e       	mov	r11, r31
     7de:	f0 2d       	mov	r31, r0
		//_delay_us(20000);

		//_delay_ms(1);

		//Check for commands from the computer
		if(USART_IsRXComplete(&COMP_USART)){
     7e0:	f2 01       	movw	r30, r4
     7e2:	81 81       	ldd	r24, Z+1	; 0x01
     7e4:	88 23       	and	r24, r24
     7e6:	54 f4       	brge	.+20     	; 0x7fc <main+0xe0>
			receivedUSARTData = USART_GetChar(&COMP_USART);
     7e8:	80 81       	ld	r24, Z
			if(receivedUSARTData == 'y')
     7ea:	89 37       	cpi	r24, 0x79	; 121
     7ec:	19 f4       	brne	.+6      	; 0x7f4 <main+0xd8>
				REAR_RELAY_SET();
     7ee:	f8 01       	movw	r30, r16
     7f0:	d5 82       	std	Z+5, r13	; 0x05
     7f2:	04 c0       	rjmp	.+8      	; 0x7fc <main+0xe0>
			else if(receivedUSARTData == 'n')
     7f4:	8e 36       	cpi	r24, 0x6E	; 110
     7f6:	11 f4       	brne	.+4      	; 0x7fc <main+0xe0>
				REAR_RELAY_CLR();
     7f8:	f8 01       	movw	r30, r16
     7fa:	d6 82       	std	Z+6, r13	; 0x06
		}		
		
		if(broadcastStatus){  //This variable becomes true every interval that the user wants info reported
     7fc:	80 91 c4 20 	lds	r24, 0x20C4
     800:	88 23       	and	r24, r24
     802:	71 f3       	breq	.-36     	; 0x7e0 <main+0xc4>
			broadcastStatus = 0;
     804:	10 92 c4 20 	sts	0x20C4, r1
			
			TCC4.CNT = 0;	//We want to ensure the counter is 0 so that we can 
     808:	f7 01       	movw	r30, r14
     80a:	10 a2       	std	Z+32, r1	; 0x20
     80c:	11 a2       	std	Z+33, r1	; 0x21
							//have a consistent report time. (We don't want to throw
							//out the accuracy of the TC)
			
			//Calculated desired output values
			double EBoxTemp = getEBoxTemperature();
     80e:	0e 94 ca 02 	call	0x594	; 0x594 <_Z18getEBoxTemperaturev>
     812:	69 83       	std	Y+1, r22	; 0x01
     814:	7a 83       	std	Y+2, r23	; 0x02
     816:	8b 83       	std	Y+3, r24	; 0x03
     818:	9c 83       	std	Y+4, r25	; 0x04
			double electronicsBatteryVoltage = getElectronicsBatteryVoltage();
     81a:	0e 94 4b 03 	call	0x696	; 0x696 <_Z28getElectronicsBatteryVoltagev>
     81e:	6d 83       	std	Y+5, r22	; 0x05
     820:	7e 83       	std	Y+6, r23	; 0x06
     822:	8f 83       	std	Y+7, r24	; 0x07
     824:	98 87       	std	Y+8, r25	; 0x08
			double zero = 0.0;
			
			temp = temp + 50;
     826:	80 91 01 20 	lds	r24, 0x2001
     82a:	90 91 02 20 	lds	r25, 0x2002
     82e:	c2 96       	adiw	r24, 0x32	; 50
     830:	80 93 01 20 	sts	0x2001, r24
     834:	90 93 02 20 	sts	0x2002, r25
			if (temp >= 2000)
     838:	80 91 01 20 	lds	r24, 0x2001
     83c:	90 91 02 20 	lds	r25, 0x2002
     840:	80 3d       	cpi	r24, 0xD0	; 208
     842:	97 40       	sbci	r25, 0x07	; 7
     844:	24 f0       	brlt	.+8      	; 0x84e <main+0x132>
				temp = 1000;
     846:	60 92 01 20 	sts	0x2001, r6
     84a:	70 92 02 20 	sts	0x2002, r7
			
			TC_PWM_SET(temp);
     84e:	60 91 01 20 	lds	r22, 0x2001
     852:	70 91 02 20 	lds	r23, 0x2002
     856:	07 2e       	mov	r0, r23
     858:	00 0c       	add	r0, r0
     85a:	88 0b       	sbc	r24, r24
     85c:	99 0b       	sbc	r25, r25
     85e:	0e 94 4a 06 	call	0xc94	; 0xc94 <__floatsisf>
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	5f e3       	ldi	r21, 0x3F	; 63
     86a:	0e 94 d6 06 	call	0xdac	; 0xdac <__mulsf3>
     86e:	0e 94 19 06 	call	0xc32	; 0xc32 <__fixunssfsi>
     872:	f1 01       	movw	r30, r2
     874:	60 a7       	std	Z+40, r22	; 0x28
     876:	71 a7       	std	Z+41, r23	; 0x29
			
			STATUS_TOGGLE();
     878:	f8 01       	movw	r30, r16
     87a:	84 81       	ldd	r24, Z+4	; 0x04
     87c:	80 fd       	sbrc	r24, 0
     87e:	02 c0       	rjmp	.+4      	; 0x884 <main+0x168>
     880:	c5 82       	std	Z+5, r12	; 0x05
     882:	02 c0       	rjmp	.+4      	; 0x888 <main+0x16c>
     884:	f8 01       	movw	r30, r16
     886:	c6 82       	std	Z+6, r12	; 0x06
			
			//Actually output the desired values
			//Not the most elegant code in the world, but it works...
			
			//Send the battery voltage
			SendFloatPC(electronicsBatteryVoltage);
     888:	6d 81       	ldd	r22, Y+5	; 0x05
     88a:	7e 81       	ldd	r23, Y+6	; 0x06
     88c:	8f 81       	ldd	r24, Y+7	; 0x07
     88e:	98 85       	ldd	r25, Y+8	; 0x08
     890:	0e 94 c2 04 	call	0x984	; 0x984 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     894:	85 e9       	ldi	r24, 0x95	; 149
     896:	90 e2       	ldi	r25, 0x20	; 32
     898:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
			//Send the rear battery voltage
			SendFloatPC(zero);
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	cb 01       	movw	r24, r22
     8a2:	0e 94 c2 04 	call	0x984	; 0x984 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     8a6:	85 e9       	ldi	r24, 0x95	; 149
     8a8:	90 e2       	ldi	r25, 0x20	; 32
     8aa:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
			//Send the EBox Temperature
			SendFloatPC(EBoxTemp);
     8ae:	69 81       	ldd	r22, Y+1	; 0x01
     8b0:	7a 81       	ldd	r23, Y+2	; 0x02
     8b2:	8b 81       	ldd	r24, Y+3	; 0x03
     8b4:	9c 81       	ldd	r25, Y+4	; 0x04
     8b6:	0e 94 c2 04 	call	0x984	; 0x984 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     8ba:	85 e9       	ldi	r24, 0x95	; 149
     8bc:	90 e2       	ldi	r25, 0x20	; 32
     8be:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
			//Send 5v_SYS Curr
			SendFloatPC(zero);
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	cb 01       	movw	r24, r22
     8c8:	0e 94 c2 04 	call	0x984	; 0x984 <_Z11SendFloatPCd>
			SendStringPC((char *)"|");
     8cc:	85 e9       	ldi	r24, 0x95	; 149
     8ce:	90 e2       	ldi	r25, 0x20	; 32
     8d0:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
			//Send 5v_Comp Curr
			SendFloatPC(zero);
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	cb 01       	movw	r24, r22
     8da:	0e 94 c2 04 	call	0x984	; 0x984 <_Z11SendFloatPCd>
			//SendStringPC((char *)"|");
			
			
			SendStringPC((char *)"[PWM Interpret: ");
     8de:	87 e9       	ldi	r24, 0x97	; 151
     8e0:	90 e2       	ldi	r25, 0x20	; 32
     8e2:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
			SendNumPC(longTemp);
     8e6:	30 91 b4 20 	lds	r19, 0x20B4
     8ea:	20 91 b5 20 	lds	r18, 0x20B5
     8ee:	80 91 b6 20 	lds	r24, 0x20B6
     8f2:	80 91 b7 20 	lds	r24, 0x20B7
     8f6:	80 91 b8 20 	lds	r24, 0x20B8
     8fa:	80 91 b9 20 	lds	r24, 0x20B9
     8fe:	80 91 ba 20 	lds	r24, 0x20BA
     902:	80 91 bb 20 	lds	r24, 0x20BB
     906:	83 2f       	mov	r24, r19
     908:	92 2f       	mov	r25, r18
     90a:	0e 94 ab 04 	call	0x956	; 0x956 <_Z9SendNumPCj>
			SendStringPC((char *)"] ");
     90e:	88 ea       	ldi	r24, 0xA8	; 168
     910:	90 e2       	ldi	r25, 0x20	; 32
     912:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
			SendNumPC(RSSI.countDifference);
			
			*/
			
			//Newline
			SendStringPC((char *)"\n\r");
     916:	82 e9       	ldi	r24, 0x92	; 146
     918:	90 e2       	ldi	r25, 0x20	; 32
     91a:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
	
			//Check the updating speed setting
			if(CHECK_DIP_SW_1()){
     91e:	f8 01       	movw	r30, r16
     920:	80 85       	ldd	r24, Z+8	; 0x08
     922:	83 fd       	sbrc	r24, 3
     924:	04 c0       	rjmp	.+8      	; 0x92e <main+0x212>
				TCC4.PER = TC_1024_100MS;  //100mS delay
     926:	f7 01       	movw	r30, r14
     928:	a6 a2       	std	Z+38, r10	; 0x26
     92a:	b7 a2       	std	Z+39, r11	; 0x27
     92c:	59 cf       	rjmp	.-334    	; 0x7e0 <main+0xc4>
			}
			else{
				TCC4.PER = TC_1024_500MS;  //500mS delay
     92e:	f7 01       	movw	r30, r14
     930:	86 a2       	std	Z+38, r8	; 0x26
     932:	97 a2       	std	Z+39, r9	; 0x27
     934:	55 cf       	rjmp	.-342    	; 0x7e0 <main+0xc4>

00000936 <_Z12SendStringPCPc>:
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     936:	fc 01       	movw	r30, r24
     938:	20 81       	ld	r18, Z
     93a:	22 23       	and	r18, r18
     93c:	59 f0       	breq	.+22     	; 0x954 <_Z12SendStringPCPc+0x1e>
     93e:	dc 01       	movw	r26, r24
     940:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
     942:	e0 ec       	ldi	r30, 0xC0	; 192
     944:	f8 e0       	ldi	r31, 0x08	; 8
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	95 ff       	sbrs	r25, 5
     94a:	fd cf       	rjmp	.-6      	; 0x946 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&COMP_USART, stufftosend[i]);
     94c:	20 83       	st	Z, r18
#include "usart_helper.h"
#include <stdio.h>

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     94e:	2d 91       	ld	r18, X+
     950:	21 11       	cpse	r18, r1
     952:	f9 cf       	rjmp	.-14     	; 0x946 <_Z12SendStringPCPc+0x10>
     954:	08 95       	ret

00000956 <_Z9SendNumPCj>:
		while(!USART_IsTXDataRegisterEmpty(&COMP_USART));
		USART_PutChar(&COMP_USART, stufftosend[i]);
	}
}

void SendNumPC(uint16_t numToSend){
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	64 97       	sbiw	r28, 0x14	; 20
     960:	cd bf       	out	0x3d, r28	; 61
     962:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     964:	4a e0       	ldi	r20, 0x0A	; 10
     966:	be 01       	movw	r22, r28
     968:	6f 5f       	subi	r22, 0xFF	; 255
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
     96c:	0e 94 25 08 	call	0x104a	; 0x104a <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
}
     978:	64 96       	adiw	r28, 0x14	; 20
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <_Z11SendFloatPCd>:

void SendFloatPC(double numToSend){
     984:	8f 92       	push	r8
     986:	9f 92       	push	r9
     988:	af 92       	push	r10
     98a:	bf 92       	push	r11
     98c:	cf 92       	push	r12
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	c4 56       	subi	r28, 0x64	; 100
     9a2:	d1 09       	sbc	r29, r1
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	4b 01       	movw	r8, r22
     9aa:	5c 01       	movw	r10, r24
	char buffer[100];
	
	int d1 = numToSend;
     9ac:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixsfsi>
     9b0:	6b 01       	movw	r12, r22
     9b2:	7c 01       	movw	r14, r24
	float f2 = numToSend - d1;
     9b4:	07 2e       	mov	r0, r23
     9b6:	00 0c       	add	r0, r0
     9b8:	88 0b       	sbc	r24, r24
     9ba:	99 0b       	sbc	r25, r25
     9bc:	0e 94 4a 06 	call	0xc94	; 0xc94 <__floatsisf>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	c5 01       	movw	r24, r10
     9c6:	b4 01       	movw	r22, r8
     9c8:	0e 94 33 05 	call	0xa66	; 0xa66 <__subsf3>
	int d2 = trunc(f2 * 10000);
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e4       	ldi	r19, 0x40	; 64
     9d0:	4c e1       	ldi	r20, 0x1C	; 28
     9d2:	56 e4       	ldi	r21, 0x46	; 70
     9d4:	0e 94 d6 06 	call	0xdac	; 0xdac <__mulsf3>
     9d8:	0e 94 43 07 	call	0xe86	; 0xe86 <trunc>
     9dc:	0e 94 12 06 	call	0xc24	; 0xc24 <__fixsfsi>
	
	sprintf(buffer, "%d.%04d", d1, abs(d2));
     9e0:	9b 01       	movw	r18, r22
     9e2:	77 23       	and	r23, r23
     9e4:	24 f4       	brge	.+8      	; 0x9ee <_Z11SendFloatPCd+0x6a>
     9e6:	22 27       	eor	r18, r18
     9e8:	33 27       	eor	r19, r19
     9ea:	26 1b       	sub	r18, r22
     9ec:	37 0b       	sbc	r19, r23
     9ee:	3f 93       	push	r19
     9f0:	2f 93       	push	r18
     9f2:	df 92       	push	r13
     9f4:	cf 92       	push	r12
     9f6:	8b ea       	ldi	r24, 0xAB	; 171
     9f8:	90 e2       	ldi	r25, 0x20	; 32
     9fa:	9f 93       	push	r25
     9fc:	8f 93       	push	r24
     9fe:	8e 01       	movw	r16, r28
     a00:	0f 5f       	subi	r16, 0xFF	; 255
     a02:	1f 4f       	sbci	r17, 0xFF	; 255
     a04:	1f 93       	push	r17
     a06:	0f 93       	push	r16
     a08:	0e 94 4a 08 	call	0x1094	; 0x1094 <sprintf>
	
	//sprintf(buffer, "%f", numToSend);
	SendStringPC(buffer);
     a0c:	c8 01       	movw	r24, r16
     a0e:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12SendStringPCPc>
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	de bf       	out	0x3e, r29	; 62
}
     a16:	cc 59       	subi	r28, 0x9C	; 156
     a18:	df 4f       	sbci	r29, 0xFF	; 255
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	df 90       	pop	r13
     a2c:	cf 90       	pop	r12
     a2e:	bf 90       	pop	r11
     a30:	af 90       	pop	r10
     a32:	9f 90       	pop	r9
     a34:	8f 90       	pop	r8
     a36:	08 95       	ret

00000a38 <_Z14configureUSARTv>:

void configureUSART(void){
	//Set TX (pin7) to be output
	PORTC.DIRSET = PIN7_bm;
     a38:	e0 e4       	ldi	r30, 0x40	; 64
     a3a:	f6 e0       	ldi	r31, 0x06	; 6
     a3c:	80 e8       	ldi	r24, 0x80	; 128
     a3e:	81 83       	std	Z+1, r24	; 0x01
	//Set RX (pin6) to be input
	PORTC.DIRCLR = PIN6_bm;
     a40:	80 e4       	ldi	r24, 0x40	; 64
     a42:	82 83       	std	Z+2, r24	; 0x02
	
	//Enable alternate pin location for USART0 in PORTC
	PORTC.REMAP |= (1 << 4);
     a44:	86 85       	ldd	r24, Z+14	; 0x0e
     a46:	80 61       	ori	r24, 0x10	; 16
     a48:	86 87       	std	Z+14, r24	; 0x0e
	
	USART_Format_Set(&COMP_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     a4a:	e0 ec       	ldi	r30, 0xC0	; 192
     a4c:	f8 e0       	ldi	r31, 0x08	; 8
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	84 83       	std	Z+4, r24	; 0x04
	
	//Enable a 57600 baudrate
	USART_Baudrate_Set(&COMP_USART, 34, 0);
     a52:	82 e2       	ldi	r24, 0x22	; 34
     a54:	86 83       	std	Z+6, r24	; 0x06
     a56:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable both RX and TX.
	USART_Rx_Enable(&COMP_USART);
     a58:	83 81       	ldd	r24, Z+3	; 0x03
     a5a:	80 61       	ori	r24, 0x10	; 16
     a5c:	83 83       	std	Z+3, r24	; 0x03
	USART_Tx_Enable(&COMP_USART);
     a5e:	83 81       	ldd	r24, Z+3	; 0x03
     a60:	88 60       	ori	r24, 0x08	; 8
     a62:	83 83       	std	Z+3, r24	; 0x03
     a64:	08 95       	ret

00000a66 <__subsf3>:
     a66:	50 58       	subi	r21, 0x80	; 128

00000a68 <__addsf3>:
     a68:	bb 27       	eor	r27, r27
     a6a:	aa 27       	eor	r26, r26
     a6c:	0e 94 4b 05 	call	0xa96	; 0xa96 <__addsf3x>
     a70:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_round>
     a74:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fp_pscA>
     a78:	38 f0       	brcs	.+14     	; 0xa88 <__addsf3+0x20>
     a7a:	0e 94 95 06 	call	0xd2a	; 0xd2a <__fp_pscB>
     a7e:	20 f0       	brcs	.+8      	; 0xa88 <__addsf3+0x20>
     a80:	39 f4       	brne	.+14     	; 0xa90 <__addsf3+0x28>
     a82:	9f 3f       	cpi	r25, 0xFF	; 255
     a84:	19 f4       	brne	.+6      	; 0xa8c <__addsf3+0x24>
     a86:	26 f4       	brtc	.+8      	; 0xa90 <__addsf3+0x28>
     a88:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_nan>
     a8c:	0e f4       	brtc	.+2      	; 0xa90 <__addsf3+0x28>
     a8e:	e0 95       	com	r30
     a90:	e7 fb       	bst	r30, 7
     a92:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__fp_inf>

00000a96 <__addsf3x>:
     a96:	e9 2f       	mov	r30, r25
     a98:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__fp_split3>
     a9c:	58 f3       	brcs	.-42     	; 0xa74 <__addsf3+0xc>
     a9e:	ba 17       	cp	r27, r26
     aa0:	62 07       	cpc	r22, r18
     aa2:	73 07       	cpc	r23, r19
     aa4:	84 07       	cpc	r24, r20
     aa6:	95 07       	cpc	r25, r21
     aa8:	20 f0       	brcs	.+8      	; 0xab2 <__addsf3x+0x1c>
     aaa:	79 f4       	brne	.+30     	; 0xaca <__addsf3x+0x34>
     aac:	a6 f5       	brtc	.+104    	; 0xb16 <__addsf3x+0x80>
     aae:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_zero>
     ab2:	0e f4       	brtc	.+2      	; 0xab6 <__addsf3x+0x20>
     ab4:	e0 95       	com	r30
     ab6:	0b 2e       	mov	r0, r27
     ab8:	ba 2f       	mov	r27, r26
     aba:	a0 2d       	mov	r26, r0
     abc:	0b 01       	movw	r0, r22
     abe:	b9 01       	movw	r22, r18
     ac0:	90 01       	movw	r18, r0
     ac2:	0c 01       	movw	r0, r24
     ac4:	ca 01       	movw	r24, r20
     ac6:	a0 01       	movw	r20, r0
     ac8:	11 24       	eor	r1, r1
     aca:	ff 27       	eor	r31, r31
     acc:	59 1b       	sub	r21, r25
     ace:	99 f0       	breq	.+38     	; 0xaf6 <__addsf3x+0x60>
     ad0:	59 3f       	cpi	r21, 0xF9	; 249
     ad2:	50 f4       	brcc	.+20     	; 0xae8 <__addsf3x+0x52>
     ad4:	50 3e       	cpi	r21, 0xE0	; 224
     ad6:	68 f1       	brcs	.+90     	; 0xb32 <__addsf3x+0x9c>
     ad8:	1a 16       	cp	r1, r26
     ada:	f0 40       	sbci	r31, 0x00	; 0
     adc:	a2 2f       	mov	r26, r18
     ade:	23 2f       	mov	r18, r19
     ae0:	34 2f       	mov	r19, r20
     ae2:	44 27       	eor	r20, r20
     ae4:	58 5f       	subi	r21, 0xF8	; 248
     ae6:	f3 cf       	rjmp	.-26     	; 0xace <__addsf3x+0x38>
     ae8:	46 95       	lsr	r20
     aea:	37 95       	ror	r19
     aec:	27 95       	ror	r18
     aee:	a7 95       	ror	r26
     af0:	f0 40       	sbci	r31, 0x00	; 0
     af2:	53 95       	inc	r21
     af4:	c9 f7       	brne	.-14     	; 0xae8 <__addsf3x+0x52>
     af6:	7e f4       	brtc	.+30     	; 0xb16 <__addsf3x+0x80>
     af8:	1f 16       	cp	r1, r31
     afa:	ba 0b       	sbc	r27, r26
     afc:	62 0b       	sbc	r22, r18
     afe:	73 0b       	sbc	r23, r19
     b00:	84 0b       	sbc	r24, r20
     b02:	ba f0       	brmi	.+46     	; 0xb32 <__addsf3x+0x9c>
     b04:	91 50       	subi	r25, 0x01	; 1
     b06:	a1 f0       	breq	.+40     	; 0xb30 <__addsf3x+0x9a>
     b08:	ff 0f       	add	r31, r31
     b0a:	bb 1f       	adc	r27, r27
     b0c:	66 1f       	adc	r22, r22
     b0e:	77 1f       	adc	r23, r23
     b10:	88 1f       	adc	r24, r24
     b12:	c2 f7       	brpl	.-16     	; 0xb04 <__addsf3x+0x6e>
     b14:	0e c0       	rjmp	.+28     	; 0xb32 <__addsf3x+0x9c>
     b16:	ba 0f       	add	r27, r26
     b18:	62 1f       	adc	r22, r18
     b1a:	73 1f       	adc	r23, r19
     b1c:	84 1f       	adc	r24, r20
     b1e:	48 f4       	brcc	.+18     	; 0xb32 <__addsf3x+0x9c>
     b20:	87 95       	ror	r24
     b22:	77 95       	ror	r23
     b24:	67 95       	ror	r22
     b26:	b7 95       	ror	r27
     b28:	f7 95       	ror	r31
     b2a:	9e 3f       	cpi	r25, 0xFE	; 254
     b2c:	08 f0       	brcs	.+2      	; 0xb30 <__addsf3x+0x9a>
     b2e:	b0 cf       	rjmp	.-160    	; 0xa90 <__addsf3+0x28>
     b30:	93 95       	inc	r25
     b32:	88 0f       	add	r24, r24
     b34:	08 f0       	brcs	.+2      	; 0xb38 <__addsf3x+0xa2>
     b36:	99 27       	eor	r25, r25
     b38:	ee 0f       	add	r30, r30
     b3a:	97 95       	ror	r25
     b3c:	87 95       	ror	r24
     b3e:	08 95       	ret

00000b40 <__divsf3>:
     b40:	0e 94 b4 05 	call	0xb68	; 0xb68 <__divsf3x>
     b44:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_round>
     b48:	0e 94 95 06 	call	0xd2a	; 0xd2a <__fp_pscB>
     b4c:	58 f0       	brcs	.+22     	; 0xb64 <__divsf3+0x24>
     b4e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fp_pscA>
     b52:	40 f0       	brcs	.+16     	; 0xb64 <__divsf3+0x24>
     b54:	29 f4       	brne	.+10     	; 0xb60 <__divsf3+0x20>
     b56:	5f 3f       	cpi	r21, 0xFF	; 255
     b58:	29 f0       	breq	.+10     	; 0xb64 <__divsf3+0x24>
     b5a:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__fp_inf>
     b5e:	51 11       	cpse	r21, r1
     b60:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_szero>
     b64:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_nan>

00000b68 <__divsf3x>:
     b68:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__fp_split3>
     b6c:	68 f3       	brcs	.-38     	; 0xb48 <__divsf3+0x8>

00000b6e <__divsf3_pse>:
     b6e:	99 23       	and	r25, r25
     b70:	b1 f3       	breq	.-20     	; 0xb5e <__divsf3+0x1e>
     b72:	55 23       	and	r21, r21
     b74:	91 f3       	breq	.-28     	; 0xb5a <__divsf3+0x1a>
     b76:	95 1b       	sub	r25, r21
     b78:	55 0b       	sbc	r21, r21
     b7a:	bb 27       	eor	r27, r27
     b7c:	aa 27       	eor	r26, r26
     b7e:	62 17       	cp	r22, r18
     b80:	73 07       	cpc	r23, r19
     b82:	84 07       	cpc	r24, r20
     b84:	38 f0       	brcs	.+14     	; 0xb94 <__divsf3_pse+0x26>
     b86:	9f 5f       	subi	r25, 0xFF	; 255
     b88:	5f 4f       	sbci	r21, 0xFF	; 255
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	aa 1f       	adc	r26, r26
     b92:	a9 f3       	breq	.-22     	; 0xb7e <__divsf3_pse+0x10>
     b94:	35 d0       	rcall	.+106    	; 0xc00 <__divsf3_pse+0x92>
     b96:	0e 2e       	mov	r0, r30
     b98:	3a f0       	brmi	.+14     	; 0xba8 <__divsf3_pse+0x3a>
     b9a:	e0 e8       	ldi	r30, 0x80	; 128
     b9c:	32 d0       	rcall	.+100    	; 0xc02 <__divsf3_pse+0x94>
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	50 40       	sbci	r21, 0x00	; 0
     ba2:	e6 95       	lsr	r30
     ba4:	00 1c       	adc	r0, r0
     ba6:	ca f7       	brpl	.-14     	; 0xb9a <__divsf3_pse+0x2c>
     ba8:	2b d0       	rcall	.+86     	; 0xc00 <__divsf3_pse+0x92>
     baa:	fe 2f       	mov	r31, r30
     bac:	29 d0       	rcall	.+82     	; 0xc00 <__divsf3_pse+0x92>
     bae:	66 0f       	add	r22, r22
     bb0:	77 1f       	adc	r23, r23
     bb2:	88 1f       	adc	r24, r24
     bb4:	bb 1f       	adc	r27, r27
     bb6:	26 17       	cp	r18, r22
     bb8:	37 07       	cpc	r19, r23
     bba:	48 07       	cpc	r20, r24
     bbc:	ab 07       	cpc	r26, r27
     bbe:	b0 e8       	ldi	r27, 0x80	; 128
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <__divsf3_pse+0x56>
     bc2:	bb 0b       	sbc	r27, r27
     bc4:	80 2d       	mov	r24, r0
     bc6:	bf 01       	movw	r22, r30
     bc8:	ff 27       	eor	r31, r31
     bca:	93 58       	subi	r25, 0x83	; 131
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	3a f0       	brmi	.+14     	; 0xbde <__divsf3_pse+0x70>
     bd0:	9e 3f       	cpi	r25, 0xFE	; 254
     bd2:	51 05       	cpc	r21, r1
     bd4:	78 f0       	brcs	.+30     	; 0xbf4 <__divsf3_pse+0x86>
     bd6:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__fp_inf>
     bda:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_szero>
     bde:	5f 3f       	cpi	r21, 0xFF	; 255
     be0:	e4 f3       	brlt	.-8      	; 0xbda <__divsf3_pse+0x6c>
     be2:	98 3e       	cpi	r25, 0xE8	; 232
     be4:	d4 f3       	brlt	.-12     	; 0xbda <__divsf3_pse+0x6c>
     be6:	86 95       	lsr	r24
     be8:	77 95       	ror	r23
     bea:	67 95       	ror	r22
     bec:	b7 95       	ror	r27
     bee:	f7 95       	ror	r31
     bf0:	9f 5f       	subi	r25, 0xFF	; 255
     bf2:	c9 f7       	brne	.-14     	; 0xbe6 <__divsf3_pse+0x78>
     bf4:	88 0f       	add	r24, r24
     bf6:	91 1d       	adc	r25, r1
     bf8:	96 95       	lsr	r25
     bfa:	87 95       	ror	r24
     bfc:	97 f9       	bld	r25, 7
     bfe:	08 95       	ret
     c00:	e1 e0       	ldi	r30, 0x01	; 1
     c02:	66 0f       	add	r22, r22
     c04:	77 1f       	adc	r23, r23
     c06:	88 1f       	adc	r24, r24
     c08:	bb 1f       	adc	r27, r27
     c0a:	62 17       	cp	r22, r18
     c0c:	73 07       	cpc	r23, r19
     c0e:	84 07       	cpc	r24, r20
     c10:	ba 07       	cpc	r27, r26
     c12:	20 f0       	brcs	.+8      	; 0xc1c <__divsf3_pse+0xae>
     c14:	62 1b       	sub	r22, r18
     c16:	73 0b       	sbc	r23, r19
     c18:	84 0b       	sbc	r24, r20
     c1a:	ba 0b       	sbc	r27, r26
     c1c:	ee 1f       	adc	r30, r30
     c1e:	88 f7       	brcc	.-30     	; 0xc02 <__divsf3_pse+0x94>
     c20:	e0 95       	com	r30
     c22:	08 95       	ret

00000c24 <__fixsfsi>:
     c24:	0e 94 19 06 	call	0xc32	; 0xc32 <__fixunssfsi>
     c28:	68 94       	set
     c2a:	b1 11       	cpse	r27, r1
     c2c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_szero>
     c30:	08 95       	ret

00000c32 <__fixunssfsi>:
     c32:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__fp_splitA>
     c36:	88 f0       	brcs	.+34     	; 0xc5a <__fixunssfsi+0x28>
     c38:	9f 57       	subi	r25, 0x7F	; 127
     c3a:	98 f0       	brcs	.+38     	; 0xc62 <__fixunssfsi+0x30>
     c3c:	b9 2f       	mov	r27, r25
     c3e:	99 27       	eor	r25, r25
     c40:	b7 51       	subi	r27, 0x17	; 23
     c42:	b0 f0       	brcs	.+44     	; 0xc70 <__fixunssfsi+0x3e>
     c44:	e1 f0       	breq	.+56     	; 0xc7e <__fixunssfsi+0x4c>
     c46:	66 0f       	add	r22, r22
     c48:	77 1f       	adc	r23, r23
     c4a:	88 1f       	adc	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	1a f0       	brmi	.+6      	; 0xc56 <__fixunssfsi+0x24>
     c50:	ba 95       	dec	r27
     c52:	c9 f7       	brne	.-14     	; 0xc46 <__fixunssfsi+0x14>
     c54:	14 c0       	rjmp	.+40     	; 0xc7e <__fixunssfsi+0x4c>
     c56:	b1 30       	cpi	r27, 0x01	; 1
     c58:	91 f0       	breq	.+36     	; 0xc7e <__fixunssfsi+0x4c>
     c5a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_zero>
     c5e:	b1 e0       	ldi	r27, 0x01	; 1
     c60:	08 95       	ret
     c62:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_zero>
     c66:	67 2f       	mov	r22, r23
     c68:	78 2f       	mov	r23, r24
     c6a:	88 27       	eor	r24, r24
     c6c:	b8 5f       	subi	r27, 0xF8	; 248
     c6e:	39 f0       	breq	.+14     	; 0xc7e <__fixunssfsi+0x4c>
     c70:	b9 3f       	cpi	r27, 0xF9	; 249
     c72:	cc f3       	brlt	.-14     	; 0xc66 <__fixunssfsi+0x34>
     c74:	86 95       	lsr	r24
     c76:	77 95       	ror	r23
     c78:	67 95       	ror	r22
     c7a:	b3 95       	inc	r27
     c7c:	d9 f7       	brne	.-10     	; 0xc74 <__fixunssfsi+0x42>
     c7e:	3e f4       	brtc	.+14     	; 0xc8e <__fixunssfsi+0x5c>
     c80:	90 95       	com	r25
     c82:	80 95       	com	r24
     c84:	70 95       	com	r23
     c86:	61 95       	neg	r22
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	8f 4f       	sbci	r24, 0xFF	; 255
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	08 95       	ret

00000c90 <__floatunsisf>:
     c90:	e8 94       	clt
     c92:	09 c0       	rjmp	.+18     	; 0xca6 <__floatsisf+0x12>

00000c94 <__floatsisf>:
     c94:	97 fb       	bst	r25, 7
     c96:	3e f4       	brtc	.+14     	; 0xca6 <__floatsisf+0x12>
     c98:	90 95       	com	r25
     c9a:	80 95       	com	r24
     c9c:	70 95       	com	r23
     c9e:	61 95       	neg	r22
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	8f 4f       	sbci	r24, 0xFF	; 255
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	99 23       	and	r25, r25
     ca8:	a9 f0       	breq	.+42     	; 0xcd4 <__floatsisf+0x40>
     caa:	f9 2f       	mov	r31, r25
     cac:	96 e9       	ldi	r25, 0x96	; 150
     cae:	bb 27       	eor	r27, r27
     cb0:	93 95       	inc	r25
     cb2:	f6 95       	lsr	r31
     cb4:	87 95       	ror	r24
     cb6:	77 95       	ror	r23
     cb8:	67 95       	ror	r22
     cba:	b7 95       	ror	r27
     cbc:	f1 11       	cpse	r31, r1
     cbe:	f8 cf       	rjmp	.-16     	; 0xcb0 <__floatsisf+0x1c>
     cc0:	fa f4       	brpl	.+62     	; 0xd00 <__floatsisf+0x6c>
     cc2:	bb 0f       	add	r27, r27
     cc4:	11 f4       	brne	.+4      	; 0xcca <__floatsisf+0x36>
     cc6:	60 ff       	sbrs	r22, 0
     cc8:	1b c0       	rjmp	.+54     	; 0xd00 <__floatsisf+0x6c>
     cca:	6f 5f       	subi	r22, 0xFF	; 255
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	8f 4f       	sbci	r24, 0xFF	; 255
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	16 c0       	rjmp	.+44     	; 0xd00 <__floatsisf+0x6c>
     cd4:	88 23       	and	r24, r24
     cd6:	11 f0       	breq	.+4      	; 0xcdc <__floatsisf+0x48>
     cd8:	96 e9       	ldi	r25, 0x96	; 150
     cda:	11 c0       	rjmp	.+34     	; 0xcfe <__floatsisf+0x6a>
     cdc:	77 23       	and	r23, r23
     cde:	21 f0       	breq	.+8      	; 0xce8 <__floatsisf+0x54>
     ce0:	9e e8       	ldi	r25, 0x8E	; 142
     ce2:	87 2f       	mov	r24, r23
     ce4:	76 2f       	mov	r23, r22
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <__floatsisf+0x5e>
     ce8:	66 23       	and	r22, r22
     cea:	71 f0       	breq	.+28     	; 0xd08 <__floatsisf+0x74>
     cec:	96 e8       	ldi	r25, 0x86	; 134
     cee:	86 2f       	mov	r24, r22
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	2a f0       	brmi	.+10     	; 0xd00 <__floatsisf+0x6c>
     cf6:	9a 95       	dec	r25
     cf8:	66 0f       	add	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	88 1f       	adc	r24, r24
     cfe:	da f7       	brpl	.-10     	; 0xcf6 <__floatsisf+0x62>
     d00:	88 0f       	add	r24, r24
     d02:	96 95       	lsr	r25
     d04:	87 95       	ror	r24
     d06:	97 f9       	bld	r25, 7
     d08:	08 95       	ret

00000d0a <__fp_inf>:
     d0a:	97 f9       	bld	r25, 7
     d0c:	9f 67       	ori	r25, 0x7F	; 127
     d0e:	80 e8       	ldi	r24, 0x80	; 128
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	08 95       	ret

00000d16 <__fp_nan>:
     d16:	9f ef       	ldi	r25, 0xFF	; 255
     d18:	80 ec       	ldi	r24, 0xC0	; 192
     d1a:	08 95       	ret

00000d1c <__fp_pscA>:
     d1c:	00 24       	eor	r0, r0
     d1e:	0a 94       	dec	r0
     d20:	16 16       	cp	r1, r22
     d22:	17 06       	cpc	r1, r23
     d24:	18 06       	cpc	r1, r24
     d26:	09 06       	cpc	r0, r25
     d28:	08 95       	ret

00000d2a <__fp_pscB>:
     d2a:	00 24       	eor	r0, r0
     d2c:	0a 94       	dec	r0
     d2e:	12 16       	cp	r1, r18
     d30:	13 06       	cpc	r1, r19
     d32:	14 06       	cpc	r1, r20
     d34:	05 06       	cpc	r0, r21
     d36:	08 95       	ret

00000d38 <__fp_round>:
     d38:	09 2e       	mov	r0, r25
     d3a:	03 94       	inc	r0
     d3c:	00 0c       	add	r0, r0
     d3e:	11 f4       	brne	.+4      	; 0xd44 <__fp_round+0xc>
     d40:	88 23       	and	r24, r24
     d42:	52 f0       	brmi	.+20     	; 0xd58 <__fp_round+0x20>
     d44:	bb 0f       	add	r27, r27
     d46:	40 f4       	brcc	.+16     	; 0xd58 <__fp_round+0x20>
     d48:	bf 2b       	or	r27, r31
     d4a:	11 f4       	brne	.+4      	; 0xd50 <__fp_round+0x18>
     d4c:	60 ff       	sbrs	r22, 0
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <__fp_round+0x20>
     d50:	6f 5f       	subi	r22, 0xFF	; 255
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8f 4f       	sbci	r24, 0xFF	; 255
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	08 95       	ret

00000d5a <__fp_split3>:
     d5a:	57 fd       	sbrc	r21, 7
     d5c:	90 58       	subi	r25, 0x80	; 128
     d5e:	44 0f       	add	r20, r20
     d60:	55 1f       	adc	r21, r21
     d62:	59 f0       	breq	.+22     	; 0xd7a <__fp_splitA+0x10>
     d64:	5f 3f       	cpi	r21, 0xFF	; 255
     d66:	71 f0       	breq	.+28     	; 0xd84 <__fp_splitA+0x1a>
     d68:	47 95       	ror	r20

00000d6a <__fp_splitA>:
     d6a:	88 0f       	add	r24, r24
     d6c:	97 fb       	bst	r25, 7
     d6e:	99 1f       	adc	r25, r25
     d70:	61 f0       	breq	.+24     	; 0xd8a <__fp_splitA+0x20>
     d72:	9f 3f       	cpi	r25, 0xFF	; 255
     d74:	79 f0       	breq	.+30     	; 0xd94 <__fp_splitA+0x2a>
     d76:	87 95       	ror	r24
     d78:	08 95       	ret
     d7a:	12 16       	cp	r1, r18
     d7c:	13 06       	cpc	r1, r19
     d7e:	14 06       	cpc	r1, r20
     d80:	55 1f       	adc	r21, r21
     d82:	f2 cf       	rjmp	.-28     	; 0xd68 <__fp_split3+0xe>
     d84:	46 95       	lsr	r20
     d86:	f1 df       	rcall	.-30     	; 0xd6a <__fp_splitA>
     d88:	08 c0       	rjmp	.+16     	; 0xd9a <__fp_splitA+0x30>
     d8a:	16 16       	cp	r1, r22
     d8c:	17 06       	cpc	r1, r23
     d8e:	18 06       	cpc	r1, r24
     d90:	99 1f       	adc	r25, r25
     d92:	f1 cf       	rjmp	.-30     	; 0xd76 <__fp_splitA+0xc>
     d94:	86 95       	lsr	r24
     d96:	71 05       	cpc	r23, r1
     d98:	61 05       	cpc	r22, r1
     d9a:	08 94       	sec
     d9c:	08 95       	ret

00000d9e <__fp_zero>:
     d9e:	e8 94       	clt

00000da0 <__fp_szero>:
     da0:	bb 27       	eor	r27, r27
     da2:	66 27       	eor	r22, r22
     da4:	77 27       	eor	r23, r23
     da6:	cb 01       	movw	r24, r22
     da8:	97 f9       	bld	r25, 7
     daa:	08 95       	ret

00000dac <__mulsf3>:
     dac:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__mulsf3x>
     db0:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_round>
     db4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fp_pscA>
     db8:	38 f0       	brcs	.+14     	; 0xdc8 <__mulsf3+0x1c>
     dba:	0e 94 95 06 	call	0xd2a	; 0xd2a <__fp_pscB>
     dbe:	20 f0       	brcs	.+8      	; 0xdc8 <__mulsf3+0x1c>
     dc0:	95 23       	and	r25, r21
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <__mulsf3+0x1c>
     dc4:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__fp_inf>
     dc8:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_nan>
     dcc:	11 24       	eor	r1, r1
     dce:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_szero>

00000dd2 <__mulsf3x>:
     dd2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__fp_split3>
     dd6:	70 f3       	brcs	.-36     	; 0xdb4 <__mulsf3+0x8>

00000dd8 <__mulsf3_pse>:
     dd8:	95 9f       	mul	r25, r21
     dda:	c1 f3       	breq	.-16     	; 0xdcc <__mulsf3+0x20>
     ddc:	95 0f       	add	r25, r21
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	55 1f       	adc	r21, r21
     de2:	62 9f       	mul	r22, r18
     de4:	f0 01       	movw	r30, r0
     de6:	72 9f       	mul	r23, r18
     de8:	bb 27       	eor	r27, r27
     dea:	f0 0d       	add	r31, r0
     dec:	b1 1d       	adc	r27, r1
     dee:	63 9f       	mul	r22, r19
     df0:	aa 27       	eor	r26, r26
     df2:	f0 0d       	add	r31, r0
     df4:	b1 1d       	adc	r27, r1
     df6:	aa 1f       	adc	r26, r26
     df8:	64 9f       	mul	r22, r20
     dfa:	66 27       	eor	r22, r22
     dfc:	b0 0d       	add	r27, r0
     dfe:	a1 1d       	adc	r26, r1
     e00:	66 1f       	adc	r22, r22
     e02:	82 9f       	mul	r24, r18
     e04:	22 27       	eor	r18, r18
     e06:	b0 0d       	add	r27, r0
     e08:	a1 1d       	adc	r26, r1
     e0a:	62 1f       	adc	r22, r18
     e0c:	73 9f       	mul	r23, r19
     e0e:	b0 0d       	add	r27, r0
     e10:	a1 1d       	adc	r26, r1
     e12:	62 1f       	adc	r22, r18
     e14:	83 9f       	mul	r24, r19
     e16:	a0 0d       	add	r26, r0
     e18:	61 1d       	adc	r22, r1
     e1a:	22 1f       	adc	r18, r18
     e1c:	74 9f       	mul	r23, r20
     e1e:	33 27       	eor	r19, r19
     e20:	a0 0d       	add	r26, r0
     e22:	61 1d       	adc	r22, r1
     e24:	23 1f       	adc	r18, r19
     e26:	84 9f       	mul	r24, r20
     e28:	60 0d       	add	r22, r0
     e2a:	21 1d       	adc	r18, r1
     e2c:	82 2f       	mov	r24, r18
     e2e:	76 2f       	mov	r23, r22
     e30:	6a 2f       	mov	r22, r26
     e32:	11 24       	eor	r1, r1
     e34:	9f 57       	subi	r25, 0x7F	; 127
     e36:	50 40       	sbci	r21, 0x00	; 0
     e38:	9a f0       	brmi	.+38     	; 0xe60 <__mulsf3_pse+0x88>
     e3a:	f1 f0       	breq	.+60     	; 0xe78 <__mulsf3_pse+0xa0>
     e3c:	88 23       	and	r24, r24
     e3e:	4a f0       	brmi	.+18     	; 0xe52 <__mulsf3_pse+0x7a>
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	bb 1f       	adc	r27, r27
     e46:	66 1f       	adc	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	88 1f       	adc	r24, r24
     e4c:	91 50       	subi	r25, 0x01	; 1
     e4e:	50 40       	sbci	r21, 0x00	; 0
     e50:	a9 f7       	brne	.-22     	; 0xe3c <__mulsf3_pse+0x64>
     e52:	9e 3f       	cpi	r25, 0xFE	; 254
     e54:	51 05       	cpc	r21, r1
     e56:	80 f0       	brcs	.+32     	; 0xe78 <__mulsf3_pse+0xa0>
     e58:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__fp_inf>
     e5c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_szero>
     e60:	5f 3f       	cpi	r21, 0xFF	; 255
     e62:	e4 f3       	brlt	.-8      	; 0xe5c <__mulsf3_pse+0x84>
     e64:	98 3e       	cpi	r25, 0xE8	; 232
     e66:	d4 f3       	brlt	.-12     	; 0xe5c <__mulsf3_pse+0x84>
     e68:	86 95       	lsr	r24
     e6a:	77 95       	ror	r23
     e6c:	67 95       	ror	r22
     e6e:	b7 95       	ror	r27
     e70:	f7 95       	ror	r31
     e72:	e7 95       	ror	r30
     e74:	9f 5f       	subi	r25, 0xFF	; 255
     e76:	c1 f7       	brne	.-16     	; 0xe68 <__mulsf3_pse+0x90>
     e78:	fe 2b       	or	r31, r30
     e7a:	88 0f       	add	r24, r24
     e7c:	91 1d       	adc	r25, r1
     e7e:	96 95       	lsr	r25
     e80:	87 95       	ror	r24
     e82:	97 f9       	bld	r25, 7
     e84:	08 95       	ret

00000e86 <trunc>:
     e86:	0e 94 77 07 	call	0xeee	; 0xeee <__fp_trunc>
     e8a:	30 f0       	brcs	.+12     	; 0xe98 <trunc+0x12>
     e8c:	9f 37       	cpi	r25, 0x7F	; 127
     e8e:	10 f4       	brcc	.+4      	; 0xe94 <trunc+0xe>
     e90:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_szero>
     e94:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__fp_mintl>
     e98:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_mpack>

00000e9c <__fp_mintl>:
     e9c:	88 23       	and	r24, r24
     e9e:	71 f4       	brne	.+28     	; 0xebc <__fp_mintl+0x20>
     ea0:	77 23       	and	r23, r23
     ea2:	21 f0       	breq	.+8      	; 0xeac <__fp_mintl+0x10>
     ea4:	98 50       	subi	r25, 0x08	; 8
     ea6:	87 2b       	or	r24, r23
     ea8:	76 2f       	mov	r23, r22
     eaa:	07 c0       	rjmp	.+14     	; 0xeba <__fp_mintl+0x1e>
     eac:	66 23       	and	r22, r22
     eae:	11 f4       	brne	.+4      	; 0xeb4 <__fp_mintl+0x18>
     eb0:	99 27       	eor	r25, r25
     eb2:	0d c0       	rjmp	.+26     	; 0xece <__fp_mintl+0x32>
     eb4:	90 51       	subi	r25, 0x10	; 16
     eb6:	86 2b       	or	r24, r22
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	2a f0       	brmi	.+10     	; 0xec8 <__fp_mintl+0x2c>
     ebe:	9a 95       	dec	r25
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	88 1f       	adc	r24, r24
     ec6:	da f7       	brpl	.-10     	; 0xebe <__fp_mintl+0x22>
     ec8:	88 0f       	add	r24, r24
     eca:	96 95       	lsr	r25
     ecc:	87 95       	ror	r24
     ece:	97 f9       	bld	r25, 7
     ed0:	08 95       	ret

00000ed2 <__fp_mpack>:
     ed2:	9f 3f       	cpi	r25, 0xFF	; 255
     ed4:	31 f0       	breq	.+12     	; 0xee2 <__fp_mpack_finite+0xc>

00000ed6 <__fp_mpack_finite>:
     ed6:	91 50       	subi	r25, 0x01	; 1
     ed8:	20 f4       	brcc	.+8      	; 0xee2 <__fp_mpack_finite+0xc>
     eda:	87 95       	ror	r24
     edc:	77 95       	ror	r23
     ede:	67 95       	ror	r22
     ee0:	b7 95       	ror	r27
     ee2:	88 0f       	add	r24, r24
     ee4:	91 1d       	adc	r25, r1
     ee6:	96 95       	lsr	r25
     ee8:	87 95       	ror	r24
     eea:	97 f9       	bld	r25, 7
     eec:	08 95       	ret

00000eee <__fp_trunc>:
     eee:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__fp_splitA>
     ef2:	a0 f0       	brcs	.+40     	; 0xf1c <__fp_trunc+0x2e>
     ef4:	be e7       	ldi	r27, 0x7E	; 126
     ef6:	b9 17       	cp	r27, r25
     ef8:	88 f4       	brcc	.+34     	; 0xf1c <__fp_trunc+0x2e>
     efa:	bb 27       	eor	r27, r27
     efc:	9f 38       	cpi	r25, 0x8F	; 143
     efe:	60 f4       	brcc	.+24     	; 0xf18 <__fp_trunc+0x2a>
     f00:	16 16       	cp	r1, r22
     f02:	b1 1d       	adc	r27, r1
     f04:	67 2f       	mov	r22, r23
     f06:	78 2f       	mov	r23, r24
     f08:	88 27       	eor	r24, r24
     f0a:	98 5f       	subi	r25, 0xF8	; 248
     f0c:	f7 cf       	rjmp	.-18     	; 0xefc <__fp_trunc+0xe>
     f0e:	86 95       	lsr	r24
     f10:	77 95       	ror	r23
     f12:	67 95       	ror	r22
     f14:	b1 1d       	adc	r27, r1
     f16:	93 95       	inc	r25
     f18:	96 39       	cpi	r25, 0x96	; 150
     f1a:	c8 f3       	brcs	.-14     	; 0xf0e <__fp_trunc+0x20>
     f1c:	08 95       	ret

00000f1e <__udivmodsi4>:
     f1e:	a1 e2       	ldi	r26, 0x21	; 33
     f20:	1a 2e       	mov	r1, r26
     f22:	aa 1b       	sub	r26, r26
     f24:	bb 1b       	sub	r27, r27
     f26:	fd 01       	movw	r30, r26
     f28:	0d c0       	rjmp	.+26     	; 0xf44 <__udivmodsi4_ep>

00000f2a <__udivmodsi4_loop>:
     f2a:	aa 1f       	adc	r26, r26
     f2c:	bb 1f       	adc	r27, r27
     f2e:	ee 1f       	adc	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	a2 17       	cp	r26, r18
     f34:	b3 07       	cpc	r27, r19
     f36:	e4 07       	cpc	r30, r20
     f38:	f5 07       	cpc	r31, r21
     f3a:	20 f0       	brcs	.+8      	; 0xf44 <__udivmodsi4_ep>
     f3c:	a2 1b       	sub	r26, r18
     f3e:	b3 0b       	sbc	r27, r19
     f40:	e4 0b       	sbc	r30, r20
     f42:	f5 0b       	sbc	r31, r21

00000f44 <__udivmodsi4_ep>:
     f44:	66 1f       	adc	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	1a 94       	dec	r1
     f4e:	69 f7       	brne	.-38     	; 0xf2a <__udivmodsi4_loop>
     f50:	60 95       	com	r22
     f52:	70 95       	com	r23
     f54:	80 95       	com	r24
     f56:	90 95       	com	r25
     f58:	9b 01       	movw	r18, r22
     f5a:	ac 01       	movw	r20, r24
     f5c:	bd 01       	movw	r22, r26
     f5e:	cf 01       	movw	r24, r30
     f60:	08 95       	ret

00000f62 <__umoddi3>:
     f62:	68 94       	set
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <__udivdi3_umoddi3>

00000f66 <__udivdi3>:
     f66:	e8 94       	clt

00000f68 <__udivdi3_umoddi3>:
     f68:	8f 92       	push	r8
     f6a:	9f 92       	push	r9
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__udivmod64>
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	9f 90       	pop	r9
     f7a:	8f 90       	pop	r8
     f7c:	08 95       	ret

00000f7e <__udivmod64>:
     f7e:	88 24       	eor	r8, r8
     f80:	99 24       	eor	r9, r9
     f82:	f4 01       	movw	r30, r8
     f84:	e4 01       	movw	r28, r8
     f86:	b0 e4       	ldi	r27, 0x40	; 64
     f88:	9f 93       	push	r25
     f8a:	aa 27       	eor	r26, r26
     f8c:	9a 15       	cp	r25, r10
     f8e:	8b 04       	cpc	r8, r11
     f90:	9c 04       	cpc	r9, r12
     f92:	ed 05       	cpc	r30, r13
     f94:	fe 05       	cpc	r31, r14
     f96:	cf 05       	cpc	r28, r15
     f98:	d0 07       	cpc	r29, r16
     f9a:	a1 07       	cpc	r26, r17
     f9c:	98 f4       	brcc	.+38     	; 0xfc4 <__udivmod64+0x46>
     f9e:	ad 2f       	mov	r26, r29
     fa0:	dc 2f       	mov	r29, r28
     fa2:	cf 2f       	mov	r28, r31
     fa4:	fe 2f       	mov	r31, r30
     fa6:	e9 2d       	mov	r30, r9
     fa8:	98 2c       	mov	r9, r8
     faa:	89 2e       	mov	r8, r25
     fac:	98 2f       	mov	r25, r24
     fae:	87 2f       	mov	r24, r23
     fb0:	76 2f       	mov	r23, r22
     fb2:	65 2f       	mov	r22, r21
     fb4:	54 2f       	mov	r21, r20
     fb6:	43 2f       	mov	r20, r19
     fb8:	32 2f       	mov	r19, r18
     fba:	22 27       	eor	r18, r18
     fbc:	b8 50       	subi	r27, 0x08	; 8
     fbe:	31 f7       	brne	.-52     	; 0xf8c <__udivmod64+0xe>
     fc0:	bf 91       	pop	r27
     fc2:	27 c0       	rjmp	.+78     	; 0x1012 <__udivmod64+0x94>
     fc4:	1b 2e       	mov	r1, r27
     fc6:	bf 91       	pop	r27
     fc8:	bb 27       	eor	r27, r27
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	44 1f       	adc	r20, r20
     fd0:	55 1f       	adc	r21, r21
     fd2:	66 1f       	adc	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	88 1c       	adc	r8, r8
     fdc:	99 1c       	adc	r9, r9
     fde:	ee 1f       	adc	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	cc 1f       	adc	r28, r28
     fe4:	dd 1f       	adc	r29, r29
     fe6:	aa 1f       	adc	r26, r26
     fe8:	bb 1f       	adc	r27, r27
     fea:	8a 14       	cp	r8, r10
     fec:	9b 04       	cpc	r9, r11
     fee:	ec 05       	cpc	r30, r12
     ff0:	fd 05       	cpc	r31, r13
     ff2:	ce 05       	cpc	r28, r14
     ff4:	df 05       	cpc	r29, r15
     ff6:	a0 07       	cpc	r26, r16
     ff8:	b1 07       	cpc	r27, r17
     ffa:	48 f0       	brcs	.+18     	; 0x100e <__udivmod64+0x90>
     ffc:	8a 18       	sub	r8, r10
     ffe:	9b 08       	sbc	r9, r11
    1000:	ec 09       	sbc	r30, r12
    1002:	fd 09       	sbc	r31, r13
    1004:	ce 09       	sbc	r28, r14
    1006:	df 09       	sbc	r29, r15
    1008:	a0 0b       	sbc	r26, r16
    100a:	b1 0b       	sbc	r27, r17
    100c:	21 60       	ori	r18, 0x01	; 1
    100e:	1a 94       	dec	r1
    1010:	e1 f6       	brne	.-72     	; 0xfca <__udivmod64+0x4c>
    1012:	2e f4       	brtc	.+10     	; 0x101e <__udivmod64+0xa0>
    1014:	94 01       	movw	r18, r8
    1016:	af 01       	movw	r20, r30
    1018:	be 01       	movw	r22, r28
    101a:	cd 01       	movw	r24, r26
    101c:	00 0c       	add	r0, r0
    101e:	08 95       	ret

00001020 <__adddi3>:
    1020:	2a 0d       	add	r18, r10
    1022:	3b 1d       	adc	r19, r11
    1024:	4c 1d       	adc	r20, r12
    1026:	5d 1d       	adc	r21, r13
    1028:	6e 1d       	adc	r22, r14
    102a:	7f 1d       	adc	r23, r15
    102c:	80 1f       	adc	r24, r16
    102e:	91 1f       	adc	r25, r17
    1030:	08 95       	ret

00001032 <__adddi3_s8>:
    1032:	00 24       	eor	r0, r0
    1034:	a7 fd       	sbrc	r26, 7
    1036:	00 94       	com	r0
    1038:	2a 0f       	add	r18, r26
    103a:	30 1d       	adc	r19, r0
    103c:	40 1d       	adc	r20, r0
    103e:	50 1d       	adc	r21, r0
    1040:	60 1d       	adc	r22, r0
    1042:	70 1d       	adc	r23, r0
    1044:	80 1d       	adc	r24, r0
    1046:	90 1d       	adc	r25, r0
    1048:	08 95       	ret

0000104a <__itoa_ncheck>:
    104a:	bb 27       	eor	r27, r27
    104c:	4a 30       	cpi	r20, 0x0A	; 10
    104e:	31 f4       	brne	.+12     	; 0x105c <__itoa_ncheck+0x12>
    1050:	99 23       	and	r25, r25
    1052:	22 f4       	brpl	.+8      	; 0x105c <__itoa_ncheck+0x12>
    1054:	bd e2       	ldi	r27, 0x2D	; 45
    1056:	90 95       	com	r25
    1058:	81 95       	neg	r24
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__utoa_common>

00001060 <__utoa_ncheck>:
    1060:	bb 27       	eor	r27, r27

00001062 <__utoa_common>:
    1062:	fb 01       	movw	r30, r22
    1064:	55 27       	eor	r21, r21
    1066:	aa 27       	eor	r26, r26
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	aa 1f       	adc	r26, r26
    106e:	a4 17       	cp	r26, r20
    1070:	10 f0       	brcs	.+4      	; 0x1076 <__utoa_common+0x14>
    1072:	a4 1b       	sub	r26, r20
    1074:	83 95       	inc	r24
    1076:	50 51       	subi	r21, 0x10	; 16
    1078:	b9 f7       	brne	.-18     	; 0x1068 <__utoa_common+0x6>
    107a:	a0 5d       	subi	r26, 0xD0	; 208
    107c:	aa 33       	cpi	r26, 0x3A	; 58
    107e:	08 f0       	brcs	.+2      	; 0x1082 <__utoa_common+0x20>
    1080:	a9 5d       	subi	r26, 0xD9	; 217
    1082:	a1 93       	st	Z+, r26
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	79 f7       	brne	.-34     	; 0x1066 <__utoa_common+0x4>
    1088:	b1 11       	cpse	r27, r1
    108a:	b1 93       	st	Z+, r27
    108c:	11 92       	st	Z+, r1
    108e:	cb 01       	movw	r24, r22
    1090:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <strrev>

00001094 <sprintf>:
    1094:	ae e0       	ldi	r26, 0x0E	; 14
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e0 e5       	ldi	r30, 0x50	; 80
    109a:	f8 e0       	ldi	r31, 0x08	; 8
    109c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__prologue_saves__+0x1c>
    10a0:	0d 89       	ldd	r16, Y+21	; 0x15
    10a2:	1e 89       	ldd	r17, Y+22	; 0x16
    10a4:	86 e0       	ldi	r24, 0x06	; 6
    10a6:	8c 83       	std	Y+4, r24	; 0x04
    10a8:	09 83       	std	Y+1, r16	; 0x01
    10aa:	1a 83       	std	Y+2, r17	; 0x02
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	9f e7       	ldi	r25, 0x7F	; 127
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	ae 01       	movw	r20, r28
    10b6:	47 5e       	subi	r20, 0xE7	; 231
    10b8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ba:	6f 89       	ldd	r22, Y+23	; 0x17
    10bc:	78 8d       	ldd	r23, Y+24	; 0x18
    10be:	ce 01       	movw	r24, r28
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	0e 94 6d 08 	call	0x10da	; 0x10da <vfprintf>
    10c6:	2f 81       	ldd	r18, Y+7	; 0x07
    10c8:	38 85       	ldd	r19, Y+8	; 0x08
    10ca:	f8 01       	movw	r30, r16
    10cc:	e2 0f       	add	r30, r18
    10ce:	f3 1f       	adc	r31, r19
    10d0:	10 82       	st	Z, r1
    10d2:	2e 96       	adiw	r28, 0x0e	; 14
    10d4:	e4 e0       	ldi	r30, 0x04	; 4
    10d6:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__epilogue_restores__+0x1c>

000010da <vfprintf>:
    10da:	ac e0       	ldi	r26, 0x0C	; 12
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e3 e7       	ldi	r30, 0x73	; 115
    10e0:	f8 e0       	ldi	r31, 0x08	; 8
    10e2:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__prologue_saves__>
    10e6:	7c 01       	movw	r14, r24
    10e8:	6b 01       	movw	r12, r22
    10ea:	8a 01       	movw	r16, r20
    10ec:	fc 01       	movw	r30, r24
    10ee:	16 82       	std	Z+6, r1	; 0x06
    10f0:	17 82       	std	Z+7, r1	; 0x07
    10f2:	83 81       	ldd	r24, Z+3	; 0x03
    10f4:	81 ff       	sbrs	r24, 1
    10f6:	bd c1       	rjmp	.+890    	; 0x1472 <vfprintf+0x398>
    10f8:	ce 01       	movw	r24, r28
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	4c 01       	movw	r8, r24
    10fe:	f7 01       	movw	r30, r14
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	f6 01       	movw	r30, r12
    1104:	93 fd       	sbrc	r25, 3
    1106:	85 91       	lpm	r24, Z+
    1108:	93 ff       	sbrs	r25, 3
    110a:	81 91       	ld	r24, Z+
    110c:	6f 01       	movw	r12, r30
    110e:	88 23       	and	r24, r24
    1110:	09 f4       	brne	.+2      	; 0x1114 <vfprintf+0x3a>
    1112:	ab c1       	rjmp	.+854    	; 0x146a <vfprintf+0x390>
    1114:	85 32       	cpi	r24, 0x25	; 37
    1116:	39 f4       	brne	.+14     	; 0x1126 <vfprintf+0x4c>
    1118:	93 fd       	sbrc	r25, 3
    111a:	85 91       	lpm	r24, Z+
    111c:	93 ff       	sbrs	r25, 3
    111e:	81 91       	ld	r24, Z+
    1120:	6f 01       	movw	r12, r30
    1122:	85 32       	cpi	r24, 0x25	; 37
    1124:	29 f4       	brne	.+10     	; 0x1130 <vfprintf+0x56>
    1126:	b7 01       	movw	r22, r14
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    112e:	e7 cf       	rjmp	.-50     	; 0x10fe <vfprintf+0x24>
    1130:	51 2c       	mov	r5, r1
    1132:	31 2c       	mov	r3, r1
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	20 32       	cpi	r18, 0x20	; 32
    1138:	a0 f4       	brcc	.+40     	; 0x1162 <vfprintf+0x88>
    113a:	8b 32       	cpi	r24, 0x2B	; 43
    113c:	69 f0       	breq	.+26     	; 0x1158 <vfprintf+0x7e>
    113e:	30 f4       	brcc	.+12     	; 0x114c <vfprintf+0x72>
    1140:	80 32       	cpi	r24, 0x20	; 32
    1142:	59 f0       	breq	.+22     	; 0x115a <vfprintf+0x80>
    1144:	83 32       	cpi	r24, 0x23	; 35
    1146:	69 f4       	brne	.+26     	; 0x1162 <vfprintf+0x88>
    1148:	20 61       	ori	r18, 0x10	; 16
    114a:	2c c0       	rjmp	.+88     	; 0x11a4 <vfprintf+0xca>
    114c:	8d 32       	cpi	r24, 0x2D	; 45
    114e:	39 f0       	breq	.+14     	; 0x115e <vfprintf+0x84>
    1150:	80 33       	cpi	r24, 0x30	; 48
    1152:	39 f4       	brne	.+14     	; 0x1162 <vfprintf+0x88>
    1154:	21 60       	ori	r18, 0x01	; 1
    1156:	26 c0       	rjmp	.+76     	; 0x11a4 <vfprintf+0xca>
    1158:	22 60       	ori	r18, 0x02	; 2
    115a:	24 60       	ori	r18, 0x04	; 4
    115c:	23 c0       	rjmp	.+70     	; 0x11a4 <vfprintf+0xca>
    115e:	28 60       	ori	r18, 0x08	; 8
    1160:	21 c0       	rjmp	.+66     	; 0x11a4 <vfprintf+0xca>
    1162:	27 fd       	sbrc	r18, 7
    1164:	27 c0       	rjmp	.+78     	; 0x11b4 <vfprintf+0xda>
    1166:	30 ed       	ldi	r19, 0xD0	; 208
    1168:	38 0f       	add	r19, r24
    116a:	3a 30       	cpi	r19, 0x0A	; 10
    116c:	78 f4       	brcc	.+30     	; 0x118c <vfprintf+0xb2>
    116e:	26 ff       	sbrs	r18, 6
    1170:	06 c0       	rjmp	.+12     	; 0x117e <vfprintf+0xa4>
    1172:	fa e0       	ldi	r31, 0x0A	; 10
    1174:	5f 9e       	mul	r5, r31
    1176:	30 0d       	add	r19, r0
    1178:	11 24       	eor	r1, r1
    117a:	53 2e       	mov	r5, r19
    117c:	13 c0       	rjmp	.+38     	; 0x11a4 <vfprintf+0xca>
    117e:	8a e0       	ldi	r24, 0x0A	; 10
    1180:	38 9e       	mul	r3, r24
    1182:	30 0d       	add	r19, r0
    1184:	11 24       	eor	r1, r1
    1186:	33 2e       	mov	r3, r19
    1188:	20 62       	ori	r18, 0x20	; 32
    118a:	0c c0       	rjmp	.+24     	; 0x11a4 <vfprintf+0xca>
    118c:	8e 32       	cpi	r24, 0x2E	; 46
    118e:	21 f4       	brne	.+8      	; 0x1198 <vfprintf+0xbe>
    1190:	26 fd       	sbrc	r18, 6
    1192:	6b c1       	rjmp	.+726    	; 0x146a <vfprintf+0x390>
    1194:	20 64       	ori	r18, 0x40	; 64
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <vfprintf+0xca>
    1198:	8c 36       	cpi	r24, 0x6C	; 108
    119a:	11 f4       	brne	.+4      	; 0x11a0 <vfprintf+0xc6>
    119c:	20 68       	ori	r18, 0x80	; 128
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <vfprintf+0xca>
    11a0:	88 36       	cpi	r24, 0x68	; 104
    11a2:	41 f4       	brne	.+16     	; 0x11b4 <vfprintf+0xda>
    11a4:	f6 01       	movw	r30, r12
    11a6:	93 fd       	sbrc	r25, 3
    11a8:	85 91       	lpm	r24, Z+
    11aa:	93 ff       	sbrs	r25, 3
    11ac:	81 91       	ld	r24, Z+
    11ae:	6f 01       	movw	r12, r30
    11b0:	81 11       	cpse	r24, r1
    11b2:	c1 cf       	rjmp	.-126    	; 0x1136 <vfprintf+0x5c>
    11b4:	98 2f       	mov	r25, r24
    11b6:	9f 7d       	andi	r25, 0xDF	; 223
    11b8:	95 54       	subi	r25, 0x45	; 69
    11ba:	93 30       	cpi	r25, 0x03	; 3
    11bc:	28 f4       	brcc	.+10     	; 0x11c8 <vfprintf+0xee>
    11be:	0c 5f       	subi	r16, 0xFC	; 252
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	ff e3       	ldi	r31, 0x3F	; 63
    11c4:	f9 83       	std	Y+1, r31	; 0x01
    11c6:	0d c0       	rjmp	.+26     	; 0x11e2 <vfprintf+0x108>
    11c8:	83 36       	cpi	r24, 0x63	; 99
    11ca:	31 f0       	breq	.+12     	; 0x11d8 <vfprintf+0xfe>
    11cc:	83 37       	cpi	r24, 0x73	; 115
    11ce:	71 f0       	breq	.+28     	; 0x11ec <vfprintf+0x112>
    11d0:	83 35       	cpi	r24, 0x53	; 83
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <vfprintf+0xfc>
    11d4:	5b c0       	rjmp	.+182    	; 0x128c <vfprintf+0x1b2>
    11d6:	22 c0       	rjmp	.+68     	; 0x121c <vfprintf+0x142>
    11d8:	f8 01       	movw	r30, r16
    11da:	80 81       	ld	r24, Z
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	0e 5f       	subi	r16, 0xFE	; 254
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	44 24       	eor	r4, r4
    11e4:	43 94       	inc	r4
    11e6:	51 2c       	mov	r5, r1
    11e8:	54 01       	movw	r10, r8
    11ea:	15 c0       	rjmp	.+42     	; 0x1216 <vfprintf+0x13c>
    11ec:	38 01       	movw	r6, r16
    11ee:	f2 e0       	ldi	r31, 0x02	; 2
    11f0:	6f 0e       	add	r6, r31
    11f2:	71 1c       	adc	r7, r1
    11f4:	f8 01       	movw	r30, r16
    11f6:	a0 80       	ld	r10, Z
    11f8:	b1 80       	ldd	r11, Z+1	; 0x01
    11fa:	26 ff       	sbrs	r18, 6
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <vfprintf+0x12a>
    11fe:	65 2d       	mov	r22, r5
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <vfprintf+0x12e>
    1204:	6f ef       	ldi	r22, 0xFF	; 255
    1206:	7f ef       	ldi	r23, 0xFF	; 255
    1208:	c5 01       	movw	r24, r10
    120a:	2c 87       	std	Y+12, r18	; 0x0c
    120c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strnlen>
    1210:	2c 01       	movw	r4, r24
    1212:	83 01       	movw	r16, r6
    1214:	2c 85       	ldd	r18, Y+12	; 0x0c
    1216:	2f 77       	andi	r18, 0x7F	; 127
    1218:	22 2e       	mov	r2, r18
    121a:	17 c0       	rjmp	.+46     	; 0x124a <vfprintf+0x170>
    121c:	38 01       	movw	r6, r16
    121e:	f2 e0       	ldi	r31, 0x02	; 2
    1220:	6f 0e       	add	r6, r31
    1222:	71 1c       	adc	r7, r1
    1224:	f8 01       	movw	r30, r16
    1226:	a0 80       	ld	r10, Z
    1228:	b1 80       	ldd	r11, Z+1	; 0x01
    122a:	26 ff       	sbrs	r18, 6
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <vfprintf+0x15a>
    122e:	65 2d       	mov	r22, r5
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <vfprintf+0x15e>
    1234:	6f ef       	ldi	r22, 0xFF	; 255
    1236:	7f ef       	ldi	r23, 0xFF	; 255
    1238:	c5 01       	movw	r24, r10
    123a:	2c 87       	std	Y+12, r18	; 0x0c
    123c:	0e 94 3f 0a 	call	0x147e	; 0x147e <strnlen_P>
    1240:	2c 01       	movw	r4, r24
    1242:	2c 85       	ldd	r18, Y+12	; 0x0c
    1244:	20 68       	ori	r18, 0x80	; 128
    1246:	22 2e       	mov	r2, r18
    1248:	83 01       	movw	r16, r6
    124a:	23 fc       	sbrc	r2, 3
    124c:	1b c0       	rjmp	.+54     	; 0x1284 <vfprintf+0x1aa>
    124e:	83 2d       	mov	r24, r3
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	48 16       	cp	r4, r24
    1254:	59 06       	cpc	r5, r25
    1256:	b0 f4       	brcc	.+44     	; 0x1284 <vfprintf+0x1aa>
    1258:	b7 01       	movw	r22, r14
    125a:	80 e2       	ldi	r24, 0x20	; 32
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    1262:	3a 94       	dec	r3
    1264:	f4 cf       	rjmp	.-24     	; 0x124e <vfprintf+0x174>
    1266:	f5 01       	movw	r30, r10
    1268:	27 fc       	sbrc	r2, 7
    126a:	85 91       	lpm	r24, Z+
    126c:	27 fe       	sbrs	r2, 7
    126e:	81 91       	ld	r24, Z+
    1270:	5f 01       	movw	r10, r30
    1272:	b7 01       	movw	r22, r14
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    127a:	31 10       	cpse	r3, r1
    127c:	3a 94       	dec	r3
    127e:	f1 e0       	ldi	r31, 0x01	; 1
    1280:	4f 1a       	sub	r4, r31
    1282:	51 08       	sbc	r5, r1
    1284:	41 14       	cp	r4, r1
    1286:	51 04       	cpc	r5, r1
    1288:	71 f7       	brne	.-36     	; 0x1266 <vfprintf+0x18c>
    128a:	e5 c0       	rjmp	.+458    	; 0x1456 <vfprintf+0x37c>
    128c:	84 36       	cpi	r24, 0x64	; 100
    128e:	11 f0       	breq	.+4      	; 0x1294 <vfprintf+0x1ba>
    1290:	89 36       	cpi	r24, 0x69	; 105
    1292:	39 f5       	brne	.+78     	; 0x12e2 <vfprintf+0x208>
    1294:	f8 01       	movw	r30, r16
    1296:	27 ff       	sbrs	r18, 7
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <vfprintf+0x1ce>
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	0c 5f       	subi	r16, 0xFC	; 252
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	08 c0       	rjmp	.+16     	; 0x12b8 <vfprintf+0x1de>
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	07 2e       	mov	r0, r23
    12ae:	00 0c       	add	r0, r0
    12b0:	88 0b       	sbc	r24, r24
    12b2:	99 0b       	sbc	r25, r25
    12b4:	0e 5f       	subi	r16, 0xFE	; 254
    12b6:	1f 4f       	sbci	r17, 0xFF	; 255
    12b8:	2f 76       	andi	r18, 0x6F	; 111
    12ba:	72 2e       	mov	r7, r18
    12bc:	97 ff       	sbrs	r25, 7
    12be:	09 c0       	rjmp	.+18     	; 0x12d2 <vfprintf+0x1f8>
    12c0:	90 95       	com	r25
    12c2:	80 95       	com	r24
    12c4:	70 95       	com	r23
    12c6:	61 95       	neg	r22
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	8f 4f       	sbci	r24, 0xFF	; 255
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	20 68       	ori	r18, 0x80	; 128
    12d0:	72 2e       	mov	r7, r18
    12d2:	2a e0       	ldi	r18, 0x0A	; 10
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	a4 01       	movw	r20, r8
    12d8:	0e 94 9d 0a 	call	0x153a	; 0x153a <__ultoa_invert>
    12dc:	a8 2e       	mov	r10, r24
    12de:	a8 18       	sub	r10, r8
    12e0:	44 c0       	rjmp	.+136    	; 0x136a <vfprintf+0x290>
    12e2:	85 37       	cpi	r24, 0x75	; 117
    12e4:	29 f4       	brne	.+10     	; 0x12f0 <vfprintf+0x216>
    12e6:	2f 7e       	andi	r18, 0xEF	; 239
    12e8:	b2 2e       	mov	r11, r18
    12ea:	2a e0       	ldi	r18, 0x0A	; 10
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	25 c0       	rjmp	.+74     	; 0x133a <vfprintf+0x260>
    12f0:	f2 2f       	mov	r31, r18
    12f2:	f9 7f       	andi	r31, 0xF9	; 249
    12f4:	bf 2e       	mov	r11, r31
    12f6:	8f 36       	cpi	r24, 0x6F	; 111
    12f8:	c1 f0       	breq	.+48     	; 0x132a <vfprintf+0x250>
    12fa:	18 f4       	brcc	.+6      	; 0x1302 <vfprintf+0x228>
    12fc:	88 35       	cpi	r24, 0x58	; 88
    12fe:	79 f0       	breq	.+30     	; 0x131e <vfprintf+0x244>
    1300:	b4 c0       	rjmp	.+360    	; 0x146a <vfprintf+0x390>
    1302:	80 37       	cpi	r24, 0x70	; 112
    1304:	19 f0       	breq	.+6      	; 0x130c <vfprintf+0x232>
    1306:	88 37       	cpi	r24, 0x78	; 120
    1308:	21 f0       	breq	.+8      	; 0x1312 <vfprintf+0x238>
    130a:	af c0       	rjmp	.+350    	; 0x146a <vfprintf+0x390>
    130c:	2f 2f       	mov	r18, r31
    130e:	20 61       	ori	r18, 0x10	; 16
    1310:	b2 2e       	mov	r11, r18
    1312:	b4 fe       	sbrs	r11, 4
    1314:	0d c0       	rjmp	.+26     	; 0x1330 <vfprintf+0x256>
    1316:	8b 2d       	mov	r24, r11
    1318:	84 60       	ori	r24, 0x04	; 4
    131a:	b8 2e       	mov	r11, r24
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <vfprintf+0x256>
    131e:	24 ff       	sbrs	r18, 4
    1320:	0a c0       	rjmp	.+20     	; 0x1336 <vfprintf+0x25c>
    1322:	9f 2f       	mov	r25, r31
    1324:	96 60       	ori	r25, 0x06	; 6
    1326:	b9 2e       	mov	r11, r25
    1328:	06 c0       	rjmp	.+12     	; 0x1336 <vfprintf+0x25c>
    132a:	28 e0       	ldi	r18, 0x08	; 8
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	05 c0       	rjmp	.+10     	; 0x133a <vfprintf+0x260>
    1330:	20 e1       	ldi	r18, 0x10	; 16
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <vfprintf+0x260>
    1336:	20 e1       	ldi	r18, 0x10	; 16
    1338:	32 e0       	ldi	r19, 0x02	; 2
    133a:	f8 01       	movw	r30, r16
    133c:	b7 fe       	sbrs	r11, 7
    133e:	07 c0       	rjmp	.+14     	; 0x134e <vfprintf+0x274>
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	0c 5f       	subi	r16, 0xFC	; 252
    134a:	1f 4f       	sbci	r17, 0xFF	; 255
    134c:	06 c0       	rjmp	.+12     	; 0x135a <vfprintf+0x280>
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 5f       	subi	r16, 0xFE	; 254
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	a4 01       	movw	r20, r8
    135c:	0e 94 9d 0a 	call	0x153a	; 0x153a <__ultoa_invert>
    1360:	a8 2e       	mov	r10, r24
    1362:	a8 18       	sub	r10, r8
    1364:	fb 2d       	mov	r31, r11
    1366:	ff 77       	andi	r31, 0x7F	; 127
    1368:	7f 2e       	mov	r7, r31
    136a:	76 fe       	sbrs	r7, 6
    136c:	0b c0       	rjmp	.+22     	; 0x1384 <vfprintf+0x2aa>
    136e:	37 2d       	mov	r19, r7
    1370:	3e 7f       	andi	r19, 0xFE	; 254
    1372:	a5 14       	cp	r10, r5
    1374:	50 f4       	brcc	.+20     	; 0x138a <vfprintf+0x2b0>
    1376:	74 fe       	sbrs	r7, 4
    1378:	0a c0       	rjmp	.+20     	; 0x138e <vfprintf+0x2b4>
    137a:	72 fc       	sbrc	r7, 2
    137c:	08 c0       	rjmp	.+16     	; 0x138e <vfprintf+0x2b4>
    137e:	37 2d       	mov	r19, r7
    1380:	3e 7e       	andi	r19, 0xEE	; 238
    1382:	05 c0       	rjmp	.+10     	; 0x138e <vfprintf+0x2b4>
    1384:	ba 2c       	mov	r11, r10
    1386:	37 2d       	mov	r19, r7
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <vfprintf+0x2b6>
    138a:	ba 2c       	mov	r11, r10
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <vfprintf+0x2b6>
    138e:	b5 2c       	mov	r11, r5
    1390:	34 ff       	sbrs	r19, 4
    1392:	0d c0       	rjmp	.+26     	; 0x13ae <vfprintf+0x2d4>
    1394:	fe 01       	movw	r30, r28
    1396:	ea 0d       	add	r30, r10
    1398:	f1 1d       	adc	r31, r1
    139a:	80 81       	ld	r24, Z
    139c:	80 33       	cpi	r24, 0x30	; 48
    139e:	11 f4       	brne	.+4      	; 0x13a4 <vfprintf+0x2ca>
    13a0:	39 7e       	andi	r19, 0xE9	; 233
    13a2:	09 c0       	rjmp	.+18     	; 0x13b6 <vfprintf+0x2dc>
    13a4:	32 ff       	sbrs	r19, 2
    13a6:	06 c0       	rjmp	.+12     	; 0x13b4 <vfprintf+0x2da>
    13a8:	b3 94       	inc	r11
    13aa:	b3 94       	inc	r11
    13ac:	04 c0       	rjmp	.+8      	; 0x13b6 <vfprintf+0x2dc>
    13ae:	83 2f       	mov	r24, r19
    13b0:	86 78       	andi	r24, 0x86	; 134
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <vfprintf+0x2dc>
    13b4:	b3 94       	inc	r11
    13b6:	33 fd       	sbrc	r19, 3
    13b8:	13 c0       	rjmp	.+38     	; 0x13e0 <vfprintf+0x306>
    13ba:	30 ff       	sbrs	r19, 0
    13bc:	06 c0       	rjmp	.+12     	; 0x13ca <vfprintf+0x2f0>
    13be:	5a 2c       	mov	r5, r10
    13c0:	b3 14       	cp	r11, r3
    13c2:	18 f4       	brcc	.+6      	; 0x13ca <vfprintf+0x2f0>
    13c4:	53 0c       	add	r5, r3
    13c6:	5b 18       	sub	r5, r11
    13c8:	b3 2c       	mov	r11, r3
    13ca:	b3 14       	cp	r11, r3
    13cc:	68 f4       	brcc	.+26     	; 0x13e8 <vfprintf+0x30e>
    13ce:	b7 01       	movw	r22, r14
    13d0:	80 e2       	ldi	r24, 0x20	; 32
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	3c 87       	std	Y+12, r19	; 0x0c
    13d6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    13da:	b3 94       	inc	r11
    13dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    13de:	f5 cf       	rjmp	.-22     	; 0x13ca <vfprintf+0x2f0>
    13e0:	b3 14       	cp	r11, r3
    13e2:	10 f4       	brcc	.+4      	; 0x13e8 <vfprintf+0x30e>
    13e4:	3b 18       	sub	r3, r11
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <vfprintf+0x310>
    13e8:	31 2c       	mov	r3, r1
    13ea:	34 ff       	sbrs	r19, 4
    13ec:	12 c0       	rjmp	.+36     	; 0x1412 <vfprintf+0x338>
    13ee:	b7 01       	movw	r22, r14
    13f0:	80 e3       	ldi	r24, 0x30	; 48
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	3c 87       	std	Y+12, r19	; 0x0c
    13f6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    13fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    13fc:	32 ff       	sbrs	r19, 2
    13fe:	17 c0       	rjmp	.+46     	; 0x142e <vfprintf+0x354>
    1400:	31 fd       	sbrc	r19, 1
    1402:	03 c0       	rjmp	.+6      	; 0x140a <vfprintf+0x330>
    1404:	88 e7       	ldi	r24, 0x78	; 120
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x334>
    140a:	88 e5       	ldi	r24, 0x58	; 88
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	b7 01       	movw	r22, r14
    1410:	0c c0       	rjmp	.+24     	; 0x142a <vfprintf+0x350>
    1412:	83 2f       	mov	r24, r19
    1414:	86 78       	andi	r24, 0x86	; 134
    1416:	59 f0       	breq	.+22     	; 0x142e <vfprintf+0x354>
    1418:	31 ff       	sbrs	r19, 1
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <vfprintf+0x346>
    141c:	8b e2       	ldi	r24, 0x2B	; 43
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <vfprintf+0x348>
    1420:	80 e2       	ldi	r24, 0x20	; 32
    1422:	37 fd       	sbrc	r19, 7
    1424:	8d e2       	ldi	r24, 0x2D	; 45
    1426:	b7 01       	movw	r22, r14
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    142e:	a5 14       	cp	r10, r5
    1430:	38 f4       	brcc	.+14     	; 0x1440 <vfprintf+0x366>
    1432:	b7 01       	movw	r22, r14
    1434:	80 e3       	ldi	r24, 0x30	; 48
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    143c:	5a 94       	dec	r5
    143e:	f7 cf       	rjmp	.-18     	; 0x142e <vfprintf+0x354>
    1440:	aa 94       	dec	r10
    1442:	f4 01       	movw	r30, r8
    1444:	ea 0d       	add	r30, r10
    1446:	f1 1d       	adc	r31, r1
    1448:	80 81       	ld	r24, Z
    144a:	b7 01       	movw	r22, r14
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    1452:	a1 10       	cpse	r10, r1
    1454:	f5 cf       	rjmp	.-22     	; 0x1440 <vfprintf+0x366>
    1456:	33 20       	and	r3, r3
    1458:	09 f4       	brne	.+2      	; 0x145c <vfprintf+0x382>
    145a:	51 ce       	rjmp	.-862    	; 0x10fe <vfprintf+0x24>
    145c:	b7 01       	movw	r22, r14
    145e:	80 e2       	ldi	r24, 0x20	; 32
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    1466:	3a 94       	dec	r3
    1468:	f6 cf       	rjmp	.-20     	; 0x1456 <vfprintf+0x37c>
    146a:	f7 01       	movw	r30, r14
    146c:	86 81       	ldd	r24, Z+6	; 0x06
    146e:	97 81       	ldd	r25, Z+7	; 0x07
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0x39c>
    1472:	8f ef       	ldi	r24, 0xFF	; 255
    1474:	9f ef       	ldi	r25, 0xFF	; 255
    1476:	2c 96       	adiw	r28, 0x0c	; 12
    1478:	e2 e1       	ldi	r30, 0x12	; 18
    147a:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__epilogue_restores__>

0000147e <strnlen_P>:
    147e:	fc 01       	movw	r30, r24
    1480:	05 90       	lpm	r0, Z+
    1482:	61 50       	subi	r22, 0x01	; 1
    1484:	70 40       	sbci	r23, 0x00	; 0
    1486:	01 10       	cpse	r0, r1
    1488:	d8 f7       	brcc	.-10     	; 0x1480 <strnlen_P+0x2>
    148a:	80 95       	com	r24
    148c:	90 95       	com	r25
    148e:	8e 0f       	add	r24, r30
    1490:	9f 1f       	adc	r25, r31
    1492:	08 95       	ret

00001494 <strnlen>:
    1494:	fc 01       	movw	r30, r24
    1496:	61 50       	subi	r22, 0x01	; 1
    1498:	70 40       	sbci	r23, 0x00	; 0
    149a:	01 90       	ld	r0, Z+
    149c:	01 10       	cpse	r0, r1
    149e:	d8 f7       	brcc	.-10     	; 0x1496 <strnlen+0x2>
    14a0:	80 95       	com	r24
    14a2:	90 95       	com	r25
    14a4:	8e 0f       	add	r24, r30
    14a6:	9f 1f       	adc	r25, r31
    14a8:	08 95       	ret

000014aa <strrev>:
    14aa:	dc 01       	movw	r26, r24
    14ac:	fc 01       	movw	r30, r24
    14ae:	67 2f       	mov	r22, r23
    14b0:	71 91       	ld	r23, Z+
    14b2:	77 23       	and	r23, r23
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <strrev+0x4>
    14b6:	32 97       	sbiw	r30, 0x02	; 2
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <strrev+0x18>
    14ba:	7c 91       	ld	r23, X
    14bc:	6d 93       	st	X+, r22
    14be:	70 83       	st	Z, r23
    14c0:	62 91       	ld	r22, -Z
    14c2:	ae 17       	cp	r26, r30
    14c4:	bf 07       	cpc	r27, r31
    14c6:	c8 f3       	brcs	.-14     	; 0x14ba <strrev+0x10>
    14c8:	08 95       	ret

000014ca <fputc>:
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	fb 01       	movw	r30, r22
    14d4:	23 81       	ldd	r18, Z+3	; 0x03
    14d6:	21 fd       	sbrc	r18, 1
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <fputc+0x16>
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	9f ef       	ldi	r25, 0xFF	; 255
    14de:	28 c0       	rjmp	.+80     	; 0x1530 <fputc+0x66>
    14e0:	22 ff       	sbrs	r18, 2
    14e2:	16 c0       	rjmp	.+44     	; 0x1510 <fputc+0x46>
    14e4:	46 81       	ldd	r20, Z+6	; 0x06
    14e6:	57 81       	ldd	r21, Z+7	; 0x07
    14e8:	24 81       	ldd	r18, Z+4	; 0x04
    14ea:	35 81       	ldd	r19, Z+5	; 0x05
    14ec:	42 17       	cp	r20, r18
    14ee:	53 07       	cpc	r21, r19
    14f0:	44 f4       	brge	.+16     	; 0x1502 <fputc+0x38>
    14f2:	a0 81       	ld	r26, Z
    14f4:	b1 81       	ldd	r27, Z+1	; 0x01
    14f6:	9d 01       	movw	r18, r26
    14f8:	2f 5f       	subi	r18, 0xFF	; 255
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
    14fc:	20 83       	st	Z, r18
    14fe:	31 83       	std	Z+1, r19	; 0x01
    1500:	8c 93       	st	X, r24
    1502:	26 81       	ldd	r18, Z+6	; 0x06
    1504:	37 81       	ldd	r19, Z+7	; 0x07
    1506:	2f 5f       	subi	r18, 0xFF	; 255
    1508:	3f 4f       	sbci	r19, 0xFF	; 255
    150a:	26 83       	std	Z+6, r18	; 0x06
    150c:	37 83       	std	Z+7, r19	; 0x07
    150e:	10 c0       	rjmp	.+32     	; 0x1530 <fputc+0x66>
    1510:	eb 01       	movw	r28, r22
    1512:	09 2f       	mov	r16, r25
    1514:	18 2f       	mov	r17, r24
    1516:	00 84       	ldd	r0, Z+8	; 0x08
    1518:	f1 85       	ldd	r31, Z+9	; 0x09
    151a:	e0 2d       	mov	r30, r0
    151c:	09 95       	icall
    151e:	89 2b       	or	r24, r25
    1520:	e1 f6       	brne	.-72     	; 0x14da <fputc+0x10>
    1522:	8e 81       	ldd	r24, Y+6	; 0x06
    1524:	9f 81       	ldd	r25, Y+7	; 0x07
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	8e 83       	std	Y+6, r24	; 0x06
    152a:	9f 83       	std	Y+7, r25	; 0x07
    152c:	81 2f       	mov	r24, r17
    152e:	90 2f       	mov	r25, r16
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	08 95       	ret

0000153a <__ultoa_invert>:
    153a:	fa 01       	movw	r30, r20
    153c:	aa 27       	eor	r26, r26
    153e:	28 30       	cpi	r18, 0x08	; 8
    1540:	51 f1       	breq	.+84     	; 0x1596 <__ultoa_invert+0x5c>
    1542:	20 31       	cpi	r18, 0x10	; 16
    1544:	81 f1       	breq	.+96     	; 0x15a6 <__ultoa_invert+0x6c>
    1546:	e8 94       	clt
    1548:	6f 93       	push	r22
    154a:	6e 7f       	andi	r22, 0xFE	; 254
    154c:	6e 5f       	subi	r22, 0xFE	; 254
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	8f 4f       	sbci	r24, 0xFF	; 255
    1552:	9f 4f       	sbci	r25, 0xFF	; 255
    1554:	af 4f       	sbci	r26, 0xFF	; 255
    1556:	b1 e0       	ldi	r27, 0x01	; 1
    1558:	3e d0       	rcall	.+124    	; 0x15d6 <__ultoa_invert+0x9c>
    155a:	b4 e0       	ldi	r27, 0x04	; 4
    155c:	3c d0       	rcall	.+120    	; 0x15d6 <__ultoa_invert+0x9c>
    155e:	67 0f       	add	r22, r23
    1560:	78 1f       	adc	r23, r24
    1562:	89 1f       	adc	r24, r25
    1564:	9a 1f       	adc	r25, r26
    1566:	a1 1d       	adc	r26, r1
    1568:	68 0f       	add	r22, r24
    156a:	79 1f       	adc	r23, r25
    156c:	8a 1f       	adc	r24, r26
    156e:	91 1d       	adc	r25, r1
    1570:	a1 1d       	adc	r26, r1
    1572:	6a 0f       	add	r22, r26
    1574:	71 1d       	adc	r23, r1
    1576:	81 1d       	adc	r24, r1
    1578:	91 1d       	adc	r25, r1
    157a:	a1 1d       	adc	r26, r1
    157c:	20 d0       	rcall	.+64     	; 0x15be <__ultoa_invert+0x84>
    157e:	09 f4       	brne	.+2      	; 0x1582 <__ultoa_invert+0x48>
    1580:	68 94       	set
    1582:	3f 91       	pop	r19
    1584:	2a e0       	ldi	r18, 0x0A	; 10
    1586:	26 9f       	mul	r18, r22
    1588:	11 24       	eor	r1, r1
    158a:	30 19       	sub	r19, r0
    158c:	30 5d       	subi	r19, 0xD0	; 208
    158e:	31 93       	st	Z+, r19
    1590:	de f6       	brtc	.-74     	; 0x1548 <__ultoa_invert+0xe>
    1592:	cf 01       	movw	r24, r30
    1594:	08 95       	ret
    1596:	46 2f       	mov	r20, r22
    1598:	47 70       	andi	r20, 0x07	; 7
    159a:	40 5d       	subi	r20, 0xD0	; 208
    159c:	41 93       	st	Z+, r20
    159e:	b3 e0       	ldi	r27, 0x03	; 3
    15a0:	0f d0       	rcall	.+30     	; 0x15c0 <__ultoa_invert+0x86>
    15a2:	c9 f7       	brne	.-14     	; 0x1596 <__ultoa_invert+0x5c>
    15a4:	f6 cf       	rjmp	.-20     	; 0x1592 <__ultoa_invert+0x58>
    15a6:	46 2f       	mov	r20, r22
    15a8:	4f 70       	andi	r20, 0x0F	; 15
    15aa:	40 5d       	subi	r20, 0xD0	; 208
    15ac:	4a 33       	cpi	r20, 0x3A	; 58
    15ae:	18 f0       	brcs	.+6      	; 0x15b6 <__ultoa_invert+0x7c>
    15b0:	49 5d       	subi	r20, 0xD9	; 217
    15b2:	31 fd       	sbrc	r19, 1
    15b4:	40 52       	subi	r20, 0x20	; 32
    15b6:	41 93       	st	Z+, r20
    15b8:	02 d0       	rcall	.+4      	; 0x15be <__ultoa_invert+0x84>
    15ba:	a9 f7       	brne	.-22     	; 0x15a6 <__ultoa_invert+0x6c>
    15bc:	ea cf       	rjmp	.-44     	; 0x1592 <__ultoa_invert+0x58>
    15be:	b4 e0       	ldi	r27, 0x04	; 4
    15c0:	a6 95       	lsr	r26
    15c2:	97 95       	ror	r25
    15c4:	87 95       	ror	r24
    15c6:	77 95       	ror	r23
    15c8:	67 95       	ror	r22
    15ca:	ba 95       	dec	r27
    15cc:	c9 f7       	brne	.-14     	; 0x15c0 <__ultoa_invert+0x86>
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	61 05       	cpc	r22, r1
    15d2:	71 05       	cpc	r23, r1
    15d4:	08 95       	ret
    15d6:	9b 01       	movw	r18, r22
    15d8:	ac 01       	movw	r20, r24
    15da:	0a 2e       	mov	r0, r26
    15dc:	06 94       	lsr	r0
    15de:	57 95       	ror	r21
    15e0:	47 95       	ror	r20
    15e2:	37 95       	ror	r19
    15e4:	27 95       	ror	r18
    15e6:	ba 95       	dec	r27
    15e8:	c9 f7       	brne	.-14     	; 0x15dc <__ultoa_invert+0xa2>
    15ea:	62 0f       	add	r22, r18
    15ec:	73 1f       	adc	r23, r19
    15ee:	84 1f       	adc	r24, r20
    15f0:	95 1f       	adc	r25, r21
    15f2:	a0 1d       	adc	r26, r0
    15f4:	08 95       	ret

000015f6 <__prologue_saves__>:
    15f6:	2f 92       	push	r2
    15f8:	3f 92       	push	r3
    15fa:	4f 92       	push	r4
    15fc:	5f 92       	push	r5
    15fe:	6f 92       	push	r6
    1600:	7f 92       	push	r7
    1602:	8f 92       	push	r8
    1604:	9f 92       	push	r9
    1606:	af 92       	push	r10
    1608:	bf 92       	push	r11
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	ca 1b       	sub	r28, r26
    1620:	db 0b       	sbc	r29, r27
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	09 94       	ijmp

00001628 <__epilogue_restores__>:
    1628:	2a 88       	ldd	r2, Y+18	; 0x12
    162a:	39 88       	ldd	r3, Y+17	; 0x11
    162c:	48 88       	ldd	r4, Y+16	; 0x10
    162e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1630:	6e 84       	ldd	r6, Y+14	; 0x0e
    1632:	7d 84       	ldd	r7, Y+13	; 0x0d
    1634:	8c 84       	ldd	r8, Y+12	; 0x0c
    1636:	9b 84       	ldd	r9, Y+11	; 0x0b
    1638:	aa 84       	ldd	r10, Y+10	; 0x0a
    163a:	b9 84       	ldd	r11, Y+9	; 0x09
    163c:	c8 84       	ldd	r12, Y+8	; 0x08
    163e:	df 80       	ldd	r13, Y+7	; 0x07
    1640:	ee 80       	ldd	r14, Y+6	; 0x06
    1642:	fd 80       	ldd	r15, Y+5	; 0x05
    1644:	0c 81       	ldd	r16, Y+4	; 0x04
    1646:	1b 81       	ldd	r17, Y+3	; 0x03
    1648:	aa 81       	ldd	r26, Y+2	; 0x02
    164a:	b9 81       	ldd	r27, Y+1	; 0x01
    164c:	ce 0f       	add	r28, r30
    164e:	d1 1d       	adc	r29, r1
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	ed 01       	movw	r28, r26
    1656:	08 95       	ret

00001658 <_exit>:
    1658:	f8 94       	cli

0000165a <__stop_program>:
    165a:	ff cf       	rjmp	.-2      	; 0x165a <__stop_program>
